
dual_motor_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d228  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f0  0800d3b8  0800d3b8  0001d3b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dca8  0800dca8  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800dca8  0800dca8  0001dca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dcb0  0800dcb0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dcb0  0800dcb0  0001dcb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dcb4  0800dcb4  0001dcb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800dcb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015770  2000008c  0800dd44  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200157fc  0800dd44  000257fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021200  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000049b8  00000000  00000000  000412bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018a8  00000000  00000000  00045c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016f0  00000000  00000000  00047520  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000255d3  00000000  00000000  00048c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015193  00000000  00000000  0006e1e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000db394  00000000  00000000  00083376  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000eb  00000000  00000000  0015e70a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006868  00000000  00000000  0015e7f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000016e  00000000  00000000  00165060  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d3a0 	.word	0x0800d3a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	0800d3a0 	.word	0x0800d3a0

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2uiz>:
 8000af8:	004a      	lsls	r2, r1, #1
 8000afa:	d211      	bcs.n	8000b20 <__aeabi_d2uiz+0x28>
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d211      	bcs.n	8000b26 <__aeabi_d2uiz+0x2e>
 8000b02:	d50d      	bpl.n	8000b20 <__aeabi_d2uiz+0x28>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d40e      	bmi.n	8000b2c <__aeabi_d2uiz+0x34>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d102      	bne.n	8000b32 <__aeabi_d2uiz+0x3a>
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b30:	4770      	bx	lr
 8000b32:	f04f 0000 	mov.w	r0, #0
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_d2f>:
 8000b38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b40:	bf24      	itt	cs
 8000b42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4a:	d90d      	bls.n	8000b68 <__aeabi_d2f+0x30>
 8000b4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b60:	bf08      	it	eq
 8000b62:	f020 0001 	biceq.w	r0, r0, #1
 8000b66:	4770      	bx	lr
 8000b68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b6c:	d121      	bne.n	8000bb2 <__aeabi_d2f+0x7a>
 8000b6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b72:	bfbc      	itt	lt
 8000b74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b78:	4770      	bxlt	lr
 8000b7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b82:	f1c2 0218 	rsb	r2, r2, #24
 8000b86:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b92:	bf18      	it	ne
 8000b94:	f040 0001 	orrne.w	r0, r0, #1
 8000b98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba4:	ea40 000c 	orr.w	r0, r0, ip
 8000ba8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb0:	e7cc      	b.n	8000b4c <__aeabi_d2f+0x14>
 8000bb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bb6:	d107      	bne.n	8000bc8 <__aeabi_d2f+0x90>
 8000bb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bbc:	bf1e      	ittt	ne
 8000bbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bc6:	4770      	bxne	lr
 8000bc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b972 	b.w	8000ed4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	4688      	mov	r8, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14b      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4615      	mov	r5, r2
 8000c1a:	d967      	bls.n	8000cec <__udivmoddi4+0xe4>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0720 	rsb	r7, r2, #32
 8000c26:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c2e:	4095      	lsls	r5, r2
 8000c30:	ea47 0803 	orr.w	r8, r7, r3
 8000c34:	4094      	lsls	r4, r2
 8000c36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c3a:	0c23      	lsrs	r3, r4, #16
 8000c3c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c40:	fa1f fc85 	uxth.w	ip, r5
 8000c44:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c48:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c4c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x60>
 8000c54:	18eb      	adds	r3, r5, r3
 8000c56:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c5a:	f080 811b 	bcs.w	8000e94 <__udivmoddi4+0x28c>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 8118 	bls.w	8000e94 <__udivmoddi4+0x28c>
 8000c64:	3f02      	subs	r7, #2
 8000c66:	442b      	add	r3, r5
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c78:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c7c:	45a4      	cmp	ip, r4
 8000c7e:	d909      	bls.n	8000c94 <__udivmoddi4+0x8c>
 8000c80:	192c      	adds	r4, r5, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c86:	f080 8107 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	f240 8104 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c90:	3802      	subs	r0, #2
 8000c92:	442c      	add	r4, r5
 8000c94:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c98:	eba4 040c 	sub.w	r4, r4, ip
 8000c9c:	2700      	movs	r7, #0
 8000c9e:	b11e      	cbz	r6, 8000ca8 <__udivmoddi4+0xa0>
 8000ca0:	40d4      	lsrs	r4, r2
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e9c6 4300 	strd	r4, r3, [r6]
 8000ca8:	4639      	mov	r1, r7
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d909      	bls.n	8000cc6 <__udivmoddi4+0xbe>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80eb 	beq.w	8000e8e <__udivmoddi4+0x286>
 8000cb8:	2700      	movs	r7, #0
 8000cba:	e9c6 0100 	strd	r0, r1, [r6]
 8000cbe:	4638      	mov	r0, r7
 8000cc0:	4639      	mov	r1, r7
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	fab3 f783 	clz	r7, r3
 8000cca:	2f00      	cmp	r7, #0
 8000ccc:	d147      	bne.n	8000d5e <__udivmoddi4+0x156>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d302      	bcc.n	8000cd8 <__udivmoddi4+0xd0>
 8000cd2:	4282      	cmp	r2, r0
 8000cd4:	f200 80fa 	bhi.w	8000ecc <__udivmoddi4+0x2c4>
 8000cd8:	1a84      	subs	r4, r0, r2
 8000cda:	eb61 0303 	sbc.w	r3, r1, r3
 8000cde:	2001      	movs	r0, #1
 8000ce0:	4698      	mov	r8, r3
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	d0e0      	beq.n	8000ca8 <__udivmoddi4+0xa0>
 8000ce6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cea:	e7dd      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000cec:	b902      	cbnz	r2, 8000cf0 <__udivmoddi4+0xe8>
 8000cee:	deff      	udf	#255	; 0xff
 8000cf0:	fab2 f282 	clz	r2, r2
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f040 808f 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cfa:	1b49      	subs	r1, r1, r5
 8000cfc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d00:	fa1f f885 	uxth.w	r8, r5
 8000d04:	2701      	movs	r7, #1
 8000d06:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d14:	fb08 f10c 	mul.w	r1, r8, ip
 8000d18:	4299      	cmp	r1, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1c:	18eb      	adds	r3, r5, r3
 8000d1e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4299      	cmp	r1, r3
 8000d26:	f200 80cd 	bhi.w	8000ec4 <__udivmoddi4+0x2bc>
 8000d2a:	4684      	mov	ip, r0
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	b2a3      	uxth	r3, r4
 8000d30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d34:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d38:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d3c:	fb08 f800 	mul.w	r8, r8, r0
 8000d40:	45a0      	cmp	r8, r4
 8000d42:	d907      	bls.n	8000d54 <__udivmoddi4+0x14c>
 8000d44:	192c      	adds	r4, r5, r4
 8000d46:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x14a>
 8000d4c:	45a0      	cmp	r8, r4
 8000d4e:	f200 80b6 	bhi.w	8000ebe <__udivmoddi4+0x2b6>
 8000d52:	4618      	mov	r0, r3
 8000d54:	eba4 0408 	sub.w	r4, r4, r8
 8000d58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d5c:	e79f      	b.n	8000c9e <__udivmoddi4+0x96>
 8000d5e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d62:	40bb      	lsls	r3, r7
 8000d64:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d68:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d6c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d70:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d74:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d78:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d7c:	4325      	orrs	r5, r4
 8000d7e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d82:	0c2c      	lsrs	r4, r5, #16
 8000d84:	fb08 3319 	mls	r3, r8, r9, r3
 8000d88:	fa1f fa8e 	uxth.w	sl, lr
 8000d8c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d90:	fb09 f40a 	mul.w	r4, r9, sl
 8000d94:	429c      	cmp	r4, r3
 8000d96:	fa02 f207 	lsl.w	r2, r2, r7
 8000d9a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1e 0303 	adds.w	r3, lr, r3
 8000da4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000da8:	f080 8087 	bcs.w	8000eba <__udivmoddi4+0x2b2>
 8000dac:	429c      	cmp	r4, r3
 8000dae:	f240 8084 	bls.w	8000eba <__udivmoddi4+0x2b2>
 8000db2:	f1a9 0902 	sub.w	r9, r9, #2
 8000db6:	4473      	add	r3, lr
 8000db8:	1b1b      	subs	r3, r3, r4
 8000dba:	b2ad      	uxth	r5, r5
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dc8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dcc:	45a2      	cmp	sl, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1e 0404 	adds.w	r4, lr, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dd8:	d26b      	bcs.n	8000eb2 <__udivmoddi4+0x2aa>
 8000dda:	45a2      	cmp	sl, r4
 8000ddc:	d969      	bls.n	8000eb2 <__udivmoddi4+0x2aa>
 8000dde:	3802      	subs	r0, #2
 8000de0:	4474      	add	r4, lr
 8000de2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000de6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dea:	eba4 040a 	sub.w	r4, r4, sl
 8000dee:	454c      	cmp	r4, r9
 8000df0:	46c2      	mov	sl, r8
 8000df2:	464b      	mov	r3, r9
 8000df4:	d354      	bcc.n	8000ea0 <__udivmoddi4+0x298>
 8000df6:	d051      	beq.n	8000e9c <__udivmoddi4+0x294>
 8000df8:	2e00      	cmp	r6, #0
 8000dfa:	d069      	beq.n	8000ed0 <__udivmoddi4+0x2c8>
 8000dfc:	ebb1 050a 	subs.w	r5, r1, sl
 8000e00:	eb64 0403 	sbc.w	r4, r4, r3
 8000e04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e08:	40fd      	lsrs	r5, r7
 8000e0a:	40fc      	lsrs	r4, r7
 8000e0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e10:	e9c6 5400 	strd	r5, r4, [r6]
 8000e14:	2700      	movs	r7, #0
 8000e16:	e747      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e18:	f1c2 0320 	rsb	r3, r2, #32
 8000e1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e20:	4095      	lsls	r5, r2
 8000e22:	fa01 f002 	lsl.w	r0, r1, r2
 8000e26:	fa21 f303 	lsr.w	r3, r1, r3
 8000e2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e2e:	4338      	orrs	r0, r7
 8000e30:	0c01      	lsrs	r1, r0, #16
 8000e32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e36:	fa1f f885 	uxth.w	r8, r5
 8000e3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb07 f308 	mul.w	r3, r7, r8
 8000e46:	428b      	cmp	r3, r1
 8000e48:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4c:	d907      	bls.n	8000e5e <__udivmoddi4+0x256>
 8000e4e:	1869      	adds	r1, r5, r1
 8000e50:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e54:	d22f      	bcs.n	8000eb6 <__udivmoddi4+0x2ae>
 8000e56:	428b      	cmp	r3, r1
 8000e58:	d92d      	bls.n	8000eb6 <__udivmoddi4+0x2ae>
 8000e5a:	3f02      	subs	r7, #2
 8000e5c:	4429      	add	r1, r5
 8000e5e:	1acb      	subs	r3, r1, r3
 8000e60:	b281      	uxth	r1, r0
 8000e62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e6e:	fb00 f308 	mul.w	r3, r0, r8
 8000e72:	428b      	cmp	r3, r1
 8000e74:	d907      	bls.n	8000e86 <__udivmoddi4+0x27e>
 8000e76:	1869      	adds	r1, r5, r1
 8000e78:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e7c:	d217      	bcs.n	8000eae <__udivmoddi4+0x2a6>
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d915      	bls.n	8000eae <__udivmoddi4+0x2a6>
 8000e82:	3802      	subs	r0, #2
 8000e84:	4429      	add	r1, r5
 8000e86:	1ac9      	subs	r1, r1, r3
 8000e88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e8c:	e73b      	b.n	8000d06 <__udivmoddi4+0xfe>
 8000e8e:	4637      	mov	r7, r6
 8000e90:	4630      	mov	r0, r6
 8000e92:	e709      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e94:	4607      	mov	r7, r0
 8000e96:	e6e7      	b.n	8000c68 <__udivmoddi4+0x60>
 8000e98:	4618      	mov	r0, r3
 8000e9a:	e6fb      	b.n	8000c94 <__udivmoddi4+0x8c>
 8000e9c:	4541      	cmp	r1, r8
 8000e9e:	d2ab      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ea4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	4613      	mov	r3, r2
 8000eac:	e7a4      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eae:	4660      	mov	r0, ip
 8000eb0:	e7e9      	b.n	8000e86 <__udivmoddi4+0x27e>
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	e795      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb6:	4667      	mov	r7, ip
 8000eb8:	e7d1      	b.n	8000e5e <__udivmoddi4+0x256>
 8000eba:	4681      	mov	r9, r0
 8000ebc:	e77c      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	442c      	add	r4, r5
 8000ec2:	e747      	b.n	8000d54 <__udivmoddi4+0x14c>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	442b      	add	r3, r5
 8000eca:	e72f      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ecc:	4638      	mov	r0, r7
 8000ece:	e708      	b.n	8000ce2 <__udivmoddi4+0xda>
 8000ed0:	4637      	mov	r7, r6
 8000ed2:	e6e9      	b.n	8000ca8 <__udivmoddi4+0xa0>

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <HAL_CAN_RxFifo0MsgPendingCallback>:

 static uint32_t this_device = 1;
 static CAN_HandleTypeDef can_h;

 void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *_hcan)
 {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08e      	sub	sp, #56	; 0x38
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	 // ISR
	 CAN_RxHeaderTypeDef header;
	 canbus_frame_t can_frame;
	 HAL_CAN_GetRxMessage(_hcan, 0, &header, can_frame.data);
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	3305      	adds	r3, #5
 8000ee6:	f107 021c 	add.w	r2, r7, #28
 8000eea:	2100      	movs	r1, #0
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f003 ffa2 	bl	8004e36 <HAL_CAN_GetRxMessage>
	 can_frame.id = header.StdId;
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	60fb      	str	r3, [r7, #12]
	 can_frame.length = header.DLC;
 8000ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	743b      	strb	r3, [r7, #16]
	 add_can_frame_to_rx_queue_from_isr(can_frame);
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f02:	f000 fc6b 	bl	80017dc <add_can_frame_to_rx_queue_from_isr>
 }
 8000f06:	bf00      	nop
 8000f08:	3738      	adds	r7, #56	; 0x38
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <canbus_task_init>:

void canbus_task_init(CAN_HandleTypeDef can_handle)
{
 8000f10:	b084      	sub	sp, #16
 8000f12:	b5b0      	push	{r4, r5, r7, lr}
 8000f14:	b08a      	sub	sp, #40	; 0x28
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000f1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//this_device = ((ioport_get_pin_level(INDEX_0_GPIO) ? 0 : 1) << 0);
	//this_device |= ((ioport_get_pin_level(INDEX_1_GPIO) ? 0 : 1) << 1);
	//this_device |= ((ioport_get_pin_level(INDEX_2_GPIO) ? 0 : 1) << 2);
	//this_device += 1; // Always offset by 1, the main controller is 0

	canbus_queue_set = xQueueCreateSet( 2 * CAN_QUEUE_LENGTH );
 8000f20:	201e      	movs	r0, #30
 8000f22:	f007 f9c1 	bl	80082a8 <xQueueCreateSet>
 8000f26:	4602      	mov	r2, r0
 8000f28:	4b2b      	ldr	r3, [pc, #172]	; (8000fd8 <canbus_task_init+0xc8>)
 8000f2a:	601a      	str	r2, [r3, #0]
	canbus_rx_queue = xQueueCreate( CAN_QUEUE_LENGTH, sizeof(canbus_frame_t) );
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2110      	movs	r1, #16
 8000f30:	200f      	movs	r0, #15
 8000f32:	f006 fd44 	bl	80079be <xQueueGenericCreate>
 8000f36:	4602      	mov	r2, r0
 8000f38:	4b28      	ldr	r3, [pc, #160]	; (8000fdc <canbus_task_init+0xcc>)
 8000f3a:	601a      	str	r2, [r3, #0]
	canbus_tx_queue = xQueueCreate( CAN_QUEUE_LENGTH, sizeof(canbus_frame_t) );
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2110      	movs	r1, #16
 8000f40:	200f      	movs	r0, #15
 8000f42:	f006 fd3c 	bl	80079be <xQueueGenericCreate>
 8000f46:	4602      	mov	r2, r0
 8000f48:	4b25      	ldr	r3, [pc, #148]	; (8000fe0 <canbus_task_init+0xd0>)
 8000f4a:	601a      	str	r2, [r3, #0]

	xQueueAddToSet( canbus_rx_queue, canbus_queue_set );
 8000f4c:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <canbus_task_init+0xcc>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <canbus_task_init+0xc8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4619      	mov	r1, r3
 8000f56:	4610      	mov	r0, r2
 8000f58:	f007 f9b5 	bl	80082c6 <xQueueAddToSet>
	xQueueAddToSet( canbus_tx_queue, canbus_queue_set );
 8000f5c:	4b20      	ldr	r3, [pc, #128]	; (8000fe0 <canbus_task_init+0xd0>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <canbus_task_init+0xc8>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4619      	mov	r1, r3
 8000f66:	4610      	mov	r0, r2
 8000f68:	f007 f9ad 	bl	80082c6 <xQueueAddToSet>

	can_h = can_handle;
 8000f6c:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <canbus_task_init+0xd4>)
 8000f6e:	461c      	mov	r4, r3
 8000f70:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8000f74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f80:	e884 0003 	stmia.w	r4, {r0, r1}

	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdHigh=0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow=0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh=0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow=0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //set filter scale
 8000f98:	2301      	movs	r3, #1
 8000f9a:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterActivation=ENABLE;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	623b      	str	r3, [r7, #32]

	HAL_CAN_ConfigFilter(&can_h, &sFilterConfig); //configure CAN filter
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	480f      	ldr	r0, [pc, #60]	; (8000fe4 <canbus_task_init+0xd4>)
 8000fa6:	f003 fd47 	bl	8004a38 <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&can_h);
 8000faa:	480e      	ldr	r0, [pc, #56]	; (8000fe4 <canbus_task_init+0xd4>)
 8000fac:	f003 fe24 	bl	8004bf8 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(&can_h, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <canbus_task_init+0xd4>)
 8000fb4:	f004 f851 	bl	800505a <HAL_CAN_ActivateNotification>
	HAL_CAN_ActivateNotification(&can_h, CAN_IT_RX_FIFO1_MSG_PENDING );
 8000fb8:	2110      	movs	r1, #16
 8000fba:	480a      	ldr	r0, [pc, #40]	; (8000fe4 <canbus_task_init+0xd4>)
 8000fbc:	f004 f84d 	bl	800505a <HAL_CAN_ActivateNotification>
	HAL_CAN_ActivateNotification(&can_h, CAN_IT_TX_MAILBOX_EMPTY);
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	4808      	ldr	r0, [pc, #32]	; (8000fe4 <canbus_task_init+0xd4>)
 8000fc4:	f004 f849 	bl	800505a <HAL_CAN_ActivateNotification>
}
 8000fc8:	bf00      	nop
 8000fca:	3728      	adds	r7, #40	; 0x28
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000fd2:	b004      	add	sp, #16
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	200000b0 	.word	0x200000b0
 8000fdc:	200000a8 	.word	0x200000a8
 8000fe0:	200000ac 	.word	0x200000ac
 8000fe4:	200000b4 	.word	0x200000b4

08000fe8 <canbus_task>:

void canbus_task(void)
{
 8000fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fea:	b0b1      	sub	sp, #196	; 0xc4
 8000fec:	af00      	add	r7, sp, #0
	QueueSetMemberHandle_t xActivatedMember;
	canbus_frame_t can_frame;

	xActivatedMember = xQueueSelectFromSet( canbus_queue_set, portMAX_DELAY);
 8000fee:	4bb0      	ldr	r3, [pc, #704]	; (80012b0 <canbus_task+0x2c8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f007 f986 	bl	8008308 <xQueueSelectFromSet>
 8000ffc:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0

	if(xActivatedMember == canbus_rx_queue)
 8001000:	4bac      	ldr	r3, [pc, #688]	; (80012b4 <canbus_task+0x2cc>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001008:	429a      	cmp	r2, r3
 800100a:	f040 8399 	bne.w	8001740 <canbus_task+0x758>
	{
		xQueueReceive( xActivatedMember, &can_frame, 0 );
 800100e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001012:	2200      	movs	r2, #0
 8001014:	4619      	mov	r1, r3
 8001016:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800101a:	f006 feef 	bl	8007dfc <xQueueReceive>
		can_message_id_t msg;
		msg.raw_id = can_frame.id;
 800101e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001020:	65bb      	str	r3, [r7, #88]	; 0x58
		unpack_can_message(&msg);
 8001022:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001026:	4618      	mov	r0, r3
 8001028:	f009 fa16 	bl	800a458 <unpack_can_message>

		if(msg.can_device == this_device)
 800102c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800102e:	4ba2      	ldr	r3, [pc, #648]	; (80012b8 <canbus_task+0x2d0>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	429a      	cmp	r2, r3
 8001034:	f040 83ac 	bne.w	8001790 <canbus_task+0x7a8>
		{
			if(msg.can_msg_type == CAN_MSG_TYPE_CMD)
 8001038:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800103a:	2b00      	cmp	r3, #0
 800103c:	f040 83a8 	bne.w	8001790 <canbus_task+0x7a8>
			{
				if(msg.can_class == CAN_MSG_CLASS_CMD_CONTROL)
 8001040:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001042:	2b00      	cmp	r3, #0
 8001044:	f040 813a 	bne.w	80012bc <canbus_task+0x2d4>
				{
					if(msg.can_index == CAN_MSG_INDEX_CMD_POSITION)
 8001048:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800104a:	2b00      	cmp	r3, #0
 800104c:	d11c      	bne.n	8001088 <canbus_task+0xa0>
					{
						uint8_t motor_index = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						float position = 0;
 8001054:	f04f 0300 	mov.w	r3, #0
 8001058:	657b      	str	r3, [r7, #84]	; 0x54
						motor_index = can_frame.data[0];
 800105a:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 800105e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						memcpy(&position, &can_frame.data[1], 4);
 8001062:	f8d7 3072 	ldr.w	r3, [r7, #114]	; 0x72
 8001066:	657b      	str	r3, [r7, #84]	; 0x54
						set_control_mode(POSITION, motor_index);
 8001068:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800106c:	4619      	mov	r1, r3
 800106e:	2000      	movs	r0, #0
 8001070:	f001 ffc2 	bl	8002ff8 <set_control_mode>
						set_motor_position(position, motor_index);
 8001074:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001078:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800107c:	4618      	mov	r0, r3
 800107e:	eeb0 0a67 	vmov.f32	s0, s15
 8001082:	f001 ffd1 	bl	8003028 <set_motor_position>
			header.TransmitGlobalTime = DISABLE;
			uint32_t mailbox = 0;
			HAL_CAN_AddTxMessage(&can_h, &header, can_frame.data, &mailbox);
		}
	}
}
 8001086:	e383      	b.n	8001790 <canbus_task+0x7a8>
					else if(msg.can_index == CAN_MSG_INDEX_CMD_SPEED)
 8001088:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800108a:	2b01      	cmp	r3, #1
 800108c:	d119      	bne.n	80010c2 <canbus_task+0xda>
						uint8_t motor_index = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
						int32_t speed = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	653b      	str	r3, [r7, #80]	; 0x50
						motor_index = can_frame.data[0];
 8001098:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 800109c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
						memcpy(&speed, &can_frame.data[1], 4);
 80010a0:	f8d7 3072 	ldr.w	r3, [r7, #114]	; 0x72
 80010a4:	653b      	str	r3, [r7, #80]	; 0x50
						set_control_mode(SPEED, motor_index);
 80010a6:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80010aa:	4619      	mov	r1, r3
 80010ac:	2001      	movs	r0, #1
 80010ae:	f001 ffa3 	bl	8002ff8 <set_control_mode>
						set_motor_speed(speed, motor_index);
 80010b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010b4:	f897 2080 	ldrb.w	r2, [r7, #128]	; 0x80
 80010b8:	4611      	mov	r1, r2
 80010ba:	4618      	mov	r0, r3
 80010bc:	f002 f84a 	bl	8003154 <set_motor_speed>
}
 80010c0:	e366      	b.n	8001790 <canbus_task+0x7a8>
					else if(msg.can_index == CAN_MSG_INDEX_CMD_DUTY)
 80010c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010c4:	2b04      	cmp	r3, #4
 80010c6:	d11c      	bne.n	8001102 <canbus_task+0x11a>
						uint8_t motor_index = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
						float duty = 0;
 80010ce:	f04f 0300 	mov.w	r3, #0
 80010d2:	64fb      	str	r3, [r7, #76]	; 0x4c
						motor_index = can_frame.data[0];
 80010d4:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80010d8:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
						memcpy(&duty, &can_frame.data[1], 4);
 80010dc:	f8d7 3072 	ldr.w	r3, [r7, #114]	; 0x72
 80010e0:	64fb      	str	r3, [r7, #76]	; 0x4c
						set_control_mode(DUTY, motor_index);
 80010e2:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 80010e6:	4619      	mov	r1, r3
 80010e8:	2003      	movs	r0, #3
 80010ea:	f001 ff85 	bl	8002ff8 <set_control_mode>
						set_motor_duty(duty, motor_index);
 80010ee:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80010f2:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 80010f6:	4618      	mov	r0, r3
 80010f8:	eeb0 0a67 	vmov.f32	s0, s15
 80010fc:	f002 f846 	bl	800318c <set_motor_duty>
}
 8001100:	e346      	b.n	8001790 <canbus_task+0x7a8>
					else if(msg.can_index == CAN_MSG_INDEX_CMD_PRIMITIVE)
 8001102:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001104:	2b03      	cmp	r3, #3
 8001106:	d164      	bne.n	80011d2 <canbus_task+0x1ea>
						int16_t tau_ms = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
						int16_t t_offset_ms = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
						uint8_t primitive_index = can_frame.data[0];
 8001114:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001118:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
						if(primitive_index < NUMBER_PRIMITIVES)
 800111c:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8001120:	2b05      	cmp	r3, #5
 8001122:	f200 8335 	bhi.w	8001790 <canbus_task+0x7a8>
							memcpy(&tau_ms, &can_frame.data[1], 2);
 8001126:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800112a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
							memcpy(&t_offset_ms, &can_frame.data[3], 2);
 800112e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8001132:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
							uint8_t invert = can_frame.data[5];
 8001136:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800113a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
							uint8_t time_reverse = can_frame.data[6];
 800113e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001142:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
							motion_primitive_set_index(primitive_index);
 8001146:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800114a:	4618      	mov	r0, r3
 800114c:	f00a f8c4 	bl	800b2d8 <motion_primitive_set_index>
							motion_primitive_set_timing(primitive_index, (float) tau_ms * 0.001, (float) t_offset_ms * 0.001, invert, time_reverse);
 8001150:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001154:	ee07 3a90 	vmov	s15, r3
 8001158:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800115c:	ee17 0a90 	vmov	r0, s15
 8001160:	f7ff f99a 	bl	8000498 <__aeabi_f2d>
 8001164:	a350      	add	r3, pc, #320	; (adr r3, 80012a8 <canbus_task+0x2c0>)
 8001166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116a:	f7ff f9ed 	bl	8000548 <__aeabi_dmul>
 800116e:	4603      	mov	r3, r0
 8001170:	460c      	mov	r4, r1
 8001172:	4618      	mov	r0, r3
 8001174:	4621      	mov	r1, r4
 8001176:	f7ff fcdf 	bl	8000b38 <__aeabi_d2f>
 800117a:	4605      	mov	r5, r0
 800117c:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	ee17 0a90 	vmov	r0, s15
 800118c:	f7ff f984 	bl	8000498 <__aeabi_f2d>
 8001190:	a345      	add	r3, pc, #276	; (adr r3, 80012a8 <canbus_task+0x2c0>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	f7ff f9d7 	bl	8000548 <__aeabi_dmul>
 800119a:	4603      	mov	r3, r0
 800119c:	460c      	mov	r4, r1
 800119e:	4618      	mov	r0, r3
 80011a0:	4621      	mov	r1, r4
 80011a2:	f7ff fcc9 	bl	8000b38 <__aeabi_d2f>
 80011a6:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80011aa:	f897 1083 	ldrb.w	r1, [r7, #131]	; 0x83
 80011ae:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80011b2:	ee00 0a90 	vmov	s1, r0
 80011b6:	ee00 5a10 	vmov	s0, r5
 80011ba:	4618      	mov	r0, r3
 80011bc:	f00a f8a0 	bl	800b300 <motion_primitive_set_timing>
							set_control_mode(PRIMITIVE, 0);
 80011c0:	2100      	movs	r1, #0
 80011c2:	2004      	movs	r0, #4
 80011c4:	f001 ff18 	bl	8002ff8 <set_control_mode>
							set_control_mode(PRIMITIVE, 1);
 80011c8:	2101      	movs	r1, #1
 80011ca:	2004      	movs	r0, #4
 80011cc:	f001 ff14 	bl	8002ff8 <set_control_mode>
}
 80011d0:	e2de      	b.n	8001790 <canbus_task+0x7a8>
					else if(msg.can_index == CAN_MSG_INDEX_CMD_PROPRIOCEPTIVE_PRIMITIVE)
 80011d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011d4:	2b05      	cmp	r3, #5
 80011d6:	f040 82db 	bne.w	8001790 <canbus_task+0x7a8>
						int16_t tau_ms = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
						int16_t t_offset_ms = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
						uint8_t primitive_index = can_frame.data[0];
 80011e6:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80011ea:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						if(primitive_index < NUMBER_PRIMITIVES)
 80011ee:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80011f2:	2b05      	cmp	r3, #5
 80011f4:	f200 82cc 	bhi.w	8001790 <canbus_task+0x7a8>
							memcpy(&tau_ms, &can_frame.data[1], 2);
 80011f8:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80011fc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
							memcpy(&t_offset_ms, &can_frame.data[3], 2);
 8001200:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8001204:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
							uint8_t invert = can_frame.data[5];
 8001208:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800120c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
							uint8_t time_reverse = can_frame.data[6];
 8001210:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001214:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
							motion_primitive_set_index(primitive_index);
 8001218:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800121c:	4618      	mov	r0, r3
 800121e:	f00a f85b 	bl	800b2d8 <motion_primitive_set_index>
							motion_primitive_set_timing(primitive_index, (float) tau_ms * 0.001, (float) t_offset_ms * 0.001, invert, time_reverse);
 8001222:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001226:	ee07 3a90 	vmov	s15, r3
 800122a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800122e:	ee17 0a90 	vmov	r0, s15
 8001232:	f7ff f931 	bl	8000498 <__aeabi_f2d>
 8001236:	a31c      	add	r3, pc, #112	; (adr r3, 80012a8 <canbus_task+0x2c0>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff f984 	bl	8000548 <__aeabi_dmul>
 8001240:	4603      	mov	r3, r0
 8001242:	460c      	mov	r4, r1
 8001244:	4618      	mov	r0, r3
 8001246:	4621      	mov	r1, r4
 8001248:	f7ff fc76 	bl	8000b38 <__aeabi_d2f>
 800124c:	4605      	mov	r5, r0
 800124e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001252:	ee07 3a90 	vmov	s15, r3
 8001256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800125a:	ee17 0a90 	vmov	r0, s15
 800125e:	f7ff f91b 	bl	8000498 <__aeabi_f2d>
 8001262:	a311      	add	r3, pc, #68	; (adr r3, 80012a8 <canbus_task+0x2c0>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	f7ff f96e 	bl	8000548 <__aeabi_dmul>
 800126c:	4603      	mov	r3, r0
 800126e:	460c      	mov	r4, r1
 8001270:	4618      	mov	r0, r3
 8001272:	4621      	mov	r1, r4
 8001274:	f7ff fc60 	bl	8000b38 <__aeabi_d2f>
 8001278:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 800127c:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 8001280:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001284:	ee00 0a90 	vmov	s1, r0
 8001288:	ee00 5a10 	vmov	s0, r5
 800128c:	4618      	mov	r0, r3
 800128e:	f00a f837 	bl	800b300 <motion_primitive_set_timing>
							set_control_mode(PROPRIOCEPTIVE_PRIMITIVE, 0);
 8001292:	2100      	movs	r1, #0
 8001294:	2005      	movs	r0, #5
 8001296:	f001 feaf 	bl	8002ff8 <set_control_mode>
							set_control_mode(PROPRIOCEPTIVE_PRIMITIVE, 1);
 800129a:	2101      	movs	r1, #1
 800129c:	2005      	movs	r0, #5
 800129e:	f001 feab 	bl	8002ff8 <set_control_mode>
}
 80012a2:	e275      	b.n	8001790 <canbus_task+0x7a8>
 80012a4:	f3af 8000 	nop.w
 80012a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80012ac:	3f50624d 	.word	0x3f50624d
 80012b0:	200000b0 	.word	0x200000b0
 80012b4:	200000a8 	.word	0x200000a8
 80012b8:	20000000 	.word	0x20000000
				else if(msg.can_class == CAN_MSG_CLASS_CMD_SET_PARAM)
 80012bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012be:	2b02      	cmp	r3, #2
 80012c0:	f040 8223 	bne.w	800170a <canbus_task+0x722>
					if(msg.can_index == CAN_MSG_INDEX_CMD_PARAM_PRIM_SCALE)
 80012c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d165      	bne.n	8001396 <canbus_task+0x3ae>
						uint8_t primitive_index = can_frame.data[0];
 80012ca:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80012ce:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
						memcpy(&x_off, &can_frame.data[1], 1);
 80012d2:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80012d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
						memcpy(&y_off, &can_frame.data[2], 1);
 80012da:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80012de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
						float x_scale = 0.01 *  can_frame.data[3];
 80012e2:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f8c4 	bl	8000474 <__aeabi_i2d>
 80012ec:	f20f 43c4 	addw	r3, pc, #1220	; 0x4c4
 80012f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f4:	f7ff f928 	bl	8000548 <__aeabi_dmul>
 80012f8:	4603      	mov	r3, r0
 80012fa:	460c      	mov	r4, r1
 80012fc:	4618      	mov	r0, r3
 80012fe:	4621      	mov	r1, r4
 8001300:	f7ff fc1a 	bl	8000b38 <__aeabi_d2f>
 8001304:	4603      	mov	r3, r0
 8001306:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
						float y_scale = 0.01 *  can_frame.data[4];
 800130a:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f8b0 	bl	8000474 <__aeabi_i2d>
 8001314:	f20f 439c 	addw	r3, pc, #1180	; 0x49c
 8001318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131c:	f7ff f914 	bl	8000548 <__aeabi_dmul>
 8001320:	4603      	mov	r3, r0
 8001322:	460c      	mov	r4, r1
 8001324:	4618      	mov	r0, r3
 8001326:	4621      	mov	r1, r4
 8001328:	f7ff fc06 	bl	8000b38 <__aeabi_d2f>
 800132c:	4603      	mov	r3, r0
 800132e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
						motion_primitive_set_scaling(primitive_index, 0.001*x_off,0.001*y_off, x_scale, y_scale);
 8001332:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f89c 	bl	8000474 <__aeabi_i2d>
 800133c:	f20f 4358 	addw	r3, pc, #1112	; 0x458
 8001340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001344:	f7ff f900 	bl	8000548 <__aeabi_dmul>
 8001348:	4603      	mov	r3, r0
 800134a:	460c      	mov	r4, r1
 800134c:	4618      	mov	r0, r3
 800134e:	4621      	mov	r1, r4
 8001350:	f7ff fbf2 	bl	8000b38 <__aeabi_d2f>
 8001354:	4605      	mov	r5, r0
 8001356:	f997 3042 	ldrsb.w	r3, [r7, #66]	; 0x42
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f88a 	bl	8000474 <__aeabi_i2d>
 8001360:	f20f 4334 	addw	r3, pc, #1076	; 0x434
 8001364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001368:	f7ff f8ee 	bl	8000548 <__aeabi_dmul>
 800136c:	4603      	mov	r3, r0
 800136e:	460c      	mov	r4, r1
 8001370:	4618      	mov	r0, r3
 8001372:	4621      	mov	r1, r4
 8001374:	f7ff fbe0 	bl	8000b38 <__aeabi_d2f>
 8001378:	4602      	mov	r2, r0
 800137a:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800137e:	edd7 1a22 	vldr	s3, [r7, #136]	; 0x88
 8001382:	ed97 1a23 	vldr	s2, [r7, #140]	; 0x8c
 8001386:	ee00 2a90 	vmov	s1, r2
 800138a:	ee00 5a10 	vmov	s0, r5
 800138e:	4618      	mov	r0, r3
 8001390:	f009 fff4 	bl	800b37c <motion_primitive_set_scaling>
}
 8001394:	e1fc      	b.n	8001790 <canbus_task+0x7a8>
					} else if(msg.can_index == CAN_MSG_INDEX_CMD_PARAM_PD_MINMAX)
 8001396:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001398:	2b01      	cmp	r3, #1
 800139a:	f040 80dc 	bne.w	8001556 <canbus_task+0x56e>
						uint8_t index_type = can_frame.data[0];
 800139e:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80013a2:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
						uint8_t index = (index_type & 0x01);
 80013a6:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
						uint8_t ctrl_type = ((index_type & 0x06) >> 0x01);
 80013b2:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 80013b6:	105b      	asrs	r3, r3, #1
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
						memcpy(&kp_temp, &can_frame.data[1], 2);
 80013c2:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80013c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
						memcpy(&kd_temp, &can_frame.data[3], 2);
 80013ca:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80013ce:	87fb      	strh	r3, [r7, #62]	; 0x3e
						uint8_t speed_filt_pct = can_frame.data[5];
 80013d0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80013d4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						uint8_t cmd_max_pct = can_frame.data[6];
 80013d8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80013dc:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
						uint8_t cmd_min_pct = can_frame.data[7];
 80013e0:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80013e4:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
						float kp = kp_temp * 0.01;
 80013e8:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f841 	bl	8000474 <__aeabi_i2d>
 80013f2:	a3f0      	add	r3, pc, #960	; (adr r3, 80017b4 <canbus_task+0x7cc>)
 80013f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f8:	f7ff f8a6 	bl	8000548 <__aeabi_dmul>
 80013fc:	4603      	mov	r3, r0
 80013fe:	460c      	mov	r4, r1
 8001400:	4618      	mov	r0, r3
 8001402:	4621      	mov	r1, r4
 8001404:	f7ff fb98 	bl	8000b38 <__aeabi_d2f>
 8001408:	4603      	mov	r3, r0
 800140a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
						float kd = kd_temp * 1.0;
 800140e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff f82e 	bl	8000474 <__aeabi_i2d>
 8001418:	4603      	mov	r3, r0
 800141a:	460c      	mov	r4, r1
 800141c:	4618      	mov	r0, r3
 800141e:	4621      	mov	r1, r4
 8001420:	f7ff fb8a 	bl	8000b38 <__aeabi_d2f>
 8001424:	4603      	mov	r3, r0
 8001426:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
						float alpha = speed_filt_pct * 0.01;
 800142a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff f820 	bl	8000474 <__aeabi_i2d>
 8001434:	a3df      	add	r3, pc, #892	; (adr r3, 80017b4 <canbus_task+0x7cc>)
 8001436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143a:	f7ff f885 	bl	8000548 <__aeabi_dmul>
 800143e:	4603      	mov	r3, r0
 8001440:	460c      	mov	r4, r1
 8001442:	4618      	mov	r0, r3
 8001444:	4621      	mov	r1, r4
 8001446:	f7ff fb77 	bl	8000b38 <__aeabi_d2f>
 800144a:	4603      	mov	r3, r0
 800144c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
						float cmd_max = cmd_max_pct * 0.01;
 8001450:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff f80d 	bl	8000474 <__aeabi_i2d>
 800145a:	a3d6      	add	r3, pc, #856	; (adr r3, 80017b4 <canbus_task+0x7cc>)
 800145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001460:	f7ff f872 	bl	8000548 <__aeabi_dmul>
 8001464:	4603      	mov	r3, r0
 8001466:	460c      	mov	r4, r1
 8001468:	4618      	mov	r0, r3
 800146a:	4621      	mov	r1, r4
 800146c:	f7ff fb64 	bl	8000b38 <__aeabi_d2f>
 8001470:	4603      	mov	r3, r0
 8001472:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
						float cmd_min = cmd_min_pct * 0.01;
 8001476:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 800147a:	4618      	mov	r0, r3
 800147c:	f7fe fffa 	bl	8000474 <__aeabi_i2d>
 8001480:	a3cc      	add	r3, pc, #816	; (adr r3, 80017b4 <canbus_task+0x7cc>)
 8001482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001486:	f7ff f85f 	bl	8000548 <__aeabi_dmul>
 800148a:	4603      	mov	r3, r0
 800148c:	460c      	mov	r4, r1
 800148e:	4618      	mov	r0, r3
 8001490:	4621      	mov	r1, r4
 8001492:	f7ff fb51 	bl	8000b38 <__aeabi_d2f>
 8001496:	4603      	mov	r3, r0
 8001498:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
						if(alpha > 0.99)
 800149c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80014a0:	f7fe fffa 	bl	8000498 <__aeabi_f2d>
 80014a4:	a3c5      	add	r3, pc, #788	; (adr r3, 80017bc <canbus_task+0x7d4>)
 80014a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014aa:	f7ff fadd 	bl	8000a68 <__aeabi_dcmpgt>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d002      	beq.n	80014ba <canbus_task+0x4d2>
							alpha = 0.99;
 80014b4:	4bbc      	ldr	r3, [pc, #752]	; (80017a8 <canbus_task+0x7c0>)
 80014b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
						if(alpha < 0.0)
 80014ba:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80014be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c6:	d503      	bpl.n	80014d0 <canbus_task+0x4e8>
							alpha = 0.0;
 80014c8:	f04f 0300 	mov.w	r3, #0
 80014cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
						if(cmd_max > 1.0)
 80014d0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80014d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e0:	dd03      	ble.n	80014ea <canbus_task+0x502>
							cmd_max = 1.0;
 80014e2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80014e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
						if(cmd_max < 0.0)
 80014ea:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80014ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f6:	d503      	bpl.n	8001500 <canbus_task+0x518>
							cmd_max = 0.0;
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
						if(cmd_min > 1.0)
 8001500:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001504:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001508:	eef4 7ac7 	vcmpe.f32	s15, s14
 800150c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001510:	dd03      	ble.n	800151a <canbus_task+0x532>
							cmd_min = 1.0;
 8001512:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001516:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
						if(cmd_min < 0.0)
 800151a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800151e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001526:	d503      	bpl.n	8001530 <canbus_task+0x548>
							cmd_min = 0.0;
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
						set_control_params_kp_min_max(index, ctrl_type, kp, kd, alpha, cmd_min, cmd_max);
 8001530:	f897 20a0 	ldrb.w	r2, [r7, #160]	; 0xa0
 8001534:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8001538:	ed97 2a2e 	vldr	s4, [r7, #184]	; 0xb8
 800153c:	edd7 1a2d 	vldr	s3, [r7, #180]	; 0xb4
 8001540:	ed97 1a2f 	vldr	s2, [r7, #188]	; 0xbc
 8001544:	edd7 0a25 	vldr	s1, [r7, #148]	; 0x94
 8001548:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 800154c:	4611      	mov	r1, r2
 800154e:	4618      	mov	r0, r3
 8001550:	f001 fe52 	bl	80031f8 <set_control_params_kp_min_max>
}
 8001554:	e11c      	b.n	8001790 <canbus_task+0x7a8>
					} else if(msg.can_index == CAN_MSG_INDEX_CMD_PARAM_KI)
 8001556:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001558:	2b02      	cmp	r3, #2
 800155a:	d121      	bne.n	80015a0 <canbus_task+0x5b8>
						uint8_t index_type = can_frame.data[0];
 800155c:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001560:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
						uint8_t index = (index_type & 0x01);
 8001564:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
						uint8_t ctrl_type = ((index_type & 0x06) >> 0x01);
 8001570:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8001574:	105b      	asrs	r3, r3, #1
 8001576:	b2db      	uxtb	r3, r3
 8001578:	f003 0303 	and.w	r3, r3, #3
 800157c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
						memcpy(&ki, &can_frame.data[1], 4);
 8001580:	f8d7 3072 	ldr.w	r3, [r7, #114]	; 0x72
 8001584:	63bb      	str	r3, [r7, #56]	; 0x38
						set_control_params_ki(index, ctrl_type, ki);
 8001586:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800158a:	f897 20a3 	ldrb.w	r2, [r7, #163]	; 0xa3
 800158e:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8001592:	eeb0 0a67 	vmov.f32	s0, s15
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f001 ff23 	bl	80033e4 <set_control_params_ki>
}
 800159e:	e0f7      	b.n	8001790 <canbus_task+0x7a8>
					} else if(msg.can_index == CAN_MSG_INDEX_CMD_PARAM_MAX_INTEGRAL)
 80015a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d121      	bne.n	80015ea <canbus_task+0x602>
						uint8_t index_type = can_frame.data[0];
 80015a6:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80015aa:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
						uint8_t index = (index_type & 0x01);
 80015ae:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						uint8_t ctrl_type = ((index_type & 0x06) >> 0x01);
 80015ba:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 80015be:	105b      	asrs	r3, r3, #1
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
						memcpy(&int_max, &can_frame.data[1], 4);
 80015ca:	f8d7 3072 	ldr.w	r3, [r7, #114]	; 0x72
 80015ce:	637b      	str	r3, [r7, #52]	; 0x34
						set_control_params_int_max(index, ctrl_type, int_max);
 80015d0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80015d4:	f897 20a6 	ldrb.w	r2, [r7, #166]	; 0xa6
 80015d8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80015dc:	eeb0 0a67 	vmov.f32	s0, s15
 80015e0:	4611      	mov	r1, r2
 80015e2:	4618      	mov	r0, r3
 80015e4:	f001 ff46 	bl	8003474 <set_control_params_int_max>
}
 80015e8:	e0d2      	b.n	8001790 <canbus_task+0x7a8>
					} else if(msg.can_index == CAN_MSG_INDEX_CMD_PARAM_MIN_INTEGRAL)
 80015ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	d121      	bne.n	8001634 <canbus_task+0x64c>
						uint8_t index_type = can_frame.data[0];
 80015f0:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80015f4:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
						uint8_t index = (index_type & 0x01);
 80015f8:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
						uint8_t ctrl_type = ((index_type & 0x06) >> 0x01);
 8001604:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8001608:	105b      	asrs	r3, r3, #1
 800160a:	b2db      	uxtb	r3, r3
 800160c:	f003 0303 	and.w	r3, r3, #3
 8001610:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
						memcpy(&int_min, &can_frame.data[1], 4);
 8001614:	f8d7 3072 	ldr.w	r3, [r7, #114]	; 0x72
 8001618:	633b      	str	r3, [r7, #48]	; 0x30
						set_control_params_int_min(index, ctrl_type, int_min);
 800161a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800161e:	f897 20a9 	ldrb.w	r2, [r7, #169]	; 0xa9
 8001622:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 8001626:	eeb0 0a67 	vmov.f32	s0, s15
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f001 ff69 	bl	8003504 <set_control_params_int_min>
}
 8001632:	e0ad      	b.n	8001790 <canbus_task+0x7a8>
					} else if(msg.can_index == CAN_MSG_INDEX_CMD_PARAM_TICKS_PER_REV)
 8001634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001636:	2b05      	cmp	r3, #5
 8001638:	d10e      	bne.n	8001658 <canbus_task+0x670>
						uint8_t index = can_frame.data[0];
 800163a:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 800163e:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
						memcpy(&ticks_per_rev, &can_frame.data[1], 4);
 8001642:	f8d7 3072 	ldr.w	r3, [r7, #114]	; 0x72
 8001646:	62fb      	str	r3, [r7, #44]	; 0x2c
						set_motor_ticks_per_rev(ticks_per_rev, index);
 8001648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800164a:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 800164e:	4611      	mov	r1, r2
 8001650:	4618      	mov	r0, r3
 8001652:	f001 ff9f 	bl	8003594 <set_motor_ticks_per_rev>
}
 8001656:	e09b      	b.n	8001790 <canbus_task+0x7a8>
					} else if(msg.can_index == CAN_MSG_INDEX_CMD_PARAM_PRIM_KEYFRAME)
 8001658:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800165a:	2b06      	cmp	r3, #6
 800165c:	f040 8098 	bne.w	8001790 <canbus_task+0x7a8>
						uint8_t prim_index = can_frame.data[0];
 8001660:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001664:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
						uint8_t keyframe_index = can_frame.data[1];
 8001668:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800166c:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
						memcpy(&x_temp, &can_frame.data[2], 2);
 8001670:	f8b7 3073 	ldrh.w	r3, [r7, #115]	; 0x73
 8001674:	b29b      	uxth	r3, r3
 8001676:	857b      	strh	r3, [r7, #42]	; 0x2a
						memcpy(&y_temp, &can_frame.data[4], 2);
 8001678:	f8b7 3075 	ldrh.w	r3, [r7, #117]	; 0x75
 800167c:	b29b      	uxth	r3, r3
 800167e:	853b      	strh	r3, [r7, #40]	; 0x28
						memcpy(&t_part_temp, &can_frame.data[6], 2);
 8001680:	f8b7 3077 	ldrh.w	r3, [r7, #119]	; 0x77
 8001684:	b29b      	uxth	r3, r3
 8001686:	84fb      	strh	r3, [r7, #38]	; 0x26
						motion_primitive_set_keyframe(prim_index, keyframe_index, x_temp * 0.001, y_temp * 0.001, t_part_temp * 1.5259e-5);
 8001688:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe fef1 	bl	8000474 <__aeabi_i2d>
 8001692:	a341      	add	r3, pc, #260	; (adr r3, 8001798 <canbus_task+0x7b0>)
 8001694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001698:	f7fe ff56 	bl	8000548 <__aeabi_dmul>
 800169c:	4603      	mov	r3, r0
 800169e:	460c      	mov	r4, r1
 80016a0:	4618      	mov	r0, r3
 80016a2:	4621      	mov	r1, r4
 80016a4:	f7ff fa48 	bl	8000b38 <__aeabi_d2f>
 80016a8:	4605      	mov	r5, r0
 80016aa:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe fee0 	bl	8000474 <__aeabi_i2d>
 80016b4:	a338      	add	r3, pc, #224	; (adr r3, 8001798 <canbus_task+0x7b0>)
 80016b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ba:	f7fe ff45 	bl	8000548 <__aeabi_dmul>
 80016be:	4603      	mov	r3, r0
 80016c0:	460c      	mov	r4, r1
 80016c2:	4618      	mov	r0, r3
 80016c4:	4621      	mov	r1, r4
 80016c6:	f7ff fa37 	bl	8000b38 <__aeabi_d2f>
 80016ca:	4606      	mov	r6, r0
 80016cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe fed0 	bl	8000474 <__aeabi_i2d>
 80016d4:	a332      	add	r3, pc, #200	; (adr r3, 80017a0 <canbus_task+0x7b8>)
 80016d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016da:	f7fe ff35 	bl	8000548 <__aeabi_dmul>
 80016de:	4603      	mov	r3, r0
 80016e0:	460c      	mov	r4, r1
 80016e2:	4618      	mov	r0, r3
 80016e4:	4621      	mov	r1, r4
 80016e6:	f7ff fa27 	bl	8000b38 <__aeabi_d2f>
 80016ea:	4601      	mov	r1, r0
 80016ec:	f897 20ad 	ldrb.w	r2, [r7, #173]	; 0xad
 80016f0:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80016f4:	ee01 1a10 	vmov	s2, r1
 80016f8:	ee00 6a90 	vmov	s1, r6
 80016fc:	ee00 5a10 	vmov	s0, r5
 8001700:	4611      	mov	r1, r2
 8001702:	4618      	mov	r0, r3
 8001704:	f00a fde6 	bl	800c2d4 <motion_primitive_set_keyframe>
}
 8001708:	e042      	b.n	8001790 <canbus_task+0x7a8>
				else if(msg.can_class == CAN_MSG_CLASS_CMD_ZERO_POS)
 800170a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800170c:	2b03      	cmp	r3, #3
 800170e:	d10a      	bne.n	8001726 <canbus_task+0x73e>
					uint8_t motor_index = can_frame.data[0];
 8001710:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001714:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
					set_motor_encoder_ticks(motor_index, 0);
 8001718:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800171c:	2100      	movs	r1, #0
 800171e:	4618      	mov	r0, r3
 8001720:	f008 ff9a 	bl	800a658 <set_motor_encoder_ticks>
}
 8001724:	e034      	b.n	8001790 <canbus_task+0x7a8>
				else if(msg.can_class == CAN_MSG_CLASS_CMD_TIME)
 8001726:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001728:	2b01      	cmp	r3, #1
 800172a:	d131      	bne.n	8001790 <canbus_task+0x7a8>
					uint32_t external_time = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	623b      	str	r3, [r7, #32]
					memcpy(&external_time, &can_frame.data[0], 4);
 8001730:	f8d7 3071 	ldr.w	r3, [r7, #113]	; 0x71
 8001734:	623b      	str	r3, [r7, #32]
					motion_primitive_time_sync(external_time);
 8001736:	6a3b      	ldr	r3, [r7, #32]
 8001738:	4618      	mov	r0, r3
 800173a:	f009 fdbb 	bl	800b2b4 <motion_primitive_time_sync>
}
 800173e:	e027      	b.n	8001790 <canbus_task+0x7a8>
	else if(xActivatedMember == canbus_tx_queue)
 8001740:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <canbus_task+0x7c4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001748:	429a      	cmp	r2, r3
 800174a:	d121      	bne.n	8001790 <canbus_task+0x7a8>
		if(xQueueReceive( xActivatedMember, &can_frame, 0 ) == pdTRUE)
 800174c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001750:	2200      	movs	r2, #0
 8001752:	4619      	mov	r1, r3
 8001754:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8001758:	f006 fb50 	bl	8007dfc <xQueueReceive>
 800175c:	4603      	mov	r3, r0
 800175e:	2b01      	cmp	r3, #1
 8001760:	d116      	bne.n	8001790 <canbus_task+0x7a8>
			header.DLC = can_frame.length;
 8001762:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001766:	61bb      	str	r3, [r7, #24]
			header.StdId = can_frame.id;
 8001768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800176a:	60bb      	str	r3, [r7, #8]
			header.RTR = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
			header.IDE = CAN_ID_STD;
 8001770:	2300      	movs	r3, #0
 8001772:	613b      	str	r3, [r7, #16]
			header.TransmitGlobalTime = DISABLE;
 8001774:	2300      	movs	r3, #0
 8001776:	773b      	strb	r3, [r7, #28]
			uint32_t mailbox = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	607b      	str	r3, [r7, #4]
			HAL_CAN_AddTxMessage(&can_h, &header, can_frame.data, &mailbox);
 800177c:	1d38      	adds	r0, r7, #4
 800177e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001782:	1d5a      	adds	r2, r3, #5
 8001784:	f107 0108 	add.w	r1, r7, #8
 8001788:	4603      	mov	r3, r0
 800178a:	4809      	ldr	r0, [pc, #36]	; (80017b0 <canbus_task+0x7c8>)
 800178c:	f003 fa78 	bl	8004c80 <HAL_CAN_AddTxMessage>
}
 8001790:	bf00      	nop
 8001792:	37c4      	adds	r7, #196	; 0xc4
 8001794:	46bd      	mov	sp, r7
 8001796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001798:	d2f1a9fc 	.word	0xd2f1a9fc
 800179c:	3f50624d 	.word	0x3f50624d
 80017a0:	7eda0be1 	.word	0x7eda0be1
 80017a4:	3ef0000e 	.word	0x3ef0000e
 80017a8:	3f7d70a4 	.word	0x3f7d70a4
 80017ac:	200000ac 	.word	0x200000ac
 80017b0:	200000b4 	.word	0x200000b4
 80017b4:	47ae147b 	.word	0x47ae147b
 80017b8:	3f847ae1 	.word	0x3f847ae1
 80017bc:	7ae147ae 	.word	0x7ae147ae
 80017c0:	3fefae14 	.word	0x3fefae14

080017c4 <get_device_index>:

/*
*	\brief Gets the device index
*/
uint32_t get_device_index(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
	return this_device;
 80017c8:	4b03      	ldr	r3, [pc, #12]	; (80017d8 <get_device_index+0x14>)
 80017ca:	681b      	ldr	r3, [r3, #0]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	20000000 	.word	0x20000000

080017dc <add_can_frame_to_rx_queue_from_isr>:
*	\param frame The frame to process
*
*	\return True if added to queue, false otherwise
*/
bool add_can_frame_to_rx_queue_from_isr(canbus_frame_t frame)
{
 80017dc:	b590      	push	{r4, r7, lr}
 80017de:	b087      	sub	sp, #28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	463c      	mov	r4, r7
 80017e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	bool success = false;
 80017e8:	2300      	movs	r3, #0
 80017ea:	75fb      	strb	r3, [r7, #23]
	if(canbus_rx_queue)
 80017ec:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <add_can_frame_to_rx_queue_from_isr+0x3c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d00c      	beq.n	800180e <add_can_frame_to_rx_queue_from_isr+0x32>
	{
		success = (xQueueSendFromISR(canbus_rx_queue, &frame, NULL) == pdTRUE);
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <add_can_frame_to_rx_queue_from_isr+0x3c>)
 80017f6:	6818      	ldr	r0, [r3, #0]
 80017f8:	4639      	mov	r1, r7
 80017fa:	2300      	movs	r3, #0
 80017fc:	2200      	movs	r2, #0
 80017fe:	f006 fa57 	bl	8007cb0 <xQueueGenericSendFromISR>
 8001802:	4603      	mov	r3, r0
 8001804:	2b01      	cmp	r3, #1
 8001806:	bf0c      	ite	eq
 8001808:	2301      	moveq	r3, #1
 800180a:	2300      	movne	r3, #0
 800180c:	75fb      	strb	r3, [r7, #23]
	}
	return success;
 800180e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001810:	4618      	mov	r0, r3
 8001812:	371c      	adds	r7, #28
 8001814:	46bd      	mov	sp, r7
 8001816:	bd90      	pop	{r4, r7, pc}
 8001818:	200000a8 	.word	0x200000a8

0800181c <add_can_frame_to_tx_queue>:
*	\param frame The frame to send
*
*	\return True if added to queue, false otherwise
*/
bool add_can_frame_to_tx_queue(canbus_frame_t frame)
{
 800181c:	b590      	push	{r4, r7, lr}
 800181e:	b087      	sub	sp, #28
 8001820:	af00      	add	r7, sp, #0
 8001822:	463c      	mov	r4, r7
 8001824:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	bool success = false;
 8001828:	2300      	movs	r3, #0
 800182a:	75fb      	strb	r3, [r7, #23]
	if(canbus_tx_queue)
 800182c:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <add_can_frame_to_tx_queue+0x3c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d00c      	beq.n	800184e <add_can_frame_to_tx_queue+0x32>
	{
		success = (xQueueSend(canbus_tx_queue, &frame, 0) == pdTRUE);
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <add_can_frame_to_tx_queue+0x3c>)
 8001836:	6818      	ldr	r0, [r3, #0]
 8001838:	4639      	mov	r1, r7
 800183a:	2300      	movs	r3, #0
 800183c:	2200      	movs	r2, #0
 800183e:	f006 f91f 	bl	8007a80 <xQueueGenericSend>
 8001842:	4603      	mov	r3, r0
 8001844:	2b01      	cmp	r3, #1
 8001846:	bf0c      	ite	eq
 8001848:	2301      	moveq	r3, #1
 800184a:	2300      	movne	r3, #0
 800184c:	75fb      	strb	r3, [r7, #23]
	}
	return success;
 800184e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001850:	4618      	mov	r0, r3
 8001852:	371c      	adds	r7, #28
 8001854:	46bd      	mov	sp, r7
 8001856:	bd90      	pop	{r4, r7, pc}
 8001858:	200000ac 	.word	0x200000ac

0800185c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4a07      	ldr	r2, [pc, #28]	; (8001888 <vApplicationGetIdleTaskMemory+0x2c>)
 800186c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	4a06      	ldr	r2, [pc, #24]	; (800188c <vApplicationGetIdleTaskMemory+0x30>)
 8001872:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f44f 7280 	mov.w	r2, #256	; 0x100
 800187a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800187c:	bf00      	nop
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	200000dc 	.word	0x200000dc
 800188c:	20000130 	.word	0x20000130

08001890 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4a07      	ldr	r2, [pc, #28]	; (80018bc <vApplicationGetTimerTaskMemory+0x2c>)
 80018a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	4a06      	ldr	r2, [pc, #24]	; (80018c0 <vApplicationGetTimerTaskMemory+0x30>)
 80018a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ae:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80018b0:	bf00      	nop
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	20000530 	.word	0x20000530
 80018c0:	20000584 	.word	0x20000584

080018c4 <enable_motor_task_from_isr>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void enable_motor_task_from_isr(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
	if(motor_taskHandle)
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <enable_motor_task_from_isr+0x40>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d013      	beq.n	80018fa <enable_motor_task_from_isr+0x36>
	{
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
		vTaskNotifyGiveFromISR( motor_taskHandle, &xHigherPriorityTaskWoken);
 80018d6:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <enable_motor_task_from_isr+0x40>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	1d3a      	adds	r2, r7, #4
 80018dc:	4611      	mov	r1, r2
 80018de:	4618      	mov	r0, r3
 80018e0:	f007 fc5e 	bl	80091a0 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d007      	beq.n	80018fa <enable_motor_task_from_isr+0x36>
 80018ea:	4b07      	ldr	r3, [pc, #28]	; (8001908 <enable_motor_task_from_isr+0x44>)
 80018ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	f3bf 8f4f 	dsb	sy
 80018f6:	f3bf 8f6f 	isb	sy
	}
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200155c0 	.word	0x200155c0
 8001908:	e000ed04 	.word	0xe000ed04

0800190c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800190c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800190e:	b0af      	sub	sp, #188	; 0xbc
 8001910:	af20      	add	r7, sp, #128	; 0x80
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001912:	f002 fa31 	bl	8003d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001916:	f000 f863 	bl	80019e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800191a:	f000 fc23 	bl	8002164 <MX_GPIO_Init>
  MX_ADC1_Init();
 800191e:	f000 f8c9 	bl	8001ab4 <MX_ADC1_Init>
  MX_CAN1_Init();
 8001922:	f000 f96b 	bl	8001bfc <MX_CAN1_Init>
  MX_SPI2_Init();
 8001926:	f000 f99f 	bl	8001c68 <MX_SPI2_Init>
  MX_TIM1_Init();
 800192a:	f000 f9d3 	bl	8001cd4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800192e:	f000 fa29 	bl	8001d84 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001932:	f000 fab3 	bl	8001e9c <MX_TIM3_Init>
  MX_TIM13_Init();
 8001936:	f000 fb79 	bl	800202c <MX_TIM13_Init>
  MX_TIM14_Init();
 800193a:	f000 fbc5 	bl	80020c8 <MX_TIM14_Init>
  MX_ADC2_Init();
 800193e:	f000 f90b 	bl	8001b58 <MX_ADC2_Init>
  MX_TIM4_Init();
 8001942:	f000 faff 	bl	8001f44 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  adc_interface_init(hadc1, hadc2);
 8001946:	4e20      	ldr	r6, [pc, #128]	; (80019c8 <main+0xbc>)
 8001948:	4a20      	ldr	r2, [pc, #128]	; (80019cc <main+0xc0>)
 800194a:	ab0e      	add	r3, sp, #56	; 0x38
 800194c:	4611      	mov	r1, r2
 800194e:	2248      	movs	r2, #72	; 0x48
 8001950:	4618      	mov	r0, r3
 8001952:	f00a fe81 	bl	800c658 <memcpy>
 8001956:	466d      	mov	r5, sp
 8001958:	f106 0410 	add.w	r4, r6, #16
 800195c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800195e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001960:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001962:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001964:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001966:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001968:	e894 0003 	ldmia.w	r4, {r0, r1}
 800196c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001970:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001974:	f008 fcaa 	bl	800a2cc <adc_interface_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of canbus_task */
  osThreadDef(canbus_task, start_canbus_task, osPriorityNormal, 0, 1024);
 8001978:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <main+0xc4>)
 800197a:	f107 041c 	add.w	r4, r7, #28
 800197e:	461d      	mov	r5, r3
 8001980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001984:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001988:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canbus_taskHandle = osThreadCreate(osThread(canbus_task), NULL);
 800198c:	f107 031c 	add.w	r3, r7, #28
 8001990:	2100      	movs	r1, #0
 8001992:	4618      	mov	r0, r3
 8001994:	f005 fe37 	bl	8007606 <osThreadCreate>
 8001998:	4602      	mov	r2, r0
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <main+0xc8>)
 800199c:	601a      	str	r2, [r3, #0]

  /* definition and creation of motor_task */
  osThreadDef(motor_task, start_motor_task, osPriorityHigh, 0, 2048);
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <main+0xcc>)
 80019a0:	463c      	mov	r4, r7
 80019a2:	461d      	mov	r5, r3
 80019a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motor_taskHandle = osThreadCreate(osThread(motor_task), NULL);
 80019b0:	463b      	mov	r3, r7
 80019b2:	2100      	movs	r1, #0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f005 fe26 	bl	8007606 <osThreadCreate>
 80019ba:	4602      	mov	r2, r0
 80019bc:	4b07      	ldr	r3, [pc, #28]	; (80019dc <main+0xd0>)
 80019be:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80019c0:	f005 fe1a 	bl	80075f8 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <main+0xb8>
 80019c6:	bf00      	nop
 80019c8:	20015608 	.word	0x20015608
 80019cc:	20015578 	.word	0x20015578
 80019d0:	0800d3c4 	.word	0x0800d3c4
 80019d4:	20015604 	.word	0x20015604
 80019d8:	0800d3ec 	.word	0x0800d3ec
 80019dc:	200155c0 	.word	0x200155c0

080019e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b094      	sub	sp, #80	; 0x50
 80019e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019e6:	f107 0320 	add.w	r3, r7, #32
 80019ea:	2230      	movs	r2, #48	; 0x30
 80019ec:	2100      	movs	r1, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f00a fe3d 	bl	800c66e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	4b28      	ldr	r3, [pc, #160]	; (8001aac <SystemClock_Config+0xcc>)
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	4a27      	ldr	r2, [pc, #156]	; (8001aac <SystemClock_Config+0xcc>)
 8001a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a12:	6413      	str	r3, [r2, #64]	; 0x40
 8001a14:	4b25      	ldr	r3, [pc, #148]	; (8001aac <SystemClock_Config+0xcc>)
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a20:	2300      	movs	r3, #0
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <SystemClock_Config+0xd0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a21      	ldr	r2, [pc, #132]	; (8001ab0 <SystemClock_Config+0xd0>)
 8001a2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <SystemClock_Config+0xd0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a40:	2301      	movs	r3, #1
 8001a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a44:	2310      	movs	r3, #16
 8001a46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a50:	2308      	movs	r3, #8
 8001a52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a54:	23a8      	movs	r3, #168	; 0xa8
 8001a56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a5c:	2304      	movs	r3, #4
 8001a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a60:	f107 0320 	add.w	r3, r7, #32
 8001a64:	4618      	mov	r0, r3
 8001a66:	f003 ffff 	bl	8005a68 <HAL_RCC_OscConfig>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a70:	f000 fc4c 	bl	800230c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a74:	230f      	movs	r3, #15
 8001a76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a8c:	f107 030c 	add.w	r3, r7, #12
 8001a90:	2105      	movs	r1, #5
 8001a92:	4618      	mov	r0, r3
 8001a94:	f004 fa58 	bl	8005f48 <HAL_RCC_ClockConfig>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a9e:	f000 fc35 	bl	800230c <Error_Handler>
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	3750      	adds	r7, #80	; 0x50
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40007000 	.word	0x40007000

08001ab4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001aba:	463b      	mov	r3, r7
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001ac6:	4b21      	ldr	r3, [pc, #132]	; (8001b4c <MX_ADC1_Init+0x98>)
 8001ac8:	4a21      	ldr	r2, [pc, #132]	; (8001b50 <MX_ADC1_Init+0x9c>)
 8001aca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001acc:	4b1f      	ldr	r3, [pc, #124]	; (8001b4c <MX_ADC1_Init+0x98>)
 8001ace:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ad2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <MX_ADC1_Init+0x98>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001ada:	4b1c      	ldr	r3, [pc, #112]	; (8001b4c <MX_ADC1_Init+0x98>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001ae0:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <MX_ADC1_Init+0x98>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ae6:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <MX_ADC1_Init+0x98>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001aee:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <MX_ADC1_Init+0x98>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001af4:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <MX_ADC1_Init+0x98>)
 8001af6:	4a17      	ldr	r2, [pc, #92]	; (8001b54 <MX_ADC1_Init+0xa0>)
 8001af8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001afa:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <MX_ADC1_Init+0x98>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <MX_ADC1_Init+0x98>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b06:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <MX_ADC1_Init+0x98>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001b0e:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <MX_ADC1_Init+0x98>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b14:	480d      	ldr	r0, [pc, #52]	; (8001b4c <MX_ADC1_Init+0x98>)
 8001b16:	f002 f971 	bl	8003dfc <HAL_ADC_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b20:	f000 fbf4 	bl	800230c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001b24:	2304      	movs	r3, #4
 8001b26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b30:	463b      	mov	r3, r7
 8001b32:	4619      	mov	r1, r3
 8001b34:	4805      	ldr	r0, [pc, #20]	; (8001b4c <MX_ADC1_Init+0x98>)
 8001b36:	f002 fc5b 	bl	80043f0 <HAL_ADC_ConfigChannel>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b40:	f000 fbe4 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b44:	bf00      	nop
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20015608 	.word	0x20015608
 8001b50:	40012000 	.word	0x40012000
 8001b54:	0f000001 	.word	0x0f000001

08001b58 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b5e:	463b      	mov	r3, r7
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8001b6a:	4b21      	ldr	r3, [pc, #132]	; (8001bf0 <MX_ADC2_Init+0x98>)
 8001b6c:	4a21      	ldr	r2, [pc, #132]	; (8001bf4 <MX_ADC2_Init+0x9c>)
 8001b6e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b70:	4b1f      	ldr	r3, [pc, #124]	; (8001bf0 <MX_ADC2_Init+0x98>)
 8001b72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b76:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001b78:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <MX_ADC2_Init+0x98>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001b7e:	4b1c      	ldr	r3, [pc, #112]	; (8001bf0 <MX_ADC2_Init+0x98>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001b84:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <MX_ADC2_Init+0x98>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001b8a:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <MX_ADC2_Init+0x98>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b92:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <MX_ADC2_Init+0x98>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b98:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <MX_ADC2_Init+0x98>)
 8001b9a:	4a17      	ldr	r2, [pc, #92]	; (8001bf8 <MX_ADC2_Init+0xa0>)
 8001b9c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b9e:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <MX_ADC2_Init+0x98>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <MX_ADC2_Init+0x98>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001baa:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <MX_ADC2_Init+0x98>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <MX_ADC2_Init+0x98>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001bb8:	480d      	ldr	r0, [pc, #52]	; (8001bf0 <MX_ADC2_Init+0x98>)
 8001bba:	f002 f91f 	bl	8003dfc <HAL_ADC_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001bc4:	f000 fba2 	bl	800230c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001bc8:	2305      	movs	r3, #5
 8001bca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001bd4:	463b      	mov	r3, r7
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <MX_ADC2_Init+0x98>)
 8001bda:	f002 fc09 	bl	80043f0 <HAL_ADC_ConfigChannel>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001be4:	f000 fb92 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001be8:	bf00      	nop
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20015578 	.word	0x20015578
 8001bf4:	40012100 	.word	0x40012100
 8001bf8:	0f000001 	.word	0x0f000001

08001bfc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001c00:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <MX_CAN1_Init+0x64>)
 8001c02:	4a18      	ldr	r2, [pc, #96]	; (8001c64 <MX_CAN1_Init+0x68>)
 8001c04:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8001c06:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <MX_CAN1_Init+0x64>)
 8001c08:	2202      	movs	r2, #2
 8001c0a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001c0c:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <MX_CAN1_Init+0x64>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c12:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <MX_CAN1_Init+0x64>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <MX_CAN1_Init+0x64>)
 8001c1a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8001c1e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_7TQ;
 8001c20:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <MX_CAN1_Init+0x64>)
 8001c22:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8001c26:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001c28:	4b0d      	ldr	r3, [pc, #52]	; (8001c60 <MX_CAN1_Init+0x64>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <MX_CAN1_Init+0x64>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001c34:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <MX_CAN1_Init+0x64>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <MX_CAN1_Init+0x64>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001c40:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <MX_CAN1_Init+0x64>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <MX_CAN1_Init+0x64>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001c4c:	4804      	ldr	r0, [pc, #16]	; (8001c60 <MX_CAN1_Init+0x64>)
 8001c4e:	f002 fdf7 	bl	8004840 <HAL_CAN_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001c58:	f000 fb58 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20015710 	.word	0x20015710
 8001c64:	40006400 	.word	0x40006400

08001c68 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001c6c:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <MX_SPI2_Init+0x64>)
 8001c6e:	4a18      	ldr	r2, [pc, #96]	; (8001cd0 <MX_SPI2_Init+0x68>)
 8001c70:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c72:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <MX_SPI2_Init+0x64>)
 8001c74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c78:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c7a:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <MX_SPI2_Init+0x64>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c80:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <MX_SPI2_Init+0x64>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c86:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <MX_SPI2_Init+0x64>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <MX_SPI2_Init+0x64>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001c92:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <MX_SPI2_Init+0x64>)
 8001c94:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001c98:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <MX_SPI2_Init+0x64>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ca0:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <MX_SPI2_Init+0x64>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <MX_SPI2_Init+0x64>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cac:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <MX_SPI2_Init+0x64>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <MX_SPI2_Init+0x64>)
 8001cb4:	220a      	movs	r2, #10
 8001cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001cb8:	4804      	ldr	r0, [pc, #16]	; (8001ccc <MX_SPI2_Init+0x64>)
 8001cba:	f004 fb2f 	bl	800631c <HAL_SPI_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001cc4:	f000 fb22 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	200154e0 	.word	0x200154e0
 8001cd0:	40003800 	.word	0x40003800

08001cd4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08c      	sub	sp, #48	; 0x30
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cda:	f107 030c 	add.w	r3, r7, #12
 8001cde:	2224      	movs	r2, #36	; 0x24
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f00a fcc3 	bl	800c66e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cf0:	4b22      	ldr	r3, [pc, #136]	; (8001d7c <MX_TIM1_Init+0xa8>)
 8001cf2:	4a23      	ldr	r2, [pc, #140]	; (8001d80 <MX_TIM1_Init+0xac>)
 8001cf4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001cf6:	4b21      	ldr	r3, [pc, #132]	; (8001d7c <MX_TIM1_Init+0xa8>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfc:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <MX_TIM1_Init+0xa8>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d02:	4b1e      	ldr	r3, [pc, #120]	; (8001d7c <MX_TIM1_Init+0xa8>)
 8001d04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d08:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d0a:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <MX_TIM1_Init+0xa8>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d10:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <MX_TIM1_Init+0xa8>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d16:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <MX_TIM1_Init+0xa8>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d20:	2300      	movs	r3, #0
 8001d22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d24:	2301      	movs	r3, #1
 8001d26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d30:	2300      	movs	r3, #0
 8001d32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d34:	2301      	movs	r3, #1
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	4619      	mov	r1, r3
 8001d46:	480d      	ldr	r0, [pc, #52]	; (8001d7c <MX_TIM1_Init+0xa8>)
 8001d48:	f004 fd23 	bl	8006792 <HAL_TIM_Encoder_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001d52:	f000 fadb 	bl	800230c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d56:	2300      	movs	r3, #0
 8001d58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001d5a:	2380      	movs	r3, #128	; 0x80
 8001d5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	4619      	mov	r1, r3
 8001d62:	4806      	ldr	r0, [pc, #24]	; (8001d7c <MX_TIM1_Init+0xa8>)
 8001d64:	f005 fba0 	bl	80074a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001d6e:	f000 facd 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d72:	bf00      	nop
 8001d74:	3730      	adds	r7, #48	; 0x30
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20015690 	.word	0x20015690
 8001d80:	40010000 	.word	0x40010000

08001d84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08e      	sub	sp, #56	; 0x38
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	609a      	str	r2, [r3, #8]
 8001d96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d98:	f107 0320 	add.w	r3, r7, #32
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001da2:	1d3b      	adds	r3, r7, #4
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
 8001db0:	615a      	str	r2, [r3, #20]
 8001db2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001db4:	4b38      	ldr	r3, [pc, #224]	; (8001e98 <MX_TIM2_Init+0x114>)
 8001db6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001dbc:	4b36      	ldr	r3, [pc, #216]	; (8001e98 <MX_TIM2_Init+0x114>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc2:	4b35      	ldr	r3, [pc, #212]	; (8001e98 <MX_TIM2_Init+0x114>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001dc8:	4b33      	ldr	r3, [pc, #204]	; (8001e98 <MX_TIM2_Init+0x114>)
 8001dca:	f242 7210 	movw	r2, #10000	; 0x2710
 8001dce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd0:	4b31      	ldr	r3, [pc, #196]	; (8001e98 <MX_TIM2_Init+0x114>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd6:	4b30      	ldr	r3, [pc, #192]	; (8001e98 <MX_TIM2_Init+0x114>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ddc:	482e      	ldr	r0, [pc, #184]	; (8001e98 <MX_TIM2_Init+0x114>)
 8001dde:	f004 fc1f 	bl	8006620 <HAL_TIM_Base_Init>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001de8:	f000 fa90 	bl	800230c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001df2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001df6:	4619      	mov	r1, r3
 8001df8:	4827      	ldr	r0, [pc, #156]	; (8001e98 <MX_TIM2_Init+0x114>)
 8001dfa:	f004 ff8b 	bl	8006d14 <HAL_TIM_ConfigClockSource>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001e04:	f000 fa82 	bl	800230c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e08:	4823      	ldr	r0, [pc, #140]	; (8001e98 <MX_TIM2_Init+0x114>)
 8001e0a:	f004 fc8d 	bl	8006728 <HAL_TIM_PWM_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001e14:	f000 fa7a 	bl	800230c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e20:	f107 0320 	add.w	r3, r7, #32
 8001e24:	4619      	mov	r1, r3
 8001e26:	481c      	ldr	r0, [pc, #112]	; (8001e98 <MX_TIM2_Init+0x114>)
 8001e28:	f005 fb3e 	bl	80074a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001e32:	f000 fa6b 	bl	800230c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e36:	2360      	movs	r3, #96	; 0x60
 8001e38:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e46:	1d3b      	adds	r3, r7, #4
 8001e48:	2204      	movs	r2, #4
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4812      	ldr	r0, [pc, #72]	; (8001e98 <MX_TIM2_Init+0x114>)
 8001e4e:	f004 fe9b 	bl	8006b88 <HAL_TIM_PWM_ConfigChannel>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001e58:	f000 fa58 	bl	800230c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	2208      	movs	r2, #8
 8001e60:	4619      	mov	r1, r3
 8001e62:	480d      	ldr	r0, [pc, #52]	; (8001e98 <MX_TIM2_Init+0x114>)
 8001e64:	f004 fe90 	bl	8006b88 <HAL_TIM_PWM_ConfigChannel>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001e6e:	f000 fa4d 	bl	800230c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e72:	1d3b      	adds	r3, r7, #4
 8001e74:	220c      	movs	r2, #12
 8001e76:	4619      	mov	r1, r3
 8001e78:	4807      	ldr	r0, [pc, #28]	; (8001e98 <MX_TIM2_Init+0x114>)
 8001e7a:	f004 fe85 	bl	8006b88 <HAL_TIM_PWM_ConfigChannel>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001e84:	f000 fa42 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e88:	4803      	ldr	r0, [pc, #12]	; (8001e98 <MX_TIM2_Init+0x114>)
 8001e8a:	f001 fded 	bl	8003a68 <HAL_TIM_MspPostInit>

}
 8001e8e:	bf00      	nop
 8001e90:	3738      	adds	r7, #56	; 0x38
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	200156d0 	.word	0x200156d0

08001e9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08c      	sub	sp, #48	; 0x30
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ea2:	f107 030c 	add.w	r3, r7, #12
 8001ea6:	2224      	movs	r2, #36	; 0x24
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f00a fbdf 	bl	800c66e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb0:	1d3b      	adds	r3, r7, #4
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001eb8:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <MX_TIM3_Init+0xa0>)
 8001eba:	4a21      	ldr	r2, [pc, #132]	; (8001f40 <MX_TIM3_Init+0xa4>)
 8001ebc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ebe:	4b1f      	ldr	r3, [pc, #124]	; (8001f3c <MX_TIM3_Init+0xa0>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec4:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <MX_TIM3_Init+0xa0>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001eca:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <MX_TIM3_Init+0xa0>)
 8001ecc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ed0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed2:	4b1a      	ldr	r3, [pc, #104]	; (8001f3c <MX_TIM3_Init+0xa0>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed8:	4b18      	ldr	r3, [pc, #96]	; (8001f3c <MX_TIM3_Init+0xa0>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001efa:	2300      	movs	r3, #0
 8001efc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001f02:	f107 030c 	add.w	r3, r7, #12
 8001f06:	4619      	mov	r1, r3
 8001f08:	480c      	ldr	r0, [pc, #48]	; (8001f3c <MX_TIM3_Init+0xa0>)
 8001f0a:	f004 fc42 	bl	8006792 <HAL_TIM_Encoder_Init>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001f14:	f000 f9fa 	bl	800230c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f20:	1d3b      	adds	r3, r7, #4
 8001f22:	4619      	mov	r1, r3
 8001f24:	4805      	ldr	r0, [pc, #20]	; (8001f3c <MX_TIM3_Init+0xa0>)
 8001f26:	f005 fabf 	bl	80074a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001f30:	f000 f9ec 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f34:	bf00      	nop
 8001f36:	3730      	adds	r7, #48	; 0x30
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	200155c4 	.word	0x200155c4
 8001f40:	40000400 	.word	0x40000400

08001f44 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08e      	sub	sp, #56	; 0x38
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f58:	f107 0320 	add.w	r3, r7, #32
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
 8001f70:	615a      	str	r2, [r3, #20]
 8001f72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f74:	4b2b      	ldr	r3, [pc, #172]	; (8002024 <MX_TIM4_Init+0xe0>)
 8001f76:	4a2c      	ldr	r2, [pc, #176]	; (8002028 <MX_TIM4_Init+0xe4>)
 8001f78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42-1;
 8001f7a:	4b2a      	ldr	r3, [pc, #168]	; (8002024 <MX_TIM4_Init+0xe0>)
 8001f7c:	2229      	movs	r2, #41	; 0x29
 8001f7e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f80:	4b28      	ldr	r3, [pc, #160]	; (8002024 <MX_TIM4_Init+0xe0>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500;
 8001f86:	4b27      	ldr	r3, [pc, #156]	; (8002024 <MX_TIM4_Init+0xe0>)
 8001f88:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f8c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f8e:	4b25      	ldr	r3, [pc, #148]	; (8002024 <MX_TIM4_Init+0xe0>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f94:	4b23      	ldr	r3, [pc, #140]	; (8002024 <MX_TIM4_Init+0xe0>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f9a:	4822      	ldr	r0, [pc, #136]	; (8002024 <MX_TIM4_Init+0xe0>)
 8001f9c:	f004 fb40 	bl	8006620 <HAL_TIM_Base_Init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001fa6:	f000 f9b1 	bl	800230c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001faa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001fb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	481b      	ldr	r0, [pc, #108]	; (8002024 <MX_TIM4_Init+0xe0>)
 8001fb8:	f004 feac 	bl	8006d14 <HAL_TIM_ConfigClockSource>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001fc2:	f000 f9a3 	bl	800230c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001fc6:	4817      	ldr	r0, [pc, #92]	; (8002024 <MX_TIM4_Init+0xe0>)
 8001fc8:	f004 fb79 	bl	80066be <HAL_TIM_OC_Init>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001fd2:	f000 f99b 	bl	800230c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001fde:	f107 0320 	add.w	r3, r7, #32
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	480f      	ldr	r0, [pc, #60]	; (8002024 <MX_TIM4_Init+0xe0>)
 8001fe6:	f005 fa5f 	bl	80074a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001ff0:	f000 f98c 	bl	800230c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002004:	1d3b      	adds	r3, r7, #4
 8002006:	2200      	movs	r2, #0
 8002008:	4619      	mov	r1, r3
 800200a:	4806      	ldr	r0, [pc, #24]	; (8002024 <MX_TIM4_Init+0xe0>)
 800200c:	f004 fd5c 	bl	8006ac8 <HAL_TIM_OC_ConfigChannel>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002016:	f000 f979 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800201a:	bf00      	nop
 800201c:	3738      	adds	r7, #56	; 0x38
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20015538 	.word	0x20015538
 8002028:	40000800 	.word	0x40000800

0800202c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]
 8002040:	615a      	str	r2, [r3, #20]
 8002042:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002044:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <MX_TIM13_Init+0x94>)
 8002046:	4a1f      	ldr	r2, [pc, #124]	; (80020c4 <MX_TIM13_Init+0x98>)
 8002048:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800204a:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <MX_TIM13_Init+0x94>)
 800204c:	2200      	movs	r2, #0
 800204e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002050:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <MX_TIM13_Init+0x94>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10000;
 8002056:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <MX_TIM13_Init+0x94>)
 8002058:	f242 7210 	movw	r2, #10000	; 0x2710
 800205c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800205e:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <MX_TIM13_Init+0x94>)
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002064:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <MX_TIM13_Init+0x94>)
 8002066:	2200      	movs	r2, #0
 8002068:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800206a:	4815      	ldr	r0, [pc, #84]	; (80020c0 <MX_TIM13_Init+0x94>)
 800206c:	f004 fad8 	bl	8006620 <HAL_TIM_Base_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002076:	f000 f949 	bl	800230c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800207a:	4811      	ldr	r0, [pc, #68]	; (80020c0 <MX_TIM13_Init+0x94>)
 800207c:	f004 fb54 	bl	8006728 <HAL_TIM_PWM_Init>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002086:	f000 f941 	bl	800230c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800208a:	2360      	movs	r3, #96	; 0x60
 800208c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800209a:	1d3b      	adds	r3, r7, #4
 800209c:	2200      	movs	r2, #0
 800209e:	4619      	mov	r1, r3
 80020a0:	4807      	ldr	r0, [pc, #28]	; (80020c0 <MX_TIM13_Init+0x94>)
 80020a2:	f004 fd71 	bl	8006b88 <HAL_TIM_PWM_ConfigChannel>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80020ac:	f000 f92e 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80020b0:	4803      	ldr	r0, [pc, #12]	; (80020c0 <MX_TIM13_Init+0x94>)
 80020b2:	f001 fcd9 	bl	8003a68 <HAL_TIM_MspPostInit>

}
 80020b6:	bf00      	nop
 80020b8:	3720      	adds	r7, #32
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20015650 	.word	0x20015650
 80020c4:	40001c00 	.word	0x40001c00

080020c8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ce:	1d3b      	adds	r3, r7, #4
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	611a      	str	r2, [r3, #16]
 80020dc:	615a      	str	r2, [r3, #20]
 80020de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80020e0:	4b1e      	ldr	r3, [pc, #120]	; (800215c <MX_TIM14_Init+0x94>)
 80020e2:	4a1f      	ldr	r2, [pc, #124]	; (8002160 <MX_TIM14_Init+0x98>)
 80020e4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80020e6:	4b1d      	ldr	r3, [pc, #116]	; (800215c <MX_TIM14_Init+0x94>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ec:	4b1b      	ldr	r3, [pc, #108]	; (800215c <MX_TIM14_Init+0x94>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000;
 80020f2:	4b1a      	ldr	r3, [pc, #104]	; (800215c <MX_TIM14_Init+0x94>)
 80020f4:	f242 7210 	movw	r2, #10000	; 0x2710
 80020f8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020fa:	4b18      	ldr	r3, [pc, #96]	; (800215c <MX_TIM14_Init+0x94>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002100:	4b16      	ldr	r3, [pc, #88]	; (800215c <MX_TIM14_Init+0x94>)
 8002102:	2200      	movs	r2, #0
 8002104:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002106:	4815      	ldr	r0, [pc, #84]	; (800215c <MX_TIM14_Init+0x94>)
 8002108:	f004 fa8a 	bl	8006620 <HAL_TIM_Base_Init>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8002112:	f000 f8fb 	bl	800230c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8002116:	4811      	ldr	r0, [pc, #68]	; (800215c <MX_TIM14_Init+0x94>)
 8002118:	f004 fb06 	bl	8006728 <HAL_TIM_PWM_Init>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8002122:	f000 f8f3 	bl	800230c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002126:	2360      	movs	r3, #96	; 0x60
 8002128:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800212a:	2300      	movs	r3, #0
 800212c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002136:	1d3b      	adds	r3, r7, #4
 8002138:	2200      	movs	r2, #0
 800213a:	4619      	mov	r1, r3
 800213c:	4807      	ldr	r0, [pc, #28]	; (800215c <MX_TIM14_Init+0x94>)
 800213e:	f004 fd23 	bl	8006b88 <HAL_TIM_PWM_ConfigChannel>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8002148:	f000 f8e0 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 800214c:	4803      	ldr	r0, [pc, #12]	; (800215c <MX_TIM14_Init+0x94>)
 800214e:	f001 fc8b 	bl	8003a68 <HAL_TIM_MspPostInit>

}
 8002152:	bf00      	nop
 8002154:	3720      	adds	r7, #32
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20015738 	.word	0x20015738
 8002160:	40002000 	.word	0x40002000

08002164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	; 0x28
 8002168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216a:	f107 0314 	add.w	r3, r7, #20
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	60da      	str	r2, [r3, #12]
 8002178:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	4b3d      	ldr	r3, [pc, #244]	; (8002274 <MX_GPIO_Init+0x110>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	4a3c      	ldr	r2, [pc, #240]	; (8002274 <MX_GPIO_Init+0x110>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6313      	str	r3, [r2, #48]	; 0x30
 800218a:	4b3a      	ldr	r3, [pc, #232]	; (8002274 <MX_GPIO_Init+0x110>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	4b36      	ldr	r3, [pc, #216]	; (8002274 <MX_GPIO_Init+0x110>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	4a35      	ldr	r2, [pc, #212]	; (8002274 <MX_GPIO_Init+0x110>)
 80021a0:	f043 0310 	orr.w	r3, r3, #16
 80021a4:	6313      	str	r3, [r2, #48]	; 0x30
 80021a6:	4b33      	ldr	r3, [pc, #204]	; (8002274 <MX_GPIO_Init+0x110>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	4b2f      	ldr	r3, [pc, #188]	; (8002274 <MX_GPIO_Init+0x110>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	4a2e      	ldr	r2, [pc, #184]	; (8002274 <MX_GPIO_Init+0x110>)
 80021bc:	f043 0302 	orr.w	r3, r3, #2
 80021c0:	6313      	str	r3, [r2, #48]	; 0x30
 80021c2:	4b2c      	ldr	r3, [pc, #176]	; (8002274 <MX_GPIO_Init+0x110>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	607b      	str	r3, [r7, #4]
 80021d2:	4b28      	ldr	r3, [pc, #160]	; (8002274 <MX_GPIO_Init+0x110>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4a27      	ldr	r2, [pc, #156]	; (8002274 <MX_GPIO_Init+0x110>)
 80021d8:	f043 0304 	orr.w	r3, r3, #4
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4b25      	ldr	r3, [pc, #148]	; (8002274 <MX_GPIO_Init+0x110>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	607b      	str	r3, [r7, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	603b      	str	r3, [r7, #0]
 80021ee:	4b21      	ldr	r3, [pc, #132]	; (8002274 <MX_GPIO_Init+0x110>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	4a20      	ldr	r2, [pc, #128]	; (8002274 <MX_GPIO_Init+0x110>)
 80021f4:	f043 0308 	orr.w	r3, r3, #8
 80021f8:	6313      	str	r3, [r2, #48]	; 0x30
 80021fa:	4b1e      	ldr	r3, [pc, #120]	; (8002274 <MX_GPIO_Init+0x110>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	603b      	str	r3, [r7, #0]
 8002204:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002206:	2200      	movs	r2, #0
 8002208:	2101      	movs	r1, #1
 800220a:	481b      	ldr	r0, [pc, #108]	; (8002278 <MX_GPIO_Init+0x114>)
 800220c:	f003 fc12 	bl	8005a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_RS_GPIO_Port, CAN_RS_Pin, GPIO_PIN_RESET);
 8002210:	2200      	movs	r2, #0
 8002212:	2104      	movs	r1, #4
 8002214:	4819      	ldr	r0, [pc, #100]	; (800227c <MX_GPIO_Init+0x118>)
 8002216:	f003 fc0d 	bl	8005a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800221a:	2301      	movs	r3, #1
 800221c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800221e:	2301      	movs	r3, #1
 8002220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002226:	2302      	movs	r3, #2
 8002228:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800222a:	f107 0314 	add.w	r3, r7, #20
 800222e:	4619      	mov	r1, r3
 8002230:	4811      	ldr	r0, [pc, #68]	; (8002278 <MX_GPIO_Init+0x114>)
 8002232:	f003 fa65 	bl	8005700 <HAL_GPIO_Init>

  /*Configure GPIO pin : FL1_Pin */
  GPIO_InitStruct.Pin = FL1_Pin;
 8002236:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800223a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800223c:	2300      	movs	r3, #0
 800223e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002240:	2301      	movs	r3, #1
 8002242:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FL1_GPIO_Port, &GPIO_InitStruct);
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	4619      	mov	r1, r3
 800224a:	480d      	ldr	r0, [pc, #52]	; (8002280 <MX_GPIO_Init+0x11c>)
 800224c:	f003 fa58 	bl	8005700 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_RS_Pin */
  GPIO_InitStruct.Pin = CAN_RS_Pin;
 8002250:	2304      	movs	r3, #4
 8002252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002254:	2301      	movs	r3, #1
 8002256:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225c:	2300      	movs	r3, #0
 800225e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_RS_GPIO_Port, &GPIO_InitStruct);
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	4619      	mov	r1, r3
 8002266:	4805      	ldr	r0, [pc, #20]	; (800227c <MX_GPIO_Init+0x118>)
 8002268:	f003 fa4a 	bl	8005700 <HAL_GPIO_Init>

}
 800226c:	bf00      	nop
 800226e:	3728      	adds	r7, #40	; 0x28
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40023800 	.word	0x40023800
 8002278:	40020000 	.word	0x40020000
 800227c:	40020c00 	.word	0x40020c00
 8002280:	40021000 	.word	0x40021000

08002284 <start_canbus_task>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_start_canbus_task */
void start_canbus_task(void const * argument)
{
 8002284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002286:	b089      	sub	sp, #36	; 0x24
 8002288:	af06      	add	r7, sp, #24
 800228a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  canbus_task_init(hcan1);
 800228c:	4e08      	ldr	r6, [pc, #32]	; (80022b0 <start_canbus_task+0x2c>)
 800228e:	466d      	mov	r5, sp
 8002290:	f106 0410 	add.w	r4, r6, #16
 8002294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002296:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002298:	e894 0003 	ldmia.w	r4, {r0, r1}
 800229c:	e885 0003 	stmia.w	r5, {r0, r1}
 80022a0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80022a4:	f7fe fe34 	bl	8000f10 <canbus_task_init>
  for(;;)
  {
	  canbus_task();
 80022a8:	f7fe fe9e 	bl	8000fe8 <canbus_task>
 80022ac:	e7fc      	b.n	80022a8 <start_canbus_task+0x24>
 80022ae:	bf00      	nop
 80022b0:	20015710 	.word	0x20015710

080022b4 <start_motor_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_motor_task */
void start_motor_task(void const * argument)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_motor_task */
  motor_task_init();
 80022bc:	f000 fca0 	bl	8002c00 <motor_task_init>
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80022c0:	2201      	movs	r2, #1
 80022c2:	2101      	movs	r1, #1
 80022c4:	4807      	ldr	r0, [pc, #28]	; (80022e4 <start_motor_task+0x30>)
 80022c6:	f003 fbb5 	bl	8005a34 <HAL_GPIO_WritePin>
	  motor_task();
 80022ca:	f000 fe8f 	bl	8002fec <motor_task>
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80022ce:	2200      	movs	r2, #0
 80022d0:	2101      	movs	r1, #1
 80022d2:	4804      	ldr	r0, [pc, #16]	; (80022e4 <start_motor_task+0x30>)
 80022d4:	f003 fbae 	bl	8005a34 <HAL_GPIO_WritePin>
	  ulTaskNotifyTake( pdTRUE, portMAX_DELAY);
 80022d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022dc:	2001      	movs	r0, #1
 80022de:	f006 ff17 	bl	8009110 <ulTaskNotifyTake>
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80022e2:	e7ed      	b.n	80022c0 <start_motor_task+0xc>
 80022e4:	40020000 	.word	0x40020000

080022e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a04      	ldr	r2, [pc, #16]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d101      	bne.n	80022fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80022fa:	f001 fd5f 	bl	8003dbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40010400 	.word	0x40010400

0800230c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
	...

0800231c <drive_motor>:

 static impedance_control_params_t ic_params; // TODO different per motor?
 static leg_ik_t leg;

 static drive_motor(uint8_t index, float cmd)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	ed87 0a00 	vstr	s0, [r7]
 8002328:	71fb      	strb	r3, [r7, #7]
	 if(index == 0)
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d15e      	bne.n	80023ee <drive_motor+0xd2>
	 {
		 // IN1 and IN2, TIM2_CH3/4
	 	 if(cmd > 0)
 8002330:	edd7 7a00 	vldr	s15, [r7]
 8002334:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233c:	dd29      	ble.n	8002392 <drive_motor+0x76>
	 	 {
	 		if(motors[index].reverse_direction)
 800233e:	79fa      	ldrb	r2, [r7, #7]
 8002340:	495b      	ldr	r1, [pc, #364]	; (80024b0 <drive_motor+0x194>)
 8002342:	4613      	mov	r3, r2
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	4413      	add	r3, r2
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	440b      	add	r3, r1
 800234c:	332c      	adds	r3, #44	; 0x2c
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00e      	beq.n	8002374 <drive_motor+0x58>
	 		{
	 			TIM2->CCR4 = 0;
 8002356:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800235a:	2200      	movs	r2, #0
 800235c:	641a      	str	r2, [r3, #64]	; 0x40
	 			TIM2->CCR3 = (uint16_t) cmd;
 800235e:	edd7 7a00 	vldr	s15, [r7]
 8002362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002366:	ee17 3a90 	vmov	r3, s15
 800236a:	b29a      	uxth	r2, r3
 800236c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002370:	63da      	str	r2, [r3, #60]	; 0x3c
 8002372:	e095      	b.n	80024a0 <drive_motor+0x184>
	 		}
	 		else
	 		{
	 			TIM2->CCR4 = (uint16_t) cmd;
 8002374:	edd7 7a00 	vldr	s15, [r7]
 8002378:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800237c:	ee17 3a90 	vmov	r3, s15
 8002380:	b29a      	uxth	r2, r3
 8002382:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002386:	641a      	str	r2, [r3, #64]	; 0x40
	 			TIM2->CCR3 = 0;
 8002388:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800238c:	2200      	movs	r2, #0
 800238e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002390:	e086      	b.n	80024a0 <drive_motor+0x184>
	 		}
	 	 }
	 	 else
	 	 {
	 		 if(motors[index].reverse_direction)
 8002392:	79fa      	ldrb	r2, [r7, #7]
 8002394:	4946      	ldr	r1, [pc, #280]	; (80024b0 <drive_motor+0x194>)
 8002396:	4613      	mov	r3, r2
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	4413      	add	r3, r2
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	440b      	add	r3, r1
 80023a0:	332c      	adds	r3, #44	; 0x2c
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d010      	beq.n	80023cc <drive_motor+0xb0>
	 		 {
	 		 	TIM2->CCR3 = 0;
 80023aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023ae:	2200      	movs	r2, #0
 80023b0:	63da      	str	r2, [r3, #60]	; 0x3c
	 		 	TIM2->CCR4 = (uint16_t) -cmd;
 80023b2:	edd7 7a00 	vldr	s15, [r7]
 80023b6:	eef1 7a67 	vneg.f32	s15, s15
 80023ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023be:	ee17 3a90 	vmov	r3, s15
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40
 80023ca:	e069      	b.n	80024a0 <drive_motor+0x184>
	 		 }
	 		 else
	 		 {
	 		 	TIM2->CCR3 = (uint16_t) -cmd;
 80023cc:	edd7 7a00 	vldr	s15, [r7]
 80023d0:	eef1 7a67 	vneg.f32	s15, s15
 80023d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023d8:	ee17 3a90 	vmov	r3, s15
 80023dc:	b29a      	uxth	r2, r3
 80023de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023e2:	63da      	str	r2, [r3, #60]	; 0x3c
	 		 	TIM2->CCR4 = 0;
 80023e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023e8:	2200      	movs	r2, #0
 80023ea:	641a      	str	r2, [r3, #64]	; 0x40
 80023ec:	e058      	b.n	80024a0 <drive_motor+0x184>
	 		 }
	 	 }
	  }
	 else if(index == 1)
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d155      	bne.n	80024a0 <drive_motor+0x184>
	 {
		 // IN3 - TIM13_CH1
		 // IN4 - TIM14_CH1
		 if(cmd > 0)
 80023f4:	edd7 7a00 	vldr	s15, [r7]
 80023f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002400:	dd25      	ble.n	800244e <drive_motor+0x132>
		 {
			 if(motors[index].reverse_direction)
 8002402:	79fa      	ldrb	r2, [r7, #7]
 8002404:	492a      	ldr	r1, [pc, #168]	; (80024b0 <drive_motor+0x194>)
 8002406:	4613      	mov	r3, r2
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4413      	add	r3, r2
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	440b      	add	r3, r1
 8002410:	332c      	adds	r3, #44	; 0x2c
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00c      	beq.n	8002434 <drive_motor+0x118>
		 	{
		 		TIM14->CCR1 = 0;
 800241a:	4b26      	ldr	r3, [pc, #152]	; (80024b4 <drive_motor+0x198>)
 800241c:	2200      	movs	r2, #0
 800241e:	635a      	str	r2, [r3, #52]	; 0x34
		 		TIM13->CCR1 = (uint16_t) cmd;
 8002420:	edd7 7a00 	vldr	s15, [r7]
 8002424:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002428:	ee17 3a90 	vmov	r3, s15
 800242c:	b29a      	uxth	r2, r3
 800242e:	4b22      	ldr	r3, [pc, #136]	; (80024b8 <drive_motor+0x19c>)
 8002430:	635a      	str	r2, [r3, #52]	; 0x34
 8002432:	e035      	b.n	80024a0 <drive_motor+0x184>
		 	}
		 	else
		 	{
		 		TIM14->CCR1 = (uint16_t) cmd;
 8002434:	edd7 7a00 	vldr	s15, [r7]
 8002438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800243c:	ee17 3a90 	vmov	r3, s15
 8002440:	b29a      	uxth	r2, r3
 8002442:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <drive_motor+0x198>)
 8002444:	635a      	str	r2, [r3, #52]	; 0x34
		 		TIM13->CCR1 = 0;
 8002446:	4b1c      	ldr	r3, [pc, #112]	; (80024b8 <drive_motor+0x19c>)
 8002448:	2200      	movs	r2, #0
 800244a:	635a      	str	r2, [r3, #52]	; 0x34
 800244c:	e028      	b.n	80024a0 <drive_motor+0x184>
		 	}
		 }
		 else
		 {
		 	 if(motors[index].reverse_direction)
 800244e:	79fa      	ldrb	r2, [r7, #7]
 8002450:	4917      	ldr	r1, [pc, #92]	; (80024b0 <drive_motor+0x194>)
 8002452:	4613      	mov	r3, r2
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	4413      	add	r3, r2
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	440b      	add	r3, r1
 800245c:	332c      	adds	r3, #44	; 0x2c
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00e      	beq.n	8002484 <drive_motor+0x168>
		 	 {
		 	 	TIM13->CCR1 = 0;
 8002466:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <drive_motor+0x19c>)
 8002468:	2200      	movs	r2, #0
 800246a:	635a      	str	r2, [r3, #52]	; 0x34
		 	 	TIM14->CCR1 = (uint16_t) -cmd;
 800246c:	edd7 7a00 	vldr	s15, [r7]
 8002470:	eef1 7a67 	vneg.f32	s15, s15
 8002474:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002478:	ee17 3a90 	vmov	r3, s15
 800247c:	b29a      	uxth	r2, r3
 800247e:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <drive_motor+0x198>)
 8002480:	635a      	str	r2, [r3, #52]	; 0x34
 8002482:	e00d      	b.n	80024a0 <drive_motor+0x184>
		 	 }
		 	 else
		 	 {
		 	 	TIM13->CCR1 = (uint16_t) -cmd;
 8002484:	edd7 7a00 	vldr	s15, [r7]
 8002488:	eef1 7a67 	vneg.f32	s15, s15
 800248c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002490:	ee17 3a90 	vmov	r3, s15
 8002494:	b29a      	uxth	r2, r3
 8002496:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <drive_motor+0x19c>)
 8002498:	635a      	str	r2, [r3, #52]	; 0x34
		 	 	TIM14->CCR1 = 0;
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <drive_motor+0x198>)
 800249c:	2200      	movs	r2, #0
 800249e:	635a      	str	r2, [r3, #52]	; 0x34
		 	 }
		 }
	 }
}
 80024a0:	bf00      	nop
 80024a2:	4618      	mov	r0, r3
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	20000d8c 	.word	0x20000d8c
 80024b4:	40002000 	.word	0x40002000
 80024b8:	40001c00 	.word	0x40001c00

080024bc <vMotorTelemetryTimerCallback>:

 static void vMotorTelemetryTimerCallback( TimerHandle_t xTimer )
  {
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08c      	sub	sp, #48	; 0x30
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 	 canbus_frame_t frame;
 	 can_message_id_t id_helper;

 	 id_helper.can_msg_type = CAN_MSG_TYPE_INFO;
 80024c4:	2301      	movs	r3, #1
 80024c6:	613b      	str	r3, [r7, #16]
 	 id_helper.can_class = CAN_MSG_CLASS_INFO_TELEMETRY;
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
 	 id_helper.can_device = get_device_index();
 80024cc:	f7ff f97a 	bl	80017c4 <get_device_index>
 80024d0:	4603      	mov	r3, r0
 80024d2:	61fb      	str	r3, [r7, #28]


 	id_helper.can_index = CAN_MSG_INDEX_INFO_POSITION;
 80024d4:	2300      	movs	r3, #0
 80024d6:	61bb      	str	r3, [r7, #24]
 	pack_can_message(&id_helper);
 80024d8:	f107 030c 	add.w	r3, r7, #12
 80024dc:	4618      	mov	r0, r3
 80024de:	f007 ffe0 	bl	800a4a2 <pack_can_message>

 	frame.id = id_helper.raw_id;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	623b      	str	r3, [r7, #32]
 	frame.length = 8;
 80024e6:	2308      	movs	r3, #8
 80024e8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 	memcpy(&frame.data[0], &motors[0].ticks_count, 4);
 80024ec:	4b3a      	ldr	r3, [pc, #232]	; (80025d8 <vMotorTelemetryTimerCallback+0x11c>)
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	f8c7 3025 	str.w	r3, [r7, #37]	; 0x25
 	memcpy(&frame.data[4], &motors[1].ticks_count, 4);
 80024f4:	4b38      	ldr	r3, [pc, #224]	; (80025d8 <vMotorTelemetryTimerCallback+0x11c>)
 80024f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024f8:	f8c7 3029 	str.w	r3, [r7, #41]	; 0x29
 	add_can_frame_to_tx_queue(frame);
 80024fc:	f107 0320 	add.w	r3, r7, #32
 8002500:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002502:	f7ff f98b 	bl	800181c <add_can_frame_to_tx_queue>

 	id_helper.can_index = CAN_MSG_INDEX_INFO_CURRENT;
 8002506:	2301      	movs	r3, #1
 8002508:	61bb      	str	r3, [r7, #24]
 	pack_can_message(&id_helper);
 800250a:	f107 030c 	add.w	r3, r7, #12
 800250e:	4618      	mov	r0, r3
 8002510:	f007 ffc7 	bl	800a4a2 <pack_can_message>

 	frame.id = id_helper.raw_id;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	623b      	str	r3, [r7, #32]
 	frame.length = 8;
 8002518:	2308      	movs	r3, #8
 800251a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 	memcpy(&frame.data[0], &motors[0].current_mA, 4);
 800251e:	4b2e      	ldr	r3, [pc, #184]	; (80025d8 <vMotorTelemetryTimerCallback+0x11c>)
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	f8c7 3025 	str.w	r3, [r7, #37]	; 0x25
 	memcpy(&frame.data[4], &motors[1].current_mA, 4);
 8002526:	4b2c      	ldr	r3, [pc, #176]	; (80025d8 <vMotorTelemetryTimerCallback+0x11c>)
 8002528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800252a:	f8c7 3029 	str.w	r3, [r7, #41]	; 0x29
 	add_can_frame_to_tx_queue(frame);
 800252e:	f107 0320 	add.w	r3, r7, #32
 8002532:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002534:	f7ff f972 	bl	800181c <add_can_frame_to_tx_queue>

 	id_helper.can_index = CAN_MSG_INDEX_INFO_SPEED;
 8002538:	2302      	movs	r3, #2
 800253a:	61bb      	str	r3, [r7, #24]
 	pack_can_message(&id_helper);
 800253c:	f107 030c 	add.w	r3, r7, #12
 8002540:	4618      	mov	r0, r3
 8002542:	f007 ffae 	bl	800a4a2 <pack_can_message>

 	frame.id = id_helper.raw_id;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	623b      	str	r3, [r7, #32]
 	frame.length = 8;
 800254a:	2308      	movs	r3, #8
 800254c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 	memcpy(&frame.data[0], &motors[0].speed, 4);
 8002550:	4b21      	ldr	r3, [pc, #132]	; (80025d8 <vMotorTelemetryTimerCallback+0x11c>)
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	f8c7 3025 	str.w	r3, [r7, #37]	; 0x25
 	memcpy(&frame.data[4], &motors[1].speed, 4);
 8002558:	4b1f      	ldr	r3, [pc, #124]	; (80025d8 <vMotorTelemetryTimerCallback+0x11c>)
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	f8c7 3029 	str.w	r3, [r7, #41]	; 0x29
 	add_can_frame_to_tx_queue(frame);
 8002560:	f107 0320 	add.w	r3, r7, #32
 8002564:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002566:	f7ff f959 	bl	800181c <add_can_frame_to_tx_queue>

 	id_helper.can_index = CAN_MSG_INDEX_INFO_POSITION_SETPOINT;
 800256a:	2303      	movs	r3, #3
 800256c:	61bb      	str	r3, [r7, #24]
 	pack_can_message(&id_helper);
 800256e:	f107 030c 	add.w	r3, r7, #12
 8002572:	4618      	mov	r0, r3
 8002574:	f007 ff95 	bl	800a4a2 <pack_can_message>

 	frame.id = id_helper.raw_id;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	623b      	str	r3, [r7, #32]
 	frame.length = 8;
 800257c:	2308      	movs	r3, #8
 800257e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 	memcpy(&frame.data[0], &motors[0].ticks_setpoint, 4);
 8002582:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <vMotorTelemetryTimerCallback+0x11c>)
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	f8c7 3025 	str.w	r3, [r7, #37]	; 0x25
 	memcpy(&frame.data[4], &motors[1].ticks_setpoint, 4);
 800258a:	4b13      	ldr	r3, [pc, #76]	; (80025d8 <vMotorTelemetryTimerCallback+0x11c>)
 800258c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258e:	f8c7 3029 	str.w	r3, [r7, #41]	; 0x29
 	add_can_frame_to_tx_queue(frame);
 8002592:	f107 0320 	add.w	r3, r7, #32
 8002596:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002598:	f7ff f940 	bl	800181c <add_can_frame_to_tx_queue>

 	id_helper.can_index = CAN_MSG_INDEX_INFO_CURRENT_SETPOINT;
 800259c:	2304      	movs	r3, #4
 800259e:	61bb      	str	r3, [r7, #24]
 	pack_can_message(&id_helper);
 80025a0:	f107 030c 	add.w	r3, r7, #12
 80025a4:	4618      	mov	r0, r3
 80025a6:	f007 ff7c 	bl	800a4a2 <pack_can_message>

 	frame.id = id_helper.raw_id;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	623b      	str	r3, [r7, #32]
 	frame.length = 8;
 80025ae:	2308      	movs	r3, #8
 80025b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 	memcpy(&frame.data[0], &motors[0].current_ma_setpoint, 4);
 80025b4:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <vMotorTelemetryTimerCallback+0x11c>)
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	f8c7 3025 	str.w	r3, [r7, #37]	; 0x25
 	memcpy(&frame.data[4], &motors[1].current_ma_setpoint, 4);
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <vMotorTelemetryTimerCallback+0x11c>)
 80025be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c0:	f8c7 3029 	str.w	r3, [r7, #41]	; 0x29
 	add_can_frame_to_tx_queue(frame);
 80025c4:	f107 0320 	add.w	r3, r7, #32
 80025c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025ca:	f7ff f927 	bl	800181c <add_can_frame_to_tx_queue>

 		// TODO other telemetry
  }
 80025ce:	bf00      	nop
 80025d0:	3730      	adds	r7, #48	; 0x30
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20000d8c 	.word	0x20000d8c
 80025dc:	00000000 	.word	0x00000000

080025e0 <vPrimitivesCalculation>:

 static void vPrimitivesCalculation(void)
  {
 80025e0:	b590      	push	{r4, r7, lr}
 80025e2:	b08d      	sub	sp, #52	; 0x34
 80025e4:	af04      	add	r7, sp, #16
	int32_t i;
	// Only calculate if all primitive or current primitive
	for(i=0; i < NUMBER_MOTORS; i++)
 80025e6:	2300      	movs	r3, #0
 80025e8:	61fb      	str	r3, [r7, #28]
 80025ea:	e011      	b.n	8002610 <vPrimitivesCalculation+0x30>
	{
		if(control_type[i] != PRIMITIVE && control_type[i] != PROPRIOCEPTIVE_PRIMITIVE)
 80025ec:	4a76      	ldr	r2, [pc, #472]	; (80027c8 <vPrimitivesCalculation+0x1e8>)
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	4413      	add	r3, r2
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d007      	beq.n	800260a <vPrimitivesCalculation+0x2a>
 80025fa:	4a73      	ldr	r2, [pc, #460]	; (80027c8 <vPrimitivesCalculation+0x1e8>)
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	4413      	add	r3, r2
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b05      	cmp	r3, #5
 8002606:	f040 80d1 	bne.w	80027ac <vPrimitivesCalculation+0x1cc>
	for(i=0; i < NUMBER_MOTORS; i++)
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	3301      	adds	r3, #1
 800260e:	61fb      	str	r3, [r7, #28]
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	2b01      	cmp	r3, #1
 8002614:	ddea      	ble.n	80025ec <vPrimitivesCalculation+0xc>
	}

	pos_cartesian_t cart_pos;
	pos_joint_space_t js_pos;

	if(get_motion_primitive() < NUMBER_LINEAR_PRIMITIVES)
 8002616:	f009 fea9 	bl	800c36c <get_motion_primitive>
 800261a:	4603      	mov	r3, r0
 800261c:	2b03      	cmp	r3, #3
 800261e:	d809      	bhi.n	8002634 <vPrimitivesCalculation+0x54>
	{
		motion_primitive_get_position(&cart_pos.x, &cart_pos.y);
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	1d1a      	adds	r2, r3, #4
 8002626:	f107 0314 	add.w	r3, r7, #20
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f008 fee3 	bl	800b3f8 <motion_primitive_get_position>
 8002632:	e008      	b.n	8002646 <vPrimitivesCalculation+0x66>
	}
	else
	{
		motion_primitive_get_position_bezier_quadratic(&cart_pos.x, &cart_pos.y);
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	1d1a      	adds	r2, r3, #4
 800263a:	f107 0314 	add.w	r3, r7, #20
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f009 fa19 	bl	800ba78 <motion_primitive_get_position_bezier_quadratic>
	frame.length = 8;
	memcpy(&frame.data[0], &cart_pos.x, 4);
	memcpy(&frame.data[4], &cart_pos.y, 4);
	add_can_frame_to_tx_queue(frame);*/

	if(control_type[0] == PRIMITIVE)
 8002646:	4b60      	ldr	r3, [pc, #384]	; (80027c8 <vPrimitivesCalculation+0x1e8>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b04      	cmp	r3, #4
 800264e:	d149      	bne.n	80026e4 <vPrimitivesCalculation+0x104>
	{
		calculate_ik(&leg, &js_pos, cart_pos);
 8002650:	ed97 7a05 	vldr	s14, [r7, #20]
 8002654:	edd7 7a06 	vldr	s15, [r7, #24]
 8002658:	f107 030c 	add.w	r3, r7, #12
 800265c:	eeb0 0a47 	vmov.f32	s0, s14
 8002660:	eef0 0a67 	vmov.f32	s1, s15
 8002664:	4619      	mov	r1, r3
 8002666:	4859      	ldr	r0, [pc, #356]	; (80027cc <vPrimitivesCalculation+0x1ec>)
 8002668:	f008 fa70 	bl	800ab4c <calculate_ik>

		if(motion_primitive_is_inverted())
 800266c:	f009 fe16 	bl	800c29c <motion_primitive_is_inverted>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00b      	beq.n	800268e <vPrimitivesCalculation+0xae>
		{
			js_pos.thigh_angle_rad = -js_pos.thigh_angle_rad;
 8002676:	edd7 7a03 	vldr	s15, [r7, #12]
 800267a:	eef1 7a67 	vneg.f32	s15, s15
 800267e:	edc7 7a03 	vstr	s15, [r7, #12]
			js_pos.knee_angle_rad = -js_pos.knee_angle_rad;
 8002682:	edd7 7a04 	vldr	s15, [r7, #16]
 8002686:	eef1 7a67 	vneg.f32	s15, s15
 800268a:	edc7 7a04 	vstr	s15, [r7, #16]
		}

		set_motor_position(RAD_TO_DEG * js_pos.thigh_angle_rad, 0);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4618      	mov	r0, r3
 8002692:	f7fd ff01 	bl	8000498 <__aeabi_f2d>
 8002696:	a348      	add	r3, pc, #288	; (adr r3, 80027b8 <vPrimitivesCalculation+0x1d8>)
 8002698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269c:	f7fd ff54 	bl	8000548 <__aeabi_dmul>
 80026a0:	4603      	mov	r3, r0
 80026a2:	460c      	mov	r4, r1
 80026a4:	4618      	mov	r0, r3
 80026a6:	4621      	mov	r1, r4
 80026a8:	f7fe fa46 	bl	8000b38 <__aeabi_d2f>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2000      	movs	r0, #0
 80026b0:	ee00 3a10 	vmov	s0, r3
 80026b4:	f000 fcb8 	bl	8003028 <set_motor_position>
		set_motor_position(RAD_TO_DEG * js_pos.knee_angle_rad, 1);
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fd feec 	bl	8000498 <__aeabi_f2d>
 80026c0:	a33d      	add	r3, pc, #244	; (adr r3, 80027b8 <vPrimitivesCalculation+0x1d8>)
 80026c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c6:	f7fd ff3f 	bl	8000548 <__aeabi_dmul>
 80026ca:	4603      	mov	r3, r0
 80026cc:	460c      	mov	r4, r1
 80026ce:	4618      	mov	r0, r3
 80026d0:	4621      	mov	r1, r4
 80026d2:	f7fe fa31 	bl	8000b38 <__aeabi_d2f>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2001      	movs	r0, #1
 80026da:	ee00 3a10 	vmov	s0, r3
 80026de:	f000 fca3 	bl	8003028 <set_motor_position>
 80026e2:	e064      	b.n	80027ae <vPrimitivesCalculation+0x1ce>
	} else if(control_type[0] == PROPRIOCEPTIVE_PRIMITIVE)
 80026e4:	4b38      	ldr	r3, [pc, #224]	; (80027c8 <vPrimitivesCalculation+0x1e8>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b05      	cmp	r3, #5
 80026ec:	d15f      	bne.n	80027ae <vPrimitivesCalculation+0x1ce>
	{
		impedance_control_cmds_t ic_cmds;
		js_pos.thigh_angle_rad = DEG_TO_RAD * get_motor_position(0);
 80026ee:	2000      	movs	r0, #0
 80026f0:	f000 fce6 	bl	80030c0 <get_motor_position>
 80026f4:	ee10 3a10 	vmov	r3, s0
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fd fecd 	bl	8000498 <__aeabi_f2d>
 80026fe:	a330      	add	r3, pc, #192	; (adr r3, 80027c0 <vPrimitivesCalculation+0x1e0>)
 8002700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002704:	f7fd ff20 	bl	8000548 <__aeabi_dmul>
 8002708:	4603      	mov	r3, r0
 800270a:	460c      	mov	r4, r1
 800270c:	4618      	mov	r0, r3
 800270e:	4621      	mov	r1, r4
 8002710:	f7fe fa12 	bl	8000b38 <__aeabi_d2f>
 8002714:	4603      	mov	r3, r0
 8002716:	60fb      	str	r3, [r7, #12]
		js_pos.knee_angle_rad = DEG_TO_RAD * get_motor_position(1);
 8002718:	2001      	movs	r0, #1
 800271a:	f000 fcd1 	bl	80030c0 <get_motor_position>
 800271e:	ee10 3a10 	vmov	r3, s0
 8002722:	4618      	mov	r0, r3
 8002724:	f7fd feb8 	bl	8000498 <__aeabi_f2d>
 8002728:	a325      	add	r3, pc, #148	; (adr r3, 80027c0 <vPrimitivesCalculation+0x1e0>)
 800272a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272e:	f7fd ff0b 	bl	8000548 <__aeabi_dmul>
 8002732:	4603      	mov	r3, r0
 8002734:	460c      	mov	r4, r1
 8002736:	4618      	mov	r0, r3
 8002738:	4621      	mov	r1, r4
 800273a:	f7fe f9fd 	bl	8000b38 <__aeabi_d2f>
 800273e:	4603      	mov	r3, r0
 8002740:	613b      	str	r3, [r7, #16]
		calculate_impedance_control(ic_params, leg, js_pos, cart_pos, &ic_cmds);
 8002742:	ed97 4a05 	vldr	s8, [r7, #20]
 8002746:	edd7 4a06 	vldr	s9, [r7, #24]
 800274a:	ed97 5a03 	vldr	s10, [r7, #12]
 800274e:	edd7 5a04 	vldr	s11, [r7, #16]
 8002752:	4b1e      	ldr	r3, [pc, #120]	; (80027cc <vPrimitivesCalculation+0x1ec>)
 8002754:	ed93 6a00 	vldr	s12, [r3]
 8002758:	edd3 6a01 	vldr	s13, [r3, #4]
 800275c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002760:	edd3 7a03 	vldr	s15, [r3, #12]
 8002764:	4b1a      	ldr	r3, [pc, #104]	; (80027d0 <vPrimitivesCalculation+0x1f0>)
 8002766:	1d3a      	adds	r2, r7, #4
 8002768:	9202      	str	r2, [sp, #8]
 800276a:	466c      	mov	r4, sp
 800276c:	f103 0210 	add.w	r2, r3, #16
 8002770:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002774:	e884 0003 	stmia.w	r4, {r0, r1}
 8002778:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800277a:	eeb0 3a44 	vmov.f32	s6, s8
 800277e:	eef0 3a64 	vmov.f32	s7, s9
 8002782:	eeb0 2a45 	vmov.f32	s4, s10
 8002786:	eef0 2a65 	vmov.f32	s5, s11
 800278a:	eeb0 0a46 	vmov.f32	s0, s12
 800278e:	eef0 0a66 	vmov.f32	s1, s13
 8002792:	eeb0 1a47 	vmov.f32	s2, s14
 8002796:	eef0 1a67 	vmov.f32	s3, s15
 800279a:	f008 f8cf 	bl	800a93c <calculate_impedance_control>
		motors[0].current_ma_setpoint = ic_cmds.hip_cmd_ma;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a0c      	ldr	r2, [pc, #48]	; (80027d4 <vPrimitivesCalculation+0x1f4>)
 80027a2:	61d3      	str	r3, [r2, #28]
		motors[1].current_ma_setpoint = ic_cmds.knee_cmd_ma;
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	4a0b      	ldr	r2, [pc, #44]	; (80027d4 <vPrimitivesCalculation+0x1f4>)
 80027a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027aa:	e000      	b.n	80027ae <vPrimitivesCalculation+0x1ce>
			return;
 80027ac:	bf00      	nop
	}
  }
 80027ae:	3724      	adds	r7, #36	; 0x24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd90      	pop	{r4, r7, pc}
 80027b4:	f3af 8000 	nop.w
 80027b8:	c63f1412 	.word	0xc63f1412
 80027bc:	404ca5dc 	.word	0x404ca5dc
 80027c0:	22d4405f 	.word	0x22d4405f
 80027c4:	3f91df47 	.word	0x3f91df47
 80027c8:	20000d88 	.word	0x20000d88
 80027cc:	20000f24 	.word	0x20000f24
 80027d0:	20000f0c 	.word	0x20000f0c
 80027d4:	20000d8c 	.word	0x20000d8c

080027d8 <vControlTimerCallback>:

 static void vControlTimerCallback( void )
 {
 80027d8:	b5b0      	push	{r4, r5, r7, lr}
 80027da:	b088      	sub	sp, #32
 80027dc:	af00      	add	r7, sp, #0
	static uint32_t count = 0;
	static int32_t last_ticks_for_speed[NUMBER_MOTORS] = {0};

	int32_t i;
	vPrimitivesCalculation();
 80027de:	f7ff feff 	bl	80025e0 <vPrimitivesCalculation>

	// Update data
	for(i=0; i < NUMBER_MOTORS; i++)
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]
 80027e6:	e1c8      	b.n	8002b7a <vControlTimerCallback+0x3a2>
	{
		// Speed is in deg/s
		if(count % 20 == 0)
 80027e8:	4bc3      	ldr	r3, [pc, #780]	; (8002af8 <vControlTimerCallback+0x320>)
 80027ea:	6819      	ldr	r1, [r3, #0]
 80027ec:	4bc3      	ldr	r3, [pc, #780]	; (8002afc <vControlTimerCallback+0x324>)
 80027ee:	fba3 2301 	umull	r2, r3, r3, r1
 80027f2:	091a      	lsrs	r2, r3, #4
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	1aca      	subs	r2, r1, r3
 80027fe:	2a00      	cmp	r2, #0
 8002800:	d172      	bne.n	80028e8 <vControlTimerCallback+0x110>
		{
			// 25 Hz here
			int32_t ticks_per_40ms = (get_motor_encoder_ticks(i) - last_ticks_for_speed[i]);
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	4618      	mov	r0, r3
 8002808:	f007 fe7a 	bl	800a500 <get_motor_encoder_ticks>
 800280c:	4601      	mov	r1, r0
 800280e:	4abc      	ldr	r2, [pc, #752]	; (8002b00 <vControlTimerCallback+0x328>)
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002816:	1acb      	subs	r3, r1, r3
 8002818:	61bb      	str	r3, [r7, #24]
			int32_t deg_p_s = 25 * ticks_per_40ms * (360.0 / motors[i].ticks_per_rev);
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	009a      	lsls	r2, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	4618      	mov	r0, r3
 8002828:	f7fd fe24 	bl	8000474 <__aeabi_i2d>
 800282c:	4604      	mov	r4, r0
 800282e:	460d      	mov	r5, r1
 8002830:	49b4      	ldr	r1, [pc, #720]	; (8002b04 <vControlTimerCallback+0x32c>)
 8002832:	69fa      	ldr	r2, [r7, #28]
 8002834:	4613      	mov	r3, r2
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	4413      	add	r3, r2
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	440b      	add	r3, r1
 800283e:	3328      	adds	r3, #40	; 0x28
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7fd fe16 	bl	8000474 <__aeabi_i2d>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	f04f 0000 	mov.w	r0, #0
 8002850:	49ad      	ldr	r1, [pc, #692]	; (8002b08 <vControlTimerCallback+0x330>)
 8002852:	f7fd ffa3 	bl	800079c <__aeabi_ddiv>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	4620      	mov	r0, r4
 800285c:	4629      	mov	r1, r5
 800285e:	f7fd fe73 	bl	8000548 <__aeabi_dmul>
 8002862:	4603      	mov	r3, r0
 8002864:	460c      	mov	r4, r1
 8002866:	4618      	mov	r0, r3
 8002868:	4621      	mov	r1, r4
 800286a:	f7fe f91d 	bl	8000aa8 <__aeabi_d2iz>
 800286e:	4603      	mov	r3, r0
 8002870:	617b      	str	r3, [r7, #20]
			motors[i].speed = (int32_t) (0.7 * motors[i].speed) + (int32_t) (0.3 * deg_p_s); // TODO filter differently?
 8002872:	49a4      	ldr	r1, [pc, #656]	; (8002b04 <vControlTimerCallback+0x32c>)
 8002874:	69fa      	ldr	r2, [r7, #28]
 8002876:	4613      	mov	r3, r2
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	4413      	add	r3, r2
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	440b      	add	r3, r1
 8002880:	3310      	adds	r3, #16
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f7fd fdf5 	bl	8000474 <__aeabi_i2d>
 800288a:	a397      	add	r3, pc, #604	; (adr r3, 8002ae8 <vControlTimerCallback+0x310>)
 800288c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002890:	f7fd fe5a 	bl	8000548 <__aeabi_dmul>
 8002894:	4603      	mov	r3, r0
 8002896:	460c      	mov	r4, r1
 8002898:	4618      	mov	r0, r3
 800289a:	4621      	mov	r1, r4
 800289c:	f7fe f904 	bl	8000aa8 <__aeabi_d2iz>
 80028a0:	4604      	mov	r4, r0
 80028a2:	6978      	ldr	r0, [r7, #20]
 80028a4:	f7fd fde6 	bl	8000474 <__aeabi_i2d>
 80028a8:	a391      	add	r3, pc, #580	; (adr r3, 8002af0 <vControlTimerCallback+0x318>)
 80028aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ae:	f7fd fe4b 	bl	8000548 <__aeabi_dmul>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4610      	mov	r0, r2
 80028b8:	4619      	mov	r1, r3
 80028ba:	f7fe f8f5 	bl	8000aa8 <__aeabi_d2iz>
 80028be:	4603      	mov	r3, r0
 80028c0:	18e1      	adds	r1, r4, r3
 80028c2:	4890      	ldr	r0, [pc, #576]	; (8002b04 <vControlTimerCallback+0x32c>)
 80028c4:	69fa      	ldr	r2, [r7, #28]
 80028c6:	4613      	mov	r3, r2
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	4413      	add	r3, r2
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	4403      	add	r3, r0
 80028d0:	3310      	adds	r3, #16
 80028d2:	6019      	str	r1, [r3, #0]

			last_ticks_for_speed[i] = get_motor_encoder_ticks(i);
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	4618      	mov	r0, r3
 80028da:	f007 fe11 	bl	800a500 <get_motor_encoder_ticks>
 80028de:	4601      	mov	r1, r0
 80028e0:	4a87      	ldr	r2, [pc, #540]	; (8002b00 <vControlTimerCallback+0x328>)
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		motors[i].ticks_count = get_motor_encoder_ticks(i);
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	4618      	mov	r0, r3
 80028ee:	f007 fe07 	bl	800a500 <get_motor_encoder_ticks>
 80028f2:	4984      	ldr	r1, [pc, #528]	; (8002b04 <vControlTimerCallback+0x32c>)
 80028f4:	69fa      	ldr	r2, [r7, #28]
 80028f6:	4613      	mov	r3, r2
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	4413      	add	r3, r2
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	440b      	add	r3, r1
 8002900:	3320      	adds	r3, #32
 8002902:	6018      	str	r0, [r3, #0]
		motors[i].current_mA = get_motor_current_ma(i); // TODO get current
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	b2db      	uxtb	r3, r3
 8002908:	4618      	mov	r0, r3
 800290a:	f007 fd09 	bl	800a320 <get_motor_current_ma>
 800290e:	4603      	mov	r3, r0
 8002910:	4618      	mov	r0, r3
 8002912:	497c      	ldr	r1, [pc, #496]	; (8002b04 <vControlTimerCallback+0x32c>)
 8002914:	69fa      	ldr	r2, [r7, #28]
 8002916:	4613      	mov	r3, r2
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	4413      	add	r3, r2
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	440b      	add	r3, r1
 8002920:	3318      	adds	r3, #24
 8002922:	6018      	str	r0, [r3, #0]

		if(control_type[i] == POSITION || control_type[i] == PRIMITIVE)
 8002924:	4a79      	ldr	r2, [pc, #484]	; (8002b0c <vControlTimerCallback+0x334>)
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	4413      	add	r3, r2
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d006      	beq.n	8002940 <vControlTimerCallback+0x168>
 8002932:	4a76      	ldr	r2, [pc, #472]	; (8002b0c <vControlTimerCallback+0x334>)
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	4413      	add	r3, r2
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b04      	cmp	r3, #4
 800293e:	d126      	bne.n	800298e <vControlTimerCallback+0x1b6>
		{
			float cmd = calculate_pid(&pos_params[i], motors[i].ticks_setpoint, motors[i].ticks_count);
 8002940:	69fa      	ldr	r2, [r7, #28]
 8002942:	4613      	mov	r3, r2
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	4413      	add	r3, r2
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	4a71      	ldr	r2, [pc, #452]	; (8002b10 <vControlTimerCallback+0x338>)
 800294c:	1898      	adds	r0, r3, r2
 800294e:	496d      	ldr	r1, [pc, #436]	; (8002b04 <vControlTimerCallback+0x32c>)
 8002950:	69fa      	ldr	r2, [r7, #28]
 8002952:	4613      	mov	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	4413      	add	r3, r2
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	440b      	add	r3, r1
 800295c:	3324      	adds	r3, #36	; 0x24
 800295e:	681c      	ldr	r4, [r3, #0]
 8002960:	4968      	ldr	r1, [pc, #416]	; (8002b04 <vControlTimerCallback+0x32c>)
 8002962:	69fa      	ldr	r2, [r7, #28]
 8002964:	4613      	mov	r3, r2
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	4413      	add	r3, r2
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	440b      	add	r3, r1
 800296e:	3320      	adds	r3, #32
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	461a      	mov	r2, r3
 8002974:	4621      	mov	r1, r4
 8002976:	f009 fd05 	bl	800c384 <calculate_pid>
 800297a:	ed87 0a00 	vstr	s0, [r7]
			drive_motor(i, cmd);
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	ed97 0a00 	vldr	s0, [r7]
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff fcc8 	bl	800231c <drive_motor>
		{
 800298c:	e0f2      	b.n	8002b74 <vControlTimerCallback+0x39c>
		} else if(control_type[i] == SPEED)
 800298e:	4a5f      	ldr	r2, [pc, #380]	; (8002b0c <vControlTimerCallback+0x334>)
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	4413      	add	r3, r2
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b01      	cmp	r3, #1
 800299a:	d126      	bne.n	80029ea <vControlTimerCallback+0x212>
		{
			float cmd = calculate_pid(&speed_params[i], motors[i].speed_setpoint, motors[i].speed);
 800299c:	69fa      	ldr	r2, [r7, #28]
 800299e:	4613      	mov	r3, r2
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	4413      	add	r3, r2
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	4a5b      	ldr	r2, [pc, #364]	; (8002b14 <vControlTimerCallback+0x33c>)
 80029a8:	1898      	adds	r0, r3, r2
 80029aa:	4956      	ldr	r1, [pc, #344]	; (8002b04 <vControlTimerCallback+0x32c>)
 80029ac:	69fa      	ldr	r2, [r7, #28]
 80029ae:	4613      	mov	r3, r2
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	4413      	add	r3, r2
 80029b4:	011b      	lsls	r3, r3, #4
 80029b6:	440b      	add	r3, r1
 80029b8:	3314      	adds	r3, #20
 80029ba:	681c      	ldr	r4, [r3, #0]
 80029bc:	4951      	ldr	r1, [pc, #324]	; (8002b04 <vControlTimerCallback+0x32c>)
 80029be:	69fa      	ldr	r2, [r7, #28]
 80029c0:	4613      	mov	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4413      	add	r3, r2
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	440b      	add	r3, r1
 80029ca:	3310      	adds	r3, #16
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	4621      	mov	r1, r4
 80029d2:	f009 fcd7 	bl	800c384 <calculate_pid>
 80029d6:	ed87 0a01 	vstr	s0, [r7, #4]
			drive_motor(i, cmd);
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	ed97 0a01 	vldr	s0, [r7, #4]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff fc9a 	bl	800231c <drive_motor>
 80029e8:	e0c4      	b.n	8002b74 <vControlTimerCallback+0x39c>
		} else if(control_type[i] == CURRENT || control_type[i] == PROPRIOCEPTIVE_PRIMITIVE)
 80029ea:	4a48      	ldr	r2, [pc, #288]	; (8002b0c <vControlTimerCallback+0x334>)
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	4413      	add	r3, r2
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d007      	beq.n	8002a08 <vControlTimerCallback+0x230>
 80029f8:	4a44      	ldr	r2, [pc, #272]	; (8002b0c <vControlTimerCallback+0x334>)
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	4413      	add	r3, r2
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b05      	cmp	r3, #5
 8002a04:	f040 8098 	bne.w	8002b38 <vControlTimerCallback+0x360>
		{
			if(motors[i].current_ma_setpoint >= 0)
 8002a08:	493e      	ldr	r1, [pc, #248]	; (8002b04 <vControlTimerCallback+0x32c>)
 8002a0a:	69fa      	ldr	r2, [r7, #28]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	4413      	add	r3, r2
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	440b      	add	r3, r1
 8002a16:	331c      	adds	r3, #28
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	db35      	blt.n	8002a8a <vControlTimerCallback+0x2b2>
			{
				float cmd = calculate_pid(&cur_params[i], motors[i].current_ma_setpoint, motors[i].current_mA);
 8002a1e:	69fa      	ldr	r2, [r7, #28]
 8002a20:	4613      	mov	r3, r2
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	4413      	add	r3, r2
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	4a3b      	ldr	r2, [pc, #236]	; (8002b18 <vControlTimerCallback+0x340>)
 8002a2a:	1898      	adds	r0, r3, r2
 8002a2c:	4935      	ldr	r1, [pc, #212]	; (8002b04 <vControlTimerCallback+0x32c>)
 8002a2e:	69fa      	ldr	r2, [r7, #28]
 8002a30:	4613      	mov	r3, r2
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	4413      	add	r3, r2
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	440b      	add	r3, r1
 8002a3a:	331c      	adds	r3, #28
 8002a3c:	681c      	ldr	r4, [r3, #0]
 8002a3e:	4931      	ldr	r1, [pc, #196]	; (8002b04 <vControlTimerCallback+0x32c>)
 8002a40:	69fa      	ldr	r2, [r7, #28]
 8002a42:	4613      	mov	r3, r2
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	4413      	add	r3, r2
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	440b      	add	r3, r1
 8002a4c:	3318      	adds	r3, #24
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	461a      	mov	r2, r3
 8002a52:	4621      	mov	r1, r4
 8002a54:	f009 fc96 	bl	800c384 <calculate_pid>
 8002a58:	ed87 0a02 	vstr	s0, [r7, #8]
				// Only allow forward drive

				if(cmd > 0)
 8002a5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a68:	dd07      	ble.n	8002a7a <vControlTimerCallback+0x2a2>
				{
					drive_motor(i, cmd);
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	ed97 0a02 	vldr	s0, [r7, #8]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fc52 	bl	800231c <drive_motor>
			if(motors[i].current_ma_setpoint >= 0)
 8002a78:	e07c      	b.n	8002b74 <vControlTimerCallback+0x39c>
				}
				else
				{
					drive_motor(i, 0);
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8002b1c <vControlTimerCallback+0x344>
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff fc4a 	bl	800231c <drive_motor>
			if(motors[i].current_ma_setpoint >= 0)
 8002a88:	e074      	b.n	8002b74 <vControlTimerCallback+0x39c>
				}
			}
			else
			{
				// Flip direction of control and direction of setpoint
				float cmd = calculate_pid(&cur_params[i], -motors[i].current_ma_setpoint, motors[i].current_mA);
 8002a8a:	69fa      	ldr	r2, [r7, #28]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	4413      	add	r3, r2
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	4a20      	ldr	r2, [pc, #128]	; (8002b18 <vControlTimerCallback+0x340>)
 8002a96:	1898      	adds	r0, r3, r2
 8002a98:	491a      	ldr	r1, [pc, #104]	; (8002b04 <vControlTimerCallback+0x32c>)
 8002a9a:	69fa      	ldr	r2, [r7, #28]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	4413      	add	r3, r2
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	440b      	add	r3, r1
 8002aa6:	331c      	adds	r3, #28
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	425c      	negs	r4, r3
 8002aac:	4915      	ldr	r1, [pc, #84]	; (8002b04 <vControlTimerCallback+0x32c>)
 8002aae:	69fa      	ldr	r2, [r7, #28]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	4413      	add	r3, r2
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	440b      	add	r3, r1
 8002aba:	3318      	adds	r3, #24
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	4621      	mov	r1, r4
 8002ac2:	f009 fc5f 	bl	800c384 <calculate_pid>
 8002ac6:	ed87 0a03 	vstr	s0, [r7, #12]
				// Only allow reverse drive
				if(cmd < 0)
 8002aca:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ace:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad6:	d523      	bpl.n	8002b20 <vControlTimerCallback+0x348>
				{
					drive_motor(i, 0);
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8002b1c <vControlTimerCallback+0x344>
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff fc1b 	bl	800231c <drive_motor>
			if(motors[i].current_ma_setpoint >= 0)
 8002ae6:	e045      	b.n	8002b74 <vControlTimerCallback+0x39c>
 8002ae8:	66666666 	.word	0x66666666
 8002aec:	3fe66666 	.word	0x3fe66666
 8002af0:	33333333 	.word	0x33333333
 8002af4:	3fd33333 	.word	0x3fd33333
 8002af8:	20000f34 	.word	0x20000f34
 8002afc:	cccccccd 	.word	0xcccccccd
 8002b00:	20000f38 	.word	0x20000f38
 8002b04:	20000d8c 	.word	0x20000d8c
 8002b08:	40768000 	.word	0x40768000
 8002b0c:	20000d88 	.word	0x20000d88
 8002b10:	20000dec 	.word	0x20000dec
 8002b14:	20000e4c 	.word	0x20000e4c
 8002b18:	20000eac 	.word	0x20000eac
 8002b1c:	00000000 	.word	0x00000000
				}
				else
				{
					drive_motor(i, -cmd);
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b28:	eef1 7a67 	vneg.f32	s15, s15
 8002b2c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff fbf3 	bl	800231c <drive_motor>
			if(motors[i].current_ma_setpoint >= 0)
 8002b36:	e01d      	b.n	8002b74 <vControlTimerCallback+0x39c>
				}
			}
		} else if (control_type[i] == DUTY)
 8002b38:	4a2a      	ldr	r2, [pc, #168]	; (8002be4 <vControlTimerCallback+0x40c>)
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	d116      	bne.n	8002b74 <vControlTimerCallback+0x39c>
		{
			float cmd = motors[i].duty * PWM_PERIOD;
 8002b46:	4928      	ldr	r1, [pc, #160]	; (8002be8 <vControlTimerCallback+0x410>)
 8002b48:	69fa      	ldr	r2, [r7, #28]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	4413      	add	r3, r2
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	440b      	add	r3, r1
 8002b54:	330c      	adds	r3, #12
 8002b56:	edd3 7a00 	vldr	s15, [r3]
 8002b5a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002bec <vControlTimerCallback+0x414>
 8002b5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b62:	edc7 7a04 	vstr	s15, [r7, #16]
			drive_motor(i, cmd);
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	ed97 0a04 	vldr	s0, [r7, #16]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fbd4 	bl	800231c <drive_motor>
	for(i=0; i < NUMBER_MOTORS; i++)
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	3301      	adds	r3, #1
 8002b78:	61fb      	str	r3, [r7, #28]
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	f77f ae33 	ble.w	80027e8 <vControlTimerCallback+0x10>
		}// control type
	} // Loop through motors

	count++;
 8002b82:	4b1b      	ldr	r3, [pc, #108]	; (8002bf0 <vControlTimerCallback+0x418>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	3301      	adds	r3, #1
 8002b88:	4a19      	ldr	r2, [pc, #100]	; (8002bf0 <vControlTimerCallback+0x418>)
 8002b8a:	6013      	str	r3, [r2, #0]

	if(count % 8000 == 0)
 8002b8c:	4b18      	ldr	r3, [pc, #96]	; (8002bf0 <vControlTimerCallback+0x418>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	4b18      	ldr	r3, [pc, #96]	; (8002bf4 <vControlTimerCallback+0x41c>)
 8002b92:	fba3 1302 	umull	r1, r3, r3, r2
 8002b96:	0a5b      	lsrs	r3, r3, #9
 8002b98:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8002b9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d11a      	bne.n	8002bdc <vControlTimerCallback+0x404>
	{
		static bool dir = true;

		if(dir)
 8002ba6:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <vControlTimerCallback+0x420>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d004      	beq.n	8002bb8 <vControlTimerCallback+0x3e0>
		{
			motors[1].ticks_setpoint = 4200;
 8002bae:	4b0e      	ldr	r3, [pc, #56]	; (8002be8 <vControlTimerCallback+0x410>)
 8002bb0:	f241 0268 	movw	r2, #4200	; 0x1068
 8002bb4:	655a      	str	r2, [r3, #84]	; 0x54
 8002bb6:	e002      	b.n	8002bbe <vControlTimerCallback+0x3e6>
			//motors[1].duty = 0.5;
		}
		else
		{
			motors[1].ticks_setpoint = 0;
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <vControlTimerCallback+0x410>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	655a      	str	r2, [r3, #84]	; 0x54
			//motors[1].duty = -0.5;
		}
		dir = !dir;
 8002bbe:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <vControlTimerCallback+0x420>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	bf14      	ite	ne
 8002bc6:	2301      	movne	r3, #1
 8002bc8:	2300      	moveq	r3, #0
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	f083 0301 	eor.w	r3, r3, #1
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <vControlTimerCallback+0x420>)
 8002bda:	701a      	strb	r2, [r3, #0]
	}
 }
 8002bdc:	bf00      	nop
 8002bde:	3720      	adds	r7, #32
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bdb0      	pop	{r4, r5, r7, pc}
 8002be4:	20000d88 	.word	0x20000d88
 8002be8:	20000d8c 	.word	0x20000d8c
 8002bec:	461c4000 	.word	0x461c4000
 8002bf0:	20000f34 	.word	0x20000f34
 8002bf4:	10624dd3 	.word	0x10624dd3
 8002bf8:	20000004 	.word	0x20000004
 8002bfc:	00000000 	.word	0x00000000

08002c00 <motor_task_init>:

 void motor_task_init(void)
 {
 8002c00:	b5b0      	push	{r4, r5, r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af02      	add	r7, sp, #8
	 motion_primitive_init();
 8002c06:	f008 f8a7 	bl	800ad58 <motion_primitive_init>
	 precalc_inverse_trig();
 8002c0a:	f007 fd49 	bl	800a6a0 <precalc_inverse_trig>

	 motion_primitive_set_index(5);
 8002c0e:	2005      	movs	r0, #5
 8002c10:	f008 fb62 	bl	800b2d8 <motion_primitive_set_index>
	 control_type[0] = PROPRIOCEPTIVE_PRIMITIVE; // TODO default position
 8002c14:	4b98      	ldr	r3, [pc, #608]	; (8002e78 <motor_task_init+0x278>)
 8002c16:	2205      	movs	r2, #5
 8002c18:	701a      	strb	r2, [r3, #0]
	 control_type[1] = PROPRIOCEPTIVE_PRIMITIVE;
 8002c1a:	4b97      	ldr	r3, [pc, #604]	; (8002e78 <motor_task_init+0x278>)
 8002c1c:	2205      	movs	r2, #5
 8002c1e:	705a      	strb	r2, [r3, #1]

	 leg.thigh_length_m = 0.055;
 8002c20:	4b96      	ldr	r3, [pc, #600]	; (8002e7c <motor_task_init+0x27c>)
 8002c22:	4a97      	ldr	r2, [pc, #604]	; (8002e80 <motor_task_init+0x280>)
 8002c24:	601a      	str	r2, [r3, #0]
	 leg.calf_length_m = 0.065;
 8002c26:	4b95      	ldr	r3, [pc, #596]	; (8002e7c <motor_task_init+0x27c>)
 8002c28:	4a96      	ldr	r2, [pc, #600]	; (8002e84 <motor_task_init+0x284>)
 8002c2a:	605a      	str	r2, [r3, #4]
	 init_leg_precalcs(&leg);
 8002c2c:	4893      	ldr	r0, [pc, #588]	; (8002e7c <motor_task_init+0x27c>)
 8002c2e:	f007 ff41 	bl	800aab4 <init_leg_precalcs>

	 ic_params.gain_current_per_torque = 15.0; // 1.5A stall at 0.196Nm torque
 8002c32:	4b95      	ldr	r3, [pc, #596]	; (8002e88 <motor_task_init+0x288>)
 8002c34:	4a95      	ldr	r2, [pc, #596]	; (8002e8c <motor_task_init+0x28c>)
 8002c36:	601a      	str	r2, [r3, #0]
	 ic_params.c_eff_x = -0.2;
 8002c38:	4b93      	ldr	r3, [pc, #588]	; (8002e88 <motor_task_init+0x288>)
 8002c3a:	4a95      	ldr	r2, [pc, #596]	; (8002e90 <motor_task_init+0x290>)
 8002c3c:	609a      	str	r2, [r3, #8]
	 ic_params.k_eff_x = 8.0; // 2 lbs/ 1.5cm = ~600N/m
 8002c3e:	4b92      	ldr	r3, [pc, #584]	; (8002e88 <motor_task_init+0x288>)
 8002c40:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8002c44:	605a      	str	r2, [r3, #4]
	 ic_params.c_eff_y = -0.2;
 8002c46:	4b90      	ldr	r3, [pc, #576]	; (8002e88 <motor_task_init+0x288>)
 8002c48:	4a91      	ldr	r2, [pc, #580]	; (8002e90 <motor_task_init+0x290>)
 8002c4a:	611a      	str	r2, [r3, #16]
	 ic_params.k_eff_y = 8.0;
 8002c4c:	4b8e      	ldr	r3, [pc, #568]	; (8002e88 <motor_task_init+0x288>)
 8002c4e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8002c52:	60da      	str	r2, [r3, #12]
	 ic_params.gear_ratio = 150.0;
 8002c54:	4b8c      	ldr	r3, [pc, #560]	; (8002e88 <motor_task_init+0x288>)
 8002c56:	4a8f      	ldr	r2, [pc, #572]	; (8002e94 <motor_task_init+0x294>)
 8002c58:	615a      	str	r2, [r3, #20]

	 // position control params
	 pos_params[0].kp = 250.0;
 8002c5a:	4b8f      	ldr	r3, [pc, #572]	; (8002e98 <motor_task_init+0x298>)
 8002c5c:	4a8f      	ldr	r2, [pc, #572]	; (8002e9c <motor_task_init+0x29c>)
 8002c5e:	625a      	str	r2, [r3, #36]	; 0x24
	 pos_params[0].kd = -5000.0;
 8002c60:	4b8d      	ldr	r3, [pc, #564]	; (8002e98 <motor_task_init+0x298>)
 8002c62:	4a8f      	ldr	r2, [pc, #572]	; (8002ea0 <motor_task_init+0x2a0>)
 8002c64:	62da      	str	r2, [r3, #44]	; 0x2c
	 pos_params[0].cmd_max = 10000.0;
 8002c66:	4b8c      	ldr	r3, [pc, #560]	; (8002e98 <motor_task_init+0x298>)
 8002c68:	4a8e      	ldr	r2, [pc, #568]	; (8002ea4 <motor_task_init+0x2a4>)
 8002c6a:	619a      	str	r2, [r3, #24]
	 pos_params[0].cmd_min = -10000.0;
 8002c6c:	4b8a      	ldr	r3, [pc, #552]	; (8002e98 <motor_task_init+0x298>)
 8002c6e:	4a8e      	ldr	r2, [pc, #568]	; (8002ea8 <motor_task_init+0x2a8>)
 8002c70:	61da      	str	r2, [r3, #28]
	 pos_params[0].speed_alpha = 0.98;
 8002c72:	4b89      	ldr	r3, [pc, #548]	; (8002e98 <motor_task_init+0x298>)
 8002c74:	4a8d      	ldr	r2, [pc, #564]	; (8002eac <motor_task_init+0x2ac>)
 8002c76:	621a      	str	r2, [r3, #32]
	 pos_params[0].integral_max = 8.0e6; // Accumulates difference of ticks at 4kHz, must be big
 8002c78:	4b87      	ldr	r3, [pc, #540]	; (8002e98 <motor_task_init+0x298>)
 8002c7a:	4a8d      	ldr	r2, [pc, #564]	; (8002eb0 <motor_task_init+0x2b0>)
 8002c7c:	611a      	str	r2, [r3, #16]
	 pos_params[0].integral_min = -8.0e6; // Accumulates difference of ticks at 4kHz, must be big
 8002c7e:	4b86      	ldr	r3, [pc, #536]	; (8002e98 <motor_task_init+0x298>)
 8002c80:	4a8c      	ldr	r2, [pc, #560]	; (8002eb4 <motor_task_init+0x2b4>)
 8002c82:	615a      	str	r2, [r3, #20]
	 pos_params[0].ki = (0.4 * pos_params[0].cmd_max) / pos_params[0].integral_max; // Maximum is 40% of command
 8002c84:	4b84      	ldr	r3, [pc, #528]	; (8002e98 <motor_task_init+0x298>)
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fd fc05 	bl	8000498 <__aeabi_f2d>
 8002c8e:	a376      	add	r3, pc, #472	; (adr r3, 8002e68 <motor_task_init+0x268>)
 8002c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c94:	f7fd fc58 	bl	8000548 <__aeabi_dmul>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	460c      	mov	r4, r1
 8002c9c:	4625      	mov	r5, r4
 8002c9e:	461c      	mov	r4, r3
 8002ca0:	4b7d      	ldr	r3, [pc, #500]	; (8002e98 <motor_task_init+0x298>)
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fd fbf7 	bl	8000498 <__aeabi_f2d>
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	4620      	mov	r0, r4
 8002cb0:	4629      	mov	r1, r5
 8002cb2:	f7fd fd73 	bl	800079c <__aeabi_ddiv>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	460c      	mov	r4, r1
 8002cba:	4618      	mov	r0, r3
 8002cbc:	4621      	mov	r1, r4
 8002cbe:	f7fd ff3b 	bl	8000b38 <__aeabi_d2f>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	4b74      	ldr	r3, [pc, #464]	; (8002e98 <motor_task_init+0x298>)
 8002cc6:	629a      	str	r2, [r3, #40]	; 0x28

	 pos_params[1].kp = 250.0;
 8002cc8:	4b73      	ldr	r3, [pc, #460]	; (8002e98 <motor_task_init+0x298>)
 8002cca:	4a74      	ldr	r2, [pc, #464]	; (8002e9c <motor_task_init+0x29c>)
 8002ccc:	655a      	str	r2, [r3, #84]	; 0x54
	 pos_params[1].kd = -5000.0;
 8002cce:	4b72      	ldr	r3, [pc, #456]	; (8002e98 <motor_task_init+0x298>)
 8002cd0:	4a73      	ldr	r2, [pc, #460]	; (8002ea0 <motor_task_init+0x2a0>)
 8002cd2:	65da      	str	r2, [r3, #92]	; 0x5c
	 pos_params[1].cmd_max = 10000.0;
 8002cd4:	4b70      	ldr	r3, [pc, #448]	; (8002e98 <motor_task_init+0x298>)
 8002cd6:	4a73      	ldr	r2, [pc, #460]	; (8002ea4 <motor_task_init+0x2a4>)
 8002cd8:	649a      	str	r2, [r3, #72]	; 0x48
	 pos_params[1].cmd_min = -10000.0;
 8002cda:	4b6f      	ldr	r3, [pc, #444]	; (8002e98 <motor_task_init+0x298>)
 8002cdc:	4a72      	ldr	r2, [pc, #456]	; (8002ea8 <motor_task_init+0x2a8>)
 8002cde:	64da      	str	r2, [r3, #76]	; 0x4c
	 pos_params[1].speed_alpha = 0.98;
 8002ce0:	4b6d      	ldr	r3, [pc, #436]	; (8002e98 <motor_task_init+0x298>)
 8002ce2:	4a72      	ldr	r2, [pc, #456]	; (8002eac <motor_task_init+0x2ac>)
 8002ce4:	651a      	str	r2, [r3, #80]	; 0x50
	 pos_params[1].integral_max = 8.0e6; // Accumulates difference of ticks at 4kHz, must be big
 8002ce6:	4b6c      	ldr	r3, [pc, #432]	; (8002e98 <motor_task_init+0x298>)
 8002ce8:	4a71      	ldr	r2, [pc, #452]	; (8002eb0 <motor_task_init+0x2b0>)
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40
	 pos_params[1].integral_min = -8.0e6; // Accumulates difference of ticks at 4kHz, must be big
 8002cec:	4b6a      	ldr	r3, [pc, #424]	; (8002e98 <motor_task_init+0x298>)
 8002cee:	4a71      	ldr	r2, [pc, #452]	; (8002eb4 <motor_task_init+0x2b4>)
 8002cf0:	645a      	str	r2, [r3, #68]	; 0x44
	 pos_params[1].ki = (0.4 * pos_params[1].cmd_max) / pos_params[1].integral_max; // Maximum is 40% of command
 8002cf2:	4b69      	ldr	r3, [pc, #420]	; (8002e98 <motor_task_init+0x298>)
 8002cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd fbce 	bl	8000498 <__aeabi_f2d>
 8002cfc:	a35a      	add	r3, pc, #360	; (adr r3, 8002e68 <motor_task_init+0x268>)
 8002cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d02:	f7fd fc21 	bl	8000548 <__aeabi_dmul>
 8002d06:	4603      	mov	r3, r0
 8002d08:	460c      	mov	r4, r1
 8002d0a:	4625      	mov	r5, r4
 8002d0c:	461c      	mov	r4, r3
 8002d0e:	4b62      	ldr	r3, [pc, #392]	; (8002e98 <motor_task_init+0x298>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fd fbc0 	bl	8000498 <__aeabi_f2d>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4620      	mov	r0, r4
 8002d1e:	4629      	mov	r1, r5
 8002d20:	f7fd fd3c 	bl	800079c <__aeabi_ddiv>
 8002d24:	4603      	mov	r3, r0
 8002d26:	460c      	mov	r4, r1
 8002d28:	4618      	mov	r0, r3
 8002d2a:	4621      	mov	r1, r4
 8002d2c:	f7fd ff04 	bl	8000b38 <__aeabi_d2f>
 8002d30:	4602      	mov	r2, r0
 8002d32:	4b59      	ldr	r3, [pc, #356]	; (8002e98 <motor_task_init+0x298>)
 8002d34:	659a      	str	r2, [r3, #88]	; 0x58

	 // speed control params
	 speed_params[0].kp = 50.0;
 8002d36:	4b60      	ldr	r3, [pc, #384]	; (8002eb8 <motor_task_init+0x2b8>)
 8002d38:	4a60      	ldr	r2, [pc, #384]	; (8002ebc <motor_task_init+0x2bc>)
 8002d3a:	625a      	str	r2, [r3, #36]	; 0x24
	 speed_params[0].kd = -100.0;
 8002d3c:	4b5e      	ldr	r3, [pc, #376]	; (8002eb8 <motor_task_init+0x2b8>)
 8002d3e:	4a60      	ldr	r2, [pc, #384]	; (8002ec0 <motor_task_init+0x2c0>)
 8002d40:	62da      	str	r2, [r3, #44]	; 0x2c
	 speed_params[0].cmd_max = 10000.0;
 8002d42:	4b5d      	ldr	r3, [pc, #372]	; (8002eb8 <motor_task_init+0x2b8>)
 8002d44:	4a57      	ldr	r2, [pc, #348]	; (8002ea4 <motor_task_init+0x2a4>)
 8002d46:	619a      	str	r2, [r3, #24]
	 speed_params[0].cmd_min = -10000.0;
 8002d48:	4b5b      	ldr	r3, [pc, #364]	; (8002eb8 <motor_task_init+0x2b8>)
 8002d4a:	4a57      	ldr	r2, [pc, #348]	; (8002ea8 <motor_task_init+0x2a8>)
 8002d4c:	61da      	str	r2, [r3, #28]
	 speed_params[0].speed_alpha = 0.95;
 8002d4e:	4b5a      	ldr	r3, [pc, #360]	; (8002eb8 <motor_task_init+0x2b8>)
 8002d50:	4a5c      	ldr	r2, [pc, #368]	; (8002ec4 <motor_task_init+0x2c4>)
 8002d52:	621a      	str	r2, [r3, #32]
	 speed_params[0].integral_max = 8.0e6; // Accumulates difference of ticks at 4kHz, must be big
 8002d54:	4b58      	ldr	r3, [pc, #352]	; (8002eb8 <motor_task_init+0x2b8>)
 8002d56:	4a56      	ldr	r2, [pc, #344]	; (8002eb0 <motor_task_init+0x2b0>)
 8002d58:	611a      	str	r2, [r3, #16]
	 speed_params[0].integral_min = -8.0e6; // Accumulates difference of ticks at 4kHz, must be big
 8002d5a:	4b57      	ldr	r3, [pc, #348]	; (8002eb8 <motor_task_init+0x2b8>)
 8002d5c:	4a55      	ldr	r2, [pc, #340]	; (8002eb4 <motor_task_init+0x2b4>)
 8002d5e:	615a      	str	r2, [r3, #20]
	 speed_params[0].ki = 0.0;
 8002d60:	4b55      	ldr	r3, [pc, #340]	; (8002eb8 <motor_task_init+0x2b8>)
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	629a      	str	r2, [r3, #40]	; 0x28

 	 speed_params[1].kp = 50.0;
 8002d68:	4b53      	ldr	r3, [pc, #332]	; (8002eb8 <motor_task_init+0x2b8>)
 8002d6a:	4a54      	ldr	r2, [pc, #336]	; (8002ebc <motor_task_init+0x2bc>)
 8002d6c:	655a      	str	r2, [r3, #84]	; 0x54
	 speed_params[1].kd = -100.0;
 8002d6e:	4b52      	ldr	r3, [pc, #328]	; (8002eb8 <motor_task_init+0x2b8>)
 8002d70:	4a53      	ldr	r2, [pc, #332]	; (8002ec0 <motor_task_init+0x2c0>)
 8002d72:	65da      	str	r2, [r3, #92]	; 0x5c
	 speed_params[1].cmd_max = 10000.0;
 8002d74:	4b50      	ldr	r3, [pc, #320]	; (8002eb8 <motor_task_init+0x2b8>)
 8002d76:	4a4b      	ldr	r2, [pc, #300]	; (8002ea4 <motor_task_init+0x2a4>)
 8002d78:	649a      	str	r2, [r3, #72]	; 0x48
	 speed_params[1].cmd_min = -10000.0;
 8002d7a:	4b4f      	ldr	r3, [pc, #316]	; (8002eb8 <motor_task_init+0x2b8>)
 8002d7c:	4a4a      	ldr	r2, [pc, #296]	; (8002ea8 <motor_task_init+0x2a8>)
 8002d7e:	64da      	str	r2, [r3, #76]	; 0x4c
	 speed_params[1].speed_alpha = 0.95;
 8002d80:	4b4d      	ldr	r3, [pc, #308]	; (8002eb8 <motor_task_init+0x2b8>)
 8002d82:	4a50      	ldr	r2, [pc, #320]	; (8002ec4 <motor_task_init+0x2c4>)
 8002d84:	651a      	str	r2, [r3, #80]	; 0x50
	 speed_params[1].integral_max = 8.0e6; // Accumulates difference of ticks at 4kHz, must be big
 8002d86:	4b4c      	ldr	r3, [pc, #304]	; (8002eb8 <motor_task_init+0x2b8>)
 8002d88:	4a49      	ldr	r2, [pc, #292]	; (8002eb0 <motor_task_init+0x2b0>)
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40
	 speed_params[1].integral_min = -8.0e6; // Accumulates difference of ticks at 4kHz, must be big
 8002d8c:	4b4a      	ldr	r3, [pc, #296]	; (8002eb8 <motor_task_init+0x2b8>)
 8002d8e:	4a49      	ldr	r2, [pc, #292]	; (8002eb4 <motor_task_init+0x2b4>)
 8002d90:	645a      	str	r2, [r3, #68]	; 0x44
	 speed_params[1].ki = 0.0;
 8002d92:	4b49      	ldr	r3, [pc, #292]	; (8002eb8 <motor_task_init+0x2b8>)
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	659a      	str	r2, [r3, #88]	; 0x58

	 // current control params
	 cur_params[0].kp = 3.0;
 8002d9a:	4b4b      	ldr	r3, [pc, #300]	; (8002ec8 <motor_task_init+0x2c8>)
 8002d9c:	4a4b      	ldr	r2, [pc, #300]	; (8002ecc <motor_task_init+0x2cc>)
 8002d9e:	625a      	str	r2, [r3, #36]	; 0x24
	 cur_params[0].kd = 0.0;
 8002da0:	4b49      	ldr	r3, [pc, #292]	; (8002ec8 <motor_task_init+0x2c8>)
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	62da      	str	r2, [r3, #44]	; 0x2c
	 cur_params[0].cmd_max = 10000.0;
 8002da8:	4b47      	ldr	r3, [pc, #284]	; (8002ec8 <motor_task_init+0x2c8>)
 8002daa:	4a3e      	ldr	r2, [pc, #248]	; (8002ea4 <motor_task_init+0x2a4>)
 8002dac:	619a      	str	r2, [r3, #24]
	 cur_params[0].cmd_min = -10000.0;
 8002dae:	4b46      	ldr	r3, [pc, #280]	; (8002ec8 <motor_task_init+0x2c8>)
 8002db0:	4a3d      	ldr	r2, [pc, #244]	; (8002ea8 <motor_task_init+0x2a8>)
 8002db2:	61da      	str	r2, [r3, #28]
	 cur_params[0].speed_alpha = 0.98;
 8002db4:	4b44      	ldr	r3, [pc, #272]	; (8002ec8 <motor_task_init+0x2c8>)
 8002db6:	4a3d      	ldr	r2, [pc, #244]	; (8002eac <motor_task_init+0x2ac>)
 8002db8:	621a      	str	r2, [r3, #32]
	 cur_params[0].integral_max = 34000.0; // Accumulates difference of ticks at 4kHz, must be big
 8002dba:	4b43      	ldr	r3, [pc, #268]	; (8002ec8 <motor_task_init+0x2c8>)
 8002dbc:	4a44      	ldr	r2, [pc, #272]	; (8002ed0 <motor_task_init+0x2d0>)
 8002dbe:	611a      	str	r2, [r3, #16]
	 cur_params[0].integral_min = -34000.0; // Accumulates difference of ticks at 4kHz, must be big
 8002dc0:	4b41      	ldr	r3, [pc, #260]	; (8002ec8 <motor_task_init+0x2c8>)
 8002dc2:	4a44      	ldr	r2, [pc, #272]	; (8002ed4 <motor_task_init+0x2d4>)
 8002dc4:	615a      	str	r2, [r3, #20]
	 cur_params[0].ki = (0.7 * cur_params[0].cmd_max) / cur_params[0].integral_max;
 8002dc6:	4b40      	ldr	r3, [pc, #256]	; (8002ec8 <motor_task_init+0x2c8>)
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fd fb64 	bl	8000498 <__aeabi_f2d>
 8002dd0:	a327      	add	r3, pc, #156	; (adr r3, 8002e70 <motor_task_init+0x270>)
 8002dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd6:	f7fd fbb7 	bl	8000548 <__aeabi_dmul>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	460c      	mov	r4, r1
 8002dde:	4625      	mov	r5, r4
 8002de0:	461c      	mov	r4, r3
 8002de2:	4b39      	ldr	r3, [pc, #228]	; (8002ec8 <motor_task_init+0x2c8>)
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fd fb56 	bl	8000498 <__aeabi_f2d>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4620      	mov	r0, r4
 8002df2:	4629      	mov	r1, r5
 8002df4:	f7fd fcd2 	bl	800079c <__aeabi_ddiv>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	460c      	mov	r4, r1
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	4621      	mov	r1, r4
 8002e00:	f7fd fe9a 	bl	8000b38 <__aeabi_d2f>
 8002e04:	4602      	mov	r2, r0
 8002e06:	4b30      	ldr	r3, [pc, #192]	; (8002ec8 <motor_task_init+0x2c8>)
 8002e08:	629a      	str	r2, [r3, #40]	; 0x28

	 cur_params[1].kp = cur_params[0].kp;
 8002e0a:	4b2f      	ldr	r3, [pc, #188]	; (8002ec8 <motor_task_init+0x2c8>)
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	4a2e      	ldr	r2, [pc, #184]	; (8002ec8 <motor_task_init+0x2c8>)
 8002e10:	6553      	str	r3, [r2, #84]	; 0x54
	 cur_params[1].kd = cur_params[0].kd;
 8002e12:	4b2d      	ldr	r3, [pc, #180]	; (8002ec8 <motor_task_init+0x2c8>)
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	4a2c      	ldr	r2, [pc, #176]	; (8002ec8 <motor_task_init+0x2c8>)
 8002e18:	65d3      	str	r3, [r2, #92]	; 0x5c
	 cur_params[1].cmd_max = cur_params[0].cmd_max;
 8002e1a:	4b2b      	ldr	r3, [pc, #172]	; (8002ec8 <motor_task_init+0x2c8>)
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	4a2a      	ldr	r2, [pc, #168]	; (8002ec8 <motor_task_init+0x2c8>)
 8002e20:	6493      	str	r3, [r2, #72]	; 0x48
	 cur_params[1].cmd_min = cur_params[0].cmd_min;
 8002e22:	4b29      	ldr	r3, [pc, #164]	; (8002ec8 <motor_task_init+0x2c8>)
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	4a28      	ldr	r2, [pc, #160]	; (8002ec8 <motor_task_init+0x2c8>)
 8002e28:	64d3      	str	r3, [r2, #76]	; 0x4c
	 cur_params[1].speed_alpha = cur_params[0].speed_alpha;
 8002e2a:	4b27      	ldr	r3, [pc, #156]	; (8002ec8 <motor_task_init+0x2c8>)
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	4a26      	ldr	r2, [pc, #152]	; (8002ec8 <motor_task_init+0x2c8>)
 8002e30:	6513      	str	r3, [r2, #80]	; 0x50
	 cur_params[1].integral_max = cur_params[0].integral_max;
 8002e32:	4b25      	ldr	r3, [pc, #148]	; (8002ec8 <motor_task_init+0x2c8>)
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	4a24      	ldr	r2, [pc, #144]	; (8002ec8 <motor_task_init+0x2c8>)
 8002e38:	6413      	str	r3, [r2, #64]	; 0x40
	 cur_params[1].integral_min = cur_params[0].integral_min;
 8002e3a:	4b23      	ldr	r3, [pc, #140]	; (8002ec8 <motor_task_init+0x2c8>)
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	4a22      	ldr	r2, [pc, #136]	; (8002ec8 <motor_task_init+0x2c8>)
 8002e40:	6453      	str	r3, [r2, #68]	; 0x44
	 cur_params[1].ki = cur_params[0].ki;
 8002e42:	4b21      	ldr	r3, [pc, #132]	; (8002ec8 <motor_task_init+0x2c8>)
 8002e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e46:	4a20      	ldr	r2, [pc, #128]	; (8002ec8 <motor_task_init+0x2c8>)
 8002e48:	6593      	str	r3, [r2, #88]	; 0x58

	 motors[0].reverse_direction = true;
 8002e4a:	4b23      	ldr	r3, [pc, #140]	; (8002ed8 <motor_task_init+0x2d8>)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	 motors[0].duty = 0.0;
 8002e52:	4b21      	ldr	r3, [pc, #132]	; (8002ed8 <motor_task_init+0x2d8>)
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	60da      	str	r2, [r3, #12]
	 motors[0].ticks_per_rev = TICKS_PER_REVOLUTION_DEFAULT;
 8002e5a:	4b1f      	ldr	r3, [pc, #124]	; (8002ed8 <motor_task_init+0x2d8>)
 8002e5c:	f241 0268 	movw	r2, #4200	; 0x1068
 8002e60:	629a      	str	r2, [r3, #40]	; 0x28
 8002e62:	e03b      	b.n	8002edc <motor_task_init+0x2dc>
 8002e64:	f3af 8000 	nop.w
 8002e68:	9999999a 	.word	0x9999999a
 8002e6c:	3fd99999 	.word	0x3fd99999
 8002e70:	66666666 	.word	0x66666666
 8002e74:	3fe66666 	.word	0x3fe66666
 8002e78:	20000d88 	.word	0x20000d88
 8002e7c:	20000f24 	.word	0x20000f24
 8002e80:	3d6147ae 	.word	0x3d6147ae
 8002e84:	3d851eb8 	.word	0x3d851eb8
 8002e88:	20000f0c 	.word	0x20000f0c
 8002e8c:	41700000 	.word	0x41700000
 8002e90:	be4ccccd 	.word	0xbe4ccccd
 8002e94:	43160000 	.word	0x43160000
 8002e98:	20000dec 	.word	0x20000dec
 8002e9c:	437a0000 	.word	0x437a0000
 8002ea0:	c59c4000 	.word	0xc59c4000
 8002ea4:	461c4000 	.word	0x461c4000
 8002ea8:	c61c4000 	.word	0xc61c4000
 8002eac:	3f7ae148 	.word	0x3f7ae148
 8002eb0:	4af42400 	.word	0x4af42400
 8002eb4:	caf42400 	.word	0xcaf42400
 8002eb8:	20000e4c 	.word	0x20000e4c
 8002ebc:	42480000 	.word	0x42480000
 8002ec0:	c2c80000 	.word	0xc2c80000
 8002ec4:	3f733333 	.word	0x3f733333
 8002ec8:	20000eac 	.word	0x20000eac
 8002ecc:	40400000 	.word	0x40400000
 8002ed0:	4704d000 	.word	0x4704d000
 8002ed4:	c704d000 	.word	0xc704d000
 8002ed8:	20000d8c 	.word	0x20000d8c
	 motors[1].reverse_direction = false;
 8002edc:	4b3a      	ldr	r3, [pc, #232]	; (8002fc8 <motor_task_init+0x3c8>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	 motors[1].duty = 0.0;
 8002ee4:	4b38      	ldr	r3, [pc, #224]	; (8002fc8 <motor_task_init+0x3c8>)
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	63da      	str	r2, [r3, #60]	; 0x3c
	 motors[1].ticks_per_rev = TICKS_PER_REVOLUTION_DEFAULT;
 8002eec:	4b36      	ldr	r3, [pc, #216]	; (8002fc8 <motor_task_init+0x3c8>)
 8002eee:	f241 0268 	movw	r2, #4200	; 0x1068
 8002ef2:	659a      	str	r2, [r3, #88]	; 0x58

	 motor_tele_timer_handle = xTimerCreate(
 8002ef4:	4b35      	ldr	r3, [pc, #212]	; (8002fcc <motor_task_init+0x3cc>)
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	2300      	movs	r3, #0
 8002efa:	2201      	movs	r2, #1
 8002efc:	2132      	movs	r1, #50	; 0x32
 8002efe:	4834      	ldr	r0, [pc, #208]	; (8002fd0 <motor_task_init+0x3d0>)
 8002f00:	f006 fa8a 	bl	8009418 <xTimerCreate>
 8002f04:	4602      	mov	r2, r0
 8002f06:	4b33      	ldr	r3, [pc, #204]	; (8002fd4 <motor_task_init+0x3d4>)
 8002f08:	601a      	str	r2, [r3, #0]
	 		 pdMS_TO_TICKS(50),
	 		 pdTRUE,
	 		 NULL,
	 		 vMotorTelemetryTimerCallback);

	 if(motor_tele_timer_handle)
 8002f0a:	4b32      	ldr	r3, [pc, #200]	; (8002fd4 <motor_task_init+0x3d4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00b      	beq.n	8002f2a <motor_task_init+0x32a>
	 {
	 	 xTimerStart(motor_tele_timer_handle, 10);
 8002f12:	4b30      	ldr	r3, [pc, #192]	; (8002fd4 <motor_task_init+0x3d4>)
 8002f14:	681c      	ldr	r4, [r3, #0]
 8002f16:	f005 fd33 	bl	8008980 <xTaskGetTickCount>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	230a      	movs	r3, #10
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	2300      	movs	r3, #0
 8002f22:	2101      	movs	r1, #1
 8002f24:	4620      	mov	r0, r4
 8002f26:	f006 fad3 	bl	80094d0 <xTimerGenericCommand>
	 }

	 // Enable PWM channels for lights and motor driving
	 TIM2->CR1 |= TIM_CR1_CEN;
 8002f2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	6013      	str	r3, [r2, #0]
	 TIM13->CR1 |= TIM_CR1_CEN;
 8002f3a:	4b27      	ldr	r3, [pc, #156]	; (8002fd8 <motor_task_init+0x3d8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a26      	ldr	r2, [pc, #152]	; (8002fd8 <motor_task_init+0x3d8>)
 8002f40:	f043 0301 	orr.w	r3, r3, #1
 8002f44:	6013      	str	r3, [r2, #0]
	 TIM14->CR1 |= TIM_CR1_CEN;
 8002f46:	4b25      	ldr	r3, [pc, #148]	; (8002fdc <motor_task_init+0x3dc>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a24      	ldr	r2, [pc, #144]	; (8002fdc <motor_task_init+0x3dc>)
 8002f4c:	f043 0301 	orr.w	r3, r3, #1
 8002f50:	6013      	str	r3, [r2, #0]
	 TIM4->CR1 |= TIM_CR1_CEN; // Control loop timer
 8002f52:	4b23      	ldr	r3, [pc, #140]	; (8002fe0 <motor_task_init+0x3e0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a22      	ldr	r2, [pc, #136]	; (8002fe0 <motor_task_init+0x3e0>)
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	6013      	str	r3, [r2, #0]

	 TIM2->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E);
 8002f5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f68:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8002f6c:	f043 0311 	orr.w	r3, r3, #17
 8002f70:	6213      	str	r3, [r2, #32]
	 TIM13->CCER |= (TIM_CCER_CC1E);
 8002f72:	4b19      	ldr	r3, [pc, #100]	; (8002fd8 <motor_task_init+0x3d8>)
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	4a18      	ldr	r2, [pc, #96]	; (8002fd8 <motor_task_init+0x3d8>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	6213      	str	r3, [r2, #32]
	 TIM14->CCER |= (TIM_CCER_CC1E);
 8002f7e:	4b17      	ldr	r3, [pc, #92]	; (8002fdc <motor_task_init+0x3dc>)
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	4a16      	ldr	r2, [pc, #88]	; (8002fdc <motor_task_init+0x3dc>)
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	6213      	str	r3, [r2, #32]
	 TIM4->CCER |= (TIM_CCER_CC1E);
 8002f8a:	4b15      	ldr	r3, [pc, #84]	; (8002fe0 <motor_task_init+0x3e0>)
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	4a14      	ldr	r2, [pc, #80]	; (8002fe0 <motor_task_init+0x3e0>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	6213      	str	r3, [r2, #32]

	 TIM4->DIER |= (TIM_DIER_CC1IE);
 8002f96:	4b12      	ldr	r3, [pc, #72]	; (8002fe0 <motor_task_init+0x3e0>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	4a11      	ldr	r2, [pc, #68]	; (8002fe0 <motor_task_init+0x3e0>)
 8002f9c:	f043 0302 	orr.w	r3, r3, #2
 8002fa0:	60d3      	str	r3, [r2, #12]

	 // Enable encoder timers
	 TIM1->CR1 |= TIM_CR1_CEN;
 8002fa2:	4b10      	ldr	r3, [pc, #64]	; (8002fe4 <motor_task_init+0x3e4>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a0f      	ldr	r2, [pc, #60]	; (8002fe4 <motor_task_init+0x3e4>)
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	6013      	str	r3, [r2, #0]
	 TIM3->CR1 |= TIM_CR1_CEN;
 8002fae:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <motor_task_init+0x3e8>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a0d      	ldr	r2, [pc, #52]	; (8002fe8 <motor_task_init+0x3e8>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	6013      	str	r3, [r2, #0]

	  vTaskDelay(pdMS_TO_TICKS(2500));
 8002fba:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002fbe:	f005 fb9d 	bl	80086fc <vTaskDelay>
 }
 8002fc2:	bf00      	nop
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bdb0      	pop	{r4, r5, r7, pc}
 8002fc8:	20000d8c 	.word	0x20000d8c
 8002fcc:	080024bd 	.word	0x080024bd
 8002fd0:	0800d408 	.word	0x0800d408
 8002fd4:	20000d84 	.word	0x20000d84
 8002fd8:	40001c00 	.word	0x40001c00
 8002fdc:	40002000 	.word	0x40002000
 8002fe0:	40000800 	.word	0x40000800
 8002fe4:	40010000 	.word	0x40010000
 8002fe8:	40000400 	.word	0x40000400

08002fec <motor_task>:

 void motor_task(void)
 {
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
	 vControlTimerCallback();
 8002ff0:	f7ff fbf2 	bl	80027d8 <vControlTimerCallback>
 }
 8002ff4:	bf00      	nop
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <set_control_mode>:
 *
 *	\param mode The controller mode
 *	\param index The motor index
 */
 void set_control_mode(CONTROL_TYPE mode, uint8_t index)
 {
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	460a      	mov	r2, r1
 8003002:	71fb      	strb	r3, [r7, #7]
 8003004:	4613      	mov	r3, r2
 8003006:	71bb      	strb	r3, [r7, #6]
	if(index >= NUMBER_MOTORS)
 8003008:	79bb      	ldrb	r3, [r7, #6]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d804      	bhi.n	8003018 <set_control_mode+0x20>
	{
		return;
	}
	control_type[index] = mode;
 800300e:	79bb      	ldrb	r3, [r7, #6]
 8003010:	4904      	ldr	r1, [pc, #16]	; (8003024 <set_control_mode+0x2c>)
 8003012:	79fa      	ldrb	r2, [r7, #7]
 8003014:	54ca      	strb	r2, [r1, r3]
 8003016:	e000      	b.n	800301a <set_control_mode+0x22>
		return;
 8003018:	bf00      	nop
 }
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	20000d88 	.word	0x20000d88

08003028 <set_motor_position>:
 *
 *	\param rotations_deg The desired position
 *	\param index The motor index
 */
 void set_motor_position(float rotations_deg, uint8_t index)
 {
 8003028:	b5b0      	push	{r4, r5, r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003032:	4603      	mov	r3, r0
 8003034:	70fb      	strb	r3, [r7, #3]
	if(index >= NUMBER_MOTORS)
 8003036:	78fb      	ldrb	r3, [r7, #3]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d838      	bhi.n	80030ae <set_motor_position+0x86>
	{
		return;
	}
	motors[index].desired_position_deg = rotations_deg;
 800303c:	78fa      	ldrb	r2, [r7, #3]
 800303e:	491e      	ldr	r1, [pc, #120]	; (80030b8 <set_motor_position+0x90>)
 8003040:	4613      	mov	r3, r2
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4413      	add	r3, r2
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	440b      	add	r3, r1
 800304a:	3304      	adds	r3, #4
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	601a      	str	r2, [r3, #0]
	motors[index].ticks_setpoint = (int32_t) (motors[index].ticks_per_rev) * (rotations_deg / 360.0);
 8003050:	78fa      	ldrb	r2, [r7, #3]
 8003052:	4919      	ldr	r1, [pc, #100]	; (80030b8 <set_motor_position+0x90>)
 8003054:	4613      	mov	r3, r2
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	4413      	add	r3, r2
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	440b      	add	r3, r1
 800305e:	3328      	adds	r3, #40	; 0x28
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f7fd fa06 	bl	8000474 <__aeabi_i2d>
 8003068:	4604      	mov	r4, r0
 800306a:	460d      	mov	r5, r1
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7fd fa13 	bl	8000498 <__aeabi_f2d>
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	4b11      	ldr	r3, [pc, #68]	; (80030bc <set_motor_position+0x94>)
 8003078:	f7fd fb90 	bl	800079c <__aeabi_ddiv>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4620      	mov	r0, r4
 8003082:	4629      	mov	r1, r5
 8003084:	f7fd fa60 	bl	8000548 <__aeabi_dmul>
 8003088:	4603      	mov	r3, r0
 800308a:	460c      	mov	r4, r1
 800308c:	461a      	mov	r2, r3
 800308e:	4623      	mov	r3, r4
 8003090:	78fc      	ldrb	r4, [r7, #3]
 8003092:	4610      	mov	r0, r2
 8003094:	4619      	mov	r1, r3
 8003096:	f7fd fd07 	bl	8000aa8 <__aeabi_d2iz>
 800309a:	4601      	mov	r1, r0
 800309c:	4a06      	ldr	r2, [pc, #24]	; (80030b8 <set_motor_position+0x90>)
 800309e:	4623      	mov	r3, r4
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	4423      	add	r3, r4
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	4413      	add	r3, r2
 80030a8:	3324      	adds	r3, #36	; 0x24
 80030aa:	6019      	str	r1, [r3, #0]
 80030ac:	e000      	b.n	80030b0 <set_motor_position+0x88>
		return;
 80030ae:	bf00      	nop
 }
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bdb0      	pop	{r4, r5, r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000d8c 	.word	0x20000d8c
 80030bc:	40768000 	.word	0x40768000

080030c0 <get_motor_position>:
 *	\brief Gets the motor current position
 *
 *	\param index The motor index
 */
 float get_motor_position(uint8_t index)
 {
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	71fb      	strb	r3, [r7, #7]
	if(index >= NUMBER_MOTORS)
 80030ca:	79fb      	ldrb	r3, [r7, #7]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d902      	bls.n	80030d6 <get_motor_position+0x16>
	{
		return 0.0;
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	e030      	b.n	8003138 <get_motor_position+0x78>
	}
	motors[index].current_position_deg = ((float) motors[index].ticks_count / (float) motors[index].ticks_per_rev) * 360.0;
 80030d6:	79fa      	ldrb	r2, [r7, #7]
 80030d8:	491c      	ldr	r1, [pc, #112]	; (800314c <get_motor_position+0x8c>)
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	440b      	add	r3, r1
 80030e4:	3320      	adds	r3, #32
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	ee07 3a90 	vmov	s15, r3
 80030ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80030f0:	79fa      	ldrb	r2, [r7, #7]
 80030f2:	4916      	ldr	r1, [pc, #88]	; (800314c <get_motor_position+0x8c>)
 80030f4:	4613      	mov	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	4413      	add	r3, r2
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	440b      	add	r3, r1
 80030fe:	3328      	adds	r3, #40	; 0x28
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	ee07 3a90 	vmov	s15, r3
 8003106:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800310a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800310e:	79fa      	ldrb	r2, [r7, #7]
 8003110:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003150 <get_motor_position+0x90>
 8003114:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003118:	490c      	ldr	r1, [pc, #48]	; (800314c <get_motor_position+0x8c>)
 800311a:	4613      	mov	r3, r2
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	4413      	add	r3, r2
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	440b      	add	r3, r1
 8003124:	edc3 7a00 	vstr	s15, [r3]
	return motors[index].current_position_deg;
 8003128:	79fa      	ldrb	r2, [r7, #7]
 800312a:	4908      	ldr	r1, [pc, #32]	; (800314c <get_motor_position+0x8c>)
 800312c:	4613      	mov	r3, r2
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	4413      	add	r3, r2
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	440b      	add	r3, r1
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	ee07 3a90 	vmov	s15, r3
 }
 800313c:	eeb0 0a67 	vmov.f32	s0, s15
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	20000d8c 	.word	0x20000d8c
 8003150:	43b40000 	.word	0x43b40000

08003154 <set_motor_speed>:
 *
 *	\param speed The desired speed TODO units?
 *	\param index The motor index
 */
 void set_motor_speed(int32_t speed, uint8_t index)
 {
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	70fb      	strb	r3, [r7, #3]
	if(index >= NUMBER_MOTORS)
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d80a      	bhi.n	800317c <set_motor_speed+0x28>
	{
		return;
	}
	motors[index].speed_setpoint = speed;
 8003166:	78fa      	ldrb	r2, [r7, #3]
 8003168:	4907      	ldr	r1, [pc, #28]	; (8003188 <set_motor_speed+0x34>)
 800316a:	4613      	mov	r3, r2
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	4413      	add	r3, r2
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	440b      	add	r3, r1
 8003174:	3314      	adds	r3, #20
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	e000      	b.n	800317e <set_motor_speed+0x2a>
		return;
 800317c:	bf00      	nop
 }
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	20000d8c 	.word	0x20000d8c

0800318c <set_motor_duty>:
 *
 *	\param speed The duty [-1,1]
 *	\param index The motor index
 */
 void set_motor_duty(float duty, uint8_t index)
 {
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	ed87 0a01 	vstr	s0, [r7, #4]
 8003196:	4603      	mov	r3, r0
 8003198:	70fb      	strb	r3, [r7, #3]
	if(index >= NUMBER_MOTORS)
 800319a:	78fb      	ldrb	r3, [r7, #3]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d821      	bhi.n	80031e4 <set_motor_duty+0x58>
	{
		return;
	}
	if(duty > 1.0){duty = 1.0;}
 80031a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80031a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b0:	dd02      	ble.n	80031b8 <set_motor_duty+0x2c>
 80031b2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80031b6:	607b      	str	r3, [r7, #4]
	if(duty < -1.0){duty = -1.0;}
 80031b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80031bc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80031c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c8:	d501      	bpl.n	80031ce <set_motor_duty+0x42>
 80031ca:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <set_motor_duty+0x64>)
 80031cc:	607b      	str	r3, [r7, #4]

	motors[index].duty = duty;
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	4908      	ldr	r1, [pc, #32]	; (80031f4 <set_motor_duty+0x68>)
 80031d2:	4613      	mov	r3, r2
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	4413      	add	r3, r2
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	440b      	add	r3, r1
 80031dc:	330c      	adds	r3, #12
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	e000      	b.n	80031e6 <set_motor_duty+0x5a>
		return;
 80031e4:	bf00      	nop
 }
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	bf800000 	.word	0xbf800000
 80031f4:	20000d8c 	.word	0x20000d8c

080031f8 <set_control_params_kp_min_max>:
 *  \param alpha The speed filter parameter
 *  \param cmd_min The minimum command scaled to [0-1] of pwm period
 *  \param cmd_max The maximum command scaled to [0-1] of pwm period
 */
 void set_control_params_kp_min_max(uint8_t index, uint8_t ctrl_index, float kp, float kd, float alpha, float cmd_min, float cmd_max)
 {
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	4603      	mov	r3, r0
 8003200:	460a      	mov	r2, r1
 8003202:	ed87 0a04 	vstr	s0, [r7, #16]
 8003206:	edc7 0a03 	vstr	s1, [r7, #12]
 800320a:	ed87 1a02 	vstr	s2, [r7, #8]
 800320e:	edc7 1a01 	vstr	s3, [r7, #4]
 8003212:	ed87 2a00 	vstr	s4, [r7]
 8003216:	75fb      	strb	r3, [r7, #23]
 8003218:	4613      	mov	r3, r2
 800321a:	75bb      	strb	r3, [r7, #22]
	if(index >= NUMBER_MOTORS)
 800321c:	7dfb      	ldrb	r3, [r7, #23]
 800321e:	2b01      	cmp	r3, #1
 8003220:	f200 80d0 	bhi.w	80033c4 <set_control_params_kp_min_max+0x1cc>
	{
		return;
	}
	if(ctrl_index > 2)
 8003224:	7dbb      	ldrb	r3, [r7, #22]
 8003226:	2b02      	cmp	r3, #2
 8003228:	f200 80ce 	bhi.w	80033c8 <set_control_params_kp_min_max+0x1d0>
	{
		return;
	}

	if(ctrl_index == 0)
 800322c:	7dbb      	ldrb	r3, [r7, #22]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d140      	bne.n	80032b4 <set_control_params_kp_min_max+0xbc>
	{
		pos_params[index].kp = kp;
 8003232:	7dfa      	ldrb	r2, [r7, #23]
 8003234:	4967      	ldr	r1, [pc, #412]	; (80033d4 <set_control_params_kp_min_max+0x1dc>)
 8003236:	4613      	mov	r3, r2
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	4413      	add	r3, r2
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	440b      	add	r3, r1
 8003240:	3324      	adds	r3, #36	; 0x24
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	601a      	str	r2, [r3, #0]
		pos_params[index].kd = kd;
 8003246:	7dfa      	ldrb	r2, [r7, #23]
 8003248:	4962      	ldr	r1, [pc, #392]	; (80033d4 <set_control_params_kp_min_max+0x1dc>)
 800324a:	4613      	mov	r3, r2
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	4413      	add	r3, r2
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	440b      	add	r3, r1
 8003254:	332c      	adds	r3, #44	; 0x2c
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	601a      	str	r2, [r3, #0]
		pos_params[index].cmd_max = cmd_max * PWM_PERIOD;
 800325a:	7dfa      	ldrb	r2, [r7, #23]
 800325c:	edd7 7a00 	vldr	s15, [r7]
 8003260:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80033d8 <set_control_params_kp_min_max+0x1e0>
 8003264:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003268:	495a      	ldr	r1, [pc, #360]	; (80033d4 <set_control_params_kp_min_max+0x1dc>)
 800326a:	4613      	mov	r3, r2
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	4413      	add	r3, r2
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	440b      	add	r3, r1
 8003274:	3318      	adds	r3, #24
 8003276:	edc3 7a00 	vstr	s15, [r3]
		pos_params[index].cmd_min = -cmd_min * PWM_PERIOD;
 800327a:	edd7 7a01 	vldr	s15, [r7, #4]
 800327e:	eef1 7a67 	vneg.f32	s15, s15
 8003282:	7dfa      	ldrb	r2, [r7, #23]
 8003284:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80033d8 <set_control_params_kp_min_max+0x1e0>
 8003288:	ee67 7a87 	vmul.f32	s15, s15, s14
 800328c:	4951      	ldr	r1, [pc, #324]	; (80033d4 <set_control_params_kp_min_max+0x1dc>)
 800328e:	4613      	mov	r3, r2
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	4413      	add	r3, r2
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	440b      	add	r3, r1
 8003298:	331c      	adds	r3, #28
 800329a:	edc3 7a00 	vstr	s15, [r3]
		pos_params[index].speed_alpha = alpha;
 800329e:	7dfa      	ldrb	r2, [r7, #23]
 80032a0:	494c      	ldr	r1, [pc, #304]	; (80033d4 <set_control_params_kp_min_max+0x1dc>)
 80032a2:	4613      	mov	r3, r2
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	4413      	add	r3, r2
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	440b      	add	r3, r1
 80032ac:	3320      	adds	r3, #32
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	e08a      	b.n	80033ca <set_control_params_kp_min_max+0x1d2>
	} else if(ctrl_index == 1)
 80032b4:	7dbb      	ldrb	r3, [r7, #22]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d140      	bne.n	800333c <set_control_params_kp_min_max+0x144>
	{
		speed_params[index].kp = kp;
 80032ba:	7dfa      	ldrb	r2, [r7, #23]
 80032bc:	4947      	ldr	r1, [pc, #284]	; (80033dc <set_control_params_kp_min_max+0x1e4>)
 80032be:	4613      	mov	r3, r2
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	4413      	add	r3, r2
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	440b      	add	r3, r1
 80032c8:	3324      	adds	r3, #36	; 0x24
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	601a      	str	r2, [r3, #0]
		speed_params[index].kd = kd;
 80032ce:	7dfa      	ldrb	r2, [r7, #23]
 80032d0:	4942      	ldr	r1, [pc, #264]	; (80033dc <set_control_params_kp_min_max+0x1e4>)
 80032d2:	4613      	mov	r3, r2
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	4413      	add	r3, r2
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	440b      	add	r3, r1
 80032dc:	332c      	adds	r3, #44	; 0x2c
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	601a      	str	r2, [r3, #0]
		speed_params[index].cmd_max = cmd_max * PWM_PERIOD;
 80032e2:	7dfa      	ldrb	r2, [r7, #23]
 80032e4:	edd7 7a00 	vldr	s15, [r7]
 80032e8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80033d8 <set_control_params_kp_min_max+0x1e0>
 80032ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032f0:	493a      	ldr	r1, [pc, #232]	; (80033dc <set_control_params_kp_min_max+0x1e4>)
 80032f2:	4613      	mov	r3, r2
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	4413      	add	r3, r2
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	440b      	add	r3, r1
 80032fc:	3318      	adds	r3, #24
 80032fe:	edc3 7a00 	vstr	s15, [r3]
		speed_params[index].cmd_min = -cmd_min * PWM_PERIOD;
 8003302:	edd7 7a01 	vldr	s15, [r7, #4]
 8003306:	eef1 7a67 	vneg.f32	s15, s15
 800330a:	7dfa      	ldrb	r2, [r7, #23]
 800330c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80033d8 <set_control_params_kp_min_max+0x1e0>
 8003310:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003314:	4931      	ldr	r1, [pc, #196]	; (80033dc <set_control_params_kp_min_max+0x1e4>)
 8003316:	4613      	mov	r3, r2
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	4413      	add	r3, r2
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	440b      	add	r3, r1
 8003320:	331c      	adds	r3, #28
 8003322:	edc3 7a00 	vstr	s15, [r3]
		speed_params[index].speed_alpha = alpha;
 8003326:	7dfa      	ldrb	r2, [r7, #23]
 8003328:	492c      	ldr	r1, [pc, #176]	; (80033dc <set_control_params_kp_min_max+0x1e4>)
 800332a:	4613      	mov	r3, r2
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	4413      	add	r3, r2
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	440b      	add	r3, r1
 8003334:	3320      	adds	r3, #32
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	e046      	b.n	80033ca <set_control_params_kp_min_max+0x1d2>
	} else if(ctrl_index == 2)
 800333c:	7dbb      	ldrb	r3, [r7, #22]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d143      	bne.n	80033ca <set_control_params_kp_min_max+0x1d2>
	{
		cur_params[index].kp = kp;
 8003342:	7dfa      	ldrb	r2, [r7, #23]
 8003344:	4926      	ldr	r1, [pc, #152]	; (80033e0 <set_control_params_kp_min_max+0x1e8>)
 8003346:	4613      	mov	r3, r2
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	4413      	add	r3, r2
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	440b      	add	r3, r1
 8003350:	3324      	adds	r3, #36	; 0x24
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	601a      	str	r2, [r3, #0]
		cur_params[index].kd = kd;
 8003356:	7dfa      	ldrb	r2, [r7, #23]
 8003358:	4921      	ldr	r1, [pc, #132]	; (80033e0 <set_control_params_kp_min_max+0x1e8>)
 800335a:	4613      	mov	r3, r2
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	4413      	add	r3, r2
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	440b      	add	r3, r1
 8003364:	332c      	adds	r3, #44	; 0x2c
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	601a      	str	r2, [r3, #0]
		cur_params[index].cmd_max = cmd_max * PWM_PERIOD;
 800336a:	7dfa      	ldrb	r2, [r7, #23]
 800336c:	edd7 7a00 	vldr	s15, [r7]
 8003370:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80033d8 <set_control_params_kp_min_max+0x1e0>
 8003374:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003378:	4919      	ldr	r1, [pc, #100]	; (80033e0 <set_control_params_kp_min_max+0x1e8>)
 800337a:	4613      	mov	r3, r2
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	4413      	add	r3, r2
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	440b      	add	r3, r1
 8003384:	3318      	adds	r3, #24
 8003386:	edc3 7a00 	vstr	s15, [r3]
		cur_params[index].cmd_min = -cmd_min * PWM_PERIOD;
 800338a:	edd7 7a01 	vldr	s15, [r7, #4]
 800338e:	eef1 7a67 	vneg.f32	s15, s15
 8003392:	7dfa      	ldrb	r2, [r7, #23]
 8003394:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80033d8 <set_control_params_kp_min_max+0x1e0>
 8003398:	ee67 7a87 	vmul.f32	s15, s15, s14
 800339c:	4910      	ldr	r1, [pc, #64]	; (80033e0 <set_control_params_kp_min_max+0x1e8>)
 800339e:	4613      	mov	r3, r2
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	4413      	add	r3, r2
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	440b      	add	r3, r1
 80033a8:	331c      	adds	r3, #28
 80033aa:	edc3 7a00 	vstr	s15, [r3]
		cur_params[index].speed_alpha = alpha;
 80033ae:	7dfa      	ldrb	r2, [r7, #23]
 80033b0:	490b      	ldr	r1, [pc, #44]	; (80033e0 <set_control_params_kp_min_max+0x1e8>)
 80033b2:	4613      	mov	r3, r2
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	4413      	add	r3, r2
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	440b      	add	r3, r1
 80033bc:	3320      	adds	r3, #32
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	e002      	b.n	80033ca <set_control_params_kp_min_max+0x1d2>
		return;
 80033c4:	bf00      	nop
 80033c6:	e000      	b.n	80033ca <set_control_params_kp_min_max+0x1d2>
		return;
 80033c8:	bf00      	nop
	}
 }
 80033ca:	371c      	adds	r7, #28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	20000dec 	.word	0x20000dec
 80033d8:	461c4000 	.word	0x461c4000
 80033dc:	20000e4c 	.word	0x20000e4c
 80033e0:	20000eac 	.word	0x20000eac

080033e4 <set_control_params_ki>:
 *	\param index The motor index
 *  \param ctrl_index Which controller to set, 0-position, 1-speed, 2-current
 *  \param ki The integral gain
 */
 void set_control_params_ki(uint8_t index, uint8_t ctrl_index, float ki)
 {
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	460a      	mov	r2, r1
 80033ee:	ed87 0a00 	vstr	s0, [r7]
 80033f2:	71fb      	strb	r3, [r7, #7]
 80033f4:	4613      	mov	r3, r2
 80033f6:	71bb      	strb	r3, [r7, #6]
	if(index >= NUMBER_MOTORS)
 80033f8:	79fb      	ldrb	r3, [r7, #7]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d82c      	bhi.n	8003458 <set_control_params_ki+0x74>
	{
		return;
	}
	if(ctrl_index > 2)
 80033fe:	79bb      	ldrb	r3, [r7, #6]
 8003400:	2b02      	cmp	r3, #2
 8003402:	d82b      	bhi.n	800345c <set_control_params_ki+0x78>
	{
		return;
	}

	if(ctrl_index == 0)
 8003404:	79bb      	ldrb	r3, [r7, #6]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10a      	bne.n	8003420 <set_control_params_ki+0x3c>
	{
		pos_params[index].ki = ki;
 800340a:	79fa      	ldrb	r2, [r7, #7]
 800340c:	4916      	ldr	r1, [pc, #88]	; (8003468 <set_control_params_ki+0x84>)
 800340e:	4613      	mov	r3, r2
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	4413      	add	r3, r2
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	440b      	add	r3, r1
 8003418:	3328      	adds	r3, #40	; 0x28
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	e01e      	b.n	800345e <set_control_params_ki+0x7a>
	} else if(ctrl_index == 1)
 8003420:	79bb      	ldrb	r3, [r7, #6]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d10a      	bne.n	800343c <set_control_params_ki+0x58>
	{
		speed_params[index].ki = ki;
 8003426:	79fa      	ldrb	r2, [r7, #7]
 8003428:	4910      	ldr	r1, [pc, #64]	; (800346c <set_control_params_ki+0x88>)
 800342a:	4613      	mov	r3, r2
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	4413      	add	r3, r2
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	440b      	add	r3, r1
 8003434:	3328      	adds	r3, #40	; 0x28
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	e010      	b.n	800345e <set_control_params_ki+0x7a>
	} else if(ctrl_index == 2)
 800343c:	79bb      	ldrb	r3, [r7, #6]
 800343e:	2b02      	cmp	r3, #2
 8003440:	d10d      	bne.n	800345e <set_control_params_ki+0x7a>
	{
		cur_params[index].ki = ki;
 8003442:	79fa      	ldrb	r2, [r7, #7]
 8003444:	490a      	ldr	r1, [pc, #40]	; (8003470 <set_control_params_ki+0x8c>)
 8003446:	4613      	mov	r3, r2
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	4413      	add	r3, r2
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	440b      	add	r3, r1
 8003450:	3328      	adds	r3, #40	; 0x28
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	e002      	b.n	800345e <set_control_params_ki+0x7a>
		return;
 8003458:	bf00      	nop
 800345a:	e000      	b.n	800345e <set_control_params_ki+0x7a>
		return;
 800345c:	bf00      	nop
	}
 }
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	20000dec 	.word	0x20000dec
 800346c:	20000e4c 	.word	0x20000e4c
 8003470:	20000eac 	.word	0x20000eac

08003474 <set_control_params_int_max>:
 *	\param index The motor index
 *  \param ctrl_index Which controller to set, 0-position, 1-speed, 2-current
 *  \param int_max The maximum integral windup
 */
 void set_control_params_int_max(uint8_t index, uint8_t ctrl_index, float int_max)
 {
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	460a      	mov	r2, r1
 800347e:	ed87 0a00 	vstr	s0, [r7]
 8003482:	71fb      	strb	r3, [r7, #7]
 8003484:	4613      	mov	r3, r2
 8003486:	71bb      	strb	r3, [r7, #6]
	if(index >= NUMBER_MOTORS)
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d82c      	bhi.n	80034e8 <set_control_params_int_max+0x74>
	{
		return;
	}
	if(ctrl_index > 2)
 800348e:	79bb      	ldrb	r3, [r7, #6]
 8003490:	2b02      	cmp	r3, #2
 8003492:	d82b      	bhi.n	80034ec <set_control_params_int_max+0x78>
	{
		return;
	}

	if(ctrl_index == 0)
 8003494:	79bb      	ldrb	r3, [r7, #6]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10a      	bne.n	80034b0 <set_control_params_int_max+0x3c>
	{
		pos_params[index].integral_max = int_max;
 800349a:	79fa      	ldrb	r2, [r7, #7]
 800349c:	4916      	ldr	r1, [pc, #88]	; (80034f8 <set_control_params_int_max+0x84>)
 800349e:	4613      	mov	r3, r2
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	4413      	add	r3, r2
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	440b      	add	r3, r1
 80034a8:	3310      	adds	r3, #16
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	e01e      	b.n	80034ee <set_control_params_int_max+0x7a>
	} else if(ctrl_index == 1)
 80034b0:	79bb      	ldrb	r3, [r7, #6]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d10a      	bne.n	80034cc <set_control_params_int_max+0x58>
	{
		speed_params[index].integral_max = int_max;
 80034b6:	79fa      	ldrb	r2, [r7, #7]
 80034b8:	4910      	ldr	r1, [pc, #64]	; (80034fc <set_control_params_int_max+0x88>)
 80034ba:	4613      	mov	r3, r2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	4413      	add	r3, r2
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	440b      	add	r3, r1
 80034c4:	3310      	adds	r3, #16
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	e010      	b.n	80034ee <set_control_params_int_max+0x7a>
	} else if(ctrl_index == 2)
 80034cc:	79bb      	ldrb	r3, [r7, #6]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d10d      	bne.n	80034ee <set_control_params_int_max+0x7a>
	{
		cur_params[index].integral_max = int_max;
 80034d2:	79fa      	ldrb	r2, [r7, #7]
 80034d4:	490a      	ldr	r1, [pc, #40]	; (8003500 <set_control_params_int_max+0x8c>)
 80034d6:	4613      	mov	r3, r2
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	4413      	add	r3, r2
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	440b      	add	r3, r1
 80034e0:	3310      	adds	r3, #16
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	e002      	b.n	80034ee <set_control_params_int_max+0x7a>
		return;
 80034e8:	bf00      	nop
 80034ea:	e000      	b.n	80034ee <set_control_params_int_max+0x7a>
		return;
 80034ec:	bf00      	nop
	}
 }
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	20000dec 	.word	0x20000dec
 80034fc:	20000e4c 	.word	0x20000e4c
 8003500:	20000eac 	.word	0x20000eac

08003504 <set_control_params_int_min>:
 *	\param index The motor index
 *  \param ctrl_index Which controller to set, 0-position, 1-speed, 2-current
 *  \param int_min The minimum integral windup
 */
 void set_control_params_int_min(uint8_t index, uint8_t ctrl_index, float int_min)
 {
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	460a      	mov	r2, r1
 800350e:	ed87 0a00 	vstr	s0, [r7]
 8003512:	71fb      	strb	r3, [r7, #7]
 8003514:	4613      	mov	r3, r2
 8003516:	71bb      	strb	r3, [r7, #6]
	if(index >= NUMBER_MOTORS)
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d82c      	bhi.n	8003578 <set_control_params_int_min+0x74>
	{
		return;
	}
	if(ctrl_index > 2)
 800351e:	79bb      	ldrb	r3, [r7, #6]
 8003520:	2b02      	cmp	r3, #2
 8003522:	d82b      	bhi.n	800357c <set_control_params_int_min+0x78>
	{
		return;
	}

	if(ctrl_index == 0)
 8003524:	79bb      	ldrb	r3, [r7, #6]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10a      	bne.n	8003540 <set_control_params_int_min+0x3c>
	{
		pos_params[index].integral_min = int_min;
 800352a:	79fa      	ldrb	r2, [r7, #7]
 800352c:	4916      	ldr	r1, [pc, #88]	; (8003588 <set_control_params_int_min+0x84>)
 800352e:	4613      	mov	r3, r2
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	4413      	add	r3, r2
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	440b      	add	r3, r1
 8003538:	3314      	adds	r3, #20
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	e01e      	b.n	800357e <set_control_params_int_min+0x7a>
	} else if(ctrl_index == 1)
 8003540:	79bb      	ldrb	r3, [r7, #6]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d10a      	bne.n	800355c <set_control_params_int_min+0x58>
	{
		speed_params[index].integral_min = int_min;
 8003546:	79fa      	ldrb	r2, [r7, #7]
 8003548:	4910      	ldr	r1, [pc, #64]	; (800358c <set_control_params_int_min+0x88>)
 800354a:	4613      	mov	r3, r2
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	4413      	add	r3, r2
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	440b      	add	r3, r1
 8003554:	3314      	adds	r3, #20
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	e010      	b.n	800357e <set_control_params_int_min+0x7a>
	} else if(ctrl_index == 2)
 800355c:	79bb      	ldrb	r3, [r7, #6]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d10d      	bne.n	800357e <set_control_params_int_min+0x7a>
	{
		cur_params[index].integral_min = int_min;
 8003562:	79fa      	ldrb	r2, [r7, #7]
 8003564:	490a      	ldr	r1, [pc, #40]	; (8003590 <set_control_params_int_min+0x8c>)
 8003566:	4613      	mov	r3, r2
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	4413      	add	r3, r2
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	440b      	add	r3, r1
 8003570:	3314      	adds	r3, #20
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	e002      	b.n	800357e <set_control_params_int_min+0x7a>
		return;
 8003578:	bf00      	nop
 800357a:	e000      	b.n	800357e <set_control_params_int_min+0x7a>
		return;
 800357c:	bf00      	nop
	}
 }
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	20000dec 	.word	0x20000dec
 800358c:	20000e4c 	.word	0x20000e4c
 8003590:	20000eac 	.word	0x20000eac

08003594 <set_motor_ticks_per_rev>:
 *
 *	\param ticks_per_rev The number of quadrature counts per output shaft rotation
  *	\param index The motor index
 */
 void set_motor_ticks_per_rev(int32_t ticks_per_rev, uint8_t index)
 {
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	70fb      	strb	r3, [r7, #3]
	if(index >= NUMBER_MOTORS)
 80035a0:	78fb      	ldrb	r3, [r7, #3]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d80a      	bhi.n	80035bc <set_motor_ticks_per_rev+0x28>
	{
		return;
	}
	motors[index].ticks_per_rev = ticks_per_rev;
 80035a6:	78fa      	ldrb	r2, [r7, #3]
 80035a8:	4907      	ldr	r1, [pc, #28]	; (80035c8 <set_motor_ticks_per_rev+0x34>)
 80035aa:	4613      	mov	r3, r2
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	4413      	add	r3, r2
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	440b      	add	r3, r1
 80035b4:	3328      	adds	r3, #40	; 0x28
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	e000      	b.n	80035be <set_motor_ticks_per_rev+0x2a>
		return;
 80035bc:	bf00      	nop
 }
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	20000d8c 	.word	0x20000d8c

080035cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035d2:	2300      	movs	r3, #0
 80035d4:	607b      	str	r3, [r7, #4]
 80035d6:	4b12      	ldr	r3, [pc, #72]	; (8003620 <HAL_MspInit+0x54>)
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	4a11      	ldr	r2, [pc, #68]	; (8003620 <HAL_MspInit+0x54>)
 80035dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035e0:	6453      	str	r3, [r2, #68]	; 0x44
 80035e2:	4b0f      	ldr	r3, [pc, #60]	; (8003620 <HAL_MspInit+0x54>)
 80035e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ea:	607b      	str	r3, [r7, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	603b      	str	r3, [r7, #0]
 80035f2:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <HAL_MspInit+0x54>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	4a0a      	ldr	r2, [pc, #40]	; (8003620 <HAL_MspInit+0x54>)
 80035f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035fc:	6413      	str	r3, [r2, #64]	; 0x40
 80035fe:	4b08      	ldr	r3, [pc, #32]	; (8003620 <HAL_MspInit+0x54>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800360a:	2200      	movs	r2, #0
 800360c:	210f      	movs	r1, #15
 800360e:	f06f 0001 	mvn.w	r0, #1
 8003612:	f002 f829 	bl	8005668 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003616:	bf00      	nop
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40023800 	.word	0x40023800

08003624 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08c      	sub	sp, #48	; 0x30
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800362c:	f107 031c 	add.w	r3, r7, #28
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	605a      	str	r2, [r3, #4]
 8003636:	609a      	str	r2, [r3, #8]
 8003638:	60da      	str	r2, [r3, #12]
 800363a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a36      	ldr	r2, [pc, #216]	; (800371c <HAL_ADC_MspInit+0xf8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d130      	bne.n	80036a8 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	61bb      	str	r3, [r7, #24]
 800364a:	4b35      	ldr	r3, [pc, #212]	; (8003720 <HAL_ADC_MspInit+0xfc>)
 800364c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364e:	4a34      	ldr	r2, [pc, #208]	; (8003720 <HAL_ADC_MspInit+0xfc>)
 8003650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003654:	6453      	str	r3, [r2, #68]	; 0x44
 8003656:	4b32      	ldr	r3, [pc, #200]	; (8003720 <HAL_ADC_MspInit+0xfc>)
 8003658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365e:	61bb      	str	r3, [r7, #24]
 8003660:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	4b2e      	ldr	r3, [pc, #184]	; (8003720 <HAL_ADC_MspInit+0xfc>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	4a2d      	ldr	r2, [pc, #180]	; (8003720 <HAL_ADC_MspInit+0xfc>)
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	6313      	str	r3, [r2, #48]	; 0x30
 8003672:	4b2b      	ldr	r3, [pc, #172]	; (8003720 <HAL_ADC_MspInit+0xfc>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = SNS1_Pin;
 800367e:	2310      	movs	r3, #16
 8003680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003682:	2303      	movs	r3, #3
 8003684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003686:	2300      	movs	r3, #0
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SNS1_GPIO_Port, &GPIO_InitStruct);
 800368a:	f107 031c 	add.w	r3, r7, #28
 800368e:	4619      	mov	r1, r3
 8003690:	4824      	ldr	r0, [pc, #144]	; (8003724 <HAL_ADC_MspInit+0x100>)
 8003692:	f002 f835 	bl	8005700 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8003696:	2200      	movs	r2, #0
 8003698:	2105      	movs	r1, #5
 800369a:	2012      	movs	r0, #18
 800369c:	f001 ffe4 	bl	8005668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80036a0:	2012      	movs	r0, #18
 80036a2:	f001 fffd 	bl	80056a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80036a6:	e034      	b.n	8003712 <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a1e      	ldr	r2, [pc, #120]	; (8003728 <HAL_ADC_MspInit+0x104>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d12f      	bne.n	8003712 <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80036b2:	2300      	movs	r3, #0
 80036b4:	613b      	str	r3, [r7, #16]
 80036b6:	4b1a      	ldr	r3, [pc, #104]	; (8003720 <HAL_ADC_MspInit+0xfc>)
 80036b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ba:	4a19      	ldr	r2, [pc, #100]	; (8003720 <HAL_ADC_MspInit+0xfc>)
 80036bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036c0:	6453      	str	r3, [r2, #68]	; 0x44
 80036c2:	4b17      	ldr	r3, [pc, #92]	; (8003720 <HAL_ADC_MspInit+0xfc>)
 80036c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ca:	613b      	str	r3, [r7, #16]
 80036cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ce:	2300      	movs	r3, #0
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	4b13      	ldr	r3, [pc, #76]	; (8003720 <HAL_ADC_MspInit+0xfc>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	4a12      	ldr	r2, [pc, #72]	; (8003720 <HAL_ADC_MspInit+0xfc>)
 80036d8:	f043 0301 	orr.w	r3, r3, #1
 80036dc:	6313      	str	r3, [r2, #48]	; 0x30
 80036de:	4b10      	ldr	r3, [pc, #64]	; (8003720 <HAL_ADC_MspInit+0xfc>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SNS2_Pin;
 80036ea:	2320      	movs	r3, #32
 80036ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036ee:	2303      	movs	r3, #3
 80036f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f2:	2300      	movs	r3, #0
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SNS2_GPIO_Port, &GPIO_InitStruct);
 80036f6:	f107 031c 	add.w	r3, r7, #28
 80036fa:	4619      	mov	r1, r3
 80036fc:	4809      	ldr	r0, [pc, #36]	; (8003724 <HAL_ADC_MspInit+0x100>)
 80036fe:	f001 ffff 	bl	8005700 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8003702:	2200      	movs	r2, #0
 8003704:	2105      	movs	r1, #5
 8003706:	2012      	movs	r0, #18
 8003708:	f001 ffae 	bl	8005668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800370c:	2012      	movs	r0, #18
 800370e:	f001 ffc7 	bl	80056a0 <HAL_NVIC_EnableIRQ>
}
 8003712:	bf00      	nop
 8003714:	3730      	adds	r7, #48	; 0x30
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40012000 	.word	0x40012000
 8003720:	40023800 	.word	0x40023800
 8003724:	40020000 	.word	0x40020000
 8003728:	40012100 	.word	0x40012100

0800372c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08a      	sub	sp, #40	; 0x28
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003734:	f107 0314 	add.w	r3, r7, #20
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	605a      	str	r2, [r3, #4]
 800373e:	609a      	str	r2, [r3, #8]
 8003740:	60da      	str	r2, [r3, #12]
 8003742:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a25      	ldr	r2, [pc, #148]	; (80037e0 <HAL_CAN_MspInit+0xb4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d143      	bne.n	80037d6 <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	4b24      	ldr	r3, [pc, #144]	; (80037e4 <HAL_CAN_MspInit+0xb8>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	4a23      	ldr	r2, [pc, #140]	; (80037e4 <HAL_CAN_MspInit+0xb8>)
 8003758:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800375c:	6413      	str	r3, [r2, #64]	; 0x40
 800375e:	4b21      	ldr	r3, [pc, #132]	; (80037e4 <HAL_CAN_MspInit+0xb8>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800376a:	2300      	movs	r3, #0
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	4b1d      	ldr	r3, [pc, #116]	; (80037e4 <HAL_CAN_MspInit+0xb8>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	4a1c      	ldr	r2, [pc, #112]	; (80037e4 <HAL_CAN_MspInit+0xb8>)
 8003774:	f043 0308 	orr.w	r3, r3, #8
 8003778:	6313      	str	r3, [r2, #48]	; 0x30
 800377a:	4b1a      	ldr	r3, [pc, #104]	; (80037e4 <HAL_CAN_MspInit+0xb8>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	f003 0308 	and.w	r3, r3, #8
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 8003786:	2303      	movs	r3, #3
 8003788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800378a:	2302      	movs	r3, #2
 800378c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378e:	2300      	movs	r3, #0
 8003790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003792:	2303      	movs	r3, #3
 8003794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003796:	2309      	movs	r3, #9
 8003798:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800379a:	f107 0314 	add.w	r3, r7, #20
 800379e:	4619      	mov	r1, r3
 80037a0:	4811      	ldr	r0, [pc, #68]	; (80037e8 <HAL_CAN_MspInit+0xbc>)
 80037a2:	f001 ffad 	bl	8005700 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80037a6:	2200      	movs	r2, #0
 80037a8:	2105      	movs	r1, #5
 80037aa:	2013      	movs	r0, #19
 80037ac:	f001 ff5c 	bl	8005668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80037b0:	2013      	movs	r0, #19
 80037b2:	f001 ff75 	bl	80056a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80037b6:	2200      	movs	r2, #0
 80037b8:	2105      	movs	r1, #5
 80037ba:	2014      	movs	r0, #20
 80037bc:	f001 ff54 	bl	8005668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80037c0:	2014      	movs	r0, #20
 80037c2:	f001 ff6d 	bl	80056a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80037c6:	2200      	movs	r2, #0
 80037c8:	2105      	movs	r1, #5
 80037ca:	2015      	movs	r0, #21
 80037cc:	f001 ff4c 	bl	8005668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80037d0:	2015      	movs	r0, #21
 80037d2:	f001 ff65 	bl	80056a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80037d6:	bf00      	nop
 80037d8:	3728      	adds	r7, #40	; 0x28
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40006400 	.word	0x40006400
 80037e4:	40023800 	.word	0x40023800
 80037e8:	40020c00 	.word	0x40020c00

080037ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08a      	sub	sp, #40	; 0x28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f4:	f107 0314 	add.w	r3, r7, #20
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	605a      	str	r2, [r3, #4]
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	60da      	str	r2, [r3, #12]
 8003802:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a1d      	ldr	r2, [pc, #116]	; (8003880 <HAL_SPI_MspInit+0x94>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d134      	bne.n	8003878 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	4b1c      	ldr	r3, [pc, #112]	; (8003884 <HAL_SPI_MspInit+0x98>)
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	4a1b      	ldr	r2, [pc, #108]	; (8003884 <HAL_SPI_MspInit+0x98>)
 8003818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800381c:	6413      	str	r3, [r2, #64]	; 0x40
 800381e:	4b19      	ldr	r3, [pc, #100]	; (8003884 <HAL_SPI_MspInit+0x98>)
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800382a:	2300      	movs	r3, #0
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	4b15      	ldr	r3, [pc, #84]	; (8003884 <HAL_SPI_MspInit+0x98>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	4a14      	ldr	r2, [pc, #80]	; (8003884 <HAL_SPI_MspInit+0x98>)
 8003834:	f043 0302 	orr.w	r3, r3, #2
 8003838:	6313      	str	r3, [r2, #48]	; 0x30
 800383a:	4b12      	ldr	r3, [pc, #72]	; (8003884 <HAL_SPI_MspInit+0x98>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = FRAM_CS_Pin|SCK_Pin|MISO_Pin|MOSI_Pin;
 8003846:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800384a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384c:	2302      	movs	r3, #2
 800384e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003850:	2300      	movs	r3, #0
 8003852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003854:	2303      	movs	r3, #3
 8003856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003858:	2305      	movs	r3, #5
 800385a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800385c:	f107 0314 	add.w	r3, r7, #20
 8003860:	4619      	mov	r1, r3
 8003862:	4809      	ldr	r0, [pc, #36]	; (8003888 <HAL_SPI_MspInit+0x9c>)
 8003864:	f001 ff4c 	bl	8005700 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8003868:	2200      	movs	r2, #0
 800386a:	2105      	movs	r1, #5
 800386c:	2024      	movs	r0, #36	; 0x24
 800386e:	f001 fefb 	bl	8005668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003872:	2024      	movs	r0, #36	; 0x24
 8003874:	f001 ff14 	bl	80056a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003878:	bf00      	nop
 800387a:	3728      	adds	r7, #40	; 0x28
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40003800 	.word	0x40003800
 8003884:	40023800 	.word	0x40023800
 8003888:	40020400 	.word	0x40020400

0800388c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b08c      	sub	sp, #48	; 0x30
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003894:	f107 031c 	add.w	r3, r7, #28
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	605a      	str	r2, [r3, #4]
 800389e:	609a      	str	r2, [r3, #8]
 80038a0:	60da      	str	r2, [r3, #12]
 80038a2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a32      	ldr	r2, [pc, #200]	; (8003974 <HAL_TIM_Encoder_MspInit+0xe8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d12d      	bne.n	800390a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80038ae:	2300      	movs	r3, #0
 80038b0:	61bb      	str	r3, [r7, #24]
 80038b2:	4b31      	ldr	r3, [pc, #196]	; (8003978 <HAL_TIM_Encoder_MspInit+0xec>)
 80038b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b6:	4a30      	ldr	r2, [pc, #192]	; (8003978 <HAL_TIM_Encoder_MspInit+0xec>)
 80038b8:	f043 0301 	orr.w	r3, r3, #1
 80038bc:	6453      	str	r3, [r2, #68]	; 0x44
 80038be:	4b2e      	ldr	r3, [pc, #184]	; (8003978 <HAL_TIM_Encoder_MspInit+0xec>)
 80038c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	61bb      	str	r3, [r7, #24]
 80038c8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ca:	2300      	movs	r3, #0
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	4b2a      	ldr	r3, [pc, #168]	; (8003978 <HAL_TIM_Encoder_MspInit+0xec>)
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	4a29      	ldr	r2, [pc, #164]	; (8003978 <HAL_TIM_Encoder_MspInit+0xec>)
 80038d4:	f043 0301 	orr.w	r3, r3, #1
 80038d8:	6313      	str	r3, [r2, #48]	; 0x30
 80038da:	4b27      	ldr	r3, [pc, #156]	; (8003978 <HAL_TIM_Encoder_MspInit+0xec>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = M2IN1_Pin|M2IN2_Pin;
 80038e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038ec:	2312      	movs	r3, #18
 80038ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038f0:	2301      	movs	r3, #1
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f4:	2300      	movs	r3, #0
 80038f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80038f8:	2301      	movs	r3, #1
 80038fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038fc:	f107 031c 	add.w	r3, r7, #28
 8003900:	4619      	mov	r1, r3
 8003902:	481e      	ldr	r0, [pc, #120]	; (800397c <HAL_TIM_Encoder_MspInit+0xf0>)
 8003904:	f001 fefc 	bl	8005700 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003908:	e030      	b.n	800396c <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM3)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a1c      	ldr	r2, [pc, #112]	; (8003980 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d12b      	bne.n	800396c <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003914:	2300      	movs	r3, #0
 8003916:	613b      	str	r3, [r7, #16]
 8003918:	4b17      	ldr	r3, [pc, #92]	; (8003978 <HAL_TIM_Encoder_MspInit+0xec>)
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	4a16      	ldr	r2, [pc, #88]	; (8003978 <HAL_TIM_Encoder_MspInit+0xec>)
 800391e:	f043 0302 	orr.w	r3, r3, #2
 8003922:	6413      	str	r3, [r2, #64]	; 0x40
 8003924:	4b14      	ldr	r3, [pc, #80]	; (8003978 <HAL_TIM_Encoder_MspInit+0xec>)
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	613b      	str	r3, [r7, #16]
 800392e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003930:	2300      	movs	r3, #0
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	4b10      	ldr	r3, [pc, #64]	; (8003978 <HAL_TIM_Encoder_MspInit+0xec>)
 8003936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003938:	4a0f      	ldr	r2, [pc, #60]	; (8003978 <HAL_TIM_Encoder_MspInit+0xec>)
 800393a:	f043 0304 	orr.w	r3, r3, #4
 800393e:	6313      	str	r3, [r2, #48]	; 0x30
 8003940:	4b0d      	ldr	r3, [pc, #52]	; (8003978 <HAL_TIM_Encoder_MspInit+0xec>)
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1IN1_Pin|M1IN2_Pin;
 800394c:	23c0      	movs	r3, #192	; 0xc0
 800394e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003950:	2312      	movs	r3, #18
 8003952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003954:	2301      	movs	r3, #1
 8003956:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003958:	2300      	movs	r3, #0
 800395a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800395c:	2302      	movs	r3, #2
 800395e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003960:	f107 031c 	add.w	r3, r7, #28
 8003964:	4619      	mov	r1, r3
 8003966:	4807      	ldr	r0, [pc, #28]	; (8003984 <HAL_TIM_Encoder_MspInit+0xf8>)
 8003968:	f001 feca 	bl	8005700 <HAL_GPIO_Init>
}
 800396c:	bf00      	nop
 800396e:	3730      	adds	r7, #48	; 0x30
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40010000 	.word	0x40010000
 8003978:	40023800 	.word	0x40023800
 800397c:	40020000 	.word	0x40020000
 8003980:	40000400 	.word	0x40000400
 8003984:	40020800 	.word	0x40020800

08003988 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003998:	d10e      	bne.n	80039b8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	4b2e      	ldr	r3, [pc, #184]	; (8003a58 <HAL_TIM_Base_MspInit+0xd0>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	4a2d      	ldr	r2, [pc, #180]	; (8003a58 <HAL_TIM_Base_MspInit+0xd0>)
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	6413      	str	r3, [r2, #64]	; 0x40
 80039aa:	4b2b      	ldr	r3, [pc, #172]	; (8003a58 <HAL_TIM_Base_MspInit+0xd0>)
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80039b6:	e04a      	b.n	8003a4e <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a27      	ldr	r2, [pc, #156]	; (8003a5c <HAL_TIM_Base_MspInit+0xd4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d116      	bne.n	80039f0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80039c2:	2300      	movs	r3, #0
 80039c4:	613b      	str	r3, [r7, #16]
 80039c6:	4b24      	ldr	r3, [pc, #144]	; (8003a58 <HAL_TIM_Base_MspInit+0xd0>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	4a23      	ldr	r2, [pc, #140]	; (8003a58 <HAL_TIM_Base_MspInit+0xd0>)
 80039cc:	f043 0304 	orr.w	r3, r3, #4
 80039d0:	6413      	str	r3, [r2, #64]	; 0x40
 80039d2:	4b21      	ldr	r3, [pc, #132]	; (8003a58 <HAL_TIM_Base_MspInit+0xd0>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	613b      	str	r3, [r7, #16]
 80039dc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80039de:	2200      	movs	r2, #0
 80039e0:	2105      	movs	r1, #5
 80039e2:	201e      	movs	r0, #30
 80039e4:	f001 fe40 	bl	8005668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80039e8:	201e      	movs	r0, #30
 80039ea:	f001 fe59 	bl	80056a0 <HAL_NVIC_EnableIRQ>
}
 80039ee:	e02e      	b.n	8003a4e <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM13)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a1a      	ldr	r2, [pc, #104]	; (8003a60 <HAL_TIM_Base_MspInit+0xd8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d116      	bne.n	8003a28 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	4b16      	ldr	r3, [pc, #88]	; (8003a58 <HAL_TIM_Base_MspInit+0xd0>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	4a15      	ldr	r2, [pc, #84]	; (8003a58 <HAL_TIM_Base_MspInit+0xd0>)
 8003a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a08:	6413      	str	r3, [r2, #64]	; 0x40
 8003a0a:	4b13      	ldr	r3, [pc, #76]	; (8003a58 <HAL_TIM_Base_MspInit+0xd0>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003a16:	2200      	movs	r2, #0
 8003a18:	2100      	movs	r1, #0
 8003a1a:	202c      	movs	r0, #44	; 0x2c
 8003a1c:	f001 fe24 	bl	8005668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003a20:	202c      	movs	r0, #44	; 0x2c
 8003a22:	f001 fe3d 	bl	80056a0 <HAL_NVIC_EnableIRQ>
}
 8003a26:	e012      	b.n	8003a4e <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM14)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a0d      	ldr	r2, [pc, #52]	; (8003a64 <HAL_TIM_Base_MspInit+0xdc>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d10d      	bne.n	8003a4e <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	60bb      	str	r3, [r7, #8]
 8003a36:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <HAL_TIM_Base_MspInit+0xd0>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	4a07      	ldr	r2, [pc, #28]	; (8003a58 <HAL_TIM_Base_MspInit+0xd0>)
 8003a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a40:	6413      	str	r3, [r2, #64]	; 0x40
 8003a42:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <HAL_TIM_Base_MspInit+0xd0>)
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4a:	60bb      	str	r3, [r7, #8]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
}
 8003a4e:	bf00      	nop
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	40000800 	.word	0x40000800
 8003a60:	40001c00 	.word	0x40001c00
 8003a64:	40002000 	.word	0x40002000

08003a68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08a      	sub	sp, #40	; 0x28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a70:	f107 0314 	add.w	r3, r7, #20
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	605a      	str	r2, [r3, #4]
 8003a7a:	609a      	str	r2, [r3, #8]
 8003a7c:	60da      	str	r2, [r3, #12]
 8003a7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a88:	d11e      	bne.n	8003ac8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	4b34      	ldr	r3, [pc, #208]	; (8003b60 <HAL_TIM_MspPostInit+0xf8>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	4a33      	ldr	r2, [pc, #204]	; (8003b60 <HAL_TIM_MspPostInit+0xf8>)
 8003a94:	f043 0301 	orr.w	r3, r3, #1
 8003a98:	6313      	str	r3, [r2, #48]	; 0x30
 8003a9a:	4b31      	ldr	r3, [pc, #196]	; (8003b60 <HAL_TIM_MspPostInit+0xf8>)
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	613b      	str	r3, [r7, #16]
 8003aa4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = LED2_Pin|IN1_Pin|IN2_Pin;
 8003aa6:	230e      	movs	r3, #14
 8003aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aaa:	2302      	movs	r3, #2
 8003aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aba:	f107 0314 	add.w	r3, r7, #20
 8003abe:	4619      	mov	r1, r3
 8003ac0:	4828      	ldr	r0, [pc, #160]	; (8003b64 <HAL_TIM_MspPostInit+0xfc>)
 8003ac2:	f001 fe1d 	bl	8005700 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8003ac6:	e046      	b.n	8003b56 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM13)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a26      	ldr	r2, [pc, #152]	; (8003b68 <HAL_TIM_MspPostInit+0x100>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d11e      	bne.n	8003b10 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	4b22      	ldr	r3, [pc, #136]	; (8003b60 <HAL_TIM_MspPostInit+0xf8>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	4a21      	ldr	r2, [pc, #132]	; (8003b60 <HAL_TIM_MspPostInit+0xf8>)
 8003adc:	f043 0301 	orr.w	r3, r3, #1
 8003ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ae2:	4b1f      	ldr	r3, [pc, #124]	; (8003b60 <HAL_TIM_MspPostInit+0xf8>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IN3_Pin;
 8003aee:	2340      	movs	r3, #64	; 0x40
 8003af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af2:	2302      	movs	r3, #2
 8003af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003afa:	2300      	movs	r3, #0
 8003afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003afe:	2309      	movs	r3, #9
 8003b00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IN3_GPIO_Port, &GPIO_InitStruct);
 8003b02:	f107 0314 	add.w	r3, r7, #20
 8003b06:	4619      	mov	r1, r3
 8003b08:	4816      	ldr	r0, [pc, #88]	; (8003b64 <HAL_TIM_MspPostInit+0xfc>)
 8003b0a:	f001 fdf9 	bl	8005700 <HAL_GPIO_Init>
}
 8003b0e:	e022      	b.n	8003b56 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM14)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a15      	ldr	r2, [pc, #84]	; (8003b6c <HAL_TIM_MspPostInit+0x104>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d11d      	bne.n	8003b56 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <HAL_TIM_MspPostInit+0xf8>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	4a0f      	ldr	r2, [pc, #60]	; (8003b60 <HAL_TIM_MspPostInit+0xf8>)
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	6313      	str	r3, [r2, #48]	; 0x30
 8003b2a:	4b0d      	ldr	r3, [pc, #52]	; (8003b60 <HAL_TIM_MspPostInit+0xf8>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	60bb      	str	r3, [r7, #8]
 8003b34:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IN4_Pin;
 8003b36:	2380      	movs	r3, #128	; 0x80
 8003b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b42:	2300      	movs	r3, #0
 8003b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8003b46:	2309      	movs	r3, #9
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IN4_GPIO_Port, &GPIO_InitStruct);
 8003b4a:	f107 0314 	add.w	r3, r7, #20
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4804      	ldr	r0, [pc, #16]	; (8003b64 <HAL_TIM_MspPostInit+0xfc>)
 8003b52:	f001 fdd5 	bl	8005700 <HAL_GPIO_Init>
}
 8003b56:	bf00      	nop
 8003b58:	3728      	adds	r7, #40	; 0x28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40023800 	.word	0x40023800
 8003b64:	40020000 	.word	0x40020000
 8003b68:	40001c00 	.word	0x40001c00
 8003b6c:	40002000 	.word	0x40002000

08003b70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08c      	sub	sp, #48	; 0x30
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM8 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0); 
 8003b80:	2200      	movs	r2, #0
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	202c      	movs	r0, #44	; 0x2c
 8003b86:	f001 fd6f 	bl	8005668 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM8 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn); 
 8003b8a:	202c      	movs	r0, #44	; 0x2c
 8003b8c:	f001 fd88 	bl	80056a0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 8003b90:	2300      	movs	r3, #0
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	4b1f      	ldr	r3, [pc, #124]	; (8003c14 <HAL_InitTick+0xa4>)
 8003b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b98:	4a1e      	ldr	r2, [pc, #120]	; (8003c14 <HAL_InitTick+0xa4>)
 8003b9a:	f043 0302 	orr.w	r3, r3, #2
 8003b9e:	6453      	str	r3, [r2, #68]	; 0x44
 8003ba0:	4b1c      	ldr	r3, [pc, #112]	; (8003c14 <HAL_InitTick+0xa4>)
 8003ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003bac:	f107 0210 	add.w	r2, r7, #16
 8003bb0:	f107 0314 	add.w	r3, r7, #20
 8003bb4:	4611      	mov	r1, r2
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f002 fb7e 	bl	80062b8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM8 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003bbc:	f002 fb68 	bl	8006290 <HAL_RCC_GetPCLK2Freq>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc8:	4a13      	ldr	r2, [pc, #76]	; (8003c18 <HAL_InitTick+0xa8>)
 8003bca:	fba2 2303 	umull	r2, r3, r2, r3
 8003bce:	0c9b      	lsrs	r3, r3, #18
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 8003bd4:	4b11      	ldr	r3, [pc, #68]	; (8003c1c <HAL_InitTick+0xac>)
 8003bd6:	4a12      	ldr	r2, [pc, #72]	; (8003c20 <HAL_InitTick+0xb0>)
 8003bd8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000 / 1000) - 1;
 8003bda:	4b10      	ldr	r3, [pc, #64]	; (8003c1c <HAL_InitTick+0xac>)
 8003bdc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003be0:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 8003be2:	4a0e      	ldr	r2, [pc, #56]	; (8003c1c <HAL_InitTick+0xac>)
 8003be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be6:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 8003be8:	4b0c      	ldr	r3, [pc, #48]	; (8003c1c <HAL_InitTick+0xac>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bee:	4b0b      	ldr	r3, [pc, #44]	; (8003c1c <HAL_InitTick+0xac>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim8) == HAL_OK)
 8003bf4:	4809      	ldr	r0, [pc, #36]	; (8003c1c <HAL_InitTick+0xac>)
 8003bf6:	f002 fd13 	bl	8006620 <HAL_TIM_Base_Init>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d104      	bne.n	8003c0a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim8);
 8003c00:	4806      	ldr	r0, [pc, #24]	; (8003c1c <HAL_InitTick+0xac>)
 8003c02:	f002 fd38 	bl	8006676 <HAL_TIM_Base_Start_IT>
 8003c06:	4603      	mov	r3, r0
 8003c08:	e000      	b.n	8003c0c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3730      	adds	r7, #48	; 0x30
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40023800 	.word	0x40023800
 8003c18:	431bde83 	.word	0x431bde83
 8003c1c:	20015778 	.word	0x20015778
 8003c20:	40010400 	.word	0x40010400

08003c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003c28:	bf00      	nop
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c32:	b480      	push	{r7}
 8003c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c36:	e7fe      	b.n	8003c36 <HardFault_Handler+0x4>

08003c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c3c:	e7fe      	b.n	8003c3c <MemManage_Handler+0x4>

08003c3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c42:	e7fe      	b.n	8003c42 <BusFault_Handler+0x4>

08003c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c48:	e7fe      	b.n	8003c48 <UsageFault_Handler+0x4>

08003c4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c4e:	bf00      	nop
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003c5c:	4803      	ldr	r0, [pc, #12]	; (8003c6c <ADC_IRQHandler+0x14>)
 8003c5e:	f000 fa5b 	bl	8004118 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003c62:	4803      	ldr	r0, [pc, #12]	; (8003c70 <ADC_IRQHandler+0x18>)
 8003c64:	f000 fa58 	bl	8004118 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003c68:	bf00      	nop
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	20015608 	.word	0x20015608
 8003c70:	20015578 	.word	0x20015578

08003c74 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003c78:	4802      	ldr	r0, [pc, #8]	; (8003c84 <CAN1_TX_IRQHandler+0x10>)
 8003c7a:	f001 fa14 	bl	80050a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003c7e:	bf00      	nop
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20015710 	.word	0x20015710

08003c88 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003c8c:	4802      	ldr	r0, [pc, #8]	; (8003c98 <CAN1_RX0_IRQHandler+0x10>)
 8003c8e:	f001 fa0a 	bl	80050a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003c92:	bf00      	nop
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20015710 	.word	0x20015710

08003c9c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003ca0:	4802      	ldr	r0, [pc, #8]	; (8003cac <CAN1_RX1_IRQHandler+0x10>)
 8003ca2:	f001 fa00 	bl	80050a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003ca6:	bf00      	nop
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	20015710 	.word	0x20015710

08003cb0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	enable_motor_task_from_isr();
 8003cb4:	f7fd fe06 	bl	80018c4 <enable_motor_task_from_isr>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003cb8:	4802      	ldr	r0, [pc, #8]	; (8003cc4 <TIM4_IRQHandler+0x14>)
 8003cba:	f002 fdfc 	bl	80068b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003cbe:	bf00      	nop
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20015538 	.word	0x20015538

08003cc8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003ccc:	4802      	ldr	r0, [pc, #8]	; (8003cd8 <SPI2_IRQHandler+0x10>)
 8003cce:	f002 fb89 	bl	80063e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003cd2:	bf00      	nop
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	200154e0 	.word	0x200154e0

08003cdc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003ce0:	4803      	ldr	r0, [pc, #12]	; (8003cf0 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8003ce2:	f002 fde8 	bl	80068b6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8003ce6:	4803      	ldr	r0, [pc, #12]	; (8003cf4 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8003ce8:	f002 fde5 	bl	80068b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003cec:	bf00      	nop
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	20015778 	.word	0x20015778
 8003cf4:	20015650 	.word	0x20015650

08003cf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cfc:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <SystemInit+0x28>)
 8003cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d02:	4a07      	ldr	r2, [pc, #28]	; (8003d20 <SystemInit+0x28>)
 8003d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d0c:	4b04      	ldr	r3, [pc, #16]	; (8003d20 <SystemInit+0x28>)
 8003d0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d12:	609a      	str	r2, [r3, #8]
#endif
}
 8003d14:	bf00      	nop
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	e000ed00 	.word	0xe000ed00

08003d24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d5c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003d28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d2a:	e003      	b.n	8003d34 <LoopCopyDataInit>

08003d2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003d2c:	4b0c      	ldr	r3, [pc, #48]	; (8003d60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003d2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003d30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d32:	3104      	adds	r1, #4

08003d34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d34:	480b      	ldr	r0, [pc, #44]	; (8003d64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003d36:	4b0c      	ldr	r3, [pc, #48]	; (8003d68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003d38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d3c:	d3f6      	bcc.n	8003d2c <CopyDataInit>
  ldr  r2, =_sbss
 8003d3e:	4a0b      	ldr	r2, [pc, #44]	; (8003d6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003d40:	e002      	b.n	8003d48 <LoopFillZerobss>

08003d42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003d42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003d44:	f842 3b04 	str.w	r3, [r2], #4

08003d48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003d48:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003d4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d4c:	d3f9      	bcc.n	8003d42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d4e:	f7ff ffd3 	bl	8003cf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d52:	f008 fc5d 	bl	800c610 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d56:	f7fd fdd9 	bl	800190c <main>
  bx  lr    
 8003d5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003d5c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003d60:	0800dcb8 	.word	0x0800dcb8
  ldr  r0, =_sdata
 8003d64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003d68:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 8003d6c:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 8003d70:	200157fc 	.word	0x200157fc

08003d74 <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d74:	e7fe      	b.n	8003d74 <CAN1_SCE_IRQHandler>
	...

08003d78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d7c:	4b0e      	ldr	r3, [pc, #56]	; (8003db8 <HAL_Init+0x40>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a0d      	ldr	r2, [pc, #52]	; (8003db8 <HAL_Init+0x40>)
 8003d82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d88:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <HAL_Init+0x40>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a0a      	ldr	r2, [pc, #40]	; (8003db8 <HAL_Init+0x40>)
 8003d8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d94:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <HAL_Init+0x40>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a07      	ldr	r2, [pc, #28]	; (8003db8 <HAL_Init+0x40>)
 8003d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003da0:	2003      	movs	r0, #3
 8003da2:	f001 fc56 	bl	8005652 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003da6:	2000      	movs	r0, #0
 8003da8:	f7ff fee2 	bl	8003b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003dac:	f7ff fc0e 	bl	80035cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40023c00 	.word	0x40023c00

08003dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003dc0:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <HAL_IncTick+0x20>)
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <HAL_IncTick+0x24>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4413      	add	r3, r2
 8003dcc:	4a04      	ldr	r2, [pc, #16]	; (8003de0 <HAL_IncTick+0x24>)
 8003dce:	6013      	str	r3, [r2, #0]
}
 8003dd0:	bf00      	nop
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	20000010 	.word	0x20000010
 8003de0:	200157b8 	.word	0x200157b8

08003de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  return uwTick;
 8003de8:	4b03      	ldr	r3, [pc, #12]	; (8003df8 <HAL_GetTick+0x14>)
 8003dea:	681b      	ldr	r3, [r3, #0]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	200157b8 	.word	0x200157b8

08003dfc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e033      	b.n	8003e7a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d109      	bne.n	8003e2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7ff fc02 	bl	8003624 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	f003 0310 	and.w	r3, r3, #16
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d118      	bne.n	8003e6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003e42:	f023 0302 	bic.w	r3, r3, #2
 8003e46:	f043 0202 	orr.w	r2, r3, #2
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 fbf0 	bl	8004634 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	f023 0303 	bic.w	r3, r3, #3
 8003e62:	f043 0201 	orr.w	r2, r3, #1
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	641a      	str	r2, [r3, #64]	; 0x40
 8003e6a:	e001      	b.n	8003e70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d101      	bne.n	8003e9e <HAL_ADC_Start+0x1a>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e0a5      	b.n	8003fea <HAL_ADC_Start+0x166>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d018      	beq.n	8003ee6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0201 	orr.w	r2, r2, #1
 8003ec2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ec4:	4b4c      	ldr	r3, [pc, #304]	; (8003ff8 <HAL_ADC_Start+0x174>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a4c      	ldr	r2, [pc, #304]	; (8003ffc <HAL_ADC_Start+0x178>)
 8003eca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ece:	0c9a      	lsrs	r2, r3, #18
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	4413      	add	r3, r2
 8003ed6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003ed8:	e002      	b.n	8003ee0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	3b01      	subs	r3, #1
 8003ede:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f9      	bne.n	8003eda <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d179      	bne.n	8003fe8 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003efc:	f023 0301 	bic.w	r3, r3, #1
 8003f00:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d007      	beq.n	8003f26 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f1e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f32:	d106      	bne.n	8003f42 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f38:	f023 0206 	bic.w	r2, r3, #6
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	645a      	str	r2, [r3, #68]	; 0x44
 8003f40:	e002      	b.n	8003f48 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f50:	4b2b      	ldr	r3, [pc, #172]	; (8004000 <HAL_ADC_Start+0x17c>)
 8003f52:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003f5c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f003 031f 	and.w	r3, r3, #31
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d12a      	bne.n	8003fc0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a25      	ldr	r2, [pc, #148]	; (8004004 <HAL_ADC_Start+0x180>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d015      	beq.n	8003fa0 <HAL_ADC_Start+0x11c>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a23      	ldr	r2, [pc, #140]	; (8004008 <HAL_ADC_Start+0x184>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d105      	bne.n	8003f8a <HAL_ADC_Start+0x106>
 8003f7e:	4b20      	ldr	r3, [pc, #128]	; (8004000 <HAL_ADC_Start+0x17c>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f003 031f 	and.w	r3, r3, #31
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a1f      	ldr	r2, [pc, #124]	; (800400c <HAL_ADC_Start+0x188>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d129      	bne.n	8003fe8 <HAL_ADC_Start+0x164>
 8003f94:	4b1a      	ldr	r3, [pc, #104]	; (8004000 <HAL_ADC_Start+0x17c>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f003 031f 	and.w	r3, r3, #31
 8003f9c:	2b0f      	cmp	r3, #15
 8003f9e:	d823      	bhi.n	8003fe8 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d11c      	bne.n	8003fe8 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003fbc:	609a      	str	r2, [r3, #8]
 8003fbe:	e013      	b.n	8003fe8 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a0f      	ldr	r2, [pc, #60]	; (8004004 <HAL_ADC_Start+0x180>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d10e      	bne.n	8003fe8 <HAL_ADC_Start+0x164>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d107      	bne.n	8003fe8 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689a      	ldr	r2, [r3, #8]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003fe6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	20000008 	.word	0x20000008
 8003ffc:	431bde83 	.word	0x431bde83
 8004000:	40012300 	.word	0x40012300
 8004004:	40012000 	.word	0x40012000
 8004008:	40012100 	.word	0x40012100
 800400c:	40012200 	.word	0x40012200

08004010 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800401a:	2300      	movs	r3, #0
 800401c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800402c:	d113      	bne.n	8004056 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004038:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800403c:	d10b      	bne.n	8004056 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f043 0220 	orr.w	r2, r3, #32
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e05c      	b.n	8004110 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004056:	f7ff fec5 	bl	8003de4 <HAL_GetTick>
 800405a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800405c:	e01a      	b.n	8004094 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004064:	d016      	beq.n	8004094 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d007      	beq.n	800407c <HAL_ADC_PollForConversion+0x6c>
 800406c:	f7ff feba 	bl	8003de4 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d20b      	bcs.n	8004094 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004080:	f043 0204 	orr.w	r2, r3, #4
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e03d      	b.n	8004110 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d1dd      	bne.n	800405e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f06f 0212 	mvn.w	r2, #18
 80040aa:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d123      	bne.n	800410e <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d11f      	bne.n	800410e <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d006      	beq.n	80040ea <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d111      	bne.n	800410e <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d105      	bne.n	800410e <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	f043 0201 	orr.w	r2, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004120:	2300      	movs	r3, #0
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	2300      	movs	r3, #0
 8004126:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b02      	cmp	r3, #2
 8004134:	bf0c      	ite	eq
 8004136:	2301      	moveq	r3, #1
 8004138:	2300      	movne	r3, #0
 800413a:	b2db      	uxtb	r3, r3
 800413c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f003 0320 	and.w	r3, r3, #32
 8004148:	2b20      	cmp	r3, #32
 800414a:	bf0c      	ite	eq
 800414c:	2301      	moveq	r3, #1
 800414e:	2300      	movne	r3, #0
 8004150:	b2db      	uxtb	r3, r3
 8004152:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d049      	beq.n	80041ee <HAL_ADC_IRQHandler+0xd6>
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d046      	beq.n	80041ee <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	f003 0310 	and.w	r3, r3, #16
 8004168:	2b00      	cmp	r3, #0
 800416a:	d105      	bne.n	8004178 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d12b      	bne.n	80041de <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800418a:	2b00      	cmp	r3, #0
 800418c:	d127      	bne.n	80041de <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004194:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004198:	2b00      	cmp	r3, #0
 800419a:	d006      	beq.n	80041aa <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d119      	bne.n	80041de <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0220 	bic.w	r2, r2, #32
 80041b8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d105      	bne.n	80041de <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	f043 0201 	orr.w	r2, r3, #1
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f8e8 	bl	80043b4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f06f 0212 	mvn.w	r2, #18
 80041ec:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	bf0c      	ite	eq
 80041fc:	2301      	moveq	r3, #1
 80041fe:	2300      	movne	r3, #0
 8004200:	b2db      	uxtb	r3, r3
 8004202:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420e:	2b80      	cmp	r3, #128	; 0x80
 8004210:	bf0c      	ite	eq
 8004212:	2301      	moveq	r3, #1
 8004214:	2300      	movne	r3, #0
 8004216:	b2db      	uxtb	r3, r3
 8004218:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d057      	beq.n	80042d0 <HAL_ADC_IRQHandler+0x1b8>
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d054      	beq.n	80042d0 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	f003 0310 	and.w	r3, r3, #16
 800422e:	2b00      	cmp	r3, #0
 8004230:	d105      	bne.n	800423e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d139      	bne.n	80042c0 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004252:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004256:	2b00      	cmp	r3, #0
 8004258:	d006      	beq.n	8004268 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004264:	2b00      	cmp	r3, #0
 8004266:	d12b      	bne.n	80042c0 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004272:	2b00      	cmp	r3, #0
 8004274:	d124      	bne.n	80042c0 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004280:	2b00      	cmp	r3, #0
 8004282:	d11d      	bne.n	80042c0 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004288:	2b00      	cmp	r3, #0
 800428a:	d119      	bne.n	80042c0 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800429a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d105      	bne.n	80042c0 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b8:	f043 0201 	orr.w	r2, r3, #1
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 fab3 	bl	800482c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f06f 020c 	mvn.w	r2, #12
 80042ce:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b01      	cmp	r3, #1
 80042dc:	bf0c      	ite	eq
 80042de:	2301      	moveq	r3, #1
 80042e0:	2300      	movne	r3, #0
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f0:	2b40      	cmp	r3, #64	; 0x40
 80042f2:	bf0c      	ite	eq
 80042f4:	2301      	moveq	r3, #1
 80042f6:	2300      	movne	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d017      	beq.n	8004332 <HAL_ADC_IRQHandler+0x21a>
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d014      	beq.n	8004332 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b01      	cmp	r3, #1
 8004314:	d10d      	bne.n	8004332 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f850 	bl	80043c8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f06f 0201 	mvn.w	r2, #1
 8004330:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0320 	and.w	r3, r3, #32
 800433c:	2b20      	cmp	r3, #32
 800433e:	bf0c      	ite	eq
 8004340:	2301      	moveq	r3, #1
 8004342:	2300      	movne	r3, #0
 8004344:	b2db      	uxtb	r3, r3
 8004346:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004352:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004356:	bf0c      	ite	eq
 8004358:	2301      	moveq	r3, #1
 800435a:	2300      	movne	r3, #0
 800435c:	b2db      	uxtb	r3, r3
 800435e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d015      	beq.n	8004392 <HAL_ADC_IRQHandler+0x27a>
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d012      	beq.n	8004392 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004370:	f043 0202 	orr.w	r2, r3, #2
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f06f 0220 	mvn.w	r2, #32
 8004380:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f82a 	bl	80043dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f06f 0220 	mvn.w	r2, #32
 8004390:	601a      	str	r2, [r3, #0]
  }
}
 8004392:	bf00      	nop
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004404:	2b01      	cmp	r3, #1
 8004406:	d101      	bne.n	800440c <HAL_ADC_ConfigChannel+0x1c>
 8004408:	2302      	movs	r3, #2
 800440a:	e105      	b.n	8004618 <HAL_ADC_ConfigChannel+0x228>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b09      	cmp	r3, #9
 800441a:	d925      	bls.n	8004468 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68d9      	ldr	r1, [r3, #12]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	b29b      	uxth	r3, r3
 8004428:	461a      	mov	r2, r3
 800442a:	4613      	mov	r3, r2
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	4413      	add	r3, r2
 8004430:	3b1e      	subs	r3, #30
 8004432:	2207      	movs	r2, #7
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	43da      	mvns	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	400a      	ands	r2, r1
 8004440:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68d9      	ldr	r1, [r3, #12]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	b29b      	uxth	r3, r3
 8004452:	4618      	mov	r0, r3
 8004454:	4603      	mov	r3, r0
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	4403      	add	r3, r0
 800445a:	3b1e      	subs	r3, #30
 800445c:	409a      	lsls	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	60da      	str	r2, [r3, #12]
 8004466:	e022      	b.n	80044ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6919      	ldr	r1, [r3, #16]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	b29b      	uxth	r3, r3
 8004474:	461a      	mov	r2, r3
 8004476:	4613      	mov	r3, r2
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	4413      	add	r3, r2
 800447c:	2207      	movs	r2, #7
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	43da      	mvns	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	400a      	ands	r2, r1
 800448a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6919      	ldr	r1, [r3, #16]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	b29b      	uxth	r3, r3
 800449c:	4618      	mov	r0, r3
 800449e:	4603      	mov	r3, r0
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	4403      	add	r3, r0
 80044a4:	409a      	lsls	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2b06      	cmp	r3, #6
 80044b4:	d824      	bhi.n	8004500 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	4613      	mov	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	3b05      	subs	r3, #5
 80044c8:	221f      	movs	r2, #31
 80044ca:	fa02 f303 	lsl.w	r3, r2, r3
 80044ce:	43da      	mvns	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	400a      	ands	r2, r1
 80044d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	4618      	mov	r0, r3
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	4613      	mov	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	3b05      	subs	r3, #5
 80044f2:	fa00 f203 	lsl.w	r2, r0, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	635a      	str	r2, [r3, #52]	; 0x34
 80044fe:	e04c      	b.n	800459a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	2b0c      	cmp	r3, #12
 8004506:	d824      	bhi.n	8004552 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	3b23      	subs	r3, #35	; 0x23
 800451a:	221f      	movs	r2, #31
 800451c:	fa02 f303 	lsl.w	r3, r2, r3
 8004520:	43da      	mvns	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	400a      	ands	r2, r1
 8004528:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	b29b      	uxth	r3, r3
 8004536:	4618      	mov	r0, r3
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	4613      	mov	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	3b23      	subs	r3, #35	; 0x23
 8004544:	fa00 f203 	lsl.w	r2, r0, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	631a      	str	r2, [r3, #48]	; 0x30
 8004550:	e023      	b.n	800459a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	4613      	mov	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	3b41      	subs	r3, #65	; 0x41
 8004564:	221f      	movs	r2, #31
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	43da      	mvns	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	400a      	ands	r2, r1
 8004572:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	b29b      	uxth	r3, r3
 8004580:	4618      	mov	r0, r3
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	4613      	mov	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	3b41      	subs	r3, #65	; 0x41
 800458e:	fa00 f203 	lsl.w	r2, r0, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800459a:	4b22      	ldr	r3, [pc, #136]	; (8004624 <HAL_ADC_ConfigChannel+0x234>)
 800459c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a21      	ldr	r2, [pc, #132]	; (8004628 <HAL_ADC_ConfigChannel+0x238>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d109      	bne.n	80045bc <HAL_ADC_ConfigChannel+0x1cc>
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b12      	cmp	r3, #18
 80045ae:	d105      	bne.n	80045bc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a19      	ldr	r2, [pc, #100]	; (8004628 <HAL_ADC_ConfigChannel+0x238>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d123      	bne.n	800460e <HAL_ADC_ConfigChannel+0x21e>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b10      	cmp	r3, #16
 80045cc:	d003      	beq.n	80045d6 <HAL_ADC_ConfigChannel+0x1e6>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b11      	cmp	r3, #17
 80045d4:	d11b      	bne.n	800460e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b10      	cmp	r3, #16
 80045e8:	d111      	bne.n	800460e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80045ea:	4b10      	ldr	r3, [pc, #64]	; (800462c <HAL_ADC_ConfigChannel+0x23c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a10      	ldr	r2, [pc, #64]	; (8004630 <HAL_ADC_ConfigChannel+0x240>)
 80045f0:	fba2 2303 	umull	r2, r3, r2, r3
 80045f4:	0c9a      	lsrs	r2, r3, #18
 80045f6:	4613      	mov	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004600:	e002      	b.n	8004608 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	3b01      	subs	r3, #1
 8004606:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f9      	bne.n	8004602 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	40012300 	.word	0x40012300
 8004628:	40012000 	.word	0x40012000
 800462c:	20000008 	.word	0x20000008
 8004630:	431bde83 	.word	0x431bde83

08004634 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800463c:	4b79      	ldr	r3, [pc, #484]	; (8004824 <ADC_Init+0x1f0>)
 800463e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	431a      	orrs	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004668:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6859      	ldr	r1, [r3, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	021a      	lsls	r2, r3, #8
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800468c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6859      	ldr	r1, [r3, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6899      	ldr	r1, [r3, #8]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68da      	ldr	r2, [r3, #12]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c6:	4a58      	ldr	r2, [pc, #352]	; (8004828 <ADC_Init+0x1f4>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d022      	beq.n	8004712 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6899      	ldr	r1, [r3, #8]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80046fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6899      	ldr	r1, [r3, #8]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	609a      	str	r2, [r3, #8]
 8004710:	e00f      	b.n	8004732 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004720:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004730:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689a      	ldr	r2, [r3, #8]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0202 	bic.w	r2, r2, #2
 8004740:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6899      	ldr	r1, [r3, #8]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	7e1b      	ldrb	r3, [r3, #24]
 800474c:	005a      	lsls	r2, r3, #1
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 3020 	ldrb.w	r3, [r3, #32]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d01b      	beq.n	8004798 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800476e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800477e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6859      	ldr	r1, [r3, #4]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	3b01      	subs	r3, #1
 800478c:	035a      	lsls	r2, r3, #13
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	605a      	str	r2, [r3, #4]
 8004796:	e007      	b.n	80047a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80047b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	051a      	lsls	r2, r3, #20
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80047dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6899      	ldr	r1, [r3, #8]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047ea:	025a      	lsls	r2, r3, #9
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689a      	ldr	r2, [r3, #8]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004802:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6899      	ldr	r1, [r3, #8]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	029a      	lsls	r2, r3, #10
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	609a      	str	r2, [r3, #8]
}
 8004818:	bf00      	nop
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	40012300 	.word	0x40012300
 8004828:	0f000001 	.word	0x0f000001

0800482c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e0ed      	b.n	8004a2e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d102      	bne.n	8004864 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7fe ff64 	bl	800372c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0202 	bic.w	r2, r2, #2
 8004872:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004874:	f7ff fab6 	bl	8003de4 <HAL_GetTick>
 8004878:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800487a:	e012      	b.n	80048a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800487c:	f7ff fab2 	bl	8003de4 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b0a      	cmp	r3, #10
 8004888:	d90b      	bls.n	80048a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2205      	movs	r2, #5
 800489a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e0c5      	b.n	8004a2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1e5      	bne.n	800487c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0201 	orr.w	r2, r2, #1
 80048be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048c0:	f7ff fa90 	bl	8003de4 <HAL_GetTick>
 80048c4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80048c6:	e012      	b.n	80048ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80048c8:	f7ff fa8c 	bl	8003de4 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b0a      	cmp	r3, #10
 80048d4:	d90b      	bls.n	80048ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2205      	movs	r2, #5
 80048e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e09f      	b.n	8004a2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0e5      	beq.n	80048c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	7e1b      	ldrb	r3, [r3, #24]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d108      	bne.n	8004916 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	e007      	b.n	8004926 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004924:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	7e5b      	ldrb	r3, [r3, #25]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d108      	bne.n	8004940 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	e007      	b.n	8004950 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800494e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	7e9b      	ldrb	r3, [r3, #26]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d108      	bne.n	800496a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 0220 	orr.w	r2, r2, #32
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	e007      	b.n	800497a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 0220 	bic.w	r2, r2, #32
 8004978:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	7edb      	ldrb	r3, [r3, #27]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d108      	bne.n	8004994 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0210 	bic.w	r2, r2, #16
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	e007      	b.n	80049a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0210 	orr.w	r2, r2, #16
 80049a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	7f1b      	ldrb	r3, [r3, #28]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d108      	bne.n	80049be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f042 0208 	orr.w	r2, r2, #8
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	e007      	b.n	80049ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0208 	bic.w	r2, r2, #8
 80049cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	7f5b      	ldrb	r3, [r3, #29]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d108      	bne.n	80049e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f042 0204 	orr.w	r2, r2, #4
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	e007      	b.n	80049f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 0204 	bic.w	r2, r2, #4
 80049f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	ea42 0103 	orr.w	r1, r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	1e5a      	subs	r2, r3, #1
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
	...

08004a38 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a4e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004a50:	7cfb      	ldrb	r3, [r7, #19]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d003      	beq.n	8004a5e <HAL_CAN_ConfigFilter+0x26>
 8004a56:	7cfb      	ldrb	r3, [r7, #19]
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	f040 80be 	bne.w	8004bda <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004a5e:	4b65      	ldr	r3, [pc, #404]	; (8004bf4 <HAL_CAN_ConfigFilter+0x1bc>)
 8004a60:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004a68:	f043 0201 	orr.w	r2, r3, #1
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004a78:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	021b      	lsls	r3, r3, #8
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	f003 031f 	and.w	r3, r3, #31
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	43db      	mvns	r3, r3
 8004ab0:	401a      	ands	r2, r3
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d123      	bne.n	8004b08 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	43db      	mvns	r3, r3
 8004aca:	401a      	ands	r2, r3
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004ae2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	3248      	adds	r2, #72	; 0x48
 8004ae8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004afc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004afe:	6979      	ldr	r1, [r7, #20]
 8004b00:	3348      	adds	r3, #72	; 0x48
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	440b      	add	r3, r1
 8004b06:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d122      	bne.n	8004b56 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004b30:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	3248      	adds	r2, #72	; 0x48
 8004b36:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004b4a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004b4c:	6979      	ldr	r1, [r7, #20]
 8004b4e:	3348      	adds	r3, #72	; 0x48
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	440b      	add	r3, r1
 8004b54:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d109      	bne.n	8004b72 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	43db      	mvns	r3, r3
 8004b68:	401a      	ands	r2, r3
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004b70:	e007      	b.n	8004b82 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d109      	bne.n	8004b9e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	43db      	mvns	r3, r3
 8004b94:	401a      	ands	r2, r3
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004b9c:	e007      	b.n	8004bae <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d107      	bne.n	8004bc6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004bcc:	f023 0201 	bic.w	r2, r3, #1
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	e006      	b.n	8004be8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
  }
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	371c      	adds	r7, #28
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	40006400 	.word	0x40006400

08004bf8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d12e      	bne.n	8004c6a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0201 	bic.w	r2, r2, #1
 8004c22:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c24:	f7ff f8de 	bl	8003de4 <HAL_GetTick>
 8004c28:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004c2a:	e012      	b.n	8004c52 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004c2c:	f7ff f8da 	bl	8003de4 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b0a      	cmp	r3, #10
 8004c38:	d90b      	bls.n	8004c52 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2205      	movs	r2, #5
 8004c4a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e012      	b.n	8004c78 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1e5      	bne.n	8004c2c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004c66:	2300      	movs	r3, #0
 8004c68:	e006      	b.n	8004c78 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
  }
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b089      	sub	sp, #36	; 0x24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
 8004c8c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c94:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004c9e:	7ffb      	ldrb	r3, [r7, #31]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d003      	beq.n	8004cac <HAL_CAN_AddTxMessage+0x2c>
 8004ca4:	7ffb      	ldrb	r3, [r7, #31]
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	f040 80b8 	bne.w	8004e1c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10a      	bne.n	8004ccc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d105      	bne.n	8004ccc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 80a0 	beq.w	8004e0c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	0e1b      	lsrs	r3, r3, #24
 8004cd0:	f003 0303 	and.w	r3, r3, #3
 8004cd4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d907      	bls.n	8004cec <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e09e      	b.n	8004e2a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004cec:	2201      	movs	r2, #1
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	409a      	lsls	r2, r3
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10d      	bne.n	8004d1a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004d08:	68f9      	ldr	r1, [r7, #12]
 8004d0a:	6809      	ldr	r1, [r1, #0]
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	3318      	adds	r3, #24
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	440b      	add	r3, r1
 8004d16:	601a      	str	r2, [r3, #0]
 8004d18:	e00f      	b.n	8004d3a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004d24:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004d2a:	68f9      	ldr	r1, [r7, #12]
 8004d2c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004d2e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	3318      	adds	r3, #24
 8004d34:	011b      	lsls	r3, r3, #4
 8004d36:	440b      	add	r3, r1
 8004d38:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6819      	ldr	r1, [r3, #0]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	691a      	ldr	r2, [r3, #16]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	3318      	adds	r3, #24
 8004d46:	011b      	lsls	r3, r3, #4
 8004d48:	440b      	add	r3, r1
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	7d1b      	ldrb	r3, [r3, #20]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d111      	bne.n	8004d7a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	3318      	adds	r3, #24
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	4413      	add	r3, r2
 8004d62:	3304      	adds	r3, #4
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	6811      	ldr	r1, [r2, #0]
 8004d6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	3318      	adds	r3, #24
 8004d72:	011b      	lsls	r3, r3, #4
 8004d74:	440b      	add	r3, r1
 8004d76:	3304      	adds	r3, #4
 8004d78:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3307      	adds	r3, #7
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	061a      	lsls	r2, r3, #24
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	3306      	adds	r3, #6
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	041b      	lsls	r3, r3, #16
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3305      	adds	r3, #5
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	021b      	lsls	r3, r3, #8
 8004d94:	4313      	orrs	r3, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	3204      	adds	r2, #4
 8004d9a:	7812      	ldrb	r2, [r2, #0]
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	6811      	ldr	r1, [r2, #0]
 8004da2:	ea43 0200 	orr.w	r2, r3, r0
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	440b      	add	r3, r1
 8004dac:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004db0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3303      	adds	r3, #3
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	061a      	lsls	r2, r3, #24
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	3302      	adds	r3, #2
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	041b      	lsls	r3, r3, #16
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	021b      	lsls	r3, r3, #8
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	7812      	ldrb	r2, [r2, #0]
 8004dd2:	4610      	mov	r0, r2
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	6811      	ldr	r1, [r2, #0]
 8004dd8:	ea43 0200 	orr.w	r2, r3, r0
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	440b      	add	r3, r1
 8004de2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004de6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	3318      	adds	r3, #24
 8004df0:	011b      	lsls	r3, r3, #4
 8004df2:	4413      	add	r3, r2
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	6811      	ldr	r1, [r2, #0]
 8004dfa:	f043 0201 	orr.w	r2, r3, #1
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	3318      	adds	r3, #24
 8004e02:	011b      	lsls	r3, r3, #4
 8004e04:	440b      	add	r3, r1
 8004e06:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	e00e      	b.n	8004e2a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e006      	b.n	8004e2a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
  }
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3724      	adds	r7, #36	; 0x24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004e36:	b480      	push	{r7}
 8004e38:	b087      	sub	sp, #28
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	60f8      	str	r0, [r7, #12]
 8004e3e:	60b9      	str	r1, [r7, #8]
 8004e40:	607a      	str	r2, [r7, #4]
 8004e42:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e4a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004e4c:	7dfb      	ldrb	r3, [r7, #23]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d003      	beq.n	8004e5a <HAL_CAN_GetRxMessage+0x24>
 8004e52:	7dfb      	ldrb	r3, [r7, #23]
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	f040 80f3 	bne.w	8005040 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10e      	bne.n	8004e7e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f003 0303 	and.w	r3, r3, #3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d116      	bne.n	8004e9c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e0e7      	b.n	800504e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	f003 0303 	and.w	r3, r3, #3
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d107      	bne.n	8004e9c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e0d8      	b.n	800504e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	331b      	adds	r3, #27
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	4413      	add	r3, r2
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0204 	and.w	r2, r3, #4
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10c      	bne.n	8004ed4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	331b      	adds	r3, #27
 8004ec2:	011b      	lsls	r3, r3, #4
 8004ec4:	4413      	add	r3, r2
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	0d5b      	lsrs	r3, r3, #21
 8004eca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	e00b      	b.n	8004eec <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	331b      	adds	r3, #27
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	4413      	add	r3, r2
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	08db      	lsrs	r3, r3, #3
 8004ee4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	331b      	adds	r3, #27
 8004ef4:	011b      	lsls	r3, r3, #4
 8004ef6:	4413      	add	r3, r2
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0202 	and.w	r2, r3, #2
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	331b      	adds	r3, #27
 8004f0a:	011b      	lsls	r3, r3, #4
 8004f0c:	4413      	add	r3, r2
 8004f0e:	3304      	adds	r3, #4
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 020f 	and.w	r2, r3, #15
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	331b      	adds	r3, #27
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	4413      	add	r3, r2
 8004f26:	3304      	adds	r3, #4
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	0a1b      	lsrs	r3, r3, #8
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	331b      	adds	r3, #27
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	4413      	add	r3, r2
 8004f3e:	3304      	adds	r3, #4
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	0c1b      	lsrs	r3, r3, #16
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	011b      	lsls	r3, r3, #4
 8004f68:	4413      	add	r3, r2
 8004f6a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	0a1a      	lsrs	r2, r3, #8
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	3301      	adds	r3, #1
 8004f76:	b2d2      	uxtb	r2, r2
 8004f78:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	0c1a      	lsrs	r2, r3, #16
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	3302      	adds	r3, #2
 8004f90:	b2d2      	uxtb	r2, r2
 8004f92:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	011b      	lsls	r3, r3, #4
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	0e1a      	lsrs	r2, r3, #24
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	3303      	adds	r3, #3
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	011b      	lsls	r3, r3, #4
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	011b      	lsls	r3, r3, #4
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	0a1a      	lsrs	r2, r3, #8
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	3305      	adds	r3, #5
 8004fdc:	b2d2      	uxtb	r2, r2
 8004fde:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	011b      	lsls	r3, r3, #4
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	0c1a      	lsrs	r2, r3, #16
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	3306      	adds	r3, #6
 8004ff6:	b2d2      	uxtb	r2, r2
 8004ff8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	4413      	add	r3, r2
 8005004:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	0e1a      	lsrs	r2, r3, #24
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	3307      	adds	r3, #7
 8005010:	b2d2      	uxtb	r2, r2
 8005012:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d108      	bne.n	800502c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68da      	ldr	r2, [r3, #12]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f042 0220 	orr.w	r2, r2, #32
 8005028:	60da      	str	r2, [r3, #12]
 800502a:	e007      	b.n	800503c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691a      	ldr	r2, [r3, #16]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0220 	orr.w	r2, r2, #32
 800503a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800503c:	2300      	movs	r3, #0
 800503e:	e006      	b.n	800504e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
  }
}
 800504e:	4618      	mov	r0, r3
 8005050:	371c      	adds	r7, #28
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800505a:	b480      	push	{r7}
 800505c:	b085      	sub	sp, #20
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 3020 	ldrb.w	r3, [r3, #32]
 800506a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800506c:	7bfb      	ldrb	r3, [r7, #15]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d002      	beq.n	8005078 <HAL_CAN_ActivateNotification+0x1e>
 8005072:	7bfb      	ldrb	r3, [r7, #15]
 8005074:	2b02      	cmp	r3, #2
 8005076:	d109      	bne.n	800508c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6959      	ldr	r1, [r3, #20]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005088:	2300      	movs	r3, #0
 800508a:	e006      	b.n	800509a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
  }
}
 800509a:	4618      	mov	r0, r3
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b08a      	sub	sp, #40	; 0x28
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80050ae:	2300      	movs	r3, #0
 80050b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80050e2:	6a3b      	ldr	r3, [r7, #32]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d07c      	beq.n	80051e6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d023      	beq.n	800513e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2201      	movs	r2, #1
 80050fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d003      	beq.n	8005110 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f97d 	bl	8005408 <HAL_CAN_TxMailbox0CompleteCallback>
 800510e:	e016      	b.n	800513e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	f003 0304 	and.w	r3, r3, #4
 8005116:	2b00      	cmp	r3, #0
 8005118:	d004      	beq.n	8005124 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005120:	627b      	str	r3, [r7, #36]	; 0x24
 8005122:	e00c      	b.n	800513e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	f003 0308 	and.w	r3, r3, #8
 800512a:	2b00      	cmp	r3, #0
 800512c:	d004      	beq.n	8005138 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005134:	627b      	str	r3, [r7, #36]	; 0x24
 8005136:	e002      	b.n	800513e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f983 	bl	8005444 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005144:	2b00      	cmp	r3, #0
 8005146:	d024      	beq.n	8005192 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005150:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f95d 	bl	800541c <HAL_CAN_TxMailbox1CompleteCallback>
 8005162:	e016      	b.n	8005192 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800516a:	2b00      	cmp	r3, #0
 800516c:	d004      	beq.n	8005178 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800516e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005170:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005174:	627b      	str	r3, [r7, #36]	; 0x24
 8005176:	e00c      	b.n	8005192 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800517e:	2b00      	cmp	r3, #0
 8005180:	d004      	beq.n	800518c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005188:	627b      	str	r3, [r7, #36]	; 0x24
 800518a:	e002      	b.n	8005192 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f963 	bl	8005458 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d024      	beq.n	80051e6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80051a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 f93d 	bl	8005430 <HAL_CAN_TxMailbox2CompleteCallback>
 80051b6:	e016      	b.n	80051e6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d004      	beq.n	80051cc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051c8:	627b      	str	r3, [r7, #36]	; 0x24
 80051ca:	e00c      	b.n	80051e6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d004      	beq.n	80051e0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051dc:	627b      	str	r3, [r7, #36]	; 0x24
 80051de:	e002      	b.n	80051e6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f943 	bl	800546c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	f003 0308 	and.w	r3, r3, #8
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00c      	beq.n	800520a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f003 0310 	and.w	r3, r3, #16
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d007      	beq.n	800520a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005200:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2210      	movs	r2, #16
 8005208:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	f003 0304 	and.w	r3, r3, #4
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00b      	beq.n	800522c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f003 0308 	and.w	r3, r3, #8
 800521a:	2b00      	cmp	r3, #0
 800521c:	d006      	beq.n	800522c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2208      	movs	r2, #8
 8005224:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f92a 	bl	8005480 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d009      	beq.n	800524a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f003 0303 	and.w	r3, r3, #3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7fb fe47 	bl	8000ed8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00c      	beq.n	800526e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f003 0310 	and.w	r3, r3, #16
 800525a:	2b00      	cmp	r3, #0
 800525c:	d007      	beq.n	800526e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005264:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2210      	movs	r2, #16
 800526c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	f003 0320 	and.w	r3, r3, #32
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00b      	beq.n	8005290 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	f003 0308 	and.w	r3, r3, #8
 800527e:	2b00      	cmp	r3, #0
 8005280:	d006      	beq.n	8005290 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2208      	movs	r2, #8
 8005288:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f90c 	bl	80054a8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005290:	6a3b      	ldr	r3, [r7, #32]
 8005292:	f003 0310 	and.w	r3, r3, #16
 8005296:	2b00      	cmp	r3, #0
 8005298:	d009      	beq.n	80052ae <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	f003 0303 	and.w	r3, r3, #3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f8f3 	bl	8005494 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80052ae:	6a3b      	ldr	r3, [r7, #32]
 80052b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00b      	beq.n	80052d0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	f003 0310 	and.w	r3, r3, #16
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d006      	beq.n	80052d0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2210      	movs	r2, #16
 80052c8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f8f6 	bl	80054bc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00b      	beq.n	80052f2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d006      	beq.n	80052f2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2208      	movs	r2, #8
 80052ea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f8ef 	bl	80054d0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d075      	beq.n	80053e8 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	f003 0304 	and.w	r3, r3, #4
 8005302:	2b00      	cmp	r3, #0
 8005304:	d06c      	beq.n	80053e0 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530c:	2b00      	cmp	r3, #0
 800530e:	d008      	beq.n	8005322 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	f043 0301 	orr.w	r3, r3, #1
 8005320:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005322:	6a3b      	ldr	r3, [r7, #32]
 8005324:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005328:	2b00      	cmp	r3, #0
 800532a:	d008      	beq.n	800533e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	f043 0302 	orr.w	r3, r3, #2
 800533c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005344:	2b00      	cmp	r3, #0
 8005346:	d008      	beq.n	800535a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	f043 0304 	orr.w	r3, r3, #4
 8005358:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800535a:	6a3b      	ldr	r3, [r7, #32]
 800535c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005360:	2b00      	cmp	r3, #0
 8005362:	d03d      	beq.n	80053e0 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800536a:	2b00      	cmp	r3, #0
 800536c:	d038      	beq.n	80053e0 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005374:	2b30      	cmp	r3, #48	; 0x30
 8005376:	d017      	beq.n	80053a8 <HAL_CAN_IRQHandler+0x302>
 8005378:	2b30      	cmp	r3, #48	; 0x30
 800537a:	d804      	bhi.n	8005386 <HAL_CAN_IRQHandler+0x2e0>
 800537c:	2b10      	cmp	r3, #16
 800537e:	d009      	beq.n	8005394 <HAL_CAN_IRQHandler+0x2ee>
 8005380:	2b20      	cmp	r3, #32
 8005382:	d00c      	beq.n	800539e <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005384:	e024      	b.n	80053d0 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8005386:	2b50      	cmp	r3, #80	; 0x50
 8005388:	d018      	beq.n	80053bc <HAL_CAN_IRQHandler+0x316>
 800538a:	2b60      	cmp	r3, #96	; 0x60
 800538c:	d01b      	beq.n	80053c6 <HAL_CAN_IRQHandler+0x320>
 800538e:	2b40      	cmp	r3, #64	; 0x40
 8005390:	d00f      	beq.n	80053b2 <HAL_CAN_IRQHandler+0x30c>
            break;
 8005392:	e01d      	b.n	80053d0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	f043 0308 	orr.w	r3, r3, #8
 800539a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800539c:	e018      	b.n	80053d0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	f043 0310 	orr.w	r3, r3, #16
 80053a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80053a6:	e013      	b.n	80053d0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	f043 0320 	orr.w	r3, r3, #32
 80053ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80053b0:	e00e      	b.n	80053d0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80053ba:	e009      	b.n	80053d0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80053c4:	e004      	b.n	80053d0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80053ce:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	699a      	ldr	r2, [r3, #24]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80053de:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2204      	movs	r2, #4
 80053e6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d008      	beq.n	8005400 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	431a      	orrs	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f872 	bl	80054e4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005400:	bf00      	nop
 8005402:	3728      	adds	r7, #40	; 0x28
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f003 0307 	and.w	r3, r3, #7
 8005506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005508:	4b0c      	ldr	r3, [pc, #48]	; (800553c <__NVIC_SetPriorityGrouping+0x44>)
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005514:	4013      	ands	r3, r2
 8005516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005520:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800552a:	4a04      	ldr	r2, [pc, #16]	; (800553c <__NVIC_SetPriorityGrouping+0x44>)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	60d3      	str	r3, [r2, #12]
}
 8005530:	bf00      	nop
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr
 800553c:	e000ed00 	.word	0xe000ed00

08005540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005540:	b480      	push	{r7}
 8005542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005544:	4b04      	ldr	r3, [pc, #16]	; (8005558 <__NVIC_GetPriorityGrouping+0x18>)
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	0a1b      	lsrs	r3, r3, #8
 800554a:	f003 0307 	and.w	r3, r3, #7
}
 800554e:	4618      	mov	r0, r3
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	e000ed00 	.word	0xe000ed00

0800555c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	4603      	mov	r3, r0
 8005564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800556a:	2b00      	cmp	r3, #0
 800556c:	db0b      	blt.n	8005586 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800556e:	79fb      	ldrb	r3, [r7, #7]
 8005570:	f003 021f 	and.w	r2, r3, #31
 8005574:	4907      	ldr	r1, [pc, #28]	; (8005594 <__NVIC_EnableIRQ+0x38>)
 8005576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800557a:	095b      	lsrs	r3, r3, #5
 800557c:	2001      	movs	r0, #1
 800557e:	fa00 f202 	lsl.w	r2, r0, r2
 8005582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005586:	bf00      	nop
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	e000e100 	.word	0xe000e100

08005598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	4603      	mov	r3, r0
 80055a0:	6039      	str	r1, [r7, #0]
 80055a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	db0a      	blt.n	80055c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	490c      	ldr	r1, [pc, #48]	; (80055e4 <__NVIC_SetPriority+0x4c>)
 80055b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055b6:	0112      	lsls	r2, r2, #4
 80055b8:	b2d2      	uxtb	r2, r2
 80055ba:	440b      	add	r3, r1
 80055bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055c0:	e00a      	b.n	80055d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	4908      	ldr	r1, [pc, #32]	; (80055e8 <__NVIC_SetPriority+0x50>)
 80055c8:	79fb      	ldrb	r3, [r7, #7]
 80055ca:	f003 030f 	and.w	r3, r3, #15
 80055ce:	3b04      	subs	r3, #4
 80055d0:	0112      	lsls	r2, r2, #4
 80055d2:	b2d2      	uxtb	r2, r2
 80055d4:	440b      	add	r3, r1
 80055d6:	761a      	strb	r2, [r3, #24]
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	e000e100 	.word	0xe000e100
 80055e8:	e000ed00 	.word	0xe000ed00

080055ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b089      	sub	sp, #36	; 0x24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f003 0307 	and.w	r3, r3, #7
 80055fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	f1c3 0307 	rsb	r3, r3, #7
 8005606:	2b04      	cmp	r3, #4
 8005608:	bf28      	it	cs
 800560a:	2304      	movcs	r3, #4
 800560c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	3304      	adds	r3, #4
 8005612:	2b06      	cmp	r3, #6
 8005614:	d902      	bls.n	800561c <NVIC_EncodePriority+0x30>
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	3b03      	subs	r3, #3
 800561a:	e000      	b.n	800561e <NVIC_EncodePriority+0x32>
 800561c:	2300      	movs	r3, #0
 800561e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	fa02 f303 	lsl.w	r3, r2, r3
 800562a:	43da      	mvns	r2, r3
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	401a      	ands	r2, r3
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005634:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	fa01 f303 	lsl.w	r3, r1, r3
 800563e:	43d9      	mvns	r1, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005644:	4313      	orrs	r3, r2
         );
}
 8005646:	4618      	mov	r0, r3
 8005648:	3724      	adds	r7, #36	; 0x24
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b082      	sub	sp, #8
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7ff ff4c 	bl	80054f8 <__NVIC_SetPriorityGrouping>
}
 8005660:	bf00      	nop
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
 800566e:	4603      	mov	r3, r0
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
 8005674:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005676:	2300      	movs	r3, #0
 8005678:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800567a:	f7ff ff61 	bl	8005540 <__NVIC_GetPriorityGrouping>
 800567e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	68b9      	ldr	r1, [r7, #8]
 8005684:	6978      	ldr	r0, [r7, #20]
 8005686:	f7ff ffb1 	bl	80055ec <NVIC_EncodePriority>
 800568a:	4602      	mov	r2, r0
 800568c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005690:	4611      	mov	r1, r2
 8005692:	4618      	mov	r0, r3
 8005694:	f7ff ff80 	bl	8005598 <__NVIC_SetPriority>
}
 8005698:	bf00      	nop
 800569a:	3718      	adds	r7, #24
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	4603      	mov	r3, r0
 80056a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7ff ff54 	bl	800555c <__NVIC_EnableIRQ>
}
 80056b4:	bf00      	nop
 80056b6:	3708      	adds	r7, #8
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d004      	beq.n	80056da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2280      	movs	r2, #128	; 0x80
 80056d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e00c      	b.n	80056f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2205      	movs	r2, #5
 80056de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 0201 	bic.w	r2, r2, #1
 80056f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005700:	b480      	push	{r7}
 8005702:	b089      	sub	sp, #36	; 0x24
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800570a:	2300      	movs	r3, #0
 800570c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800570e:	2300      	movs	r3, #0
 8005710:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005712:	2300      	movs	r3, #0
 8005714:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005716:	2300      	movs	r3, #0
 8005718:	61fb      	str	r3, [r7, #28]
 800571a:	e16b      	b.n	80059f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800571c:	2201      	movs	r2, #1
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	fa02 f303 	lsl.w	r3, r2, r3
 8005724:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	4013      	ands	r3, r2
 800572e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	429a      	cmp	r2, r3
 8005736:	f040 815a 	bne.w	80059ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d00b      	beq.n	800575a <HAL_GPIO_Init+0x5a>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	2b02      	cmp	r3, #2
 8005748:	d007      	beq.n	800575a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800574e:	2b11      	cmp	r3, #17
 8005750:	d003      	beq.n	800575a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	2b12      	cmp	r3, #18
 8005758:	d130      	bne.n	80057bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	005b      	lsls	r3, r3, #1
 8005764:	2203      	movs	r2, #3
 8005766:	fa02 f303 	lsl.w	r3, r2, r3
 800576a:	43db      	mvns	r3, r3
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	4013      	ands	r3, r2
 8005770:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	68da      	ldr	r2, [r3, #12]
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	fa02 f303 	lsl.w	r3, r2, r3
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	4313      	orrs	r3, r2
 8005782:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	69ba      	ldr	r2, [r7, #24]
 8005788:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005790:	2201      	movs	r2, #1
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	fa02 f303 	lsl.w	r3, r2, r3
 8005798:	43db      	mvns	r3, r3
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	4013      	ands	r3, r2
 800579e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	091b      	lsrs	r3, r3, #4
 80057a6:	f003 0201 	and.w	r2, r3, #1
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	fa02 f303 	lsl.w	r3, r2, r3
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	2203      	movs	r2, #3
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	43db      	mvns	r3, r3
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	4013      	ands	r3, r2
 80057d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	689a      	ldr	r2, [r3, #8]
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	fa02 f303 	lsl.w	r3, r2, r3
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d003      	beq.n	80057fc <HAL_GPIO_Init+0xfc>
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	2b12      	cmp	r3, #18
 80057fa:	d123      	bne.n	8005844 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	08da      	lsrs	r2, r3, #3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3208      	adds	r2, #8
 8005804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005808:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	220f      	movs	r2, #15
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	43db      	mvns	r3, r3
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	4013      	ands	r3, r2
 800581e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	691a      	ldr	r2, [r3, #16]
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	f003 0307 	and.w	r3, r3, #7
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	fa02 f303 	lsl.w	r3, r2, r3
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	4313      	orrs	r3, r2
 8005834:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	08da      	lsrs	r2, r3, #3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	3208      	adds	r2, #8
 800583e:	69b9      	ldr	r1, [r7, #24]
 8005840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	2203      	movs	r2, #3
 8005850:	fa02 f303 	lsl.w	r3, r2, r3
 8005854:	43db      	mvns	r3, r3
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	4013      	ands	r3, r2
 800585a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f003 0203 	and.w	r2, r3, #3
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	fa02 f303 	lsl.w	r3, r2, r3
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	4313      	orrs	r3, r2
 8005870:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 80b4 	beq.w	80059ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005886:	2300      	movs	r3, #0
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	4b5f      	ldr	r3, [pc, #380]	; (8005a08 <HAL_GPIO_Init+0x308>)
 800588c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588e:	4a5e      	ldr	r2, [pc, #376]	; (8005a08 <HAL_GPIO_Init+0x308>)
 8005890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005894:	6453      	str	r3, [r2, #68]	; 0x44
 8005896:	4b5c      	ldr	r3, [pc, #368]	; (8005a08 <HAL_GPIO_Init+0x308>)
 8005898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058a2:	4a5a      	ldr	r2, [pc, #360]	; (8005a0c <HAL_GPIO_Init+0x30c>)
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	089b      	lsrs	r3, r3, #2
 80058a8:	3302      	adds	r3, #2
 80058aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	f003 0303 	and.w	r3, r3, #3
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	220f      	movs	r2, #15
 80058ba:	fa02 f303 	lsl.w	r3, r2, r3
 80058be:	43db      	mvns	r3, r3
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	4013      	ands	r3, r2
 80058c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a51      	ldr	r2, [pc, #324]	; (8005a10 <HAL_GPIO_Init+0x310>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d02b      	beq.n	8005926 <HAL_GPIO_Init+0x226>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a50      	ldr	r2, [pc, #320]	; (8005a14 <HAL_GPIO_Init+0x314>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d025      	beq.n	8005922 <HAL_GPIO_Init+0x222>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a4f      	ldr	r2, [pc, #316]	; (8005a18 <HAL_GPIO_Init+0x318>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d01f      	beq.n	800591e <HAL_GPIO_Init+0x21e>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a4e      	ldr	r2, [pc, #312]	; (8005a1c <HAL_GPIO_Init+0x31c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d019      	beq.n	800591a <HAL_GPIO_Init+0x21a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a4d      	ldr	r2, [pc, #308]	; (8005a20 <HAL_GPIO_Init+0x320>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d013      	beq.n	8005916 <HAL_GPIO_Init+0x216>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a4c      	ldr	r2, [pc, #304]	; (8005a24 <HAL_GPIO_Init+0x324>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d00d      	beq.n	8005912 <HAL_GPIO_Init+0x212>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a4b      	ldr	r2, [pc, #300]	; (8005a28 <HAL_GPIO_Init+0x328>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d007      	beq.n	800590e <HAL_GPIO_Init+0x20e>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a4a      	ldr	r2, [pc, #296]	; (8005a2c <HAL_GPIO_Init+0x32c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d101      	bne.n	800590a <HAL_GPIO_Init+0x20a>
 8005906:	2307      	movs	r3, #7
 8005908:	e00e      	b.n	8005928 <HAL_GPIO_Init+0x228>
 800590a:	2308      	movs	r3, #8
 800590c:	e00c      	b.n	8005928 <HAL_GPIO_Init+0x228>
 800590e:	2306      	movs	r3, #6
 8005910:	e00a      	b.n	8005928 <HAL_GPIO_Init+0x228>
 8005912:	2305      	movs	r3, #5
 8005914:	e008      	b.n	8005928 <HAL_GPIO_Init+0x228>
 8005916:	2304      	movs	r3, #4
 8005918:	e006      	b.n	8005928 <HAL_GPIO_Init+0x228>
 800591a:	2303      	movs	r3, #3
 800591c:	e004      	b.n	8005928 <HAL_GPIO_Init+0x228>
 800591e:	2302      	movs	r3, #2
 8005920:	e002      	b.n	8005928 <HAL_GPIO_Init+0x228>
 8005922:	2301      	movs	r3, #1
 8005924:	e000      	b.n	8005928 <HAL_GPIO_Init+0x228>
 8005926:	2300      	movs	r3, #0
 8005928:	69fa      	ldr	r2, [r7, #28]
 800592a:	f002 0203 	and.w	r2, r2, #3
 800592e:	0092      	lsls	r2, r2, #2
 8005930:	4093      	lsls	r3, r2
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	4313      	orrs	r3, r2
 8005936:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005938:	4934      	ldr	r1, [pc, #208]	; (8005a0c <HAL_GPIO_Init+0x30c>)
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	089b      	lsrs	r3, r3, #2
 800593e:	3302      	adds	r3, #2
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005946:	4b3a      	ldr	r3, [pc, #232]	; (8005a30 <HAL_GPIO_Init+0x330>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	43db      	mvns	r3, r3
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	4013      	ands	r3, r2
 8005954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005962:	69ba      	ldr	r2, [r7, #24]
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	4313      	orrs	r3, r2
 8005968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800596a:	4a31      	ldr	r2, [pc, #196]	; (8005a30 <HAL_GPIO_Init+0x330>)
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005970:	4b2f      	ldr	r3, [pc, #188]	; (8005a30 <HAL_GPIO_Init+0x330>)
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	43db      	mvns	r3, r3
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	4013      	ands	r3, r2
 800597e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d003      	beq.n	8005994 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	4313      	orrs	r3, r2
 8005992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005994:	4a26      	ldr	r2, [pc, #152]	; (8005a30 <HAL_GPIO_Init+0x330>)
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800599a:	4b25      	ldr	r3, [pc, #148]	; (8005a30 <HAL_GPIO_Init+0x330>)
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	43db      	mvns	r3, r3
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	4013      	ands	r3, r2
 80059a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059be:	4a1c      	ldr	r2, [pc, #112]	; (8005a30 <HAL_GPIO_Init+0x330>)
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059c4:	4b1a      	ldr	r3, [pc, #104]	; (8005a30 <HAL_GPIO_Init+0x330>)
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	43db      	mvns	r3, r3
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	4013      	ands	r3, r2
 80059d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d003      	beq.n	80059e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059e8:	4a11      	ldr	r2, [pc, #68]	; (8005a30 <HAL_GPIO_Init+0x330>)
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	3301      	adds	r3, #1
 80059f2:	61fb      	str	r3, [r7, #28]
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	2b0f      	cmp	r3, #15
 80059f8:	f67f ae90 	bls.w	800571c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80059fc:	bf00      	nop
 80059fe:	3724      	adds	r7, #36	; 0x24
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	40023800 	.word	0x40023800
 8005a0c:	40013800 	.word	0x40013800
 8005a10:	40020000 	.word	0x40020000
 8005a14:	40020400 	.word	0x40020400
 8005a18:	40020800 	.word	0x40020800
 8005a1c:	40020c00 	.word	0x40020c00
 8005a20:	40021000 	.word	0x40021000
 8005a24:	40021400 	.word	0x40021400
 8005a28:	40021800 	.word	0x40021800
 8005a2c:	40021c00 	.word	0x40021c00
 8005a30:	40013c00 	.word	0x40013c00

08005a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	807b      	strh	r3, [r7, #2]
 8005a40:	4613      	mov	r3, r2
 8005a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a44:	787b      	ldrb	r3, [r7, #1]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a4a:	887a      	ldrh	r2, [r7, #2]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a50:	e003      	b.n	8005a5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a52:	887b      	ldrh	r3, [r7, #2]
 8005a54:	041a      	lsls	r2, r3, #16
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	619a      	str	r2, [r3, #24]
}
 8005a5a:	bf00      	nop
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
	...

08005a68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e25b      	b.n	8005f32 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d075      	beq.n	8005b72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a86:	4ba3      	ldr	r3, [pc, #652]	; (8005d14 <HAL_RCC_OscConfig+0x2ac>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f003 030c 	and.w	r3, r3, #12
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	d00c      	beq.n	8005aac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a92:	4ba0      	ldr	r3, [pc, #640]	; (8005d14 <HAL_RCC_OscConfig+0x2ac>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a9a:	2b08      	cmp	r3, #8
 8005a9c:	d112      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a9e:	4b9d      	ldr	r3, [pc, #628]	; (8005d14 <HAL_RCC_OscConfig+0x2ac>)
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aaa:	d10b      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aac:	4b99      	ldr	r3, [pc, #612]	; (8005d14 <HAL_RCC_OscConfig+0x2ac>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d05b      	beq.n	8005b70 <HAL_RCC_OscConfig+0x108>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d157      	bne.n	8005b70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e236      	b.n	8005f32 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005acc:	d106      	bne.n	8005adc <HAL_RCC_OscConfig+0x74>
 8005ace:	4b91      	ldr	r3, [pc, #580]	; (8005d14 <HAL_RCC_OscConfig+0x2ac>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a90      	ldr	r2, [pc, #576]	; (8005d14 <HAL_RCC_OscConfig+0x2ac>)
 8005ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ad8:	6013      	str	r3, [r2, #0]
 8005ada:	e01d      	b.n	8005b18 <HAL_RCC_OscConfig+0xb0>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ae4:	d10c      	bne.n	8005b00 <HAL_RCC_OscConfig+0x98>
 8005ae6:	4b8b      	ldr	r3, [pc, #556]	; (8005d14 <HAL_RCC_OscConfig+0x2ac>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a8a      	ldr	r2, [pc, #552]	; (8005d14 <HAL_RCC_OscConfig+0x2ac>)
 8005aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005af0:	6013      	str	r3, [r2, #0]
 8005af2:	4b88      	ldr	r3, [pc, #544]	; (8005d14 <HAL_RCC_OscConfig+0x2ac>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a87      	ldr	r2, [pc, #540]	; (8005d14 <HAL_RCC_OscConfig+0x2ac>)
 8005af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	e00b      	b.n	8005b18 <HAL_RCC_OscConfig+0xb0>
 8005b00:	4b84      	ldr	r3, [pc, #528]	; (8005d14 <HAL_RCC_OscConfig+0x2ac>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a83      	ldr	r2, [pc, #524]	; (8005d14 <HAL_RCC_OscConfig+0x2ac>)
 8005b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b0a:	6013      	str	r3, [r2, #0]
 8005b0c:	4b81      	ldr	r3, [pc, #516]	; (8005d14 <HAL_RCC_OscConfig+0x2ac>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a80      	ldr	r2, [pc, #512]	; (8005d14 <HAL_RCC_OscConfig+0x2ac>)
 8005b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d013      	beq.n	8005b48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b20:	f7fe f960 	bl	8003de4 <HAL_GetTick>
 8005b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b28:	f7fe f95c 	bl	8003de4 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b64      	cmp	r3, #100	; 0x64
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e1fb      	b.n	8005f32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b3a:	4b76      	ldr	r3, [pc, #472]	; (8005d14 <HAL_RCC_OscConfig+0x2ac>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d0f0      	beq.n	8005b28 <HAL_RCC_OscConfig+0xc0>
 8005b46:	e014      	b.n	8005b72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b48:	f7fe f94c 	bl	8003de4 <HAL_GetTick>
 8005b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b4e:	e008      	b.n	8005b62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b50:	f7fe f948 	bl	8003de4 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b64      	cmp	r3, #100	; 0x64
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e1e7      	b.n	8005f32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b62:	4b6c      	ldr	r3, [pc, #432]	; (8005d14 <HAL_RCC_OscConfig+0x2ac>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1f0      	bne.n	8005b50 <HAL_RCC_OscConfig+0xe8>
 8005b6e:	e000      	b.n	8005b72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d063      	beq.n	8005c46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b7e:	4b65      	ldr	r3, [pc, #404]	; (8005d14 <HAL_RCC_OscConfig+0x2ac>)
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f003 030c 	and.w	r3, r3, #12
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00b      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b8a:	4b62      	ldr	r3, [pc, #392]	; (8005d14 <HAL_RCC_OscConfig+0x2ac>)
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b92:	2b08      	cmp	r3, #8
 8005b94:	d11c      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b96:	4b5f      	ldr	r3, [pc, #380]	; (8005d14 <HAL_RCC_OscConfig+0x2ac>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d116      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ba2:	4b5c      	ldr	r3, [pc, #368]	; (8005d14 <HAL_RCC_OscConfig+0x2ac>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d005      	beq.n	8005bba <HAL_RCC_OscConfig+0x152>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d001      	beq.n	8005bba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e1bb      	b.n	8005f32 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bba:	4b56      	ldr	r3, [pc, #344]	; (8005d14 <HAL_RCC_OscConfig+0x2ac>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	4952      	ldr	r1, [pc, #328]	; (8005d14 <HAL_RCC_OscConfig+0x2ac>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bce:	e03a      	b.n	8005c46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d020      	beq.n	8005c1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bd8:	4b4f      	ldr	r3, [pc, #316]	; (8005d18 <HAL_RCC_OscConfig+0x2b0>)
 8005bda:	2201      	movs	r2, #1
 8005bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bde:	f7fe f901 	bl	8003de4 <HAL_GetTick>
 8005be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005be4:	e008      	b.n	8005bf8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005be6:	f7fe f8fd 	bl	8003de4 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d901      	bls.n	8005bf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e19c      	b.n	8005f32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bf8:	4b46      	ldr	r3, [pc, #280]	; (8005d14 <HAL_RCC_OscConfig+0x2ac>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0302 	and.w	r3, r3, #2
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d0f0      	beq.n	8005be6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c04:	4b43      	ldr	r3, [pc, #268]	; (8005d14 <HAL_RCC_OscConfig+0x2ac>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	00db      	lsls	r3, r3, #3
 8005c12:	4940      	ldr	r1, [pc, #256]	; (8005d14 <HAL_RCC_OscConfig+0x2ac>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	600b      	str	r3, [r1, #0]
 8005c18:	e015      	b.n	8005c46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c1a:	4b3f      	ldr	r3, [pc, #252]	; (8005d18 <HAL_RCC_OscConfig+0x2b0>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c20:	f7fe f8e0 	bl	8003de4 <HAL_GetTick>
 8005c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c26:	e008      	b.n	8005c3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c28:	f7fe f8dc 	bl	8003de4 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e17b      	b.n	8005f32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c3a:	4b36      	ldr	r3, [pc, #216]	; (8005d14 <HAL_RCC_OscConfig+0x2ac>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1f0      	bne.n	8005c28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0308 	and.w	r3, r3, #8
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d030      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d016      	beq.n	8005c88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c5a:	4b30      	ldr	r3, [pc, #192]	; (8005d1c <HAL_RCC_OscConfig+0x2b4>)
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c60:	f7fe f8c0 	bl	8003de4 <HAL_GetTick>
 8005c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c66:	e008      	b.n	8005c7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c68:	f7fe f8bc 	bl	8003de4 <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d901      	bls.n	8005c7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e15b      	b.n	8005f32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c7a:	4b26      	ldr	r3, [pc, #152]	; (8005d14 <HAL_RCC_OscConfig+0x2ac>)
 8005c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d0f0      	beq.n	8005c68 <HAL_RCC_OscConfig+0x200>
 8005c86:	e015      	b.n	8005cb4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c88:	4b24      	ldr	r3, [pc, #144]	; (8005d1c <HAL_RCC_OscConfig+0x2b4>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c8e:	f7fe f8a9 	bl	8003de4 <HAL_GetTick>
 8005c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c94:	e008      	b.n	8005ca8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c96:	f7fe f8a5 	bl	8003de4 <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d901      	bls.n	8005ca8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e144      	b.n	8005f32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ca8:	4b1a      	ldr	r3, [pc, #104]	; (8005d14 <HAL_RCC_OscConfig+0x2ac>)
 8005caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cac:	f003 0302 	and.w	r3, r3, #2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1f0      	bne.n	8005c96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0304 	and.w	r3, r3, #4
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 80a0 	beq.w	8005e02 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cc6:	4b13      	ldr	r3, [pc, #76]	; (8005d14 <HAL_RCC_OscConfig+0x2ac>)
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10f      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60bb      	str	r3, [r7, #8]
 8005cd6:	4b0f      	ldr	r3, [pc, #60]	; (8005d14 <HAL_RCC_OscConfig+0x2ac>)
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	4a0e      	ldr	r2, [pc, #56]	; (8005d14 <HAL_RCC_OscConfig+0x2ac>)
 8005cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ce2:	4b0c      	ldr	r3, [pc, #48]	; (8005d14 <HAL_RCC_OscConfig+0x2ac>)
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cea:	60bb      	str	r3, [r7, #8]
 8005cec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cf2:	4b0b      	ldr	r3, [pc, #44]	; (8005d20 <HAL_RCC_OscConfig+0x2b8>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d121      	bne.n	8005d42 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cfe:	4b08      	ldr	r3, [pc, #32]	; (8005d20 <HAL_RCC_OscConfig+0x2b8>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a07      	ldr	r2, [pc, #28]	; (8005d20 <HAL_RCC_OscConfig+0x2b8>)
 8005d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d0a:	f7fe f86b 	bl	8003de4 <HAL_GetTick>
 8005d0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d10:	e011      	b.n	8005d36 <HAL_RCC_OscConfig+0x2ce>
 8005d12:	bf00      	nop
 8005d14:	40023800 	.word	0x40023800
 8005d18:	42470000 	.word	0x42470000
 8005d1c:	42470e80 	.word	0x42470e80
 8005d20:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d24:	f7fe f85e 	bl	8003de4 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e0fd      	b.n	8005f32 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d36:	4b81      	ldr	r3, [pc, #516]	; (8005f3c <HAL_RCC_OscConfig+0x4d4>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d0f0      	beq.n	8005d24 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d106      	bne.n	8005d58 <HAL_RCC_OscConfig+0x2f0>
 8005d4a:	4b7d      	ldr	r3, [pc, #500]	; (8005f40 <HAL_RCC_OscConfig+0x4d8>)
 8005d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4e:	4a7c      	ldr	r2, [pc, #496]	; (8005f40 <HAL_RCC_OscConfig+0x4d8>)
 8005d50:	f043 0301 	orr.w	r3, r3, #1
 8005d54:	6713      	str	r3, [r2, #112]	; 0x70
 8005d56:	e01c      	b.n	8005d92 <HAL_RCC_OscConfig+0x32a>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	2b05      	cmp	r3, #5
 8005d5e:	d10c      	bne.n	8005d7a <HAL_RCC_OscConfig+0x312>
 8005d60:	4b77      	ldr	r3, [pc, #476]	; (8005f40 <HAL_RCC_OscConfig+0x4d8>)
 8005d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d64:	4a76      	ldr	r2, [pc, #472]	; (8005f40 <HAL_RCC_OscConfig+0x4d8>)
 8005d66:	f043 0304 	orr.w	r3, r3, #4
 8005d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8005d6c:	4b74      	ldr	r3, [pc, #464]	; (8005f40 <HAL_RCC_OscConfig+0x4d8>)
 8005d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d70:	4a73      	ldr	r2, [pc, #460]	; (8005f40 <HAL_RCC_OscConfig+0x4d8>)
 8005d72:	f043 0301 	orr.w	r3, r3, #1
 8005d76:	6713      	str	r3, [r2, #112]	; 0x70
 8005d78:	e00b      	b.n	8005d92 <HAL_RCC_OscConfig+0x32a>
 8005d7a:	4b71      	ldr	r3, [pc, #452]	; (8005f40 <HAL_RCC_OscConfig+0x4d8>)
 8005d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d7e:	4a70      	ldr	r2, [pc, #448]	; (8005f40 <HAL_RCC_OscConfig+0x4d8>)
 8005d80:	f023 0301 	bic.w	r3, r3, #1
 8005d84:	6713      	str	r3, [r2, #112]	; 0x70
 8005d86:	4b6e      	ldr	r3, [pc, #440]	; (8005f40 <HAL_RCC_OscConfig+0x4d8>)
 8005d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d8a:	4a6d      	ldr	r2, [pc, #436]	; (8005f40 <HAL_RCC_OscConfig+0x4d8>)
 8005d8c:	f023 0304 	bic.w	r3, r3, #4
 8005d90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d015      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d9a:	f7fe f823 	bl	8003de4 <HAL_GetTick>
 8005d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005da0:	e00a      	b.n	8005db8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005da2:	f7fe f81f 	bl	8003de4 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d901      	bls.n	8005db8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e0bc      	b.n	8005f32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005db8:	4b61      	ldr	r3, [pc, #388]	; (8005f40 <HAL_RCC_OscConfig+0x4d8>)
 8005dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dbc:	f003 0302 	and.w	r3, r3, #2
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d0ee      	beq.n	8005da2 <HAL_RCC_OscConfig+0x33a>
 8005dc4:	e014      	b.n	8005df0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dc6:	f7fe f80d 	bl	8003de4 <HAL_GetTick>
 8005dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dcc:	e00a      	b.n	8005de4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dce:	f7fe f809 	bl	8003de4 <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d901      	bls.n	8005de4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e0a6      	b.n	8005f32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005de4:	4b56      	ldr	r3, [pc, #344]	; (8005f40 <HAL_RCC_OscConfig+0x4d8>)
 8005de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1ee      	bne.n	8005dce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005df0:	7dfb      	ldrb	r3, [r7, #23]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d105      	bne.n	8005e02 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005df6:	4b52      	ldr	r3, [pc, #328]	; (8005f40 <HAL_RCC_OscConfig+0x4d8>)
 8005df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfa:	4a51      	ldr	r2, [pc, #324]	; (8005f40 <HAL_RCC_OscConfig+0x4d8>)
 8005dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 8092 	beq.w	8005f30 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e0c:	4b4c      	ldr	r3, [pc, #304]	; (8005f40 <HAL_RCC_OscConfig+0x4d8>)
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f003 030c 	and.w	r3, r3, #12
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d05c      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d141      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e20:	4b48      	ldr	r3, [pc, #288]	; (8005f44 <HAL_RCC_OscConfig+0x4dc>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e26:	f7fd ffdd 	bl	8003de4 <HAL_GetTick>
 8005e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e2c:	e008      	b.n	8005e40 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e2e:	f7fd ffd9 	bl	8003de4 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d901      	bls.n	8005e40 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e078      	b.n	8005f32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e40:	4b3f      	ldr	r3, [pc, #252]	; (8005f40 <HAL_RCC_OscConfig+0x4d8>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1f0      	bne.n	8005e2e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	69da      	ldr	r2, [r3, #28]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	431a      	orrs	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5a:	019b      	lsls	r3, r3, #6
 8005e5c:	431a      	orrs	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e62:	085b      	lsrs	r3, r3, #1
 8005e64:	3b01      	subs	r3, #1
 8005e66:	041b      	lsls	r3, r3, #16
 8005e68:	431a      	orrs	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6e:	061b      	lsls	r3, r3, #24
 8005e70:	4933      	ldr	r1, [pc, #204]	; (8005f40 <HAL_RCC_OscConfig+0x4d8>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e76:	4b33      	ldr	r3, [pc, #204]	; (8005f44 <HAL_RCC_OscConfig+0x4dc>)
 8005e78:	2201      	movs	r2, #1
 8005e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e7c:	f7fd ffb2 	bl	8003de4 <HAL_GetTick>
 8005e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e82:	e008      	b.n	8005e96 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e84:	f7fd ffae 	bl	8003de4 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d901      	bls.n	8005e96 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e04d      	b.n	8005f32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e96:	4b2a      	ldr	r3, [pc, #168]	; (8005f40 <HAL_RCC_OscConfig+0x4d8>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d0f0      	beq.n	8005e84 <HAL_RCC_OscConfig+0x41c>
 8005ea2:	e045      	b.n	8005f30 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ea4:	4b27      	ldr	r3, [pc, #156]	; (8005f44 <HAL_RCC_OscConfig+0x4dc>)
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eaa:	f7fd ff9b 	bl	8003de4 <HAL_GetTick>
 8005eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eb0:	e008      	b.n	8005ec4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005eb2:	f7fd ff97 	bl	8003de4 <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d901      	bls.n	8005ec4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e036      	b.n	8005f32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ec4:	4b1e      	ldr	r3, [pc, #120]	; (8005f40 <HAL_RCC_OscConfig+0x4d8>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1f0      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x44a>
 8005ed0:	e02e      	b.n	8005f30 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d101      	bne.n	8005ede <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e029      	b.n	8005f32 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ede:	4b18      	ldr	r3, [pc, #96]	; (8005f40 <HAL_RCC_OscConfig+0x4d8>)
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d11c      	bne.n	8005f2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d115      	bne.n	8005f2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f06:	4013      	ands	r3, r2
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d10d      	bne.n	8005f2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d106      	bne.n	8005f2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d001      	beq.n	8005f30 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e000      	b.n	8005f32 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3718      	adds	r7, #24
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	40007000 	.word	0x40007000
 8005f40:	40023800 	.word	0x40023800
 8005f44:	42470060 	.word	0x42470060

08005f48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d101      	bne.n	8005f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e0cc      	b.n	80060f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f5c:	4b68      	ldr	r3, [pc, #416]	; (8006100 <HAL_RCC_ClockConfig+0x1b8>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 030f 	and.w	r3, r3, #15
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d90c      	bls.n	8005f84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f6a:	4b65      	ldr	r3, [pc, #404]	; (8006100 <HAL_RCC_ClockConfig+0x1b8>)
 8005f6c:	683a      	ldr	r2, [r7, #0]
 8005f6e:	b2d2      	uxtb	r2, r2
 8005f70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f72:	4b63      	ldr	r3, [pc, #396]	; (8006100 <HAL_RCC_ClockConfig+0x1b8>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 030f 	and.w	r3, r3, #15
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d001      	beq.n	8005f84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e0b8      	b.n	80060f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0302 	and.w	r3, r3, #2
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d020      	beq.n	8005fd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0304 	and.w	r3, r3, #4
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d005      	beq.n	8005fa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f9c:	4b59      	ldr	r3, [pc, #356]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	4a58      	ldr	r2, [pc, #352]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005fa6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0308 	and.w	r3, r3, #8
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d005      	beq.n	8005fc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fb4:	4b53      	ldr	r3, [pc, #332]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	4a52      	ldr	r2, [pc, #328]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 8005fba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005fbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fc0:	4b50      	ldr	r3, [pc, #320]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	494d      	ldr	r1, [pc, #308]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d044      	beq.n	8006068 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d107      	bne.n	8005ff6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fe6:	4b47      	ldr	r3, [pc, #284]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d119      	bne.n	8006026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e07f      	b.n	80060f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d003      	beq.n	8006006 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006002:	2b03      	cmp	r3, #3
 8006004:	d107      	bne.n	8006016 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006006:	4b3f      	ldr	r3, [pc, #252]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d109      	bne.n	8006026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e06f      	b.n	80060f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006016:	4b3b      	ldr	r3, [pc, #236]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e067      	b.n	80060f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006026:	4b37      	ldr	r3, [pc, #220]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f023 0203 	bic.w	r2, r3, #3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	4934      	ldr	r1, [pc, #208]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 8006034:	4313      	orrs	r3, r2
 8006036:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006038:	f7fd fed4 	bl	8003de4 <HAL_GetTick>
 800603c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800603e:	e00a      	b.n	8006056 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006040:	f7fd fed0 	bl	8003de4 <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	f241 3288 	movw	r2, #5000	; 0x1388
 800604e:	4293      	cmp	r3, r2
 8006050:	d901      	bls.n	8006056 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e04f      	b.n	80060f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006056:	4b2b      	ldr	r3, [pc, #172]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f003 020c 	and.w	r2, r3, #12
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	429a      	cmp	r2, r3
 8006066:	d1eb      	bne.n	8006040 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006068:	4b25      	ldr	r3, [pc, #148]	; (8006100 <HAL_RCC_ClockConfig+0x1b8>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 030f 	and.w	r3, r3, #15
 8006070:	683a      	ldr	r2, [r7, #0]
 8006072:	429a      	cmp	r2, r3
 8006074:	d20c      	bcs.n	8006090 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006076:	4b22      	ldr	r3, [pc, #136]	; (8006100 <HAL_RCC_ClockConfig+0x1b8>)
 8006078:	683a      	ldr	r2, [r7, #0]
 800607a:	b2d2      	uxtb	r2, r2
 800607c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800607e:	4b20      	ldr	r3, [pc, #128]	; (8006100 <HAL_RCC_ClockConfig+0x1b8>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 030f 	and.w	r3, r3, #15
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	429a      	cmp	r2, r3
 800608a:	d001      	beq.n	8006090 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e032      	b.n	80060f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0304 	and.w	r3, r3, #4
 8006098:	2b00      	cmp	r3, #0
 800609a:	d008      	beq.n	80060ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800609c:	4b19      	ldr	r3, [pc, #100]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	4916      	ldr	r1, [pc, #88]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0308 	and.w	r3, r3, #8
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d009      	beq.n	80060ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060ba:	4b12      	ldr	r3, [pc, #72]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	00db      	lsls	r3, r3, #3
 80060c8:	490e      	ldr	r1, [pc, #56]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80060ce:	f000 f821 	bl	8006114 <HAL_RCC_GetSysClockFreq>
 80060d2:	4601      	mov	r1, r0
 80060d4:	4b0b      	ldr	r3, [pc, #44]	; (8006104 <HAL_RCC_ClockConfig+0x1bc>)
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	091b      	lsrs	r3, r3, #4
 80060da:	f003 030f 	and.w	r3, r3, #15
 80060de:	4a0a      	ldr	r2, [pc, #40]	; (8006108 <HAL_RCC_ClockConfig+0x1c0>)
 80060e0:	5cd3      	ldrb	r3, [r2, r3]
 80060e2:	fa21 f303 	lsr.w	r3, r1, r3
 80060e6:	4a09      	ldr	r2, [pc, #36]	; (800610c <HAL_RCC_ClockConfig+0x1c4>)
 80060e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80060ea:	4b09      	ldr	r3, [pc, #36]	; (8006110 <HAL_RCC_ClockConfig+0x1c8>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fd fd3e 	bl	8003b70 <HAL_InitTick>

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	40023c00 	.word	0x40023c00
 8006104:	40023800 	.word	0x40023800
 8006108:	0800d428 	.word	0x0800d428
 800610c:	20000008 	.word	0x20000008
 8006110:	2000000c 	.word	0x2000000c

08006114 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800611a:	2300      	movs	r3, #0
 800611c:	607b      	str	r3, [r7, #4]
 800611e:	2300      	movs	r3, #0
 8006120:	60fb      	str	r3, [r7, #12]
 8006122:	2300      	movs	r3, #0
 8006124:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006126:	2300      	movs	r3, #0
 8006128:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800612a:	4b50      	ldr	r3, [pc, #320]	; (800626c <HAL_RCC_GetSysClockFreq+0x158>)
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f003 030c 	and.w	r3, r3, #12
 8006132:	2b04      	cmp	r3, #4
 8006134:	d007      	beq.n	8006146 <HAL_RCC_GetSysClockFreq+0x32>
 8006136:	2b08      	cmp	r3, #8
 8006138:	d008      	beq.n	800614c <HAL_RCC_GetSysClockFreq+0x38>
 800613a:	2b00      	cmp	r3, #0
 800613c:	f040 808d 	bne.w	800625a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006140:	4b4b      	ldr	r3, [pc, #300]	; (8006270 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006142:	60bb      	str	r3, [r7, #8]
       break;
 8006144:	e08c      	b.n	8006260 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006146:	4b4b      	ldr	r3, [pc, #300]	; (8006274 <HAL_RCC_GetSysClockFreq+0x160>)
 8006148:	60bb      	str	r3, [r7, #8]
      break;
 800614a:	e089      	b.n	8006260 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800614c:	4b47      	ldr	r3, [pc, #284]	; (800626c <HAL_RCC_GetSysClockFreq+0x158>)
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006154:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006156:	4b45      	ldr	r3, [pc, #276]	; (800626c <HAL_RCC_GetSysClockFreq+0x158>)
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d023      	beq.n	80061aa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006162:	4b42      	ldr	r3, [pc, #264]	; (800626c <HAL_RCC_GetSysClockFreq+0x158>)
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	099b      	lsrs	r3, r3, #6
 8006168:	f04f 0400 	mov.w	r4, #0
 800616c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006170:	f04f 0200 	mov.w	r2, #0
 8006174:	ea03 0501 	and.w	r5, r3, r1
 8006178:	ea04 0602 	and.w	r6, r4, r2
 800617c:	4a3d      	ldr	r2, [pc, #244]	; (8006274 <HAL_RCC_GetSysClockFreq+0x160>)
 800617e:	fb02 f106 	mul.w	r1, r2, r6
 8006182:	2200      	movs	r2, #0
 8006184:	fb02 f205 	mul.w	r2, r2, r5
 8006188:	440a      	add	r2, r1
 800618a:	493a      	ldr	r1, [pc, #232]	; (8006274 <HAL_RCC_GetSysClockFreq+0x160>)
 800618c:	fba5 0101 	umull	r0, r1, r5, r1
 8006190:	1853      	adds	r3, r2, r1
 8006192:	4619      	mov	r1, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f04f 0400 	mov.w	r4, #0
 800619a:	461a      	mov	r2, r3
 800619c:	4623      	mov	r3, r4
 800619e:	f7fa fd1b 	bl	8000bd8 <__aeabi_uldivmod>
 80061a2:	4603      	mov	r3, r0
 80061a4:	460c      	mov	r4, r1
 80061a6:	60fb      	str	r3, [r7, #12]
 80061a8:	e049      	b.n	800623e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061aa:	4b30      	ldr	r3, [pc, #192]	; (800626c <HAL_RCC_GetSysClockFreq+0x158>)
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	099b      	lsrs	r3, r3, #6
 80061b0:	f04f 0400 	mov.w	r4, #0
 80061b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80061b8:	f04f 0200 	mov.w	r2, #0
 80061bc:	ea03 0501 	and.w	r5, r3, r1
 80061c0:	ea04 0602 	and.w	r6, r4, r2
 80061c4:	4629      	mov	r1, r5
 80061c6:	4632      	mov	r2, r6
 80061c8:	f04f 0300 	mov.w	r3, #0
 80061cc:	f04f 0400 	mov.w	r4, #0
 80061d0:	0154      	lsls	r4, r2, #5
 80061d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80061d6:	014b      	lsls	r3, r1, #5
 80061d8:	4619      	mov	r1, r3
 80061da:	4622      	mov	r2, r4
 80061dc:	1b49      	subs	r1, r1, r5
 80061de:	eb62 0206 	sbc.w	r2, r2, r6
 80061e2:	f04f 0300 	mov.w	r3, #0
 80061e6:	f04f 0400 	mov.w	r4, #0
 80061ea:	0194      	lsls	r4, r2, #6
 80061ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80061f0:	018b      	lsls	r3, r1, #6
 80061f2:	1a5b      	subs	r3, r3, r1
 80061f4:	eb64 0402 	sbc.w	r4, r4, r2
 80061f8:	f04f 0100 	mov.w	r1, #0
 80061fc:	f04f 0200 	mov.w	r2, #0
 8006200:	00e2      	lsls	r2, r4, #3
 8006202:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006206:	00d9      	lsls	r1, r3, #3
 8006208:	460b      	mov	r3, r1
 800620a:	4614      	mov	r4, r2
 800620c:	195b      	adds	r3, r3, r5
 800620e:	eb44 0406 	adc.w	r4, r4, r6
 8006212:	f04f 0100 	mov.w	r1, #0
 8006216:	f04f 0200 	mov.w	r2, #0
 800621a:	02a2      	lsls	r2, r4, #10
 800621c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006220:	0299      	lsls	r1, r3, #10
 8006222:	460b      	mov	r3, r1
 8006224:	4614      	mov	r4, r2
 8006226:	4618      	mov	r0, r3
 8006228:	4621      	mov	r1, r4
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f04f 0400 	mov.w	r4, #0
 8006230:	461a      	mov	r2, r3
 8006232:	4623      	mov	r3, r4
 8006234:	f7fa fcd0 	bl	8000bd8 <__aeabi_uldivmod>
 8006238:	4603      	mov	r3, r0
 800623a:	460c      	mov	r4, r1
 800623c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800623e:	4b0b      	ldr	r3, [pc, #44]	; (800626c <HAL_RCC_GetSysClockFreq+0x158>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	0c1b      	lsrs	r3, r3, #16
 8006244:	f003 0303 	and.w	r3, r3, #3
 8006248:	3301      	adds	r3, #1
 800624a:	005b      	lsls	r3, r3, #1
 800624c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	fbb2 f3f3 	udiv	r3, r2, r3
 8006256:	60bb      	str	r3, [r7, #8]
      break;
 8006258:	e002      	b.n	8006260 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800625a:	4b05      	ldr	r3, [pc, #20]	; (8006270 <HAL_RCC_GetSysClockFreq+0x15c>)
 800625c:	60bb      	str	r3, [r7, #8]
      break;
 800625e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006260:	68bb      	ldr	r3, [r7, #8]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800626a:	bf00      	nop
 800626c:	40023800 	.word	0x40023800
 8006270:	00f42400 	.word	0x00f42400
 8006274:	017d7840 	.word	0x017d7840

08006278 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006278:	b480      	push	{r7}
 800627a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800627c:	4b03      	ldr	r3, [pc, #12]	; (800628c <HAL_RCC_GetHCLKFreq+0x14>)
 800627e:	681b      	ldr	r3, [r3, #0]
}
 8006280:	4618      	mov	r0, r3
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	20000008 	.word	0x20000008

08006290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006294:	f7ff fff0 	bl	8006278 <HAL_RCC_GetHCLKFreq>
 8006298:	4601      	mov	r1, r0
 800629a:	4b05      	ldr	r3, [pc, #20]	; (80062b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	0b5b      	lsrs	r3, r3, #13
 80062a0:	f003 0307 	and.w	r3, r3, #7
 80062a4:	4a03      	ldr	r2, [pc, #12]	; (80062b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062a6:	5cd3      	ldrb	r3, [r2, r3]
 80062a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	40023800 	.word	0x40023800
 80062b4:	0800d438 	.word	0x0800d438

080062b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	220f      	movs	r2, #15
 80062c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80062c8:	4b12      	ldr	r3, [pc, #72]	; (8006314 <HAL_RCC_GetClockConfig+0x5c>)
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f003 0203 	and.w	r2, r3, #3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80062d4:	4b0f      	ldr	r3, [pc, #60]	; (8006314 <HAL_RCC_GetClockConfig+0x5c>)
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80062e0:	4b0c      	ldr	r3, [pc, #48]	; (8006314 <HAL_RCC_GetClockConfig+0x5c>)
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80062ec:	4b09      	ldr	r3, [pc, #36]	; (8006314 <HAL_RCC_GetClockConfig+0x5c>)
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	08db      	lsrs	r3, r3, #3
 80062f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80062fa:	4b07      	ldr	r3, [pc, #28]	; (8006318 <HAL_RCC_GetClockConfig+0x60>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 020f 	and.w	r2, r3, #15
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	601a      	str	r2, [r3, #0]
}
 8006306:	bf00      	nop
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	40023800 	.word	0x40023800
 8006318:	40023c00 	.word	0x40023c00

0800631c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e056      	b.n	80063dc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b00      	cmp	r3, #0
 800633e:	d106      	bne.n	800634e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f7fd fa4f 	bl	80037ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2202      	movs	r2, #2
 8006352:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006364:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	431a      	orrs	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	431a      	orrs	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	431a      	orrs	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	431a      	orrs	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800638a:	431a      	orrs	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	69db      	ldr	r3, [r3, #28]
 8006390:	431a      	orrs	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	ea42 0103 	orr.w	r1, r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	0c1b      	lsrs	r3, r3, #16
 80063ac:	f003 0104 	and.w	r1, r3, #4
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	430a      	orrs	r2, r1
 80063ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	69da      	ldr	r2, [r3, #28]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3708      	adds	r7, #8
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b088      	sub	sp, #32
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	099b      	lsrs	r3, r3, #6
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10f      	bne.n	8006428 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00a      	beq.n	8006428 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	099b      	lsrs	r3, r3, #6
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b00      	cmp	r3, #0
 800641c:	d004      	beq.n	8006428 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	4798      	blx	r3
    return;
 8006426:	e0d8      	b.n	80065da <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	085b      	lsrs	r3, r3, #1
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00a      	beq.n	800644a <HAL_SPI_IRQHandler+0x66>
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	09db      	lsrs	r3, r3, #7
 8006438:	f003 0301 	and.w	r3, r3, #1
 800643c:	2b00      	cmp	r3, #0
 800643e:	d004      	beq.n	800644a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	4798      	blx	r3
    return;
 8006448:	e0c7      	b.n	80065da <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	095b      	lsrs	r3, r3, #5
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10c      	bne.n	8006470 <HAL_SPI_IRQHandler+0x8c>
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	099b      	lsrs	r3, r3, #6
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b00      	cmp	r3, #0
 8006460:	d106      	bne.n	8006470 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	0a1b      	lsrs	r3, r3, #8
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b00      	cmp	r3, #0
 800646c:	f000 80b5 	beq.w	80065da <HAL_SPI_IRQHandler+0x1f6>
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	095b      	lsrs	r3, r3, #5
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b00      	cmp	r3, #0
 800647a:	f000 80ae 	beq.w	80065da <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	099b      	lsrs	r3, r3, #6
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b00      	cmp	r3, #0
 8006488:	d023      	beq.n	80064d2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b03      	cmp	r3, #3
 8006494:	d011      	beq.n	80064ba <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800649a:	f043 0204 	orr.w	r2, r3, #4
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064a2:	2300      	movs	r3, #0
 80064a4:	617b      	str	r3, [r7, #20]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	617b      	str	r3, [r7, #20]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	617b      	str	r3, [r7, #20]
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	e00b      	b.n	80064d2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064ba:	2300      	movs	r3, #0
 80064bc:	613b      	str	r3, [r7, #16]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	613b      	str	r3, [r7, #16]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	613b      	str	r3, [r7, #16]
 80064ce:	693b      	ldr	r3, [r7, #16]
        return;
 80064d0:	e083      	b.n	80065da <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	095b      	lsrs	r3, r3, #5
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d014      	beq.n	8006508 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e2:	f043 0201 	orr.w	r2, r3, #1
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80064ea:	2300      	movs	r3, #0
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	60fb      	str	r3, [r7, #12]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006504:	601a      	str	r2, [r3, #0]
 8006506:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	0a1b      	lsrs	r3, r3, #8
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00c      	beq.n	800652e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006518:	f043 0208 	orr.w	r2, r3, #8
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006520:	2300      	movs	r3, #0
 8006522:	60bb      	str	r3, [r7, #8]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	60bb      	str	r3, [r7, #8]
 800652c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006532:	2b00      	cmp	r3, #0
 8006534:	d050      	beq.n	80065d8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006544:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	f003 0302 	and.w	r3, r3, #2
 8006554:	2b00      	cmp	r3, #0
 8006556:	d104      	bne.n	8006562 <HAL_SPI_IRQHandler+0x17e>
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	2b00      	cmp	r3, #0
 8006560:	d034      	beq.n	80065cc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f022 0203 	bic.w	r2, r2, #3
 8006570:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006576:	2b00      	cmp	r3, #0
 8006578:	d011      	beq.n	800659e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800657e:	4a18      	ldr	r2, [pc, #96]	; (80065e0 <HAL_SPI_IRQHandler+0x1fc>)
 8006580:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006586:	4618      	mov	r0, r3
 8006588:	f7ff f898 	bl	80056bc <HAL_DMA_Abort_IT>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d005      	beq.n	800659e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006596:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d016      	beq.n	80065d4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065aa:	4a0d      	ldr	r2, [pc, #52]	; (80065e0 <HAL_SPI_IRQHandler+0x1fc>)
 80065ac:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7ff f882 	bl	80056bc <HAL_DMA_Abort_IT>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80065ca:	e003      	b.n	80065d4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f809 	bl	80065e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80065d2:	e000      	b.n	80065d6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80065d4:	bf00      	nop
    return;
 80065d6:	bf00      	nop
 80065d8:	bf00      	nop
  }
}
 80065da:	3720      	adds	r7, #32
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	080065f9 	.word	0x080065f9

080065e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006604:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f7ff ffe6 	bl	80065e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006618:	bf00      	nop
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d101      	bne.n	8006632 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e01d      	b.n	800666e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d106      	bne.n	800664c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7fd f99e 	bl	8003988 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2202      	movs	r2, #2
 8006650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	3304      	adds	r3, #4
 800665c:	4619      	mov	r1, r3
 800665e:	4610      	mov	r0, r2
 8006660:	f000 fc38 	bl	8006ed4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3708      	adds	r7, #8
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006676:	b480      	push	{r7}
 8006678:	b085      	sub	sp, #20
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68da      	ldr	r2, [r3, #12]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f042 0201 	orr.w	r2, r2, #1
 800668c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f003 0307 	and.w	r3, r3, #7
 8006698:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2b06      	cmp	r3, #6
 800669e:	d007      	beq.n	80066b0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f042 0201 	orr.w	r2, r2, #1
 80066ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b082      	sub	sp, #8
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e01d      	b.n	800670c <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d106      	bne.n	80066ea <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f815 	bl	8006714 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2202      	movs	r2, #2
 80066ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	3304      	adds	r3, #4
 80066fa:	4619      	mov	r1, r3
 80066fc:	4610      	mov	r0, r2
 80066fe:	f000 fbe9 	bl	8006ed4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e01d      	b.n	8006776 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d106      	bne.n	8006754 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f815 	bl	800677e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2202      	movs	r2, #2
 8006758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	3304      	adds	r3, #4
 8006764:	4619      	mov	r1, r3
 8006766:	4610      	mov	r0, r2
 8006768:	f000 fbb4 	bl	8006ed4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800677e:	b480      	push	{r7}
 8006780:	b083      	sub	sp, #12
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006786:	bf00      	nop
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b086      	sub	sp, #24
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
 800679a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e083      	b.n	80068ae <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d106      	bne.n	80067c0 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f7fd f866 	bl	800388c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2202      	movs	r2, #2
 80067c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	6812      	ldr	r2, [r2, #0]
 80067d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067d6:	f023 0307 	bic.w	r3, r3, #7
 80067da:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	3304      	adds	r3, #4
 80067e4:	4619      	mov	r1, r3
 80067e6:	4610      	mov	r0, r2
 80067e8:	f000 fb74 	bl	8006ed4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	4313      	orrs	r3, r2
 800680c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006814:	f023 0303 	bic.w	r3, r3, #3
 8006818:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	689a      	ldr	r2, [r3, #8]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	021b      	lsls	r3, r3, #8
 8006824:	4313      	orrs	r3, r2
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	4313      	orrs	r3, r2
 800682a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006832:	f023 030c 	bic.w	r3, r3, #12
 8006836:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800683e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	68da      	ldr	r2, [r3, #12]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	69db      	ldr	r3, [r3, #28]
 800684c:	021b      	lsls	r3, r3, #8
 800684e:	4313      	orrs	r3, r2
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	4313      	orrs	r3, r2
 8006854:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	011a      	lsls	r2, r3, #4
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	031b      	lsls	r3, r3, #12
 8006862:	4313      	orrs	r3, r2
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	4313      	orrs	r3, r2
 8006868:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006870:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006878:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	011b      	lsls	r3, r3, #4
 8006884:	4313      	orrs	r3, r2
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	4313      	orrs	r3, r2
 800688a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	697a      	ldr	r2, [r7, #20]
 8006892:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3718      	adds	r7, #24
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b082      	sub	sp, #8
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	f003 0302 	and.w	r3, r3, #2
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d122      	bne.n	8006912 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	f003 0302 	and.w	r3, r3, #2
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d11b      	bne.n	8006912 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f06f 0202 	mvn.w	r2, #2
 80068e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	699b      	ldr	r3, [r3, #24]
 80068f0:	f003 0303 	and.w	r3, r3, #3
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d003      	beq.n	8006900 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 facc 	bl	8006e96 <HAL_TIM_IC_CaptureCallback>
 80068fe:	e005      	b.n	800690c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 fabe 	bl	8006e82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 facf 	bl	8006eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	f003 0304 	and.w	r3, r3, #4
 800691c:	2b04      	cmp	r3, #4
 800691e:	d122      	bne.n	8006966 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	f003 0304 	and.w	r3, r3, #4
 800692a:	2b04      	cmp	r3, #4
 800692c:	d11b      	bne.n	8006966 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f06f 0204 	mvn.w	r2, #4
 8006936:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2202      	movs	r2, #2
 800693c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006948:	2b00      	cmp	r3, #0
 800694a:	d003      	beq.n	8006954 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 faa2 	bl	8006e96 <HAL_TIM_IC_CaptureCallback>
 8006952:	e005      	b.n	8006960 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fa94 	bl	8006e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 faa5 	bl	8006eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	f003 0308 	and.w	r3, r3, #8
 8006970:	2b08      	cmp	r3, #8
 8006972:	d122      	bne.n	80069ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	f003 0308 	and.w	r3, r3, #8
 800697e:	2b08      	cmp	r3, #8
 8006980:	d11b      	bne.n	80069ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f06f 0208 	mvn.w	r2, #8
 800698a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2204      	movs	r2, #4
 8006990:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	69db      	ldr	r3, [r3, #28]
 8006998:	f003 0303 	and.w	r3, r3, #3
 800699c:	2b00      	cmp	r3, #0
 800699e:	d003      	beq.n	80069a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 fa78 	bl	8006e96 <HAL_TIM_IC_CaptureCallback>
 80069a6:	e005      	b.n	80069b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 fa6a 	bl	8006e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fa7b 	bl	8006eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	f003 0310 	and.w	r3, r3, #16
 80069c4:	2b10      	cmp	r3, #16
 80069c6:	d122      	bne.n	8006a0e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	f003 0310 	and.w	r3, r3, #16
 80069d2:	2b10      	cmp	r3, #16
 80069d4:	d11b      	bne.n	8006a0e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f06f 0210 	mvn.w	r2, #16
 80069de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2208      	movs	r2, #8
 80069e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	69db      	ldr	r3, [r3, #28]
 80069ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d003      	beq.n	80069fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 fa4e 	bl	8006e96 <HAL_TIM_IC_CaptureCallback>
 80069fa:	e005      	b.n	8006a08 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fa40 	bl	8006e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fa51 	bl	8006eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d10e      	bne.n	8006a3a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d107      	bne.n	8006a3a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f06f 0201 	mvn.w	r2, #1
 8006a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f7fb fc57 	bl	80022e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a44:	2b80      	cmp	r3, #128	; 0x80
 8006a46:	d10e      	bne.n	8006a66 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a52:	2b80      	cmp	r3, #128	; 0x80
 8006a54:	d107      	bne.n	8006a66 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 fda7 	bl	80075b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a70:	2b40      	cmp	r3, #64	; 0x40
 8006a72:	d10e      	bne.n	8006a92 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a7e:	2b40      	cmp	r3, #64	; 0x40
 8006a80:	d107      	bne.n	8006a92 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fa16 	bl	8006ebe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	f003 0320 	and.w	r3, r3, #32
 8006a9c:	2b20      	cmp	r3, #32
 8006a9e:	d10e      	bne.n	8006abe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	f003 0320 	and.w	r3, r3, #32
 8006aaa:	2b20      	cmp	r3, #32
 8006aac:	d107      	bne.n	8006abe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f06f 0220 	mvn.w	r2, #32
 8006ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 fd71 	bl	80075a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006abe:	bf00      	nop
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
	...

08006ac8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d101      	bne.n	8006ae2 <HAL_TIM_OC_ConfigChannel+0x1a>
 8006ade:	2302      	movs	r3, #2
 8006ae0:	e04e      	b.n	8006b80 <HAL_TIM_OC_ConfigChannel+0xb8>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2202      	movs	r2, #2
 8006aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2b0c      	cmp	r3, #12
 8006af6:	d839      	bhi.n	8006b6c <HAL_TIM_OC_ConfigChannel+0xa4>
 8006af8:	a201      	add	r2, pc, #4	; (adr r2, 8006b00 <HAL_TIM_OC_ConfigChannel+0x38>)
 8006afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afe:	bf00      	nop
 8006b00:	08006b35 	.word	0x08006b35
 8006b04:	08006b6d 	.word	0x08006b6d
 8006b08:	08006b6d 	.word	0x08006b6d
 8006b0c:	08006b6d 	.word	0x08006b6d
 8006b10:	08006b43 	.word	0x08006b43
 8006b14:	08006b6d 	.word	0x08006b6d
 8006b18:	08006b6d 	.word	0x08006b6d
 8006b1c:	08006b6d 	.word	0x08006b6d
 8006b20:	08006b51 	.word	0x08006b51
 8006b24:	08006b6d 	.word	0x08006b6d
 8006b28:	08006b6d 	.word	0x08006b6d
 8006b2c:	08006b6d 	.word	0x08006b6d
 8006b30:	08006b5f 	.word	0x08006b5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68b9      	ldr	r1, [r7, #8]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 fa6a 	bl	8007014 <TIM_OC1_SetConfig>
      break;
 8006b40:	e015      	b.n	8006b6e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68b9      	ldr	r1, [r7, #8]
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f000 fad3 	bl	80070f4 <TIM_OC2_SetConfig>
      break;
 8006b4e:	e00e      	b.n	8006b6e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68b9      	ldr	r1, [r7, #8]
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 fb42 	bl	80071e0 <TIM_OC3_SetConfig>
      break;
 8006b5c:	e007      	b.n	8006b6e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68b9      	ldr	r1, [r7, #8]
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 fbaf 	bl	80072c8 <TIM_OC4_SetConfig>
      break;
 8006b6a:	e000      	b.n	8006b6e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8006b6c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d101      	bne.n	8006ba2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	e0b4      	b.n	8006d0c <HAL_TIM_PWM_ConfigChannel+0x184>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2202      	movs	r2, #2
 8006bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2b0c      	cmp	r3, #12
 8006bb6:	f200 809f 	bhi.w	8006cf8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006bba:	a201      	add	r2, pc, #4	; (adr r2, 8006bc0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc0:	08006bf5 	.word	0x08006bf5
 8006bc4:	08006cf9 	.word	0x08006cf9
 8006bc8:	08006cf9 	.word	0x08006cf9
 8006bcc:	08006cf9 	.word	0x08006cf9
 8006bd0:	08006c35 	.word	0x08006c35
 8006bd4:	08006cf9 	.word	0x08006cf9
 8006bd8:	08006cf9 	.word	0x08006cf9
 8006bdc:	08006cf9 	.word	0x08006cf9
 8006be0:	08006c77 	.word	0x08006c77
 8006be4:	08006cf9 	.word	0x08006cf9
 8006be8:	08006cf9 	.word	0x08006cf9
 8006bec:	08006cf9 	.word	0x08006cf9
 8006bf0:	08006cb7 	.word	0x08006cb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68b9      	ldr	r1, [r7, #8]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f000 fa0a 	bl	8007014 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	699a      	ldr	r2, [r3, #24]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f042 0208 	orr.w	r2, r2, #8
 8006c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	699a      	ldr	r2, [r3, #24]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f022 0204 	bic.w	r2, r2, #4
 8006c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6999      	ldr	r1, [r3, #24]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	691a      	ldr	r2, [r3, #16]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	619a      	str	r2, [r3, #24]
      break;
 8006c32:	e062      	b.n	8006cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68b9      	ldr	r1, [r7, #8]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 fa5a 	bl	80070f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	699a      	ldr	r2, [r3, #24]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	699a      	ldr	r2, [r3, #24]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6999      	ldr	r1, [r3, #24]
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	021a      	lsls	r2, r3, #8
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	619a      	str	r2, [r3, #24]
      break;
 8006c74:	e041      	b.n	8006cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68b9      	ldr	r1, [r7, #8]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 faaf 	bl	80071e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69da      	ldr	r2, [r3, #28]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f042 0208 	orr.w	r2, r2, #8
 8006c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69da      	ldr	r2, [r3, #28]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 0204 	bic.w	r2, r2, #4
 8006ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69d9      	ldr	r1, [r3, #28]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	691a      	ldr	r2, [r3, #16]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	61da      	str	r2, [r3, #28]
      break;
 8006cb4:	e021      	b.n	8006cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68b9      	ldr	r1, [r7, #8]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 fb03 	bl	80072c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	69da      	ldr	r2, [r3, #28]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	69da      	ldr	r2, [r3, #28]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	69d9      	ldr	r1, [r3, #28]
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	021a      	lsls	r2, r3, #8
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	61da      	str	r2, [r3, #28]
      break;
 8006cf6:	e000      	b.n	8006cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006cf8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d101      	bne.n	8006d2c <HAL_TIM_ConfigClockSource+0x18>
 8006d28:	2302      	movs	r3, #2
 8006d2a:	e0a6      	b.n	8006e7a <HAL_TIM_ConfigClockSource+0x166>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2202      	movs	r2, #2
 8006d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b40      	cmp	r3, #64	; 0x40
 8006d62:	d067      	beq.n	8006e34 <HAL_TIM_ConfigClockSource+0x120>
 8006d64:	2b40      	cmp	r3, #64	; 0x40
 8006d66:	d80b      	bhi.n	8006d80 <HAL_TIM_ConfigClockSource+0x6c>
 8006d68:	2b10      	cmp	r3, #16
 8006d6a:	d073      	beq.n	8006e54 <HAL_TIM_ConfigClockSource+0x140>
 8006d6c:	2b10      	cmp	r3, #16
 8006d6e:	d802      	bhi.n	8006d76 <HAL_TIM_ConfigClockSource+0x62>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d06f      	beq.n	8006e54 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006d74:	e078      	b.n	8006e68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006d76:	2b20      	cmp	r3, #32
 8006d78:	d06c      	beq.n	8006e54 <HAL_TIM_ConfigClockSource+0x140>
 8006d7a:	2b30      	cmp	r3, #48	; 0x30
 8006d7c:	d06a      	beq.n	8006e54 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006d7e:	e073      	b.n	8006e68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006d80:	2b70      	cmp	r3, #112	; 0x70
 8006d82:	d00d      	beq.n	8006da0 <HAL_TIM_ConfigClockSource+0x8c>
 8006d84:	2b70      	cmp	r3, #112	; 0x70
 8006d86:	d804      	bhi.n	8006d92 <HAL_TIM_ConfigClockSource+0x7e>
 8006d88:	2b50      	cmp	r3, #80	; 0x50
 8006d8a:	d033      	beq.n	8006df4 <HAL_TIM_ConfigClockSource+0xe0>
 8006d8c:	2b60      	cmp	r3, #96	; 0x60
 8006d8e:	d041      	beq.n	8006e14 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006d90:	e06a      	b.n	8006e68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d96:	d066      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0x152>
 8006d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d9c:	d017      	beq.n	8006dce <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006d9e:	e063      	b.n	8006e68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6818      	ldr	r0, [r3, #0]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	6899      	ldr	r1, [r3, #8]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	f000 fb5a 	bl	8007468 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006dc2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	609a      	str	r2, [r3, #8]
      break;
 8006dcc:	e04c      	b.n	8006e68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6818      	ldr	r0, [r3, #0]
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	6899      	ldr	r1, [r3, #8]
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	f000 fb43 	bl	8007468 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	689a      	ldr	r2, [r3, #8]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006df0:	609a      	str	r2, [r3, #8]
      break;
 8006df2:	e039      	b.n	8006e68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6818      	ldr	r0, [r3, #0]
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	6859      	ldr	r1, [r3, #4]
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	461a      	mov	r2, r3
 8006e02:	f000 fab7 	bl	8007374 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2150      	movs	r1, #80	; 0x50
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f000 fb10 	bl	8007432 <TIM_ITRx_SetConfig>
      break;
 8006e12:	e029      	b.n	8006e68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6818      	ldr	r0, [r3, #0]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	6859      	ldr	r1, [r3, #4]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	461a      	mov	r2, r3
 8006e22:	f000 fad6 	bl	80073d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2160      	movs	r1, #96	; 0x60
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f000 fb00 	bl	8007432 <TIM_ITRx_SetConfig>
      break;
 8006e32:	e019      	b.n	8006e68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6818      	ldr	r0, [r3, #0]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	6859      	ldr	r1, [r3, #4]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	461a      	mov	r2, r3
 8006e42:	f000 fa97 	bl	8007374 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2140      	movs	r1, #64	; 0x40
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f000 faf0 	bl	8007432 <TIM_ITRx_SetConfig>
      break;
 8006e52:	e009      	b.n	8006e68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	4610      	mov	r0, r2
 8006e60:	f000 fae7 	bl	8007432 <TIM_ITRx_SetConfig>
      break;
 8006e64:	e000      	b.n	8006e68 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006e66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b083      	sub	sp, #12
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e8a:	bf00      	nop
 8006e8c:	370c      	adds	r7, #12
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b083      	sub	sp, #12
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e9e:	bf00      	nop
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b083      	sub	sp, #12
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006eb2:	bf00      	nop
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b083      	sub	sp, #12
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ec6:	bf00      	nop
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
	...

08006ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a40      	ldr	r2, [pc, #256]	; (8006fe8 <TIM_Base_SetConfig+0x114>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d013      	beq.n	8006f14 <TIM_Base_SetConfig+0x40>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ef2:	d00f      	beq.n	8006f14 <TIM_Base_SetConfig+0x40>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a3d      	ldr	r2, [pc, #244]	; (8006fec <TIM_Base_SetConfig+0x118>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d00b      	beq.n	8006f14 <TIM_Base_SetConfig+0x40>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a3c      	ldr	r2, [pc, #240]	; (8006ff0 <TIM_Base_SetConfig+0x11c>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d007      	beq.n	8006f14 <TIM_Base_SetConfig+0x40>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a3b      	ldr	r2, [pc, #236]	; (8006ff4 <TIM_Base_SetConfig+0x120>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d003      	beq.n	8006f14 <TIM_Base_SetConfig+0x40>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a3a      	ldr	r2, [pc, #232]	; (8006ff8 <TIM_Base_SetConfig+0x124>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d108      	bne.n	8006f26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a2f      	ldr	r2, [pc, #188]	; (8006fe8 <TIM_Base_SetConfig+0x114>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d02b      	beq.n	8006f86 <TIM_Base_SetConfig+0xb2>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f34:	d027      	beq.n	8006f86 <TIM_Base_SetConfig+0xb2>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a2c      	ldr	r2, [pc, #176]	; (8006fec <TIM_Base_SetConfig+0x118>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d023      	beq.n	8006f86 <TIM_Base_SetConfig+0xb2>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a2b      	ldr	r2, [pc, #172]	; (8006ff0 <TIM_Base_SetConfig+0x11c>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d01f      	beq.n	8006f86 <TIM_Base_SetConfig+0xb2>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a2a      	ldr	r2, [pc, #168]	; (8006ff4 <TIM_Base_SetConfig+0x120>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d01b      	beq.n	8006f86 <TIM_Base_SetConfig+0xb2>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a29      	ldr	r2, [pc, #164]	; (8006ff8 <TIM_Base_SetConfig+0x124>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d017      	beq.n	8006f86 <TIM_Base_SetConfig+0xb2>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a28      	ldr	r2, [pc, #160]	; (8006ffc <TIM_Base_SetConfig+0x128>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d013      	beq.n	8006f86 <TIM_Base_SetConfig+0xb2>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a27      	ldr	r2, [pc, #156]	; (8007000 <TIM_Base_SetConfig+0x12c>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d00f      	beq.n	8006f86 <TIM_Base_SetConfig+0xb2>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a26      	ldr	r2, [pc, #152]	; (8007004 <TIM_Base_SetConfig+0x130>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d00b      	beq.n	8006f86 <TIM_Base_SetConfig+0xb2>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a25      	ldr	r2, [pc, #148]	; (8007008 <TIM_Base_SetConfig+0x134>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d007      	beq.n	8006f86 <TIM_Base_SetConfig+0xb2>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a24      	ldr	r2, [pc, #144]	; (800700c <TIM_Base_SetConfig+0x138>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d003      	beq.n	8006f86 <TIM_Base_SetConfig+0xb2>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a23      	ldr	r2, [pc, #140]	; (8007010 <TIM_Base_SetConfig+0x13c>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d108      	bne.n	8006f98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	689a      	ldr	r2, [r3, #8]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a0a      	ldr	r2, [pc, #40]	; (8006fe8 <TIM_Base_SetConfig+0x114>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d003      	beq.n	8006fcc <TIM_Base_SetConfig+0xf8>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a0c      	ldr	r2, [pc, #48]	; (8006ff8 <TIM_Base_SetConfig+0x124>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d103      	bne.n	8006fd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	691a      	ldr	r2, [r3, #16]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	615a      	str	r2, [r3, #20]
}
 8006fda:	bf00      	nop
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	40010000 	.word	0x40010000
 8006fec:	40000400 	.word	0x40000400
 8006ff0:	40000800 	.word	0x40000800
 8006ff4:	40000c00 	.word	0x40000c00
 8006ff8:	40010400 	.word	0x40010400
 8006ffc:	40014000 	.word	0x40014000
 8007000:	40014400 	.word	0x40014400
 8007004:	40014800 	.word	0x40014800
 8007008:	40001800 	.word	0x40001800
 800700c:	40001c00 	.word	0x40001c00
 8007010:	40002000 	.word	0x40002000

08007014 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007014:	b480      	push	{r7}
 8007016:	b087      	sub	sp, #28
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	f023 0201 	bic.w	r2, r3, #1
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f023 0303 	bic.w	r3, r3, #3
 800704a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	4313      	orrs	r3, r2
 8007054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f023 0302 	bic.w	r3, r3, #2
 800705c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	4313      	orrs	r3, r2
 8007066:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a20      	ldr	r2, [pc, #128]	; (80070ec <TIM_OC1_SetConfig+0xd8>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d003      	beq.n	8007078 <TIM_OC1_SetConfig+0x64>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a1f      	ldr	r2, [pc, #124]	; (80070f0 <TIM_OC1_SetConfig+0xdc>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d10c      	bne.n	8007092 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	f023 0308 	bic.w	r3, r3, #8
 800707e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	4313      	orrs	r3, r2
 8007088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f023 0304 	bic.w	r3, r3, #4
 8007090:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a15      	ldr	r2, [pc, #84]	; (80070ec <TIM_OC1_SetConfig+0xd8>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d003      	beq.n	80070a2 <TIM_OC1_SetConfig+0x8e>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a14      	ldr	r2, [pc, #80]	; (80070f0 <TIM_OC1_SetConfig+0xdc>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d111      	bne.n	80070c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	699b      	ldr	r3, [r3, #24]
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	685a      	ldr	r2, [r3, #4]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	621a      	str	r2, [r3, #32]
}
 80070e0:	bf00      	nop
 80070e2:	371c      	adds	r7, #28
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	40010000 	.word	0x40010000
 80070f0:	40010400 	.word	0x40010400

080070f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b087      	sub	sp, #28
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	f023 0210 	bic.w	r2, r3, #16
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800712a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	021b      	lsls	r3, r3, #8
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	4313      	orrs	r3, r2
 8007136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	f023 0320 	bic.w	r3, r3, #32
 800713e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	011b      	lsls	r3, r3, #4
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	4313      	orrs	r3, r2
 800714a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a22      	ldr	r2, [pc, #136]	; (80071d8 <TIM_OC2_SetConfig+0xe4>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d003      	beq.n	800715c <TIM_OC2_SetConfig+0x68>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a21      	ldr	r2, [pc, #132]	; (80071dc <TIM_OC2_SetConfig+0xe8>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d10d      	bne.n	8007178 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	011b      	lsls	r3, r3, #4
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	4313      	orrs	r3, r2
 800716e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007176:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a17      	ldr	r2, [pc, #92]	; (80071d8 <TIM_OC2_SetConfig+0xe4>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d003      	beq.n	8007188 <TIM_OC2_SetConfig+0x94>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a16      	ldr	r2, [pc, #88]	; (80071dc <TIM_OC2_SetConfig+0xe8>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d113      	bne.n	80071b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800718e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007196:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	693a      	ldr	r2, [r7, #16]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	621a      	str	r2, [r3, #32]
}
 80071ca:	bf00      	nop
 80071cc:	371c      	adds	r7, #28
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	40010000 	.word	0x40010000
 80071dc:	40010400 	.word	0x40010400

080071e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b087      	sub	sp, #28
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800720e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f023 0303 	bic.w	r3, r3, #3
 8007216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	4313      	orrs	r3, r2
 8007220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	021b      	lsls	r3, r3, #8
 8007230:	697a      	ldr	r2, [r7, #20]
 8007232:	4313      	orrs	r3, r2
 8007234:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a21      	ldr	r2, [pc, #132]	; (80072c0 <TIM_OC3_SetConfig+0xe0>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d003      	beq.n	8007246 <TIM_OC3_SetConfig+0x66>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4a20      	ldr	r2, [pc, #128]	; (80072c4 <TIM_OC3_SetConfig+0xe4>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d10d      	bne.n	8007262 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800724c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	021b      	lsls	r3, r3, #8
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	4313      	orrs	r3, r2
 8007258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007260:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a16      	ldr	r2, [pc, #88]	; (80072c0 <TIM_OC3_SetConfig+0xe0>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d003      	beq.n	8007272 <TIM_OC3_SetConfig+0x92>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a15      	ldr	r2, [pc, #84]	; (80072c4 <TIM_OC3_SetConfig+0xe4>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d113      	bne.n	800729a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	011b      	lsls	r3, r3, #4
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	4313      	orrs	r3, r2
 800728c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	011b      	lsls	r3, r3, #4
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	4313      	orrs	r3, r2
 8007298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	685a      	ldr	r2, [r3, #4]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	621a      	str	r2, [r3, #32]
}
 80072b4:	bf00      	nop
 80072b6:	371c      	adds	r7, #28
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr
 80072c0:	40010000 	.word	0x40010000
 80072c4:	40010400 	.word	0x40010400

080072c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b087      	sub	sp, #28
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	69db      	ldr	r3, [r3, #28]
 80072ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	021b      	lsls	r3, r3, #8
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	4313      	orrs	r3, r2
 800730a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007312:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	031b      	lsls	r3, r3, #12
 800731a:	693a      	ldr	r2, [r7, #16]
 800731c:	4313      	orrs	r3, r2
 800731e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a12      	ldr	r2, [pc, #72]	; (800736c <TIM_OC4_SetConfig+0xa4>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d003      	beq.n	8007330 <TIM_OC4_SetConfig+0x68>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a11      	ldr	r2, [pc, #68]	; (8007370 <TIM_OC4_SetConfig+0xa8>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d109      	bne.n	8007344 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007336:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	695b      	ldr	r3, [r3, #20]
 800733c:	019b      	lsls	r3, r3, #6
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	4313      	orrs	r3, r2
 8007342:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	685a      	ldr	r2, [r3, #4]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	693a      	ldr	r2, [r7, #16]
 800735c:	621a      	str	r2, [r3, #32]
}
 800735e:	bf00      	nop
 8007360:	371c      	adds	r7, #28
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	40010000 	.word	0x40010000
 8007370:	40010400 	.word	0x40010400

08007374 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007374:	b480      	push	{r7}
 8007376:	b087      	sub	sp, #28
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6a1b      	ldr	r3, [r3, #32]
 8007384:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6a1b      	ldr	r3, [r3, #32]
 800738a:	f023 0201 	bic.w	r2, r3, #1
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	699b      	ldr	r3, [r3, #24]
 8007396:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800739e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	011b      	lsls	r3, r3, #4
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	f023 030a 	bic.w	r3, r3, #10
 80073b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	621a      	str	r2, [r3, #32]
}
 80073c6:	bf00      	nop
 80073c8:	371c      	adds	r7, #28
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr

080073d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073d2:	b480      	push	{r7}
 80073d4:	b087      	sub	sp, #28
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	60f8      	str	r0, [r7, #12]
 80073da:	60b9      	str	r1, [r7, #8]
 80073dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	f023 0210 	bic.w	r2, r3, #16
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6a1b      	ldr	r3, [r3, #32]
 80073f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	031b      	lsls	r3, r3, #12
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	4313      	orrs	r3, r2
 8007406:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800740e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	011b      	lsls	r3, r3, #4
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	4313      	orrs	r3, r2
 8007418:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	621a      	str	r2, [r3, #32]
}
 8007426:	bf00      	nop
 8007428:	371c      	adds	r7, #28
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr

08007432 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007432:	b480      	push	{r7}
 8007434:	b085      	sub	sp, #20
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
 800743a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007448:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800744a:	683a      	ldr	r2, [r7, #0]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	4313      	orrs	r3, r2
 8007450:	f043 0307 	orr.w	r3, r3, #7
 8007454:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	609a      	str	r2, [r3, #8]
}
 800745c:	bf00      	nop
 800745e:	3714      	adds	r7, #20
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007468:	b480      	push	{r7}
 800746a:	b087      	sub	sp, #28
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
 8007474:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007482:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	021a      	lsls	r2, r3, #8
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	431a      	orrs	r2, r3
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	4313      	orrs	r3, r2
 8007490:	697a      	ldr	r2, [r7, #20]
 8007492:	4313      	orrs	r3, r2
 8007494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	609a      	str	r2, [r3, #8]
}
 800749c:	bf00      	nop
 800749e:	371c      	adds	r7, #28
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d101      	bne.n	80074c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074bc:	2302      	movs	r3, #2
 80074be:	e05a      	b.n	8007576 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2202      	movs	r2, #2
 80074cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a21      	ldr	r2, [pc, #132]	; (8007584 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d022      	beq.n	800754a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800750c:	d01d      	beq.n	800754a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a1d      	ldr	r2, [pc, #116]	; (8007588 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d018      	beq.n	800754a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a1b      	ldr	r2, [pc, #108]	; (800758c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d013      	beq.n	800754a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a1a      	ldr	r2, [pc, #104]	; (8007590 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d00e      	beq.n	800754a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a18      	ldr	r2, [pc, #96]	; (8007594 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d009      	beq.n	800754a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a17      	ldr	r2, [pc, #92]	; (8007598 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d004      	beq.n	800754a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a15      	ldr	r2, [pc, #84]	; (800759c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d10c      	bne.n	8007564 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007550:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	4313      	orrs	r3, r2
 800755a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3714      	adds	r7, #20
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	40010000 	.word	0x40010000
 8007588:	40000400 	.word	0x40000400
 800758c:	40000800 	.word	0x40000800
 8007590:	40000c00 	.word	0x40000c00
 8007594:	40010400 	.word	0x40010400
 8007598:	40014000 	.word	0x40014000
 800759c:	40001800 	.word	0x40001800

080075a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	4603      	mov	r3, r0
 80075d0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80075d2:	2300      	movs	r3, #0
 80075d4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80075d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075da:	2b84      	cmp	r3, #132	; 0x84
 80075dc:	d005      	beq.n	80075ea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80075de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	4413      	add	r3, r2
 80075e6:	3303      	adds	r3, #3
 80075e8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80075ea:	68fb      	ldr	r3, [r7, #12]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3714      	adds	r7, #20
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80075fc:	f001 f8b2 	bl	8008764 <vTaskStartScheduler>
  
  return osOK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	bd80      	pop	{r7, pc}

08007606 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007606:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007608:	b089      	sub	sp, #36	; 0x24
 800760a:	af04      	add	r7, sp, #16
 800760c:	6078      	str	r0, [r7, #4]
 800760e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	695b      	ldr	r3, [r3, #20]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d020      	beq.n	800765a <osThreadCreate+0x54>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	699b      	ldr	r3, [r3, #24]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d01c      	beq.n	800765a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685c      	ldr	r4, [r3, #4]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681d      	ldr	r5, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	691e      	ldr	r6, [r3, #16]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007632:	4618      	mov	r0, r3
 8007634:	f7ff ffc8 	bl	80075c8 <makeFreeRtosPriority>
 8007638:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007642:	9202      	str	r2, [sp, #8]
 8007644:	9301      	str	r3, [sp, #4]
 8007646:	9100      	str	r1, [sp, #0]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	4632      	mov	r2, r6
 800764c:	4629      	mov	r1, r5
 800764e:	4620      	mov	r0, r4
 8007650:	f000 fec5 	bl	80083de <xTaskCreateStatic>
 8007654:	4603      	mov	r3, r0
 8007656:	60fb      	str	r3, [r7, #12]
 8007658:	e01c      	b.n	8007694 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685c      	ldr	r4, [r3, #4]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007666:	b29e      	uxth	r6, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800766e:	4618      	mov	r0, r3
 8007670:	f7ff ffaa 	bl	80075c8 <makeFreeRtosPriority>
 8007674:	4602      	mov	r2, r0
 8007676:	f107 030c 	add.w	r3, r7, #12
 800767a:	9301      	str	r3, [sp, #4]
 800767c:	9200      	str	r2, [sp, #0]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	4632      	mov	r2, r6
 8007682:	4629      	mov	r1, r5
 8007684:	4620      	mov	r0, r4
 8007686:	f000 ff04 	bl	8008492 <xTaskCreate>
 800768a:	4603      	mov	r3, r0
 800768c:	2b01      	cmp	r3, #1
 800768e:	d001      	beq.n	8007694 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007690:	2300      	movs	r3, #0
 8007692:	e000      	b.n	8007696 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007694:	68fb      	ldr	r3, [r7, #12]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800769e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f103 0208 	add.w	r2, r3, #8
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076b6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f103 0208 	add.w	r2, r3, #8
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f103 0208 	add.w	r2, r3, #8
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80076d2:	bf00      	nop
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80076de:	b480      	push	{r7}
 80076e0:	b083      	sub	sp, #12
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80076ec:	bf00      	nop
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	689a      	ldr	r2, [r3, #8]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	683a      	ldr	r2, [r7, #0]
 800771c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	683a      	ldr	r2, [r7, #0]
 8007722:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	1c5a      	adds	r2, r3, #1
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	601a      	str	r2, [r3, #0]
}
 8007734:	bf00      	nop
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007756:	d103      	bne.n	8007760 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	60fb      	str	r3, [r7, #12]
 800775e:	e00c      	b.n	800777a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	3308      	adds	r3, #8
 8007764:	60fb      	str	r3, [r7, #12]
 8007766:	e002      	b.n	800776e <vListInsert+0x2e>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	60fb      	str	r3, [r7, #12]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	429a      	cmp	r2, r3
 8007778:	d2f6      	bcs.n	8007768 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	685a      	ldr	r2, [r3, #4]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	683a      	ldr	r2, [r7, #0]
 8007788:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	683a      	ldr	r2, [r7, #0]
 8007794:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	1c5a      	adds	r2, r3, #1
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	601a      	str	r2, [r3, #0]
}
 80077a6:	bf00      	nop
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80077b2:	b480      	push	{r7}
 80077b4:	b085      	sub	sp, #20
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	6892      	ldr	r2, [r2, #8]
 80077c8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	6852      	ldr	r2, [r2, #4]
 80077d2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d103      	bne.n	80077e6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	689a      	ldr	r2, [r3, #8]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	1e5a      	subs	r2, r3, #1
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3714      	adds	r7, #20
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
	...

08007808 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d109      	bne.n	8007830 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800781c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007820:	f383 8811 	msr	BASEPRI, r3
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	60bb      	str	r3, [r7, #8]
 800782e:	e7fe      	b.n	800782e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007830:	f002 fa5c 	bl	8009cec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800783c:	68f9      	ldr	r1, [r7, #12]
 800783e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007840:	fb01 f303 	mul.w	r3, r1, r3
 8007844:	441a      	add	r2, r3
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007860:	3b01      	subs	r3, #1
 8007862:	68f9      	ldr	r1, [r7, #12]
 8007864:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007866:	fb01 f303 	mul.w	r3, r1, r3
 800786a:	441a      	add	r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	22ff      	movs	r2, #255	; 0xff
 8007874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	22ff      	movs	r2, #255	; 0xff
 800787c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d114      	bne.n	80078b0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d01a      	beq.n	80078c4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	3310      	adds	r3, #16
 8007892:	4618      	mov	r0, r3
 8007894:	f001 f9e4 	bl	8008c60 <xTaskRemoveFromEventList>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d012      	beq.n	80078c4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800789e:	4b0d      	ldr	r3, [pc, #52]	; (80078d4 <xQueueGenericReset+0xcc>)
 80078a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078a4:	601a      	str	r2, [r3, #0]
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	e009      	b.n	80078c4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	3310      	adds	r3, #16
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7ff fef2 	bl	800769e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	3324      	adds	r3, #36	; 0x24
 80078be:	4618      	mov	r0, r3
 80078c0:	f7ff feed 	bl	800769e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80078c4:	f002 fa40 	bl	8009d48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80078c8:	2301      	movs	r3, #1
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	e000ed04 	.word	0xe000ed04

080078d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b08e      	sub	sp, #56	; 0x38
 80078dc:	af02      	add	r7, sp, #8
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
 80078e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d109      	bne.n	8007900 <xQueueGenericCreateStatic+0x28>
 80078ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f0:	f383 8811 	msr	BASEPRI, r3
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80078fe:	e7fe      	b.n	80078fe <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d109      	bne.n	800791a <xQueueGenericCreateStatic+0x42>
 8007906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790a:	f383 8811 	msr	BASEPRI, r3
 800790e:	f3bf 8f6f 	isb	sy
 8007912:	f3bf 8f4f 	dsb	sy
 8007916:	627b      	str	r3, [r7, #36]	; 0x24
 8007918:	e7fe      	b.n	8007918 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d002      	beq.n	8007926 <xQueueGenericCreateStatic+0x4e>
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d001      	beq.n	800792a <xQueueGenericCreateStatic+0x52>
 8007926:	2301      	movs	r3, #1
 8007928:	e000      	b.n	800792c <xQueueGenericCreateStatic+0x54>
 800792a:	2300      	movs	r3, #0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d109      	bne.n	8007944 <xQueueGenericCreateStatic+0x6c>
 8007930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	623b      	str	r3, [r7, #32]
 8007942:	e7fe      	b.n	8007942 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d102      	bne.n	8007950 <xQueueGenericCreateStatic+0x78>
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d101      	bne.n	8007954 <xQueueGenericCreateStatic+0x7c>
 8007950:	2301      	movs	r3, #1
 8007952:	e000      	b.n	8007956 <xQueueGenericCreateStatic+0x7e>
 8007954:	2300      	movs	r3, #0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d109      	bne.n	800796e <xQueueGenericCreateStatic+0x96>
 800795a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795e:	f383 8811 	msr	BASEPRI, r3
 8007962:	f3bf 8f6f 	isb	sy
 8007966:	f3bf 8f4f 	dsb	sy
 800796a:	61fb      	str	r3, [r7, #28]
 800796c:	e7fe      	b.n	800796c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800796e:	234c      	movs	r3, #76	; 0x4c
 8007970:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	2b4c      	cmp	r3, #76	; 0x4c
 8007976:	d009      	beq.n	800798c <xQueueGenericCreateStatic+0xb4>
 8007978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797c:	f383 8811 	msr	BASEPRI, r3
 8007980:	f3bf 8f6f 	isb	sy
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	61bb      	str	r3, [r7, #24]
 800798a:	e7fe      	b.n	800798a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800798c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00d      	beq.n	80079b4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80079a0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80079a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a6:	9300      	str	r3, [sp, #0]
 80079a8:	4613      	mov	r3, r2
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	68b9      	ldr	r1, [r7, #8]
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	f000 f844 	bl	8007a3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80079b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3730      	adds	r7, #48	; 0x30
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b08a      	sub	sp, #40	; 0x28
 80079c2:	af02      	add	r7, sp, #8
 80079c4:	60f8      	str	r0, [r7, #12]
 80079c6:	60b9      	str	r1, [r7, #8]
 80079c8:	4613      	mov	r3, r2
 80079ca:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d109      	bne.n	80079e6 <xQueueGenericCreate+0x28>
 80079d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	613b      	str	r3, [r7, #16]
 80079e4:	e7fe      	b.n	80079e4 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d102      	bne.n	80079f2 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80079ec:	2300      	movs	r3, #0
 80079ee:	61fb      	str	r3, [r7, #28]
 80079f0:	e004      	b.n	80079fc <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	fb02 f303 	mul.w	r3, r2, r3
 80079fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	334c      	adds	r3, #76	; 0x4c
 8007a00:	4618      	mov	r0, r3
 8007a02:	f002 fa8d 	bl	8009f20 <pvPortMalloc>
 8007a06:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d011      	beq.n	8007a32 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	334c      	adds	r3, #76	; 0x4c
 8007a16:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a20:	79fa      	ldrb	r2, [r7, #7]
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	9300      	str	r3, [sp, #0]
 8007a26:	4613      	mov	r3, r2
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	68b9      	ldr	r1, [r7, #8]
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f000 f805 	bl	8007a3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a32:	69bb      	ldr	r3, [r7, #24]
	}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3720      	adds	r7, #32
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
 8007a48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d103      	bne.n	8007a58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	69ba      	ldr	r2, [r7, #24]
 8007a54:	601a      	str	r2, [r3, #0]
 8007a56:	e002      	b.n	8007a5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007a6a:	2101      	movs	r1, #1
 8007a6c:	69b8      	ldr	r0, [r7, #24]
 8007a6e:	f7ff fecb 	bl	8007808 <xQueueGenericReset>
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	2200      	movs	r2, #0
 8007a76:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007a78:	bf00      	nop
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b08e      	sub	sp, #56	; 0x38
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]
 8007a8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d109      	bne.n	8007ab0 <xQueueGenericSend+0x30>
 8007a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa0:	f383 8811 	msr	BASEPRI, r3
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	627b      	str	r3, [r7, #36]	; 0x24
 8007aae:	e7fe      	b.n	8007aae <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d103      	bne.n	8007abe <xQueueGenericSend+0x3e>
 8007ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d101      	bne.n	8007ac2 <xQueueGenericSend+0x42>
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e000      	b.n	8007ac4 <xQueueGenericSend+0x44>
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d109      	bne.n	8007adc <xQueueGenericSend+0x5c>
 8007ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007acc:	f383 8811 	msr	BASEPRI, r3
 8007ad0:	f3bf 8f6f 	isb	sy
 8007ad4:	f3bf 8f4f 	dsb	sy
 8007ad8:	623b      	str	r3, [r7, #32]
 8007ada:	e7fe      	b.n	8007ada <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d103      	bne.n	8007aea <xQueueGenericSend+0x6a>
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d101      	bne.n	8007aee <xQueueGenericSend+0x6e>
 8007aea:	2301      	movs	r3, #1
 8007aec:	e000      	b.n	8007af0 <xQueueGenericSend+0x70>
 8007aee:	2300      	movs	r3, #0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d109      	bne.n	8007b08 <xQueueGenericSend+0x88>
 8007af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af8:	f383 8811 	msr	BASEPRI, r3
 8007afc:	f3bf 8f6f 	isb	sy
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	61fb      	str	r3, [r7, #28]
 8007b06:	e7fe      	b.n	8007b06 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b08:	f001 fa60 	bl	8008fcc <xTaskGetSchedulerState>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d102      	bne.n	8007b18 <xQueueGenericSend+0x98>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d101      	bne.n	8007b1c <xQueueGenericSend+0x9c>
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e000      	b.n	8007b1e <xQueueGenericSend+0x9e>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d109      	bne.n	8007b36 <xQueueGenericSend+0xb6>
 8007b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b26:	f383 8811 	msr	BASEPRI, r3
 8007b2a:	f3bf 8f6f 	isb	sy
 8007b2e:	f3bf 8f4f 	dsb	sy
 8007b32:	61bb      	str	r3, [r7, #24]
 8007b34:	e7fe      	b.n	8007b34 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b36:	f002 f8d9 	bl	8009cec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d302      	bcc.n	8007b4c <xQueueGenericSend+0xcc>
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d146      	bne.n	8007bda <xQueueGenericSend+0x15a>
			{
				traceQUEUE_SEND( pxQueue );

				#if ( configUSE_QUEUE_SETS == 1 )
				{
				UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b50:	62fb      	str	r3, [r7, #44]	; 0x2c

					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	68b9      	ldr	r1, [r7, #8]
 8007b56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b58:	f000 fa2c 	bl	8007fb4 <prvCopyDataToQueue>
 8007b5c:	62b8      	str	r0, [r7, #40]	; 0x28

					if( pxQueue->pxQueueSetContainer != NULL )
 8007b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d015      	beq.n	8007b92 <xQueueGenericSend+0x112>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	d102      	bne.n	8007b72 <xQueueGenericSend+0xf2>
 8007b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d12f      	bne.n	8007bd2 <xQueueGenericSend+0x152>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8007b72:	6839      	ldr	r1, [r7, #0]
 8007b74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b76:	f000 fbda 	bl	800832e <prvNotifyQueueSetContainer>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d028      	beq.n	8007bd2 <xQueueGenericSend+0x152>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 8007b80:	4b4a      	ldr	r3, [pc, #296]	; (8007cac <xQueueGenericSend+0x22c>)
 8007b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b86:	601a      	str	r2, [r3, #0]
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	e01f      	b.n	8007bd2 <xQueueGenericSend+0x152>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d010      	beq.n	8007bbc <xQueueGenericSend+0x13c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9c:	3324      	adds	r3, #36	; 0x24
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f001 f85e 	bl	8008c60 <xTaskRemoveFromEventList>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d013      	beq.n	8007bd2 <xQueueGenericSend+0x152>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8007baa:	4b40      	ldr	r3, [pc, #256]	; (8007cac <xQueueGenericSend+0x22c>)
 8007bac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bb0:	601a      	str	r2, [r3, #0]
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	e00a      	b.n	8007bd2 <xQueueGenericSend+0x152>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8007bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d007      	beq.n	8007bd2 <xQueueGenericSend+0x152>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 8007bc2:	4b3a      	ldr	r3, [pc, #232]	; (8007cac <xQueueGenericSend+0x22c>)
 8007bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bc8:	601a      	str	r2, [r3, #0]
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007bd2:	f002 f8b9 	bl	8009d48 <vPortExitCritical>
				return pdPASS;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e063      	b.n	8007ca2 <xQueueGenericSend+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d103      	bne.n	8007be8 <xQueueGenericSend+0x168>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007be0:	f002 f8b2 	bl	8009d48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007be4:	2300      	movs	r3, #0
 8007be6:	e05c      	b.n	8007ca2 <xQueueGenericSend+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d106      	bne.n	8007bfc <xQueueGenericSend+0x17c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007bee:	f107 0310 	add.w	r3, r7, #16
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f001 f896 	bl	8008d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007bfc:	f002 f8a4 	bl	8009d48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c00:	f000 fe14 	bl	800882c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c04:	f002 f872 	bl	8009cec <vPortEnterCritical>
 8007c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c0e:	b25b      	sxtb	r3, r3
 8007c10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c14:	d103      	bne.n	8007c1e <xQueueGenericSend+0x19e>
 8007c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c24:	b25b      	sxtb	r3, r3
 8007c26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c2a:	d103      	bne.n	8007c34 <xQueueGenericSend+0x1b4>
 8007c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c34:	f002 f888 	bl	8009d48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c38:	1d3a      	adds	r2, r7, #4
 8007c3a:	f107 0310 	add.w	r3, r7, #16
 8007c3e:	4611      	mov	r1, r2
 8007c40:	4618      	mov	r0, r3
 8007c42:	f001 f885 	bl	8008d50 <xTaskCheckForTimeOut>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d124      	bne.n	8007c96 <xQueueGenericSend+0x216>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007c4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c4e:	f000 fab7 	bl	80081c0 <prvIsQueueFull>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d018      	beq.n	8007c8a <xQueueGenericSend+0x20a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5a:	3310      	adds	r3, #16
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	4611      	mov	r1, r2
 8007c60:	4618      	mov	r0, r3
 8007c62:	f000 ffaf 	bl	8008bc4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007c66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c68:	f000 fa34 	bl	80080d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007c6c:	f000 fdec 	bl	8008848 <xTaskResumeAll>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f47f af5f 	bne.w	8007b36 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007c78:	4b0c      	ldr	r3, [pc, #48]	; (8007cac <xQueueGenericSend+0x22c>)
 8007c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c7e:	601a      	str	r2, [r3, #0]
 8007c80:	f3bf 8f4f 	dsb	sy
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	e755      	b.n	8007b36 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007c8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c8c:	f000 fa22 	bl	80080d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c90:	f000 fdda 	bl	8008848 <xTaskResumeAll>
 8007c94:	e74f      	b.n	8007b36 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007c96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c98:	f000 fa1c 	bl	80080d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c9c:	f000 fdd4 	bl	8008848 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007ca0:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3738      	adds	r7, #56	; 0x38
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	e000ed04 	.word	0xe000ed04

08007cb0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b08e      	sub	sp, #56	; 0x38
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]
 8007cbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d109      	bne.n	8007cdc <xQueueGenericSendFromISR+0x2c>
 8007cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ccc:	f383 8811 	msr	BASEPRI, r3
 8007cd0:	f3bf 8f6f 	isb	sy
 8007cd4:	f3bf 8f4f 	dsb	sy
 8007cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8007cda:	e7fe      	b.n	8007cda <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d103      	bne.n	8007cea <xQueueGenericSendFromISR+0x3a>
 8007ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d101      	bne.n	8007cee <xQueueGenericSendFromISR+0x3e>
 8007cea:	2301      	movs	r3, #1
 8007cec:	e000      	b.n	8007cf0 <xQueueGenericSendFromISR+0x40>
 8007cee:	2300      	movs	r3, #0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d109      	bne.n	8007d08 <xQueueGenericSendFromISR+0x58>
 8007cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf8:	f383 8811 	msr	BASEPRI, r3
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	623b      	str	r3, [r7, #32]
 8007d06:	e7fe      	b.n	8007d06 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d103      	bne.n	8007d16 <xQueueGenericSendFromISR+0x66>
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d101      	bne.n	8007d1a <xQueueGenericSendFromISR+0x6a>
 8007d16:	2301      	movs	r3, #1
 8007d18:	e000      	b.n	8007d1c <xQueueGenericSendFromISR+0x6c>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d109      	bne.n	8007d34 <xQueueGenericSendFromISR+0x84>
 8007d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	61fb      	str	r3, [r7, #28]
 8007d32:	e7fe      	b.n	8007d32 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d34:	f002 f8b6 	bl	8009ea4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007d38:	f3ef 8211 	mrs	r2, BASEPRI
 8007d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d40:	f383 8811 	msr	BASEPRI, r3
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	61ba      	str	r2, [r7, #24]
 8007d4e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007d50:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d52:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d302      	bcc.n	8007d66 <xQueueGenericSendFromISR+0xb6>
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d13e      	bne.n	8007de4 <xQueueGenericSendFromISR+0x134>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d70:	683a      	ldr	r2, [r7, #0]
 8007d72:	68b9      	ldr	r1, [r7, #8]
 8007d74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d76:	f000 f91d 	bl	8007fb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007d7a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d82:	d124      	bne.n	8007dce <xQueueGenericSendFromISR+0x11e>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8007d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00d      	beq.n	8007da8 <xQueueGenericSendFromISR+0xf8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8007d8c:	6839      	ldr	r1, [r7, #0]
 8007d8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d90:	f000 facd 	bl	800832e <prvNotifyQueueSetContainer>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d021      	beq.n	8007dde <xQueueGenericSendFromISR+0x12e>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d01e      	beq.n	8007dde <xQueueGenericSendFromISR+0x12e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	601a      	str	r2, [r3, #0]
 8007da6:	e01a      	b.n	8007dde <xQueueGenericSendFromISR+0x12e>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d016      	beq.n	8007dde <xQueueGenericSendFromISR+0x12e>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db2:	3324      	adds	r3, #36	; 0x24
 8007db4:	4618      	mov	r0, r3
 8007db6:	f000 ff53 	bl	8008c60 <xTaskRemoveFromEventList>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00e      	beq.n	8007dde <xQueueGenericSendFromISR+0x12e>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00b      	beq.n	8007dde <xQueueGenericSendFromISR+0x12e>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	601a      	str	r2, [r3, #0]
 8007dcc:	e007      	b.n	8007dde <xQueueGenericSendFromISR+0x12e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007dce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	b25a      	sxtb	r2, r3
 8007dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007dde:	2301      	movs	r3, #1
 8007de0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007de2:	e001      	b.n	8007de8 <xQueueGenericSendFromISR+0x138>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007de4:	2300      	movs	r3, #0
 8007de6:	637b      	str	r3, [r7, #52]	; 0x34
 8007de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dea:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3738      	adds	r7, #56	; 0x38
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b08c      	sub	sp, #48	; 0x30
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d109      	bne.n	8007e2a <xQueueReceive+0x2e>
	__asm volatile
 8007e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1a:	f383 8811 	msr	BASEPRI, r3
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	f3bf 8f4f 	dsb	sy
 8007e26:	623b      	str	r3, [r7, #32]
 8007e28:	e7fe      	b.n	8007e28 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d103      	bne.n	8007e38 <xQueueReceive+0x3c>
 8007e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d101      	bne.n	8007e3c <xQueueReceive+0x40>
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e000      	b.n	8007e3e <xQueueReceive+0x42>
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d109      	bne.n	8007e56 <xQueueReceive+0x5a>
 8007e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e46:	f383 8811 	msr	BASEPRI, r3
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	61fb      	str	r3, [r7, #28]
 8007e54:	e7fe      	b.n	8007e54 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e56:	f001 f8b9 	bl	8008fcc <xTaskGetSchedulerState>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d102      	bne.n	8007e66 <xQueueReceive+0x6a>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d101      	bne.n	8007e6a <xQueueReceive+0x6e>
 8007e66:	2301      	movs	r3, #1
 8007e68:	e000      	b.n	8007e6c <xQueueReceive+0x70>
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d109      	bne.n	8007e84 <xQueueReceive+0x88>
 8007e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e74:	f383 8811 	msr	BASEPRI, r3
 8007e78:	f3bf 8f6f 	isb	sy
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	61bb      	str	r3, [r7, #24]
 8007e82:	e7fe      	b.n	8007e82 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e84:	f001 ff32 	bl	8009cec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d01f      	beq.n	8007ed4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e94:	68b9      	ldr	r1, [r7, #8]
 8007e96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e98:	f000 f8f6 	bl	8008088 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9e:	1e5a      	subs	r2, r3, #1
 8007ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00f      	beq.n	8007ecc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eae:	3310      	adds	r3, #16
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f000 fed5 	bl	8008c60 <xTaskRemoveFromEventList>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d007      	beq.n	8007ecc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007ebc:	4b3c      	ldr	r3, [pc, #240]	; (8007fb0 <xQueueReceive+0x1b4>)
 8007ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ec2:	601a      	str	r2, [r3, #0]
 8007ec4:	f3bf 8f4f 	dsb	sy
 8007ec8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ecc:	f001 ff3c 	bl	8009d48 <vPortExitCritical>
				return pdPASS;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e069      	b.n	8007fa8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d103      	bne.n	8007ee2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007eda:	f001 ff35 	bl	8009d48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	e062      	b.n	8007fa8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d106      	bne.n	8007ef6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ee8:	f107 0310 	add.w	r3, r7, #16
 8007eec:	4618      	mov	r0, r3
 8007eee:	f000 ff19 	bl	8008d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ef6:	f001 ff27 	bl	8009d48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007efa:	f000 fc97 	bl	800882c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007efe:	f001 fef5 	bl	8009cec <vPortEnterCritical>
 8007f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f08:	b25b      	sxtb	r3, r3
 8007f0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f0e:	d103      	bne.n	8007f18 <xQueueReceive+0x11c>
 8007f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f1e:	b25b      	sxtb	r3, r3
 8007f20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f24:	d103      	bne.n	8007f2e <xQueueReceive+0x132>
 8007f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f2e:	f001 ff0b 	bl	8009d48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f32:	1d3a      	adds	r2, r7, #4
 8007f34:	f107 0310 	add.w	r3, r7, #16
 8007f38:	4611      	mov	r1, r2
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f000 ff08 	bl	8008d50 <xTaskCheckForTimeOut>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d123      	bne.n	8007f8e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f48:	f000 f924 	bl	8008194 <prvIsQueueEmpty>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d017      	beq.n	8007f82 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f54:	3324      	adds	r3, #36	; 0x24
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	4611      	mov	r1, r2
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f000 fe32 	bl	8008bc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f62:	f000 f8b7 	bl	80080d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f66:	f000 fc6f 	bl	8008848 <xTaskResumeAll>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d189      	bne.n	8007e84 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007f70:	4b0f      	ldr	r3, [pc, #60]	; (8007fb0 <xQueueReceive+0x1b4>)
 8007f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f76:	601a      	str	r2, [r3, #0]
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	f3bf 8f6f 	isb	sy
 8007f80:	e780      	b.n	8007e84 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007f82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f84:	f000 f8a6 	bl	80080d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f88:	f000 fc5e 	bl	8008848 <xTaskResumeAll>
 8007f8c:	e77a      	b.n	8007e84 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007f8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f90:	f000 f8a0 	bl	80080d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f94:	f000 fc58 	bl	8008848 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f9a:	f000 f8fb 	bl	8008194 <prvIsQueueEmpty>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f43f af6f 	beq.w	8007e84 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007fa6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3730      	adds	r7, #48	; 0x30
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	e000ed04 	.word	0xe000ed04

08007fb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b086      	sub	sp, #24
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10d      	bne.n	8007fee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d14d      	bne.n	8008076 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f001 f812 	bl	8009008 <xTaskPriorityDisinherit>
 8007fe4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	609a      	str	r2, [r3, #8]
 8007fec:	e043      	b.n	8008076 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d119      	bne.n	8008028 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6858      	ldr	r0, [r3, #4]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	68b9      	ldr	r1, [r7, #8]
 8008000:	f004 fb2a 	bl	800c658 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	685a      	ldr	r2, [r3, #4]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800c:	441a      	add	r2, r3
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	685a      	ldr	r2, [r3, #4]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	429a      	cmp	r2, r3
 800801c:	d32b      	bcc.n	8008076 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	605a      	str	r2, [r3, #4]
 8008026:	e026      	b.n	8008076 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	68d8      	ldr	r0, [r3, #12]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008030:	461a      	mov	r2, r3
 8008032:	68b9      	ldr	r1, [r7, #8]
 8008034:	f004 fb10 	bl	800c658 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	68da      	ldr	r2, [r3, #12]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008040:	425b      	negs	r3, r3
 8008042:	441a      	add	r2, r3
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	68da      	ldr	r2, [r3, #12]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	429a      	cmp	r2, r3
 8008052:	d207      	bcs.n	8008064 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	689a      	ldr	r2, [r3, #8]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800805c:	425b      	negs	r3, r3
 800805e:	441a      	add	r2, r3
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b02      	cmp	r3, #2
 8008068:	d105      	bne.n	8008076 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d002      	beq.n	8008076 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	3b01      	subs	r3, #1
 8008074:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	1c5a      	adds	r2, r3, #1
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800807e:	697b      	ldr	r3, [r7, #20]
}
 8008080:	4618      	mov	r0, r3
 8008082:	3718      	adds	r7, #24
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008096:	2b00      	cmp	r3, #0
 8008098:	d018      	beq.n	80080cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	68da      	ldr	r2, [r3, #12]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a2:	441a      	add	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	68da      	ldr	r2, [r3, #12]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d303      	bcc.n	80080bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	68d9      	ldr	r1, [r3, #12]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c4:	461a      	mov	r2, r3
 80080c6:	6838      	ldr	r0, [r7, #0]
 80080c8:	f004 fac6 	bl	800c658 <memcpy>
	}
}
 80080cc:	bf00      	nop
 80080ce:	3708      	adds	r7, #8
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80080dc:	f001 fe06 	bl	8009cec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080e8:	e01f      	b.n	800812a <prvUnlockQueue+0x56>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d009      	beq.n	8008106 <prvUnlockQueue+0x32>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
 80080f2:	2100      	movs	r1, #0
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 f91a 	bl	800832e <prvNotifyQueueSetContainer>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d010      	beq.n	8008122 <prvUnlockQueue+0x4e>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 8008100:	f000 fe86 	bl	8008e10 <vTaskMissedYield>
 8008104:	e00d      	b.n	8008122 <prvUnlockQueue+0x4e>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810a:	2b00      	cmp	r3, #0
 800810c:	d012      	beq.n	8008134 <prvUnlockQueue+0x60>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	3324      	adds	r3, #36	; 0x24
 8008112:	4618      	mov	r0, r3
 8008114:	f000 fda4 	bl	8008c60 <xTaskRemoveFromEventList>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d001      	beq.n	8008122 <prvUnlockQueue+0x4e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 800811e:	f000 fe77 	bl	8008e10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008122:	7bfb      	ldrb	r3, [r7, #15]
 8008124:	3b01      	subs	r3, #1
 8008126:	b2db      	uxtb	r3, r3
 8008128:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800812a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800812e:	2b00      	cmp	r3, #0
 8008130:	dcdb      	bgt.n	80080ea <prvUnlockQueue+0x16>
 8008132:	e000      	b.n	8008136 <prvUnlockQueue+0x62>
						break;
 8008134:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	22ff      	movs	r2, #255	; 0xff
 800813a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800813e:	f001 fe03 	bl	8009d48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008142:	f001 fdd3 	bl	8009cec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800814c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800814e:	e011      	b.n	8008174 <prvUnlockQueue+0xa0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d012      	beq.n	800817e <prvUnlockQueue+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	3310      	adds	r3, #16
 800815c:	4618      	mov	r0, r3
 800815e:	f000 fd7f 	bl	8008c60 <xTaskRemoveFromEventList>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d001      	beq.n	800816c <prvUnlockQueue+0x98>
				{
					vTaskMissedYield();
 8008168:	f000 fe52 	bl	8008e10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800816c:	7bbb      	ldrb	r3, [r7, #14]
 800816e:	3b01      	subs	r3, #1
 8008170:	b2db      	uxtb	r3, r3
 8008172:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008174:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008178:	2b00      	cmp	r3, #0
 800817a:	dce9      	bgt.n	8008150 <prvUnlockQueue+0x7c>
 800817c:	e000      	b.n	8008180 <prvUnlockQueue+0xac>
			}
			else
			{
				break;
 800817e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	22ff      	movs	r2, #255	; 0xff
 8008184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008188:	f001 fdde 	bl	8009d48 <vPortExitCritical>
}
 800818c:	bf00      	nop
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800819c:	f001 fda6 	bl	8009cec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d102      	bne.n	80081ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80081a8:	2301      	movs	r3, #1
 80081aa:	60fb      	str	r3, [r7, #12]
 80081ac:	e001      	b.n	80081b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80081ae:	2300      	movs	r3, #0
 80081b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80081b2:	f001 fdc9 	bl	8009d48 <vPortExitCritical>

	return xReturn;
 80081b6:	68fb      	ldr	r3, [r7, #12]
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3710      	adds	r7, #16
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80081c8:	f001 fd90 	bl	8009cec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d102      	bne.n	80081de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80081d8:	2301      	movs	r3, #1
 80081da:	60fb      	str	r3, [r7, #12]
 80081dc:	e001      	b.n	80081e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80081de:	2300      	movs	r3, #0
 80081e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80081e2:	f001 fdb1 	bl	8009d48 <vPortExitCritical>

	return xReturn;
 80081e6:	68fb      	ldr	r3, [r7, #12]
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081fa:	2300      	movs	r3, #0
 80081fc:	60fb      	str	r3, [r7, #12]
 80081fe:	e014      	b.n	800822a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008200:	4a0e      	ldr	r2, [pc, #56]	; (800823c <vQueueAddToRegistry+0x4c>)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10b      	bne.n	8008224 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800820c:	490b      	ldr	r1, [pc, #44]	; (800823c <vQueueAddToRegistry+0x4c>)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	683a      	ldr	r2, [r7, #0]
 8008212:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008216:	4a09      	ldr	r2, [pc, #36]	; (800823c <vQueueAddToRegistry+0x4c>)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	00db      	lsls	r3, r3, #3
 800821c:	4413      	add	r3, r2
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008222:	e005      	b.n	8008230 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	3301      	adds	r3, #1
 8008228:	60fb      	str	r3, [r7, #12]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2b07      	cmp	r3, #7
 800822e:	d9e7      	bls.n	8008200 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008230:	bf00      	nop
 8008232:	3714      	adds	r7, #20
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr
 800823c:	200157bc 	.word	0x200157bc

08008240 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008240:	b580      	push	{r7, lr}
 8008242:	b086      	sub	sp, #24
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008250:	f001 fd4c 	bl	8009cec <vPortEnterCritical>
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800825a:	b25b      	sxtb	r3, r3
 800825c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008260:	d103      	bne.n	800826a <vQueueWaitForMessageRestricted+0x2a>
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	2200      	movs	r2, #0
 8008266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008270:	b25b      	sxtb	r3, r3
 8008272:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008276:	d103      	bne.n	8008280 <vQueueWaitForMessageRestricted+0x40>
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	2200      	movs	r2, #0
 800827c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008280:	f001 fd62 	bl	8009d48 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008288:	2b00      	cmp	r3, #0
 800828a:	d106      	bne.n	800829a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	3324      	adds	r3, #36	; 0x24
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	68b9      	ldr	r1, [r7, #8]
 8008294:	4618      	mov	r0, r3
 8008296:	f000 fcb9 	bl	8008c0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800829a:	6978      	ldr	r0, [r7, #20]
 800829c:	f7ff ff1a 	bl	80080d4 <prvUnlockQueue>
	}
 80082a0:	bf00      	nop
 80082a2:	3718      	adds	r7, #24
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <xQueueCreateSet>:
/*-----------------------------------------------------------*/

#if( ( configUSE_QUEUE_SETS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )
	{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
	QueueSetHandle_t pxQueue;

		pxQueue = xQueueGenericCreate( uxEventQueueLength, ( UBaseType_t ) sizeof( Queue_t * ), queueQUEUE_TYPE_SET );
 80082b0:	2200      	movs	r2, #0
 80082b2:	2104      	movs	r1, #4
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f7ff fb82 	bl	80079be <xQueueGenericCreate>
 80082ba:	60f8      	str	r0, [r7, #12]

		return pxQueue;
 80082bc:	68fb      	ldr	r3, [r7, #12]
	}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <xQueueAddToSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet )
	{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b084      	sub	sp, #16
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80082d0:	f001 fd0c 	bl	8009cec <vPortEnterCritical>
		{
			if( ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer != NULL )
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d002      	beq.n	80082e2 <xQueueAddToSet+0x1c>
			{
				/* Cannot add a queue/semaphore to more than one queue set. */
				xReturn = pdFAIL;
 80082dc:	2300      	movs	r3, #0
 80082de:	60fb      	str	r3, [r7, #12]
 80082e0:	e00b      	b.n	80082fa <xQueueAddToSet+0x34>
			}
			else if( ( ( Queue_t * ) xQueueOrSemaphore )->uxMessagesWaiting != ( UBaseType_t ) 0 )
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d002      	beq.n	80082f0 <xQueueAddToSet+0x2a>
			{
				/* Cannot add a queue/semaphore to a queue set if there are already
				items in the queue/semaphore. */
				xReturn = pdFAIL;
 80082ea:	2300      	movs	r3, #0
 80082ec:	60fb      	str	r3, [r7, #12]
 80082ee:	e004      	b.n	80082fa <xQueueAddToSet+0x34>
			}
			else
			{
				( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer = xQueueSet;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	683a      	ldr	r2, [r7, #0]
 80082f4:	649a      	str	r2, [r3, #72]	; 0x48
				xReturn = pdPASS;
 80082f6:	2301      	movs	r3, #1
 80082f8:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 80082fa:	f001 fd25 	bl	8009d48 <vPortExitCritical>

		return xReturn;
 80082fe:	68fb      	ldr	r3, [r7, #12]
	}
 8008300:	4618      	mov	r0, r3
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <xQueueSelectFromSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet, TickType_t const xTicksToWait )
	{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
	QueueSetMemberHandle_t xReturn = NULL;
 8008312:	2300      	movs	r3, #0
 8008314:	60fb      	str	r3, [r7, #12]

		( void ) xQueueReceive( ( QueueHandle_t ) xQueueSet, &xReturn, xTicksToWait ); /*lint !e961 Casting from one typedef to another is not redundant. */
 8008316:	f107 030c 	add.w	r3, r7, #12
 800831a:	683a      	ldr	r2, [r7, #0]
 800831c:	4619      	mov	r1, r3
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f7ff fd6c 	bl	8007dfc <xQueueReceive>
		return xReturn;
 8008324:	68fb      	ldr	r3, [r7, #12]
	}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
 800832e:	b580      	push	{r7, lr}
 8008330:	b088      	sub	sp, #32
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
 8008336:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800833c:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 800833e:	2300      	movs	r3, #0
 8008340:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d109      	bne.n	800835c <prvNotifyQueueSetContainer+0x2e>
 8008348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834c:	f383 8811 	msr	BASEPRI, r3
 8008350:	f3bf 8f6f 	isb	sy
 8008354:	f3bf 8f4f 	dsb	sy
 8008358:	613b      	str	r3, [r7, #16]
 800835a:	e7fe      	b.n	800835a <prvNotifyQueueSetContainer+0x2c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008364:	429a      	cmp	r2, r3
 8008366:	d309      	bcc.n	800837c <prvNotifyQueueSetContainer+0x4e>
 8008368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836c:	f383 8811 	msr	BASEPRI, r3
 8008370:	f3bf 8f6f 	isb	sy
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	60fb      	str	r3, [r7, #12]
 800837a:	e7fe      	b.n	800837a <prvNotifyQueueSetContainer+0x4c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 800837c:	69bb      	ldr	r3, [r7, #24]
 800837e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008384:	429a      	cmp	r2, r3
 8008386:	d225      	bcs.n	80083d4 <prvNotifyQueueSetContainer+0xa6>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800838e:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 8008390:	1d3b      	adds	r3, r7, #4
 8008392:	683a      	ldr	r2, [r7, #0]
 8008394:	4619      	mov	r1, r3
 8008396:	69b8      	ldr	r0, [r7, #24]
 8008398:	f7ff fe0c 	bl	8007fb4 <prvCopyDataToQueue>
 800839c:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 800839e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083a6:	d10e      	bne.n	80083c6 <prvNotifyQueueSetContainer+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d011      	beq.n	80083d4 <prvNotifyQueueSetContainer+0xa6>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	3324      	adds	r3, #36	; 0x24
 80083b4:	4618      	mov	r0, r3
 80083b6:	f000 fc53 	bl	8008c60 <xTaskRemoveFromEventList>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d009      	beq.n	80083d4 <prvNotifyQueueSetContainer+0xa6>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 80083c0:	2301      	movs	r3, #1
 80083c2:	61fb      	str	r3, [r7, #28]
 80083c4:	e006      	b.n	80083d4 <prvNotifyQueueSetContainer+0xa6>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80083c6:	7dfb      	ldrb	r3, [r7, #23]
 80083c8:	3301      	adds	r3, #1
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	b25a      	sxtb	r2, r3
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80083d4:	69fb      	ldr	r3, [r7, #28]
	}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3720      	adds	r7, #32
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}

080083de <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b08e      	sub	sp, #56	; 0x38
 80083e2:	af04      	add	r7, sp, #16
 80083e4:	60f8      	str	r0, [r7, #12]
 80083e6:	60b9      	str	r1, [r7, #8]
 80083e8:	607a      	str	r2, [r7, #4]
 80083ea:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80083ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d109      	bne.n	8008406 <xTaskCreateStatic+0x28>
 80083f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	623b      	str	r3, [r7, #32]
 8008404:	e7fe      	b.n	8008404 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8008406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008408:	2b00      	cmp	r3, #0
 800840a:	d109      	bne.n	8008420 <xTaskCreateStatic+0x42>
 800840c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	61fb      	str	r3, [r7, #28]
 800841e:	e7fe      	b.n	800841e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008420:	2354      	movs	r3, #84	; 0x54
 8008422:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	2b54      	cmp	r3, #84	; 0x54
 8008428:	d009      	beq.n	800843e <xTaskCreateStatic+0x60>
 800842a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842e:	f383 8811 	msr	BASEPRI, r3
 8008432:	f3bf 8f6f 	isb	sy
 8008436:	f3bf 8f4f 	dsb	sy
 800843a:	61bb      	str	r3, [r7, #24]
 800843c:	e7fe      	b.n	800843c <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800843e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008442:	2b00      	cmp	r3, #0
 8008444:	d01e      	beq.n	8008484 <xTaskCreateStatic+0xa6>
 8008446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008448:	2b00      	cmp	r3, #0
 800844a:	d01b      	beq.n	8008484 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800844c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008452:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008454:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008458:	2202      	movs	r2, #2
 800845a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800845e:	2300      	movs	r3, #0
 8008460:	9303      	str	r3, [sp, #12]
 8008462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008464:	9302      	str	r3, [sp, #8]
 8008466:	f107 0314 	add.w	r3, r7, #20
 800846a:	9301      	str	r3, [sp, #4]
 800846c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846e:	9300      	str	r3, [sp, #0]
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	68b9      	ldr	r1, [r7, #8]
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	f000 f850 	bl	800851c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800847c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800847e:	f000 f8d3 	bl	8008628 <prvAddNewTaskToReadyList>
 8008482:	e001      	b.n	8008488 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8008484:	2300      	movs	r3, #0
 8008486:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008488:	697b      	ldr	r3, [r7, #20]
	}
 800848a:	4618      	mov	r0, r3
 800848c:	3728      	adds	r7, #40	; 0x28
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008492:	b580      	push	{r7, lr}
 8008494:	b08c      	sub	sp, #48	; 0x30
 8008496:	af04      	add	r7, sp, #16
 8008498:	60f8      	str	r0, [r7, #12]
 800849a:	60b9      	str	r1, [r7, #8]
 800849c:	603b      	str	r3, [r7, #0]
 800849e:	4613      	mov	r3, r2
 80084a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80084a2:	88fb      	ldrh	r3, [r7, #6]
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	4618      	mov	r0, r3
 80084a8:	f001 fd3a 	bl	8009f20 <pvPortMalloc>
 80084ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00e      	beq.n	80084d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80084b4:	2054      	movs	r0, #84	; 0x54
 80084b6:	f001 fd33 	bl	8009f20 <pvPortMalloc>
 80084ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d003      	beq.n	80084ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	697a      	ldr	r2, [r7, #20]
 80084c6:	631a      	str	r2, [r3, #48]	; 0x30
 80084c8:	e005      	b.n	80084d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80084ca:	6978      	ldr	r0, [r7, #20]
 80084cc:	f001 fdea 	bl	800a0a4 <vPortFree>
 80084d0:	e001      	b.n	80084d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80084d2:	2300      	movs	r3, #0
 80084d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d017      	beq.n	800850c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	2200      	movs	r2, #0
 80084e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80084e4:	88fa      	ldrh	r2, [r7, #6]
 80084e6:	2300      	movs	r3, #0
 80084e8:	9303      	str	r3, [sp, #12]
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	9302      	str	r3, [sp, #8]
 80084ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f0:	9301      	str	r3, [sp, #4]
 80084f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f4:	9300      	str	r3, [sp, #0]
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	68b9      	ldr	r1, [r7, #8]
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	f000 f80e 	bl	800851c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008500:	69f8      	ldr	r0, [r7, #28]
 8008502:	f000 f891 	bl	8008628 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008506:	2301      	movs	r3, #1
 8008508:	61bb      	str	r3, [r7, #24]
 800850a:	e002      	b.n	8008512 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800850c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008510:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008512:	69bb      	ldr	r3, [r7, #24]
	}
 8008514:	4618      	mov	r0, r3
 8008516:	3720      	adds	r7, #32
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b088      	sub	sp, #32
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
 8008528:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800852a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008534:	3b01      	subs	r3, #1
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	4413      	add	r3, r2
 800853a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	f023 0307 	bic.w	r3, r3, #7
 8008542:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	f003 0307 	and.w	r3, r3, #7
 800854a:	2b00      	cmp	r3, #0
 800854c:	d009      	beq.n	8008562 <prvInitialiseNewTask+0x46>
 800854e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008552:	f383 8811 	msr	BASEPRI, r3
 8008556:	f3bf 8f6f 	isb	sy
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	617b      	str	r3, [r7, #20]
 8008560:	e7fe      	b.n	8008560 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d01f      	beq.n	80085a8 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008568:	2300      	movs	r3, #0
 800856a:	61fb      	str	r3, [r7, #28]
 800856c:	e012      	b.n	8008594 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800856e:	68ba      	ldr	r2, [r7, #8]
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	4413      	add	r3, r2
 8008574:	7819      	ldrb	r1, [r3, #0]
 8008576:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	4413      	add	r3, r2
 800857c:	3334      	adds	r3, #52	; 0x34
 800857e:	460a      	mov	r2, r1
 8008580:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008582:	68ba      	ldr	r2, [r7, #8]
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	4413      	add	r3, r2
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d006      	beq.n	800859c <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	3301      	adds	r3, #1
 8008592:	61fb      	str	r3, [r7, #28]
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	2b0f      	cmp	r3, #15
 8008598:	d9e9      	bls.n	800856e <prvInitialiseNewTask+0x52>
 800859a:	e000      	b.n	800859e <prvInitialiseNewTask+0x82>
			{
				break;
 800859c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800859e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085a6:	e003      	b.n	80085b0 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80085a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085aa:	2200      	movs	r2, #0
 80085ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80085b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b2:	2b06      	cmp	r3, #6
 80085b4:	d901      	bls.n	80085ba <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80085b6:	2306      	movs	r3, #6
 80085b8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80085ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085be:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80085c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085c4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80085c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c8:	2200      	movs	r2, #0
 80085ca:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80085cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ce:	3304      	adds	r3, #4
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7ff f884 	bl	80076de <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80085d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d8:	3318      	adds	r3, #24
 80085da:	4618      	mov	r0, r3
 80085dc:	f7ff f87f 	bl	80076de <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80085e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e8:	f1c3 0207 	rsb	r2, r3, #7
 80085ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80085f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085f4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80085f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f8:	2200      	movs	r2, #0
 80085fa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80085fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008604:	683a      	ldr	r2, [r7, #0]
 8008606:	68f9      	ldr	r1, [r7, #12]
 8008608:	69b8      	ldr	r0, [r7, #24]
 800860a:	f001 fa47 	bl	8009a9c <pxPortInitialiseStack>
 800860e:	4602      	mov	r2, r0
 8008610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008612:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008616:	2b00      	cmp	r3, #0
 8008618:	d002      	beq.n	8008620 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800861a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800861e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008620:	bf00      	nop
 8008622:	3720      	adds	r7, #32
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008630:	f001 fb5c 	bl	8009cec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008634:	4b2a      	ldr	r3, [pc, #168]	; (80086e0 <prvAddNewTaskToReadyList+0xb8>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	3301      	adds	r3, #1
 800863a:	4a29      	ldr	r2, [pc, #164]	; (80086e0 <prvAddNewTaskToReadyList+0xb8>)
 800863c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800863e:	4b29      	ldr	r3, [pc, #164]	; (80086e4 <prvAddNewTaskToReadyList+0xbc>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d109      	bne.n	800865a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008646:	4a27      	ldr	r2, [pc, #156]	; (80086e4 <prvAddNewTaskToReadyList+0xbc>)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800864c:	4b24      	ldr	r3, [pc, #144]	; (80086e0 <prvAddNewTaskToReadyList+0xb8>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d110      	bne.n	8008676 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008654:	f000 fc00 	bl	8008e58 <prvInitialiseTaskLists>
 8008658:	e00d      	b.n	8008676 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800865a:	4b23      	ldr	r3, [pc, #140]	; (80086e8 <prvAddNewTaskToReadyList+0xc0>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d109      	bne.n	8008676 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008662:	4b20      	ldr	r3, [pc, #128]	; (80086e4 <prvAddNewTaskToReadyList+0xbc>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866c:	429a      	cmp	r2, r3
 800866e:	d802      	bhi.n	8008676 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008670:	4a1c      	ldr	r2, [pc, #112]	; (80086e4 <prvAddNewTaskToReadyList+0xbc>)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008676:	4b1d      	ldr	r3, [pc, #116]	; (80086ec <prvAddNewTaskToReadyList+0xc4>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	3301      	adds	r3, #1
 800867c:	4a1b      	ldr	r2, [pc, #108]	; (80086ec <prvAddNewTaskToReadyList+0xc4>)
 800867e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008684:	2201      	movs	r2, #1
 8008686:	409a      	lsls	r2, r3
 8008688:	4b19      	ldr	r3, [pc, #100]	; (80086f0 <prvAddNewTaskToReadyList+0xc8>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4313      	orrs	r3, r2
 800868e:	4a18      	ldr	r2, [pc, #96]	; (80086f0 <prvAddNewTaskToReadyList+0xc8>)
 8008690:	6013      	str	r3, [r2, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008696:	4613      	mov	r3, r2
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4413      	add	r3, r2
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	4a15      	ldr	r2, [pc, #84]	; (80086f4 <prvAddNewTaskToReadyList+0xcc>)
 80086a0:	441a      	add	r2, r3
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	3304      	adds	r3, #4
 80086a6:	4619      	mov	r1, r3
 80086a8:	4610      	mov	r0, r2
 80086aa:	f7ff f825 	bl	80076f8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80086ae:	f001 fb4b 	bl	8009d48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80086b2:	4b0d      	ldr	r3, [pc, #52]	; (80086e8 <prvAddNewTaskToReadyList+0xc0>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00e      	beq.n	80086d8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80086ba:	4b0a      	ldr	r3, [pc, #40]	; (80086e4 <prvAddNewTaskToReadyList+0xbc>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d207      	bcs.n	80086d8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80086c8:	4b0b      	ldr	r3, [pc, #44]	; (80086f8 <prvAddNewTaskToReadyList+0xd0>)
 80086ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ce:	601a      	str	r2, [r3, #0]
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086d8:	bf00      	nop
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	20001040 	.word	0x20001040
 80086e4:	20000f40 	.word	0x20000f40
 80086e8:	2000104c 	.word	0x2000104c
 80086ec:	2000105c 	.word	0x2000105c
 80086f0:	20001048 	.word	0x20001048
 80086f4:	20000f44 	.word	0x20000f44
 80086f8:	e000ed04 	.word	0xe000ed04

080086fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008704:	2300      	movs	r3, #0
 8008706:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d016      	beq.n	800873c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800870e:	4b13      	ldr	r3, [pc, #76]	; (800875c <vTaskDelay+0x60>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d009      	beq.n	800872a <vTaskDelay+0x2e>
 8008716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871a:	f383 8811 	msr	BASEPRI, r3
 800871e:	f3bf 8f6f 	isb	sy
 8008722:	f3bf 8f4f 	dsb	sy
 8008726:	60bb      	str	r3, [r7, #8]
 8008728:	e7fe      	b.n	8008728 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800872a:	f000 f87f 	bl	800882c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800872e:	2100      	movs	r1, #0
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 fdc3 	bl	80092bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008736:	f000 f887 	bl	8008848 <xTaskResumeAll>
 800873a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d107      	bne.n	8008752 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008742:	4b07      	ldr	r3, [pc, #28]	; (8008760 <vTaskDelay+0x64>)
 8008744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008748:	601a      	str	r2, [r3, #0]
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008752:	bf00      	nop
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	20001068 	.word	0x20001068
 8008760:	e000ed04 	.word	0xe000ed04

08008764 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b08a      	sub	sp, #40	; 0x28
 8008768:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800876a:	2300      	movs	r3, #0
 800876c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800876e:	2300      	movs	r3, #0
 8008770:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008772:	463a      	mov	r2, r7
 8008774:	1d39      	adds	r1, r7, #4
 8008776:	f107 0308 	add.w	r3, r7, #8
 800877a:	4618      	mov	r0, r3
 800877c:	f7f9 f86e 	bl	800185c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008780:	6839      	ldr	r1, [r7, #0]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	68ba      	ldr	r2, [r7, #8]
 8008786:	9202      	str	r2, [sp, #8]
 8008788:	9301      	str	r3, [sp, #4]
 800878a:	2300      	movs	r3, #0
 800878c:	9300      	str	r3, [sp, #0]
 800878e:	2300      	movs	r3, #0
 8008790:	460a      	mov	r2, r1
 8008792:	4920      	ldr	r1, [pc, #128]	; (8008814 <vTaskStartScheduler+0xb0>)
 8008794:	4820      	ldr	r0, [pc, #128]	; (8008818 <vTaskStartScheduler+0xb4>)
 8008796:	f7ff fe22 	bl	80083de <xTaskCreateStatic>
 800879a:	4602      	mov	r2, r0
 800879c:	4b1f      	ldr	r3, [pc, #124]	; (800881c <vTaskStartScheduler+0xb8>)
 800879e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80087a0:	4b1e      	ldr	r3, [pc, #120]	; (800881c <vTaskStartScheduler+0xb8>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d002      	beq.n	80087ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80087a8:	2301      	movs	r3, #1
 80087aa:	617b      	str	r3, [r7, #20]
 80087ac:	e001      	b.n	80087b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80087ae:	2300      	movs	r3, #0
 80087b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d102      	bne.n	80087be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80087b8:	f000 fde6 	bl	8009388 <xTimerCreateTimerTask>
 80087bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d115      	bne.n	80087f0 <vTaskStartScheduler+0x8c>
 80087c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c8:	f383 8811 	msr	BASEPRI, r3
 80087cc:	f3bf 8f6f 	isb	sy
 80087d0:	f3bf 8f4f 	dsb	sy
 80087d4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80087d6:	4b12      	ldr	r3, [pc, #72]	; (8008820 <vTaskStartScheduler+0xbc>)
 80087d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80087de:	4b11      	ldr	r3, [pc, #68]	; (8008824 <vTaskStartScheduler+0xc0>)
 80087e0:	2201      	movs	r2, #1
 80087e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80087e4:	4b10      	ldr	r3, [pc, #64]	; (8008828 <vTaskStartScheduler+0xc4>)
 80087e6:	2200      	movs	r2, #0
 80087e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80087ea:	f001 f9e1 	bl	8009bb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80087ee:	e00d      	b.n	800880c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087f6:	d109      	bne.n	800880c <vTaskStartScheduler+0xa8>
 80087f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fc:	f383 8811 	msr	BASEPRI, r3
 8008800:	f3bf 8f6f 	isb	sy
 8008804:	f3bf 8f4f 	dsb	sy
 8008808:	60fb      	str	r3, [r7, #12]
 800880a:	e7fe      	b.n	800880a <vTaskStartScheduler+0xa6>
}
 800880c:	bf00      	nop
 800880e:	3718      	adds	r7, #24
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	0800d410 	.word	0x0800d410
 8008818:	08008e29 	.word	0x08008e29
 800881c:	20001064 	.word	0x20001064
 8008820:	20001060 	.word	0x20001060
 8008824:	2000104c 	.word	0x2000104c
 8008828:	20001044 	.word	0x20001044

0800882c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800882c:	b480      	push	{r7}
 800882e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008830:	4b04      	ldr	r3, [pc, #16]	; (8008844 <vTaskSuspendAll+0x18>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	3301      	adds	r3, #1
 8008836:	4a03      	ldr	r2, [pc, #12]	; (8008844 <vTaskSuspendAll+0x18>)
 8008838:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800883a:	bf00      	nop
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr
 8008844:	20001068 	.word	0x20001068

08008848 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800884e:	2300      	movs	r3, #0
 8008850:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008852:	2300      	movs	r3, #0
 8008854:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008856:	4b41      	ldr	r3, [pc, #260]	; (800895c <xTaskResumeAll+0x114>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d109      	bne.n	8008872 <xTaskResumeAll+0x2a>
 800885e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008862:	f383 8811 	msr	BASEPRI, r3
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	603b      	str	r3, [r7, #0]
 8008870:	e7fe      	b.n	8008870 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008872:	f001 fa3b 	bl	8009cec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008876:	4b39      	ldr	r3, [pc, #228]	; (800895c <xTaskResumeAll+0x114>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	3b01      	subs	r3, #1
 800887c:	4a37      	ldr	r2, [pc, #220]	; (800895c <xTaskResumeAll+0x114>)
 800887e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008880:	4b36      	ldr	r3, [pc, #216]	; (800895c <xTaskResumeAll+0x114>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d161      	bne.n	800894c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008888:	4b35      	ldr	r3, [pc, #212]	; (8008960 <xTaskResumeAll+0x118>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d05d      	beq.n	800894c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008890:	e02e      	b.n	80088f0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008892:	4b34      	ldr	r3, [pc, #208]	; (8008964 <xTaskResumeAll+0x11c>)
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	3318      	adds	r3, #24
 800889e:	4618      	mov	r0, r3
 80088a0:	f7fe ff87 	bl	80077b2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	3304      	adds	r3, #4
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7fe ff82 	bl	80077b2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b2:	2201      	movs	r2, #1
 80088b4:	409a      	lsls	r2, r3
 80088b6:	4b2c      	ldr	r3, [pc, #176]	; (8008968 <xTaskResumeAll+0x120>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	4a2a      	ldr	r2, [pc, #168]	; (8008968 <xTaskResumeAll+0x120>)
 80088be:	6013      	str	r3, [r2, #0]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088c4:	4613      	mov	r3, r2
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	4413      	add	r3, r2
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	4a27      	ldr	r2, [pc, #156]	; (800896c <xTaskResumeAll+0x124>)
 80088ce:	441a      	add	r2, r3
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	3304      	adds	r3, #4
 80088d4:	4619      	mov	r1, r3
 80088d6:	4610      	mov	r0, r2
 80088d8:	f7fe ff0e 	bl	80076f8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088e0:	4b23      	ldr	r3, [pc, #140]	; (8008970 <xTaskResumeAll+0x128>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d302      	bcc.n	80088f0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80088ea:	4b22      	ldr	r3, [pc, #136]	; (8008974 <xTaskResumeAll+0x12c>)
 80088ec:	2201      	movs	r2, #1
 80088ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088f0:	4b1c      	ldr	r3, [pc, #112]	; (8008964 <xTaskResumeAll+0x11c>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d1cc      	bne.n	8008892 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d001      	beq.n	8008902 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80088fe:	f000 fb45 	bl	8008f8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008902:	4b1d      	ldr	r3, [pc, #116]	; (8008978 <xTaskResumeAll+0x130>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d010      	beq.n	8008930 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800890e:	f000 f847 	bl	80089a0 <xTaskIncrementTick>
 8008912:	4603      	mov	r3, r0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d002      	beq.n	800891e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008918:	4b16      	ldr	r3, [pc, #88]	; (8008974 <xTaskResumeAll+0x12c>)
 800891a:	2201      	movs	r2, #1
 800891c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	3b01      	subs	r3, #1
 8008922:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1f1      	bne.n	800890e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800892a:	4b13      	ldr	r3, [pc, #76]	; (8008978 <xTaskResumeAll+0x130>)
 800892c:	2200      	movs	r2, #0
 800892e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008930:	4b10      	ldr	r3, [pc, #64]	; (8008974 <xTaskResumeAll+0x12c>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d009      	beq.n	800894c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008938:	2301      	movs	r3, #1
 800893a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800893c:	4b0f      	ldr	r3, [pc, #60]	; (800897c <xTaskResumeAll+0x134>)
 800893e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008942:	601a      	str	r2, [r3, #0]
 8008944:	f3bf 8f4f 	dsb	sy
 8008948:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800894c:	f001 f9fc 	bl	8009d48 <vPortExitCritical>

	return xAlreadyYielded;
 8008950:	68bb      	ldr	r3, [r7, #8]
}
 8008952:	4618      	mov	r0, r3
 8008954:	3710      	adds	r7, #16
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
 800895a:	bf00      	nop
 800895c:	20001068 	.word	0x20001068
 8008960:	20001040 	.word	0x20001040
 8008964:	20001000 	.word	0x20001000
 8008968:	20001048 	.word	0x20001048
 800896c:	20000f44 	.word	0x20000f44
 8008970:	20000f40 	.word	0x20000f40
 8008974:	20001054 	.word	0x20001054
 8008978:	20001050 	.word	0x20001050
 800897c:	e000ed04 	.word	0xe000ed04

08008980 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008986:	4b05      	ldr	r3, [pc, #20]	; (800899c <xTaskGetTickCount+0x1c>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800898c:	687b      	ldr	r3, [r7, #4]
}
 800898e:	4618      	mov	r0, r3
 8008990:	370c      	adds	r7, #12
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop
 800899c:	20001044 	.word	0x20001044

080089a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b086      	sub	sp, #24
 80089a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80089a6:	2300      	movs	r3, #0
 80089a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089aa:	4b4e      	ldr	r3, [pc, #312]	; (8008ae4 <xTaskIncrementTick+0x144>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f040 8087 	bne.w	8008ac2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80089b4:	4b4c      	ldr	r3, [pc, #304]	; (8008ae8 <xTaskIncrementTick+0x148>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	3301      	adds	r3, #1
 80089ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80089bc:	4a4a      	ldr	r2, [pc, #296]	; (8008ae8 <xTaskIncrementTick+0x148>)
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d11f      	bne.n	8008a08 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80089c8:	4b48      	ldr	r3, [pc, #288]	; (8008aec <xTaskIncrementTick+0x14c>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d009      	beq.n	80089e6 <xTaskIncrementTick+0x46>
 80089d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d6:	f383 8811 	msr	BASEPRI, r3
 80089da:	f3bf 8f6f 	isb	sy
 80089de:	f3bf 8f4f 	dsb	sy
 80089e2:	603b      	str	r3, [r7, #0]
 80089e4:	e7fe      	b.n	80089e4 <xTaskIncrementTick+0x44>
 80089e6:	4b41      	ldr	r3, [pc, #260]	; (8008aec <xTaskIncrementTick+0x14c>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	60fb      	str	r3, [r7, #12]
 80089ec:	4b40      	ldr	r3, [pc, #256]	; (8008af0 <xTaskIncrementTick+0x150>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a3e      	ldr	r2, [pc, #248]	; (8008aec <xTaskIncrementTick+0x14c>)
 80089f2:	6013      	str	r3, [r2, #0]
 80089f4:	4a3e      	ldr	r2, [pc, #248]	; (8008af0 <xTaskIncrementTick+0x150>)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6013      	str	r3, [r2, #0]
 80089fa:	4b3e      	ldr	r3, [pc, #248]	; (8008af4 <xTaskIncrementTick+0x154>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	3301      	adds	r3, #1
 8008a00:	4a3c      	ldr	r2, [pc, #240]	; (8008af4 <xTaskIncrementTick+0x154>)
 8008a02:	6013      	str	r3, [r2, #0]
 8008a04:	f000 fac2 	bl	8008f8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a08:	4b3b      	ldr	r3, [pc, #236]	; (8008af8 <xTaskIncrementTick+0x158>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	693a      	ldr	r2, [r7, #16]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d348      	bcc.n	8008aa4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a12:	4b36      	ldr	r3, [pc, #216]	; (8008aec <xTaskIncrementTick+0x14c>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d104      	bne.n	8008a26 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a1c:	4b36      	ldr	r3, [pc, #216]	; (8008af8 <xTaskIncrementTick+0x158>)
 8008a1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a22:	601a      	str	r2, [r3, #0]
					break;
 8008a24:	e03e      	b.n	8008aa4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a26:	4b31      	ldr	r3, [pc, #196]	; (8008aec <xTaskIncrementTick+0x14c>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a36:	693a      	ldr	r2, [r7, #16]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d203      	bcs.n	8008a46 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008a3e:	4a2e      	ldr	r2, [pc, #184]	; (8008af8 <xTaskIncrementTick+0x158>)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008a44:	e02e      	b.n	8008aa4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	3304      	adds	r3, #4
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7fe feb1 	bl	80077b2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d004      	beq.n	8008a62 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	3318      	adds	r3, #24
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7fe fea8 	bl	80077b2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a66:	2201      	movs	r2, #1
 8008a68:	409a      	lsls	r2, r3
 8008a6a:	4b24      	ldr	r3, [pc, #144]	; (8008afc <xTaskIncrementTick+0x15c>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	4a22      	ldr	r2, [pc, #136]	; (8008afc <xTaskIncrementTick+0x15c>)
 8008a72:	6013      	str	r3, [r2, #0]
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a78:	4613      	mov	r3, r2
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	4413      	add	r3, r2
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	4a1f      	ldr	r2, [pc, #124]	; (8008b00 <xTaskIncrementTick+0x160>)
 8008a82:	441a      	add	r2, r3
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	3304      	adds	r3, #4
 8008a88:	4619      	mov	r1, r3
 8008a8a:	4610      	mov	r0, r2
 8008a8c:	f7fe fe34 	bl	80076f8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a94:	4b1b      	ldr	r3, [pc, #108]	; (8008b04 <xTaskIncrementTick+0x164>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d3b9      	bcc.n	8008a12 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008aa2:	e7b6      	b.n	8008a12 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008aa4:	4b17      	ldr	r3, [pc, #92]	; (8008b04 <xTaskIncrementTick+0x164>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aaa:	4915      	ldr	r1, [pc, #84]	; (8008b00 <xTaskIncrementTick+0x160>)
 8008aac:	4613      	mov	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	4413      	add	r3, r2
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	440b      	add	r3, r1
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d907      	bls.n	8008acc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8008abc:	2301      	movs	r3, #1
 8008abe:	617b      	str	r3, [r7, #20]
 8008ac0:	e004      	b.n	8008acc <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008ac2:	4b11      	ldr	r3, [pc, #68]	; (8008b08 <xTaskIncrementTick+0x168>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	4a0f      	ldr	r2, [pc, #60]	; (8008b08 <xTaskIncrementTick+0x168>)
 8008aca:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008acc:	4b0f      	ldr	r3, [pc, #60]	; (8008b0c <xTaskIncrementTick+0x16c>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d001      	beq.n	8008ad8 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008ad8:	697b      	ldr	r3, [r7, #20]
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3718      	adds	r7, #24
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	20001068 	.word	0x20001068
 8008ae8:	20001044 	.word	0x20001044
 8008aec:	20000ff8 	.word	0x20000ff8
 8008af0:	20000ffc 	.word	0x20000ffc
 8008af4:	20001058 	.word	0x20001058
 8008af8:	20001060 	.word	0x20001060
 8008afc:	20001048 	.word	0x20001048
 8008b00:	20000f44 	.word	0x20000f44
 8008b04:	20000f40 	.word	0x20000f40
 8008b08:	20001050 	.word	0x20001050
 8008b0c:	20001054 	.word	0x20001054

08008b10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b10:	b480      	push	{r7}
 8008b12:	b087      	sub	sp, #28
 8008b14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b16:	4b26      	ldr	r3, [pc, #152]	; (8008bb0 <vTaskSwitchContext+0xa0>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d003      	beq.n	8008b26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008b1e:	4b25      	ldr	r3, [pc, #148]	; (8008bb4 <vTaskSwitchContext+0xa4>)
 8008b20:	2201      	movs	r2, #1
 8008b22:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008b24:	e03e      	b.n	8008ba4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8008b26:	4b23      	ldr	r3, [pc, #140]	; (8008bb4 <vTaskSwitchContext+0xa4>)
 8008b28:	2200      	movs	r2, #0
 8008b2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b2c:	4b22      	ldr	r3, [pc, #136]	; (8008bb8 <vTaskSwitchContext+0xa8>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	fab3 f383 	clz	r3, r3
 8008b38:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008b3a:	7afb      	ldrb	r3, [r7, #11]
 8008b3c:	f1c3 031f 	rsb	r3, r3, #31
 8008b40:	617b      	str	r3, [r7, #20]
 8008b42:	491e      	ldr	r1, [pc, #120]	; (8008bbc <vTaskSwitchContext+0xac>)
 8008b44:	697a      	ldr	r2, [r7, #20]
 8008b46:	4613      	mov	r3, r2
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	4413      	add	r3, r2
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	440b      	add	r3, r1
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d109      	bne.n	8008b6a <vTaskSwitchContext+0x5a>
	__asm volatile
 8008b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5a:	f383 8811 	msr	BASEPRI, r3
 8008b5e:	f3bf 8f6f 	isb	sy
 8008b62:	f3bf 8f4f 	dsb	sy
 8008b66:	607b      	str	r3, [r7, #4]
 8008b68:	e7fe      	b.n	8008b68 <vTaskSwitchContext+0x58>
 8008b6a:	697a      	ldr	r2, [r7, #20]
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	4413      	add	r3, r2
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	4a11      	ldr	r2, [pc, #68]	; (8008bbc <vTaskSwitchContext+0xac>)
 8008b76:	4413      	add	r3, r2
 8008b78:	613b      	str	r3, [r7, #16]
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	685a      	ldr	r2, [r3, #4]
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	605a      	str	r2, [r3, #4]
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	685a      	ldr	r2, [r3, #4]
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	3308      	adds	r3, #8
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d104      	bne.n	8008b9a <vTaskSwitchContext+0x8a>
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	685a      	ldr	r2, [r3, #4]
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	605a      	str	r2, [r3, #4]
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	4a07      	ldr	r2, [pc, #28]	; (8008bc0 <vTaskSwitchContext+0xb0>)
 8008ba2:	6013      	str	r3, [r2, #0]
}
 8008ba4:	bf00      	nop
 8008ba6:	371c      	adds	r7, #28
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	20001068 	.word	0x20001068
 8008bb4:	20001054 	.word	0x20001054
 8008bb8:	20001048 	.word	0x20001048
 8008bbc:	20000f44 	.word	0x20000f44
 8008bc0:	20000f40 	.word	0x20000f40

08008bc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d109      	bne.n	8008be8 <vTaskPlaceOnEventList+0x24>
 8008bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	60fb      	str	r3, [r7, #12]
 8008be6:	e7fe      	b.n	8008be6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008be8:	4b07      	ldr	r3, [pc, #28]	; (8008c08 <vTaskPlaceOnEventList+0x44>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	3318      	adds	r3, #24
 8008bee:	4619      	mov	r1, r3
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f7fe fda5 	bl	8007740 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008bf6:	2101      	movs	r1, #1
 8008bf8:	6838      	ldr	r0, [r7, #0]
 8008bfa:	f000 fb5f 	bl	80092bc <prvAddCurrentTaskToDelayedList>
}
 8008bfe:	bf00      	nop
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	20000f40 	.word	0x20000f40

08008c0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d109      	bne.n	8008c32 <vTaskPlaceOnEventListRestricted+0x26>
 8008c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c22:	f383 8811 	msr	BASEPRI, r3
 8008c26:	f3bf 8f6f 	isb	sy
 8008c2a:	f3bf 8f4f 	dsb	sy
 8008c2e:	617b      	str	r3, [r7, #20]
 8008c30:	e7fe      	b.n	8008c30 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c32:	4b0a      	ldr	r3, [pc, #40]	; (8008c5c <vTaskPlaceOnEventListRestricted+0x50>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	3318      	adds	r3, #24
 8008c38:	4619      	mov	r1, r3
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f7fe fd5c 	bl	80076f8 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d002      	beq.n	8008c4c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8008c46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c4a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008c4c:	6879      	ldr	r1, [r7, #4]
 8008c4e:	68b8      	ldr	r0, [r7, #8]
 8008c50:	f000 fb34 	bl	80092bc <prvAddCurrentTaskToDelayedList>
	}
 8008c54:	bf00      	nop
 8008c56:	3718      	adds	r7, #24
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	20000f40 	.word	0x20000f40

08008c60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d109      	bne.n	8008c8a <xTaskRemoveFromEventList+0x2a>
 8008c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7a:	f383 8811 	msr	BASEPRI, r3
 8008c7e:	f3bf 8f6f 	isb	sy
 8008c82:	f3bf 8f4f 	dsb	sy
 8008c86:	60fb      	str	r3, [r7, #12]
 8008c88:	e7fe      	b.n	8008c88 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	3318      	adds	r3, #24
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7fe fd8f 	bl	80077b2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c94:	4b1d      	ldr	r3, [pc, #116]	; (8008d0c <xTaskRemoveFromEventList+0xac>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d11c      	bne.n	8008cd6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	3304      	adds	r3, #4
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7fe fd86 	bl	80077b2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008caa:	2201      	movs	r2, #1
 8008cac:	409a      	lsls	r2, r3
 8008cae:	4b18      	ldr	r3, [pc, #96]	; (8008d10 <xTaskRemoveFromEventList+0xb0>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	4a16      	ldr	r2, [pc, #88]	; (8008d10 <xTaskRemoveFromEventList+0xb0>)
 8008cb6:	6013      	str	r3, [r2, #0]
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	4413      	add	r3, r2
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	4a13      	ldr	r2, [pc, #76]	; (8008d14 <xTaskRemoveFromEventList+0xb4>)
 8008cc6:	441a      	add	r2, r3
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	3304      	adds	r3, #4
 8008ccc:	4619      	mov	r1, r3
 8008cce:	4610      	mov	r0, r2
 8008cd0:	f7fe fd12 	bl	80076f8 <vListInsertEnd>
 8008cd4:	e005      	b.n	8008ce2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	3318      	adds	r3, #24
 8008cda:	4619      	mov	r1, r3
 8008cdc:	480e      	ldr	r0, [pc, #56]	; (8008d18 <xTaskRemoveFromEventList+0xb8>)
 8008cde:	f7fe fd0b 	bl	80076f8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce6:	4b0d      	ldr	r3, [pc, #52]	; (8008d1c <xTaskRemoveFromEventList+0xbc>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d905      	bls.n	8008cfc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008cf4:	4b0a      	ldr	r3, [pc, #40]	; (8008d20 <xTaskRemoveFromEventList+0xc0>)
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	601a      	str	r2, [r3, #0]
 8008cfa:	e001      	b.n	8008d00 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008d00:	697b      	ldr	r3, [r7, #20]
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3718      	adds	r7, #24
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	20001068 	.word	0x20001068
 8008d10:	20001048 	.word	0x20001048
 8008d14:	20000f44 	.word	0x20000f44
 8008d18:	20001000 	.word	0x20001000
 8008d1c:	20000f40 	.word	0x20000f40
 8008d20:	20001054 	.word	0x20001054

08008d24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d2c:	4b06      	ldr	r3, [pc, #24]	; (8008d48 <vTaskInternalSetTimeOutState+0x24>)
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d34:	4b05      	ldr	r3, [pc, #20]	; (8008d4c <vTaskInternalSetTimeOutState+0x28>)
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	605a      	str	r2, [r3, #4]
}
 8008d3c:	bf00      	nop
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr
 8008d48:	20001058 	.word	0x20001058
 8008d4c:	20001044 	.word	0x20001044

08008d50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b088      	sub	sp, #32
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d109      	bne.n	8008d74 <xTaskCheckForTimeOut+0x24>
 8008d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d64:	f383 8811 	msr	BASEPRI, r3
 8008d68:	f3bf 8f6f 	isb	sy
 8008d6c:	f3bf 8f4f 	dsb	sy
 8008d70:	613b      	str	r3, [r7, #16]
 8008d72:	e7fe      	b.n	8008d72 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d109      	bne.n	8008d8e <xTaskCheckForTimeOut+0x3e>
 8008d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7e:	f383 8811 	msr	BASEPRI, r3
 8008d82:	f3bf 8f6f 	isb	sy
 8008d86:	f3bf 8f4f 	dsb	sy
 8008d8a:	60fb      	str	r3, [r7, #12]
 8008d8c:	e7fe      	b.n	8008d8c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008d8e:	f000 ffad 	bl	8009cec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008d92:	4b1d      	ldr	r3, [pc, #116]	; (8008e08 <xTaskCheckForTimeOut+0xb8>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	69ba      	ldr	r2, [r7, #24]
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008daa:	d102      	bne.n	8008db2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008dac:	2300      	movs	r3, #0
 8008dae:	61fb      	str	r3, [r7, #28]
 8008db0:	e023      	b.n	8008dfa <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	4b15      	ldr	r3, [pc, #84]	; (8008e0c <xTaskCheckForTimeOut+0xbc>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d007      	beq.n	8008dce <xTaskCheckForTimeOut+0x7e>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	69ba      	ldr	r2, [r7, #24]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d302      	bcc.n	8008dce <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	61fb      	str	r3, [r7, #28]
 8008dcc:	e015      	b.n	8008dfa <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	697a      	ldr	r2, [r7, #20]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d20b      	bcs.n	8008df0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	1ad2      	subs	r2, r2, r3
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f7ff ff9d 	bl	8008d24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008dea:	2300      	movs	r3, #0
 8008dec:	61fb      	str	r3, [r7, #28]
 8008dee:	e004      	b.n	8008dfa <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	2200      	movs	r2, #0
 8008df4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008df6:	2301      	movs	r3, #1
 8008df8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008dfa:	f000 ffa5 	bl	8009d48 <vPortExitCritical>

	return xReturn;
 8008dfe:	69fb      	ldr	r3, [r7, #28]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3720      	adds	r7, #32
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	20001044 	.word	0x20001044
 8008e0c:	20001058 	.word	0x20001058

08008e10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e10:	b480      	push	{r7}
 8008e12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008e14:	4b03      	ldr	r3, [pc, #12]	; (8008e24 <vTaskMissedYield+0x14>)
 8008e16:	2201      	movs	r2, #1
 8008e18:	601a      	str	r2, [r3, #0]
}
 8008e1a:	bf00      	nop
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr
 8008e24:	20001054 	.word	0x20001054

08008e28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e30:	f000 f852 	bl	8008ed8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e34:	4b06      	ldr	r3, [pc, #24]	; (8008e50 <prvIdleTask+0x28>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d9f9      	bls.n	8008e30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008e3c:	4b05      	ldr	r3, [pc, #20]	; (8008e54 <prvIdleTask+0x2c>)
 8008e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e42:	601a      	str	r2, [r3, #0]
 8008e44:	f3bf 8f4f 	dsb	sy
 8008e48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008e4c:	e7f0      	b.n	8008e30 <prvIdleTask+0x8>
 8008e4e:	bf00      	nop
 8008e50:	20000f44 	.word	0x20000f44
 8008e54:	e000ed04 	.word	0xe000ed04

08008e58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e5e:	2300      	movs	r3, #0
 8008e60:	607b      	str	r3, [r7, #4]
 8008e62:	e00c      	b.n	8008e7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	4613      	mov	r3, r2
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	4413      	add	r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4a12      	ldr	r2, [pc, #72]	; (8008eb8 <prvInitialiseTaskLists+0x60>)
 8008e70:	4413      	add	r3, r2
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7fe fc13 	bl	800769e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	607b      	str	r3, [r7, #4]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2b06      	cmp	r3, #6
 8008e82:	d9ef      	bls.n	8008e64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e84:	480d      	ldr	r0, [pc, #52]	; (8008ebc <prvInitialiseTaskLists+0x64>)
 8008e86:	f7fe fc0a 	bl	800769e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e8a:	480d      	ldr	r0, [pc, #52]	; (8008ec0 <prvInitialiseTaskLists+0x68>)
 8008e8c:	f7fe fc07 	bl	800769e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e90:	480c      	ldr	r0, [pc, #48]	; (8008ec4 <prvInitialiseTaskLists+0x6c>)
 8008e92:	f7fe fc04 	bl	800769e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e96:	480c      	ldr	r0, [pc, #48]	; (8008ec8 <prvInitialiseTaskLists+0x70>)
 8008e98:	f7fe fc01 	bl	800769e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e9c:	480b      	ldr	r0, [pc, #44]	; (8008ecc <prvInitialiseTaskLists+0x74>)
 8008e9e:	f7fe fbfe 	bl	800769e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008ea2:	4b0b      	ldr	r3, [pc, #44]	; (8008ed0 <prvInitialiseTaskLists+0x78>)
 8008ea4:	4a05      	ldr	r2, [pc, #20]	; (8008ebc <prvInitialiseTaskLists+0x64>)
 8008ea6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ea8:	4b0a      	ldr	r3, [pc, #40]	; (8008ed4 <prvInitialiseTaskLists+0x7c>)
 8008eaa:	4a05      	ldr	r2, [pc, #20]	; (8008ec0 <prvInitialiseTaskLists+0x68>)
 8008eac:	601a      	str	r2, [r3, #0]
}
 8008eae:	bf00      	nop
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	20000f44 	.word	0x20000f44
 8008ebc:	20000fd0 	.word	0x20000fd0
 8008ec0:	20000fe4 	.word	0x20000fe4
 8008ec4:	20001000 	.word	0x20001000
 8008ec8:	20001014 	.word	0x20001014
 8008ecc:	2000102c 	.word	0x2000102c
 8008ed0:	20000ff8 	.word	0x20000ff8
 8008ed4:	20000ffc 	.word	0x20000ffc

08008ed8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ede:	e019      	b.n	8008f14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ee0:	f000 ff04 	bl	8009cec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ee4:	4b0f      	ldr	r3, [pc, #60]	; (8008f24 <prvCheckTasksWaitingTermination+0x4c>)
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	3304      	adds	r3, #4
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7fe fc5e 	bl	80077b2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008ef6:	4b0c      	ldr	r3, [pc, #48]	; (8008f28 <prvCheckTasksWaitingTermination+0x50>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	3b01      	subs	r3, #1
 8008efc:	4a0a      	ldr	r2, [pc, #40]	; (8008f28 <prvCheckTasksWaitingTermination+0x50>)
 8008efe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f00:	4b0a      	ldr	r3, [pc, #40]	; (8008f2c <prvCheckTasksWaitingTermination+0x54>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	3b01      	subs	r3, #1
 8008f06:	4a09      	ldr	r2, [pc, #36]	; (8008f2c <prvCheckTasksWaitingTermination+0x54>)
 8008f08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f0a:	f000 ff1d 	bl	8009d48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 f80e 	bl	8008f30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f14:	4b05      	ldr	r3, [pc, #20]	; (8008f2c <prvCheckTasksWaitingTermination+0x54>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d1e1      	bne.n	8008ee0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f1c:	bf00      	nop
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	20001014 	.word	0x20001014
 8008f28:	20001040 	.word	0x20001040
 8008f2c:	20001028 	.word	0x20001028

08008f30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d108      	bne.n	8008f54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f46:	4618      	mov	r0, r3
 8008f48:	f001 f8ac 	bl	800a0a4 <vPortFree>
				vPortFree( pxTCB );
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f001 f8a9 	bl	800a0a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f52:	e017      	b.n	8008f84 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d103      	bne.n	8008f66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f001 f8a0 	bl	800a0a4 <vPortFree>
	}
 8008f64:	e00e      	b.n	8008f84 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	d009      	beq.n	8008f84 <prvDeleteTCB+0x54>
 8008f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f74:	f383 8811 	msr	BASEPRI, r3
 8008f78:	f3bf 8f6f 	isb	sy
 8008f7c:	f3bf 8f4f 	dsb	sy
 8008f80:	60fb      	str	r3, [r7, #12]
 8008f82:	e7fe      	b.n	8008f82 <prvDeleteTCB+0x52>
	}
 8008f84:	bf00      	nop
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f92:	4b0c      	ldr	r3, [pc, #48]	; (8008fc4 <prvResetNextTaskUnblockTime+0x38>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d104      	bne.n	8008fa6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f9c:	4b0a      	ldr	r3, [pc, #40]	; (8008fc8 <prvResetNextTaskUnblockTime+0x3c>)
 8008f9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fa2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008fa4:	e008      	b.n	8008fb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fa6:	4b07      	ldr	r3, [pc, #28]	; (8008fc4 <prvResetNextTaskUnblockTime+0x38>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	4a04      	ldr	r2, [pc, #16]	; (8008fc8 <prvResetNextTaskUnblockTime+0x3c>)
 8008fb6:	6013      	str	r3, [r2, #0]
}
 8008fb8:	bf00      	nop
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr
 8008fc4:	20000ff8 	.word	0x20000ff8
 8008fc8:	20001060 	.word	0x20001060

08008fcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008fd2:	4b0b      	ldr	r3, [pc, #44]	; (8009000 <xTaskGetSchedulerState+0x34>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d102      	bne.n	8008fe0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	607b      	str	r3, [r7, #4]
 8008fde:	e008      	b.n	8008ff2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fe0:	4b08      	ldr	r3, [pc, #32]	; (8009004 <xTaskGetSchedulerState+0x38>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d102      	bne.n	8008fee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008fe8:	2302      	movs	r3, #2
 8008fea:	607b      	str	r3, [r7, #4]
 8008fec:	e001      	b.n	8008ff2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008ff2:	687b      	ldr	r3, [r7, #4]
	}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	370c      	adds	r7, #12
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr
 8009000:	2000104c 	.word	0x2000104c
 8009004:	20001068 	.word	0x20001068

08009008 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009008:	b580      	push	{r7, lr}
 800900a:	b086      	sub	sp, #24
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009014:	2300      	movs	r3, #0
 8009016:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d06c      	beq.n	80090f8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800901e:	4b39      	ldr	r3, [pc, #228]	; (8009104 <xTaskPriorityDisinherit+0xfc>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	693a      	ldr	r2, [r7, #16]
 8009024:	429a      	cmp	r2, r3
 8009026:	d009      	beq.n	800903c <xTaskPriorityDisinherit+0x34>
 8009028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902c:	f383 8811 	msr	BASEPRI, r3
 8009030:	f3bf 8f6f 	isb	sy
 8009034:	f3bf 8f4f 	dsb	sy
 8009038:	60fb      	str	r3, [r7, #12]
 800903a:	e7fe      	b.n	800903a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009040:	2b00      	cmp	r3, #0
 8009042:	d109      	bne.n	8009058 <xTaskPriorityDisinherit+0x50>
 8009044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009048:	f383 8811 	msr	BASEPRI, r3
 800904c:	f3bf 8f6f 	isb	sy
 8009050:	f3bf 8f4f 	dsb	sy
 8009054:	60bb      	str	r3, [r7, #8]
 8009056:	e7fe      	b.n	8009056 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800905c:	1e5a      	subs	r2, r3, #1
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800906a:	429a      	cmp	r2, r3
 800906c:	d044      	beq.n	80090f8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009072:	2b00      	cmp	r3, #0
 8009074:	d140      	bne.n	80090f8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	3304      	adds	r3, #4
 800907a:	4618      	mov	r0, r3
 800907c:	f7fe fb99 	bl	80077b2 <uxListRemove>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d115      	bne.n	80090b2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800908a:	491f      	ldr	r1, [pc, #124]	; (8009108 <xTaskPriorityDisinherit+0x100>)
 800908c:	4613      	mov	r3, r2
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	4413      	add	r3, r2
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	440b      	add	r3, r1
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d10a      	bne.n	80090b2 <xTaskPriorityDisinherit+0xaa>
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a0:	2201      	movs	r2, #1
 80090a2:	fa02 f303 	lsl.w	r3, r2, r3
 80090a6:	43da      	mvns	r2, r3
 80090a8:	4b18      	ldr	r3, [pc, #96]	; (800910c <xTaskPriorityDisinherit+0x104>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4013      	ands	r3, r2
 80090ae:	4a17      	ldr	r2, [pc, #92]	; (800910c <xTaskPriorityDisinherit+0x104>)
 80090b0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090be:	f1c3 0207 	rsb	r2, r3, #7
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ca:	2201      	movs	r2, #1
 80090cc:	409a      	lsls	r2, r3
 80090ce:	4b0f      	ldr	r3, [pc, #60]	; (800910c <xTaskPriorityDisinherit+0x104>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	4a0d      	ldr	r2, [pc, #52]	; (800910c <xTaskPriorityDisinherit+0x104>)
 80090d6:	6013      	str	r3, [r2, #0]
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090dc:	4613      	mov	r3, r2
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	4413      	add	r3, r2
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	4a08      	ldr	r2, [pc, #32]	; (8009108 <xTaskPriorityDisinherit+0x100>)
 80090e6:	441a      	add	r2, r3
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	3304      	adds	r3, #4
 80090ec:	4619      	mov	r1, r3
 80090ee:	4610      	mov	r0, r2
 80090f0:	f7fe fb02 	bl	80076f8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80090f4:	2301      	movs	r3, #1
 80090f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80090f8:	697b      	ldr	r3, [r7, #20]
	}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3718      	adds	r7, #24
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	20000f40 	.word	0x20000f40
 8009108:	20000f44 	.word	0x20000f44
 800910c:	20001048 	.word	0x20001048

08009110 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800911a:	f000 fde7 	bl	8009cec <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800911e:	4b1e      	ldr	r3, [pc, #120]	; (8009198 <ulTaskNotifyTake+0x88>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009124:	2b00      	cmp	r3, #0
 8009126:	d113      	bne.n	8009150 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009128:	4b1b      	ldr	r3, [pc, #108]	; (8009198 <ulTaskNotifyTake+0x88>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	2201      	movs	r2, #1
 800912e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00b      	beq.n	8009150 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009138:	2101      	movs	r1, #1
 800913a:	6838      	ldr	r0, [r7, #0]
 800913c:	f000 f8be 	bl	80092bc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009140:	4b16      	ldr	r3, [pc, #88]	; (800919c <ulTaskNotifyTake+0x8c>)
 8009142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009146:	601a      	str	r2, [r3, #0]
 8009148:	f3bf 8f4f 	dsb	sy
 800914c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009150:	f000 fdfa 	bl	8009d48 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009154:	f000 fdca 	bl	8009cec <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8009158:	4b0f      	ldr	r3, [pc, #60]	; (8009198 <ulTaskNotifyTake+0x88>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800915e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d00c      	beq.n	8009180 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d004      	beq.n	8009176 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800916c:	4b0a      	ldr	r3, [pc, #40]	; (8009198 <ulTaskNotifyTake+0x88>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2200      	movs	r2, #0
 8009172:	64da      	str	r2, [r3, #76]	; 0x4c
 8009174:	e004      	b.n	8009180 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8009176:	4b08      	ldr	r3, [pc, #32]	; (8009198 <ulTaskNotifyTake+0x88>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	68fa      	ldr	r2, [r7, #12]
 800917c:	3a01      	subs	r2, #1
 800917e:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009180:	4b05      	ldr	r3, [pc, #20]	; (8009198 <ulTaskNotifyTake+0x88>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2200      	movs	r2, #0
 8009186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 800918a:	f000 fddd 	bl	8009d48 <vPortExitCritical>

		return ulReturn;
 800918e:	68fb      	ldr	r3, [r7, #12]
	}
 8009190:	4618      	mov	r0, r3
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	20000f40 	.word	0x20000f40
 800919c:	e000ed04 	.word	0xe000ed04

080091a0 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b08a      	sub	sp, #40	; 0x28
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d109      	bne.n	80091c4 <vTaskNotifyGiveFromISR+0x24>
 80091b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b4:	f383 8811 	msr	BASEPRI, r3
 80091b8:	f3bf 8f6f 	isb	sy
 80091bc:	f3bf 8f4f 	dsb	sy
 80091c0:	61bb      	str	r3, [r7, #24]
 80091c2:	e7fe      	b.n	80091c2 <vTaskNotifyGiveFromISR+0x22>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80091c4:	f000 fe6e 	bl	8009ea4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 80091cc:	f3ef 8211 	mrs	r2, BASEPRI
 80091d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d4:	f383 8811 	msr	BASEPRI, r3
 80091d8:	f3bf 8f6f 	isb	sy
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	617a      	str	r2, [r7, #20]
 80091e2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80091e4:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80091e6:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80091e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80091ee:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80091f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f2:	2202      	movs	r2, #2
 80091f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80091f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091fc:	1c5a      	adds	r2, r3, #1
 80091fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009200:	64da      	str	r2, [r3, #76]	; 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009202:	7ffb      	ldrb	r3, [r7, #31]
 8009204:	2b01      	cmp	r3, #1
 8009206:	d144      	bne.n	8009292 <vTaskNotifyGiveFromISR+0xf2>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800920c:	2b00      	cmp	r3, #0
 800920e:	d009      	beq.n	8009224 <vTaskNotifyGiveFromISR+0x84>
	__asm volatile
 8009210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009214:	f383 8811 	msr	BASEPRI, r3
 8009218:	f3bf 8f6f 	isb	sy
 800921c:	f3bf 8f4f 	dsb	sy
 8009220:	60fb      	str	r3, [r7, #12]
 8009222:	e7fe      	b.n	8009222 <vTaskNotifyGiveFromISR+0x82>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009224:	4b1f      	ldr	r3, [pc, #124]	; (80092a4 <vTaskNotifyGiveFromISR+0x104>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d11c      	bne.n	8009266 <vTaskNotifyGiveFromISR+0xc6>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800922c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922e:	3304      	adds	r3, #4
 8009230:	4618      	mov	r0, r3
 8009232:	f7fe fabe 	bl	80077b2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800923a:	2201      	movs	r2, #1
 800923c:	409a      	lsls	r2, r3
 800923e:	4b1a      	ldr	r3, [pc, #104]	; (80092a8 <vTaskNotifyGiveFromISR+0x108>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4313      	orrs	r3, r2
 8009244:	4a18      	ldr	r2, [pc, #96]	; (80092a8 <vTaskNotifyGiveFromISR+0x108>)
 8009246:	6013      	str	r3, [r2, #0]
 8009248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800924c:	4613      	mov	r3, r2
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	4413      	add	r3, r2
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	4a15      	ldr	r2, [pc, #84]	; (80092ac <vTaskNotifyGiveFromISR+0x10c>)
 8009256:	441a      	add	r2, r3
 8009258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925a:	3304      	adds	r3, #4
 800925c:	4619      	mov	r1, r3
 800925e:	4610      	mov	r0, r2
 8009260:	f7fe fa4a 	bl	80076f8 <vListInsertEnd>
 8009264:	e005      	b.n	8009272 <vTaskNotifyGiveFromISR+0xd2>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009268:	3318      	adds	r3, #24
 800926a:	4619      	mov	r1, r3
 800926c:	4810      	ldr	r0, [pc, #64]	; (80092b0 <vTaskNotifyGiveFromISR+0x110>)
 800926e:	f7fe fa43 	bl	80076f8 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009276:	4b0f      	ldr	r3, [pc, #60]	; (80092b4 <vTaskNotifyGiveFromISR+0x114>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800927c:	429a      	cmp	r2, r3
 800927e:	d908      	bls.n	8009292 <vTaskNotifyGiveFromISR+0xf2>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d002      	beq.n	800928c <vTaskNotifyGiveFromISR+0xec>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	2201      	movs	r2, #1
 800928a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800928c:	4b0a      	ldr	r3, [pc, #40]	; (80092b8 <vTaskNotifyGiveFromISR+0x118>)
 800928e:	2201      	movs	r2, #1
 8009290:	601a      	str	r2, [r3, #0]
 8009292:	6a3b      	ldr	r3, [r7, #32]
 8009294:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800929c:	bf00      	nop
 800929e:	3728      	adds	r7, #40	; 0x28
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	20001068 	.word	0x20001068
 80092a8:	20001048 	.word	0x20001048
 80092ac:	20000f44 	.word	0x20000f44
 80092b0:	20001000 	.word	0x20001000
 80092b4:	20000f40 	.word	0x20000f40
 80092b8:	20001054 	.word	0x20001054

080092bc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80092c6:	4b29      	ldr	r3, [pc, #164]	; (800936c <prvAddCurrentTaskToDelayedList+0xb0>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092cc:	4b28      	ldr	r3, [pc, #160]	; (8009370 <prvAddCurrentTaskToDelayedList+0xb4>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	3304      	adds	r3, #4
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7fe fa6d 	bl	80077b2 <uxListRemove>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d10b      	bne.n	80092f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80092de:	4b24      	ldr	r3, [pc, #144]	; (8009370 <prvAddCurrentTaskToDelayedList+0xb4>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e4:	2201      	movs	r2, #1
 80092e6:	fa02 f303 	lsl.w	r3, r2, r3
 80092ea:	43da      	mvns	r2, r3
 80092ec:	4b21      	ldr	r3, [pc, #132]	; (8009374 <prvAddCurrentTaskToDelayedList+0xb8>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4013      	ands	r3, r2
 80092f2:	4a20      	ldr	r2, [pc, #128]	; (8009374 <prvAddCurrentTaskToDelayedList+0xb8>)
 80092f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092fc:	d10a      	bne.n	8009314 <prvAddCurrentTaskToDelayedList+0x58>
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d007      	beq.n	8009314 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009304:	4b1a      	ldr	r3, [pc, #104]	; (8009370 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	3304      	adds	r3, #4
 800930a:	4619      	mov	r1, r3
 800930c:	481a      	ldr	r0, [pc, #104]	; (8009378 <prvAddCurrentTaskToDelayedList+0xbc>)
 800930e:	f7fe f9f3 	bl	80076f8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009312:	e026      	b.n	8009362 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009314:	68fa      	ldr	r2, [r7, #12]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	4413      	add	r3, r2
 800931a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800931c:	4b14      	ldr	r3, [pc, #80]	; (8009370 <prvAddCurrentTaskToDelayedList+0xb4>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009324:	68ba      	ldr	r2, [r7, #8]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	429a      	cmp	r2, r3
 800932a:	d209      	bcs.n	8009340 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800932c:	4b13      	ldr	r3, [pc, #76]	; (800937c <prvAddCurrentTaskToDelayedList+0xc0>)
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	4b0f      	ldr	r3, [pc, #60]	; (8009370 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	3304      	adds	r3, #4
 8009336:	4619      	mov	r1, r3
 8009338:	4610      	mov	r0, r2
 800933a:	f7fe fa01 	bl	8007740 <vListInsert>
}
 800933e:	e010      	b.n	8009362 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009340:	4b0f      	ldr	r3, [pc, #60]	; (8009380 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	4b0a      	ldr	r3, [pc, #40]	; (8009370 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	3304      	adds	r3, #4
 800934a:	4619      	mov	r1, r3
 800934c:	4610      	mov	r0, r2
 800934e:	f7fe f9f7 	bl	8007740 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009352:	4b0c      	ldr	r3, [pc, #48]	; (8009384 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	68ba      	ldr	r2, [r7, #8]
 8009358:	429a      	cmp	r2, r3
 800935a:	d202      	bcs.n	8009362 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800935c:	4a09      	ldr	r2, [pc, #36]	; (8009384 <prvAddCurrentTaskToDelayedList+0xc8>)
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	6013      	str	r3, [r2, #0]
}
 8009362:	bf00      	nop
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	20001044 	.word	0x20001044
 8009370:	20000f40 	.word	0x20000f40
 8009374:	20001048 	.word	0x20001048
 8009378:	2000102c 	.word	0x2000102c
 800937c:	20000ffc 	.word	0x20000ffc
 8009380:	20000ff8 	.word	0x20000ff8
 8009384:	20001060 	.word	0x20001060

08009388 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b08a      	sub	sp, #40	; 0x28
 800938c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800938e:	2300      	movs	r3, #0
 8009390:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009392:	f000 fb43 	bl	8009a1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009396:	4b1c      	ldr	r3, [pc, #112]	; (8009408 <xTimerCreateTimerTask+0x80>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d021      	beq.n	80093e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800939e:	2300      	movs	r3, #0
 80093a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80093a2:	2300      	movs	r3, #0
 80093a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80093a6:	1d3a      	adds	r2, r7, #4
 80093a8:	f107 0108 	add.w	r1, r7, #8
 80093ac:	f107 030c 	add.w	r3, r7, #12
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7f8 fa6d 	bl	8001890 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80093b6:	6879      	ldr	r1, [r7, #4]
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	9202      	str	r2, [sp, #8]
 80093be:	9301      	str	r3, [sp, #4]
 80093c0:	2302      	movs	r3, #2
 80093c2:	9300      	str	r3, [sp, #0]
 80093c4:	2300      	movs	r3, #0
 80093c6:	460a      	mov	r2, r1
 80093c8:	4910      	ldr	r1, [pc, #64]	; (800940c <xTimerCreateTimerTask+0x84>)
 80093ca:	4811      	ldr	r0, [pc, #68]	; (8009410 <xTimerCreateTimerTask+0x88>)
 80093cc:	f7ff f807 	bl	80083de <xTaskCreateStatic>
 80093d0:	4602      	mov	r2, r0
 80093d2:	4b10      	ldr	r3, [pc, #64]	; (8009414 <xTimerCreateTimerTask+0x8c>)
 80093d4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80093d6:	4b0f      	ldr	r3, [pc, #60]	; (8009414 <xTimerCreateTimerTask+0x8c>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d001      	beq.n	80093e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80093de:	2301      	movs	r3, #1
 80093e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d109      	bne.n	80093fc <xTimerCreateTimerTask+0x74>
	__asm volatile
 80093e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ec:	f383 8811 	msr	BASEPRI, r3
 80093f0:	f3bf 8f6f 	isb	sy
 80093f4:	f3bf 8f4f 	dsb	sy
 80093f8:	613b      	str	r3, [r7, #16]
 80093fa:	e7fe      	b.n	80093fa <xTimerCreateTimerTask+0x72>
	return xReturn;
 80093fc:	697b      	ldr	r3, [r7, #20]
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3718      	adds	r7, #24
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	2000109c 	.word	0x2000109c
 800940c:	0800d418 	.word	0x0800d418
 8009410:	08009601 	.word	0x08009601
 8009414:	200010a0 	.word	0x200010a0

08009418 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009418:	b580      	push	{r7, lr}
 800941a:	b088      	sub	sp, #32
 800941c:	af02      	add	r7, sp, #8
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	607a      	str	r2, [r7, #4]
 8009424:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009426:	2028      	movs	r0, #40	; 0x28
 8009428:	f000 fd7a 	bl	8009f20 <pvPortMalloc>
 800942c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00d      	beq.n	8009450 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	2200      	movs	r2, #0
 8009438:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	9301      	str	r3, [sp, #4]
 8009440:	6a3b      	ldr	r3, [r7, #32]
 8009442:	9300      	str	r3, [sp, #0]
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	68b9      	ldr	r1, [r7, #8]
 800944a:	68f8      	ldr	r0, [r7, #12]
 800944c:	f000 f805 	bl	800945a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009450:	697b      	ldr	r3, [r7, #20]
	}
 8009452:	4618      	mov	r0, r3
 8009454:	3718      	adds	r7, #24
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}

0800945a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b086      	sub	sp, #24
 800945e:	af00      	add	r7, sp, #0
 8009460:	60f8      	str	r0, [r7, #12]
 8009462:	60b9      	str	r1, [r7, #8]
 8009464:	607a      	str	r2, [r7, #4]
 8009466:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d109      	bne.n	8009482 <prvInitialiseNewTimer+0x28>
 800946e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009472:	f383 8811 	msr	BASEPRI, r3
 8009476:	f3bf 8f6f 	isb	sy
 800947a:	f3bf 8f4f 	dsb	sy
 800947e:	617b      	str	r3, [r7, #20]
 8009480:	e7fe      	b.n	8009480 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8009482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009484:	2b00      	cmp	r3, #0
 8009486:	d01e      	beq.n	80094c6 <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009488:	f000 fac8 	bl	8009a1c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800948c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009494:	68ba      	ldr	r2, [r7, #8]
 8009496:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8009498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949a:	683a      	ldr	r2, [r7, #0]
 800949c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800949e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a0:	6a3a      	ldr	r2, [r7, #32]
 80094a2:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80094a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a6:	3304      	adds	r3, #4
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7fe f918 	bl	80076de <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d008      	beq.n	80094c6 <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80094b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80094ba:	f043 0304 	orr.w	r3, r3, #4
 80094be:	b2da      	uxtb	r2, r3
 80094c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80094c6:	bf00      	nop
 80094c8:	3718      	adds	r7, #24
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
	...

080094d0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b08a      	sub	sp, #40	; 0x28
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	607a      	str	r2, [r7, #4]
 80094dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80094de:	2300      	movs	r3, #0
 80094e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d109      	bne.n	80094fc <xTimerGenericCommand+0x2c>
 80094e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ec:	f383 8811 	msr	BASEPRI, r3
 80094f0:	f3bf 8f6f 	isb	sy
 80094f4:	f3bf 8f4f 	dsb	sy
 80094f8:	623b      	str	r3, [r7, #32]
 80094fa:	e7fe      	b.n	80094fa <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80094fc:	4b19      	ldr	r3, [pc, #100]	; (8009564 <xTimerGenericCommand+0x94>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d02a      	beq.n	800955a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	2b05      	cmp	r3, #5
 8009514:	dc18      	bgt.n	8009548 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009516:	f7ff fd59 	bl	8008fcc <xTaskGetSchedulerState>
 800951a:	4603      	mov	r3, r0
 800951c:	2b02      	cmp	r3, #2
 800951e:	d109      	bne.n	8009534 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009520:	4b10      	ldr	r3, [pc, #64]	; (8009564 <xTimerGenericCommand+0x94>)
 8009522:	6818      	ldr	r0, [r3, #0]
 8009524:	f107 0114 	add.w	r1, r7, #20
 8009528:	2300      	movs	r3, #0
 800952a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800952c:	f7fe faa8 	bl	8007a80 <xQueueGenericSend>
 8009530:	6278      	str	r0, [r7, #36]	; 0x24
 8009532:	e012      	b.n	800955a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009534:	4b0b      	ldr	r3, [pc, #44]	; (8009564 <xTimerGenericCommand+0x94>)
 8009536:	6818      	ldr	r0, [r3, #0]
 8009538:	f107 0114 	add.w	r1, r7, #20
 800953c:	2300      	movs	r3, #0
 800953e:	2200      	movs	r2, #0
 8009540:	f7fe fa9e 	bl	8007a80 <xQueueGenericSend>
 8009544:	6278      	str	r0, [r7, #36]	; 0x24
 8009546:	e008      	b.n	800955a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009548:	4b06      	ldr	r3, [pc, #24]	; (8009564 <xTimerGenericCommand+0x94>)
 800954a:	6818      	ldr	r0, [r3, #0]
 800954c:	f107 0114 	add.w	r1, r7, #20
 8009550:	2300      	movs	r3, #0
 8009552:	683a      	ldr	r2, [r7, #0]
 8009554:	f7fe fbac 	bl	8007cb0 <xQueueGenericSendFromISR>
 8009558:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800955a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800955c:	4618      	mov	r0, r3
 800955e:	3728      	adds	r7, #40	; 0x28
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}
 8009564:	2000109c 	.word	0x2000109c

08009568 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b088      	sub	sp, #32
 800956c:	af02      	add	r7, sp, #8
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009572:	4b22      	ldr	r3, [pc, #136]	; (80095fc <prvProcessExpiredTimer+0x94>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	3304      	adds	r3, #4
 8009580:	4618      	mov	r0, r3
 8009582:	f7fe f916 	bl	80077b2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800958c:	f003 0304 	and.w	r3, r3, #4
 8009590:	2b00      	cmp	r3, #0
 8009592:	d021      	beq.n	80095d8 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	699a      	ldr	r2, [r3, #24]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	18d1      	adds	r1, r2, r3
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	683a      	ldr	r2, [r7, #0]
 80095a0:	6978      	ldr	r0, [r7, #20]
 80095a2:	f000 f8d1 	bl	8009748 <prvInsertTimerInActiveList>
 80095a6:	4603      	mov	r3, r0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d01e      	beq.n	80095ea <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80095ac:	2300      	movs	r3, #0
 80095ae:	9300      	str	r3, [sp, #0]
 80095b0:	2300      	movs	r3, #0
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	2100      	movs	r1, #0
 80095b6:	6978      	ldr	r0, [r7, #20]
 80095b8:	f7ff ff8a 	bl	80094d0 <xTimerGenericCommand>
 80095bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d112      	bne.n	80095ea <prvProcessExpiredTimer+0x82>
 80095c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c8:	f383 8811 	msr	BASEPRI, r3
 80095cc:	f3bf 8f6f 	isb	sy
 80095d0:	f3bf 8f4f 	dsb	sy
 80095d4:	60fb      	str	r3, [r7, #12]
 80095d6:	e7fe      	b.n	80095d6 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80095de:	f023 0301 	bic.w	r3, r3, #1
 80095e2:	b2da      	uxtb	r2, r3
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	6a1b      	ldr	r3, [r3, #32]
 80095ee:	6978      	ldr	r0, [r7, #20]
 80095f0:	4798      	blx	r3
}
 80095f2:	bf00      	nop
 80095f4:	3718      	adds	r7, #24
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	20001094 	.word	0x20001094

08009600 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009608:	f107 0308 	add.w	r3, r7, #8
 800960c:	4618      	mov	r0, r3
 800960e:	f000 f857 	bl	80096c0 <prvGetNextExpireTime>
 8009612:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	4619      	mov	r1, r3
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f000 f803 	bl	8009624 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800961e:	f000 f8d5 	bl	80097cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009622:	e7f1      	b.n	8009608 <prvTimerTask+0x8>

08009624 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800962e:	f7ff f8fd 	bl	800882c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009632:	f107 0308 	add.w	r3, r7, #8
 8009636:	4618      	mov	r0, r3
 8009638:	f000 f866 	bl	8009708 <prvSampleTimeNow>
 800963c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d130      	bne.n	80096a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d10a      	bne.n	8009660 <prvProcessTimerOrBlockTask+0x3c>
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	429a      	cmp	r2, r3
 8009650:	d806      	bhi.n	8009660 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009652:	f7ff f8f9 	bl	8008848 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009656:	68f9      	ldr	r1, [r7, #12]
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f7ff ff85 	bl	8009568 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800965e:	e024      	b.n	80096aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d008      	beq.n	8009678 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009666:	4b13      	ldr	r3, [pc, #76]	; (80096b4 <prvProcessTimerOrBlockTask+0x90>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d101      	bne.n	8009674 <prvProcessTimerOrBlockTask+0x50>
 8009670:	2301      	movs	r3, #1
 8009672:	e000      	b.n	8009676 <prvProcessTimerOrBlockTask+0x52>
 8009674:	2300      	movs	r3, #0
 8009676:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009678:	4b0f      	ldr	r3, [pc, #60]	; (80096b8 <prvProcessTimerOrBlockTask+0x94>)
 800967a:	6818      	ldr	r0, [r3, #0]
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	683a      	ldr	r2, [r7, #0]
 8009684:	4619      	mov	r1, r3
 8009686:	f7fe fddb 	bl	8008240 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800968a:	f7ff f8dd 	bl	8008848 <xTaskResumeAll>
 800968e:	4603      	mov	r3, r0
 8009690:	2b00      	cmp	r3, #0
 8009692:	d10a      	bne.n	80096aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009694:	4b09      	ldr	r3, [pc, #36]	; (80096bc <prvProcessTimerOrBlockTask+0x98>)
 8009696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800969a:	601a      	str	r2, [r3, #0]
 800969c:	f3bf 8f4f 	dsb	sy
 80096a0:	f3bf 8f6f 	isb	sy
}
 80096a4:	e001      	b.n	80096aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80096a6:	f7ff f8cf 	bl	8008848 <xTaskResumeAll>
}
 80096aa:	bf00      	nop
 80096ac:	3710      	adds	r7, #16
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	20001098 	.word	0x20001098
 80096b8:	2000109c 	.word	0x2000109c
 80096bc:	e000ed04 	.word	0xe000ed04

080096c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80096c0:	b480      	push	{r7}
 80096c2:	b085      	sub	sp, #20
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80096c8:	4b0e      	ldr	r3, [pc, #56]	; (8009704 <prvGetNextExpireTime+0x44>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d101      	bne.n	80096d6 <prvGetNextExpireTime+0x16>
 80096d2:	2201      	movs	r2, #1
 80096d4:	e000      	b.n	80096d8 <prvGetNextExpireTime+0x18>
 80096d6:	2200      	movs	r2, #0
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d105      	bne.n	80096f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096e4:	4b07      	ldr	r3, [pc, #28]	; (8009704 <prvGetNextExpireTime+0x44>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	60fb      	str	r3, [r7, #12]
 80096ee:	e001      	b.n	80096f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80096f0:	2300      	movs	r3, #0
 80096f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80096f4:	68fb      	ldr	r3, [r7, #12]
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3714      	adds	r7, #20
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	20001094 	.word	0x20001094

08009708 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009710:	f7ff f936 	bl	8008980 <xTaskGetTickCount>
 8009714:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009716:	4b0b      	ldr	r3, [pc, #44]	; (8009744 <prvSampleTimeNow+0x3c>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	429a      	cmp	r2, r3
 800971e:	d205      	bcs.n	800972c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009720:	f000 f918 	bl	8009954 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	601a      	str	r2, [r3, #0]
 800972a:	e002      	b.n	8009732 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009732:	4a04      	ldr	r2, [pc, #16]	; (8009744 <prvSampleTimeNow+0x3c>)
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009738:	68fb      	ldr	r3, [r7, #12]
}
 800973a:	4618      	mov	r0, r3
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	200010a4 	.word	0x200010a4

08009748 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b086      	sub	sp, #24
 800974c:	af00      	add	r7, sp, #0
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	60b9      	str	r1, [r7, #8]
 8009752:	607a      	str	r2, [r7, #4]
 8009754:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009756:	2300      	movs	r3, #0
 8009758:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	68ba      	ldr	r2, [r7, #8]
 800975e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	68fa      	ldr	r2, [r7, #12]
 8009764:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009766:	68ba      	ldr	r2, [r7, #8]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	429a      	cmp	r2, r3
 800976c:	d812      	bhi.n	8009794 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	1ad2      	subs	r2, r2, r3
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	699b      	ldr	r3, [r3, #24]
 8009778:	429a      	cmp	r2, r3
 800977a:	d302      	bcc.n	8009782 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800977c:	2301      	movs	r3, #1
 800977e:	617b      	str	r3, [r7, #20]
 8009780:	e01b      	b.n	80097ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009782:	4b10      	ldr	r3, [pc, #64]	; (80097c4 <prvInsertTimerInActiveList+0x7c>)
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	3304      	adds	r3, #4
 800978a:	4619      	mov	r1, r3
 800978c:	4610      	mov	r0, r2
 800978e:	f7fd ffd7 	bl	8007740 <vListInsert>
 8009792:	e012      	b.n	80097ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	429a      	cmp	r2, r3
 800979a:	d206      	bcs.n	80097aa <prvInsertTimerInActiveList+0x62>
 800979c:	68ba      	ldr	r2, [r7, #8]
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d302      	bcc.n	80097aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80097a4:	2301      	movs	r3, #1
 80097a6:	617b      	str	r3, [r7, #20]
 80097a8:	e007      	b.n	80097ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097aa:	4b07      	ldr	r3, [pc, #28]	; (80097c8 <prvInsertTimerInActiveList+0x80>)
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	3304      	adds	r3, #4
 80097b2:	4619      	mov	r1, r3
 80097b4:	4610      	mov	r0, r2
 80097b6:	f7fd ffc3 	bl	8007740 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80097ba:	697b      	ldr	r3, [r7, #20]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3718      	adds	r7, #24
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	20001098 	.word	0x20001098
 80097c8:	20001094 	.word	0x20001094

080097cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b08c      	sub	sp, #48	; 0x30
 80097d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80097d2:	e0ac      	b.n	800992e <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	f2c0 80a8 	blt.w	800992c <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80097e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e2:	695b      	ldr	r3, [r3, #20]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d004      	beq.n	80097f2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ea:	3304      	adds	r3, #4
 80097ec:	4618      	mov	r0, r3
 80097ee:	f7fd ffe0 	bl	80077b2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80097f2:	1d3b      	adds	r3, r7, #4
 80097f4:	4618      	mov	r0, r3
 80097f6:	f7ff ff87 	bl	8009708 <prvSampleTimeNow>
 80097fa:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	2b09      	cmp	r3, #9
 8009800:	f200 8095 	bhi.w	800992e <prvProcessReceivedCommands+0x162>
 8009804:	a201      	add	r2, pc, #4	; (adr r2, 800980c <prvProcessReceivedCommands+0x40>)
 8009806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800980a:	bf00      	nop
 800980c:	08009835 	.word	0x08009835
 8009810:	08009835 	.word	0x08009835
 8009814:	08009835 	.word	0x08009835
 8009818:	080098a7 	.word	0x080098a7
 800981c:	080098bb 	.word	0x080098bb
 8009820:	08009903 	.word	0x08009903
 8009824:	08009835 	.word	0x08009835
 8009828:	08009835 	.word	0x08009835
 800982c:	080098a7 	.word	0x080098a7
 8009830:	080098bb 	.word	0x080098bb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009836:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800983a:	f043 0301 	orr.w	r3, r3, #1
 800983e:	b2da      	uxtb	r2, r3
 8009840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009842:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009846:	68fa      	ldr	r2, [r7, #12]
 8009848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984a:	699b      	ldr	r3, [r3, #24]
 800984c:	18d1      	adds	r1, r2, r3
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	6a3a      	ldr	r2, [r7, #32]
 8009852:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009854:	f7ff ff78 	bl	8009748 <prvInsertTimerInActiveList>
 8009858:	4603      	mov	r3, r0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d067      	beq.n	800992e <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800985e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009860:	6a1b      	ldr	r3, [r3, #32]
 8009862:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009864:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009868:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800986c:	f003 0304 	and.w	r3, r3, #4
 8009870:	2b00      	cmp	r3, #0
 8009872:	d05c      	beq.n	800992e <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009874:	68fa      	ldr	r2, [r7, #12]
 8009876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009878:	699b      	ldr	r3, [r3, #24]
 800987a:	441a      	add	r2, r3
 800987c:	2300      	movs	r3, #0
 800987e:	9300      	str	r3, [sp, #0]
 8009880:	2300      	movs	r3, #0
 8009882:	2100      	movs	r1, #0
 8009884:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009886:	f7ff fe23 	bl	80094d0 <xTimerGenericCommand>
 800988a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800988c:	69fb      	ldr	r3, [r7, #28]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d14d      	bne.n	800992e <prvProcessReceivedCommands+0x162>
 8009892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009896:	f383 8811 	msr	BASEPRI, r3
 800989a:	f3bf 8f6f 	isb	sy
 800989e:	f3bf 8f4f 	dsb	sy
 80098a2:	61bb      	str	r3, [r7, #24]
 80098a4:	e7fe      	b.n	80098a4 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80098a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80098ac:	f023 0301 	bic.w	r3, r3, #1
 80098b0:	b2da      	uxtb	r2, r3
 80098b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80098b8:	e039      	b.n	800992e <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80098ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80098c0:	f043 0301 	orr.w	r3, r3, #1
 80098c4:	b2da      	uxtb	r2, r3
 80098c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80098cc:	68fa      	ldr	r2, [r7, #12]
 80098ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80098d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d4:	699b      	ldr	r3, [r3, #24]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d109      	bne.n	80098ee <prvProcessReceivedCommands+0x122>
 80098da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098de:	f383 8811 	msr	BASEPRI, r3
 80098e2:	f3bf 8f6f 	isb	sy
 80098e6:	f3bf 8f4f 	dsb	sy
 80098ea:	617b      	str	r3, [r7, #20]
 80098ec:	e7fe      	b.n	80098ec <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80098ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f0:	699a      	ldr	r2, [r3, #24]
 80098f2:	6a3b      	ldr	r3, [r7, #32]
 80098f4:	18d1      	adds	r1, r2, r3
 80098f6:	6a3b      	ldr	r3, [r7, #32]
 80098f8:	6a3a      	ldr	r2, [r7, #32]
 80098fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80098fc:	f7ff ff24 	bl	8009748 <prvInsertTimerInActiveList>
					break;
 8009900:	e015      	b.n	800992e <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009904:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009908:	f003 0302 	and.w	r3, r3, #2
 800990c:	2b00      	cmp	r3, #0
 800990e:	d103      	bne.n	8009918 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8009910:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009912:	f000 fbc7 	bl	800a0a4 <vPortFree>
 8009916:	e00a      	b.n	800992e <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800991e:	f023 0301 	bic.w	r3, r3, #1
 8009922:	b2da      	uxtb	r2, r3
 8009924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009926:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800992a:	e000      	b.n	800992e <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800992c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800992e:	4b08      	ldr	r3, [pc, #32]	; (8009950 <prvProcessReceivedCommands+0x184>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f107 0108 	add.w	r1, r7, #8
 8009936:	2200      	movs	r2, #0
 8009938:	4618      	mov	r0, r3
 800993a:	f7fe fa5f 	bl	8007dfc <xQueueReceive>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	f47f af47 	bne.w	80097d4 <prvProcessReceivedCommands+0x8>
	}
}
 8009946:	bf00      	nop
 8009948:	3728      	adds	r7, #40	; 0x28
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
 800994e:	bf00      	nop
 8009950:	2000109c 	.word	0x2000109c

08009954 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b088      	sub	sp, #32
 8009958:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800995a:	e047      	b.n	80099ec <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800995c:	4b2d      	ldr	r3, [pc, #180]	; (8009a14 <prvSwitchTimerLists+0xc0>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009966:	4b2b      	ldr	r3, [pc, #172]	; (8009a14 <prvSwitchTimerLists+0xc0>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	3304      	adds	r3, #4
 8009974:	4618      	mov	r0, r3
 8009976:	f7fd ff1c 	bl	80077b2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	6a1b      	ldr	r3, [r3, #32]
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009988:	f003 0304 	and.w	r3, r3, #4
 800998c:	2b00      	cmp	r3, #0
 800998e:	d02d      	beq.n	80099ec <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	699b      	ldr	r3, [r3, #24]
 8009994:	693a      	ldr	r2, [r7, #16]
 8009996:	4413      	add	r3, r2
 8009998:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d90e      	bls.n	80099c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	68ba      	ldr	r2, [r7, #8]
 80099a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	68fa      	ldr	r2, [r7, #12]
 80099ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80099ae:	4b19      	ldr	r3, [pc, #100]	; (8009a14 <prvSwitchTimerLists+0xc0>)
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	3304      	adds	r3, #4
 80099b6:	4619      	mov	r1, r3
 80099b8:	4610      	mov	r0, r2
 80099ba:	f7fd fec1 	bl	8007740 <vListInsert>
 80099be:	e015      	b.n	80099ec <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80099c0:	2300      	movs	r3, #0
 80099c2:	9300      	str	r3, [sp, #0]
 80099c4:	2300      	movs	r3, #0
 80099c6:	693a      	ldr	r2, [r7, #16]
 80099c8:	2100      	movs	r1, #0
 80099ca:	68f8      	ldr	r0, [r7, #12]
 80099cc:	f7ff fd80 	bl	80094d0 <xTimerGenericCommand>
 80099d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d109      	bne.n	80099ec <prvSwitchTimerLists+0x98>
 80099d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099dc:	f383 8811 	msr	BASEPRI, r3
 80099e0:	f3bf 8f6f 	isb	sy
 80099e4:	f3bf 8f4f 	dsb	sy
 80099e8:	603b      	str	r3, [r7, #0]
 80099ea:	e7fe      	b.n	80099ea <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80099ec:	4b09      	ldr	r3, [pc, #36]	; (8009a14 <prvSwitchTimerLists+0xc0>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d1b2      	bne.n	800995c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80099f6:	4b07      	ldr	r3, [pc, #28]	; (8009a14 <prvSwitchTimerLists+0xc0>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80099fc:	4b06      	ldr	r3, [pc, #24]	; (8009a18 <prvSwitchTimerLists+0xc4>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a04      	ldr	r2, [pc, #16]	; (8009a14 <prvSwitchTimerLists+0xc0>)
 8009a02:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009a04:	4a04      	ldr	r2, [pc, #16]	; (8009a18 <prvSwitchTimerLists+0xc4>)
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	6013      	str	r3, [r2, #0]
}
 8009a0a:	bf00      	nop
 8009a0c:	3718      	adds	r7, #24
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	20001094 	.word	0x20001094
 8009a18:	20001098 	.word	0x20001098

08009a1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009a22:	f000 f963 	bl	8009cec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009a26:	4b15      	ldr	r3, [pc, #84]	; (8009a7c <prvCheckForValidListAndQueue+0x60>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d120      	bne.n	8009a70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009a2e:	4814      	ldr	r0, [pc, #80]	; (8009a80 <prvCheckForValidListAndQueue+0x64>)
 8009a30:	f7fd fe35 	bl	800769e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009a34:	4813      	ldr	r0, [pc, #76]	; (8009a84 <prvCheckForValidListAndQueue+0x68>)
 8009a36:	f7fd fe32 	bl	800769e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009a3a:	4b13      	ldr	r3, [pc, #76]	; (8009a88 <prvCheckForValidListAndQueue+0x6c>)
 8009a3c:	4a10      	ldr	r2, [pc, #64]	; (8009a80 <prvCheckForValidListAndQueue+0x64>)
 8009a3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009a40:	4b12      	ldr	r3, [pc, #72]	; (8009a8c <prvCheckForValidListAndQueue+0x70>)
 8009a42:	4a10      	ldr	r2, [pc, #64]	; (8009a84 <prvCheckForValidListAndQueue+0x68>)
 8009a44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009a46:	2300      	movs	r3, #0
 8009a48:	9300      	str	r3, [sp, #0]
 8009a4a:	4b11      	ldr	r3, [pc, #68]	; (8009a90 <prvCheckForValidListAndQueue+0x74>)
 8009a4c:	4a11      	ldr	r2, [pc, #68]	; (8009a94 <prvCheckForValidListAndQueue+0x78>)
 8009a4e:	210c      	movs	r1, #12
 8009a50:	200a      	movs	r0, #10
 8009a52:	f7fd ff41 	bl	80078d8 <xQueueGenericCreateStatic>
 8009a56:	4602      	mov	r2, r0
 8009a58:	4b08      	ldr	r3, [pc, #32]	; (8009a7c <prvCheckForValidListAndQueue+0x60>)
 8009a5a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009a5c:	4b07      	ldr	r3, [pc, #28]	; (8009a7c <prvCheckForValidListAndQueue+0x60>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d005      	beq.n	8009a70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009a64:	4b05      	ldr	r3, [pc, #20]	; (8009a7c <prvCheckForValidListAndQueue+0x60>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	490b      	ldr	r1, [pc, #44]	; (8009a98 <prvCheckForValidListAndQueue+0x7c>)
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7fe fbc0 	bl	80081f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a70:	f000 f96a 	bl	8009d48 <vPortExitCritical>
}
 8009a74:	bf00      	nop
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	2000109c 	.word	0x2000109c
 8009a80:	2000106c 	.word	0x2000106c
 8009a84:	20001080 	.word	0x20001080
 8009a88:	20001094 	.word	0x20001094
 8009a8c:	20001098 	.word	0x20001098
 8009a90:	20001120 	.word	0x20001120
 8009a94:	200010a8 	.word	0x200010a8
 8009a98:	0800d420 	.word	0x0800d420

08009a9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b085      	sub	sp, #20
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	3b04      	subs	r3, #4
 8009aac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009ab4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	3b04      	subs	r3, #4
 8009aba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	f023 0201 	bic.w	r2, r3, #1
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	3b04      	subs	r3, #4
 8009aca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009acc:	4a0c      	ldr	r2, [pc, #48]	; (8009b00 <pxPortInitialiseStack+0x64>)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	3b14      	subs	r3, #20
 8009ad6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	3b04      	subs	r3, #4
 8009ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f06f 0202 	mvn.w	r2, #2
 8009aea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	3b20      	subs	r3, #32
 8009af0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009af2:	68fb      	ldr	r3, [r7, #12]
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3714      	adds	r7, #20
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr
 8009b00:	08009b05 	.word	0x08009b05

08009b04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009b04:	b480      	push	{r7}
 8009b06:	b085      	sub	sp, #20
 8009b08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009b0e:	4b11      	ldr	r3, [pc, #68]	; (8009b54 <prvTaskExitError+0x50>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b16:	d009      	beq.n	8009b2c <prvTaskExitError+0x28>
 8009b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1c:	f383 8811 	msr	BASEPRI, r3
 8009b20:	f3bf 8f6f 	isb	sy
 8009b24:	f3bf 8f4f 	dsb	sy
 8009b28:	60fb      	str	r3, [r7, #12]
 8009b2a:	e7fe      	b.n	8009b2a <prvTaskExitError+0x26>
 8009b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b30:	f383 8811 	msr	BASEPRI, r3
 8009b34:	f3bf 8f6f 	isb	sy
 8009b38:	f3bf 8f4f 	dsb	sy
 8009b3c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009b3e:	bf00      	nop
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d0fc      	beq.n	8009b40 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009b46:	bf00      	nop
 8009b48:	3714      	adds	r7, #20
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr
 8009b52:	bf00      	nop
 8009b54:	20000014 	.word	0x20000014
	...

08009b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009b60:	4b07      	ldr	r3, [pc, #28]	; (8009b80 <pxCurrentTCBConst2>)
 8009b62:	6819      	ldr	r1, [r3, #0]
 8009b64:	6808      	ldr	r0, [r1, #0]
 8009b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b6a:	f380 8809 	msr	PSP, r0
 8009b6e:	f3bf 8f6f 	isb	sy
 8009b72:	f04f 0000 	mov.w	r0, #0
 8009b76:	f380 8811 	msr	BASEPRI, r0
 8009b7a:	4770      	bx	lr
 8009b7c:	f3af 8000 	nop.w

08009b80 <pxCurrentTCBConst2>:
 8009b80:	20000f40 	.word	0x20000f40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009b84:	bf00      	nop
 8009b86:	bf00      	nop

08009b88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009b88:	4808      	ldr	r0, [pc, #32]	; (8009bac <prvPortStartFirstTask+0x24>)
 8009b8a:	6800      	ldr	r0, [r0, #0]
 8009b8c:	6800      	ldr	r0, [r0, #0]
 8009b8e:	f380 8808 	msr	MSP, r0
 8009b92:	f04f 0000 	mov.w	r0, #0
 8009b96:	f380 8814 	msr	CONTROL, r0
 8009b9a:	b662      	cpsie	i
 8009b9c:	b661      	cpsie	f
 8009b9e:	f3bf 8f4f 	dsb	sy
 8009ba2:	f3bf 8f6f 	isb	sy
 8009ba6:	df00      	svc	0
 8009ba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009baa:	bf00      	nop
 8009bac:	e000ed08 	.word	0xe000ed08

08009bb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b086      	sub	sp, #24
 8009bb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009bb6:	4b44      	ldr	r3, [pc, #272]	; (8009cc8 <xPortStartScheduler+0x118>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a44      	ldr	r2, [pc, #272]	; (8009ccc <xPortStartScheduler+0x11c>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d109      	bne.n	8009bd4 <xPortStartScheduler+0x24>
 8009bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc4:	f383 8811 	msr	BASEPRI, r3
 8009bc8:	f3bf 8f6f 	isb	sy
 8009bcc:	f3bf 8f4f 	dsb	sy
 8009bd0:	613b      	str	r3, [r7, #16]
 8009bd2:	e7fe      	b.n	8009bd2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009bd4:	4b3c      	ldr	r3, [pc, #240]	; (8009cc8 <xPortStartScheduler+0x118>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a3d      	ldr	r2, [pc, #244]	; (8009cd0 <xPortStartScheduler+0x120>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d109      	bne.n	8009bf2 <xPortStartScheduler+0x42>
 8009bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be2:	f383 8811 	msr	BASEPRI, r3
 8009be6:	f3bf 8f6f 	isb	sy
 8009bea:	f3bf 8f4f 	dsb	sy
 8009bee:	60fb      	str	r3, [r7, #12]
 8009bf0:	e7fe      	b.n	8009bf0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009bf2:	4b38      	ldr	r3, [pc, #224]	; (8009cd4 <xPortStartScheduler+0x124>)
 8009bf4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	22ff      	movs	r2, #255	; 0xff
 8009c02:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009c0c:	78fb      	ldrb	r3, [r7, #3]
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009c14:	b2da      	uxtb	r2, r3
 8009c16:	4b30      	ldr	r3, [pc, #192]	; (8009cd8 <xPortStartScheduler+0x128>)
 8009c18:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009c1a:	4b30      	ldr	r3, [pc, #192]	; (8009cdc <xPortStartScheduler+0x12c>)
 8009c1c:	2207      	movs	r2, #7
 8009c1e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c20:	e009      	b.n	8009c36 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009c22:	4b2e      	ldr	r3, [pc, #184]	; (8009cdc <xPortStartScheduler+0x12c>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	3b01      	subs	r3, #1
 8009c28:	4a2c      	ldr	r2, [pc, #176]	; (8009cdc <xPortStartScheduler+0x12c>)
 8009c2a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009c2c:	78fb      	ldrb	r3, [r7, #3]
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	005b      	lsls	r3, r3, #1
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c36:	78fb      	ldrb	r3, [r7, #3]
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c3e:	2b80      	cmp	r3, #128	; 0x80
 8009c40:	d0ef      	beq.n	8009c22 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009c42:	4b26      	ldr	r3, [pc, #152]	; (8009cdc <xPortStartScheduler+0x12c>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f1c3 0307 	rsb	r3, r3, #7
 8009c4a:	2b04      	cmp	r3, #4
 8009c4c:	d009      	beq.n	8009c62 <xPortStartScheduler+0xb2>
 8009c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c52:	f383 8811 	msr	BASEPRI, r3
 8009c56:	f3bf 8f6f 	isb	sy
 8009c5a:	f3bf 8f4f 	dsb	sy
 8009c5e:	60bb      	str	r3, [r7, #8]
 8009c60:	e7fe      	b.n	8009c60 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009c62:	4b1e      	ldr	r3, [pc, #120]	; (8009cdc <xPortStartScheduler+0x12c>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	021b      	lsls	r3, r3, #8
 8009c68:	4a1c      	ldr	r2, [pc, #112]	; (8009cdc <xPortStartScheduler+0x12c>)
 8009c6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009c6c:	4b1b      	ldr	r3, [pc, #108]	; (8009cdc <xPortStartScheduler+0x12c>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c74:	4a19      	ldr	r2, [pc, #100]	; (8009cdc <xPortStartScheduler+0x12c>)
 8009c76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	b2da      	uxtb	r2, r3
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009c80:	4b17      	ldr	r3, [pc, #92]	; (8009ce0 <xPortStartScheduler+0x130>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a16      	ldr	r2, [pc, #88]	; (8009ce0 <xPortStartScheduler+0x130>)
 8009c86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009c8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009c8c:	4b14      	ldr	r3, [pc, #80]	; (8009ce0 <xPortStartScheduler+0x130>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a13      	ldr	r2, [pc, #76]	; (8009ce0 <xPortStartScheduler+0x130>)
 8009c92:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009c96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009c98:	f000 f8d6 	bl	8009e48 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009c9c:	4b11      	ldr	r3, [pc, #68]	; (8009ce4 <xPortStartScheduler+0x134>)
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009ca2:	f000 f8f5 	bl	8009e90 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009ca6:	4b10      	ldr	r3, [pc, #64]	; (8009ce8 <xPortStartScheduler+0x138>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a0f      	ldr	r2, [pc, #60]	; (8009ce8 <xPortStartScheduler+0x138>)
 8009cac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009cb0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009cb2:	f7ff ff69 	bl	8009b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009cb6:	f7fe ff2b 	bl	8008b10 <vTaskSwitchContext>
	prvTaskExitError();
 8009cba:	f7ff ff23 	bl	8009b04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009cbe:	2300      	movs	r3, #0
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3718      	adds	r7, #24
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	e000ed00 	.word	0xe000ed00
 8009ccc:	410fc271 	.word	0x410fc271
 8009cd0:	410fc270 	.word	0x410fc270
 8009cd4:	e000e400 	.word	0xe000e400
 8009cd8:	2000116c 	.word	0x2000116c
 8009cdc:	20001170 	.word	0x20001170
 8009ce0:	e000ed20 	.word	0xe000ed20
 8009ce4:	20000014 	.word	0x20000014
 8009ce8:	e000ef34 	.word	0xe000ef34

08009cec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf6:	f383 8811 	msr	BASEPRI, r3
 8009cfa:	f3bf 8f6f 	isb	sy
 8009cfe:	f3bf 8f4f 	dsb	sy
 8009d02:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009d04:	4b0e      	ldr	r3, [pc, #56]	; (8009d40 <vPortEnterCritical+0x54>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	4a0d      	ldr	r2, [pc, #52]	; (8009d40 <vPortEnterCritical+0x54>)
 8009d0c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009d0e:	4b0c      	ldr	r3, [pc, #48]	; (8009d40 <vPortEnterCritical+0x54>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	d10e      	bne.n	8009d34 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009d16:	4b0b      	ldr	r3, [pc, #44]	; (8009d44 <vPortEnterCritical+0x58>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d009      	beq.n	8009d34 <vPortEnterCritical+0x48>
 8009d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d24:	f383 8811 	msr	BASEPRI, r3
 8009d28:	f3bf 8f6f 	isb	sy
 8009d2c:	f3bf 8f4f 	dsb	sy
 8009d30:	603b      	str	r3, [r7, #0]
 8009d32:	e7fe      	b.n	8009d32 <vPortEnterCritical+0x46>
	}
}
 8009d34:	bf00      	nop
 8009d36:	370c      	adds	r7, #12
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr
 8009d40:	20000014 	.word	0x20000014
 8009d44:	e000ed04 	.word	0xe000ed04

08009d48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009d4e:	4b11      	ldr	r3, [pc, #68]	; (8009d94 <vPortExitCritical+0x4c>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d109      	bne.n	8009d6a <vPortExitCritical+0x22>
 8009d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5a:	f383 8811 	msr	BASEPRI, r3
 8009d5e:	f3bf 8f6f 	isb	sy
 8009d62:	f3bf 8f4f 	dsb	sy
 8009d66:	607b      	str	r3, [r7, #4]
 8009d68:	e7fe      	b.n	8009d68 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009d6a:	4b0a      	ldr	r3, [pc, #40]	; (8009d94 <vPortExitCritical+0x4c>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	4a08      	ldr	r2, [pc, #32]	; (8009d94 <vPortExitCritical+0x4c>)
 8009d72:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009d74:	4b07      	ldr	r3, [pc, #28]	; (8009d94 <vPortExitCritical+0x4c>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d104      	bne.n	8009d86 <vPortExitCritical+0x3e>
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009d86:	bf00      	nop
 8009d88:	370c      	adds	r7, #12
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
 8009d94:	20000014 	.word	0x20000014
	...

08009da0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009da0:	f3ef 8009 	mrs	r0, PSP
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	4b15      	ldr	r3, [pc, #84]	; (8009e00 <pxCurrentTCBConst>)
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	f01e 0f10 	tst.w	lr, #16
 8009db0:	bf08      	it	eq
 8009db2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009db6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dba:	6010      	str	r0, [r2, #0]
 8009dbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009dc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009dc4:	f380 8811 	msr	BASEPRI, r0
 8009dc8:	f3bf 8f4f 	dsb	sy
 8009dcc:	f3bf 8f6f 	isb	sy
 8009dd0:	f7fe fe9e 	bl	8008b10 <vTaskSwitchContext>
 8009dd4:	f04f 0000 	mov.w	r0, #0
 8009dd8:	f380 8811 	msr	BASEPRI, r0
 8009ddc:	bc09      	pop	{r0, r3}
 8009dde:	6819      	ldr	r1, [r3, #0]
 8009de0:	6808      	ldr	r0, [r1, #0]
 8009de2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009de6:	f01e 0f10 	tst.w	lr, #16
 8009dea:	bf08      	it	eq
 8009dec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009df0:	f380 8809 	msr	PSP, r0
 8009df4:	f3bf 8f6f 	isb	sy
 8009df8:	4770      	bx	lr
 8009dfa:	bf00      	nop
 8009dfc:	f3af 8000 	nop.w

08009e00 <pxCurrentTCBConst>:
 8009e00:	20000f40 	.word	0x20000f40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009e04:	bf00      	nop
 8009e06:	bf00      	nop

08009e08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b082      	sub	sp, #8
 8009e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e12:	f383 8811 	msr	BASEPRI, r3
 8009e16:	f3bf 8f6f 	isb	sy
 8009e1a:	f3bf 8f4f 	dsb	sy
 8009e1e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009e20:	f7fe fdbe 	bl	80089a0 <xTaskIncrementTick>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d003      	beq.n	8009e32 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009e2a:	4b06      	ldr	r3, [pc, #24]	; (8009e44 <SysTick_Handler+0x3c>)
 8009e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e30:	601a      	str	r2, [r3, #0]
 8009e32:	2300      	movs	r3, #0
 8009e34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009e3c:	bf00      	nop
 8009e3e:	3708      	adds	r7, #8
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	e000ed04 	.word	0xe000ed04

08009e48 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009e48:	b480      	push	{r7}
 8009e4a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e4c:	4b0b      	ldr	r3, [pc, #44]	; (8009e7c <vPortSetupTimerInterrupt+0x34>)
 8009e4e:	2200      	movs	r2, #0
 8009e50:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009e52:	4b0b      	ldr	r3, [pc, #44]	; (8009e80 <vPortSetupTimerInterrupt+0x38>)
 8009e54:	2200      	movs	r2, #0
 8009e56:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e58:	4b0a      	ldr	r3, [pc, #40]	; (8009e84 <vPortSetupTimerInterrupt+0x3c>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a0a      	ldr	r2, [pc, #40]	; (8009e88 <vPortSetupTimerInterrupt+0x40>)
 8009e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8009e62:	099b      	lsrs	r3, r3, #6
 8009e64:	4a09      	ldr	r2, [pc, #36]	; (8009e8c <vPortSetupTimerInterrupt+0x44>)
 8009e66:	3b01      	subs	r3, #1
 8009e68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e6a:	4b04      	ldr	r3, [pc, #16]	; (8009e7c <vPortSetupTimerInterrupt+0x34>)
 8009e6c:	2207      	movs	r2, #7
 8009e6e:	601a      	str	r2, [r3, #0]
}
 8009e70:	bf00      	nop
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr
 8009e7a:	bf00      	nop
 8009e7c:	e000e010 	.word	0xe000e010
 8009e80:	e000e018 	.word	0xe000e018
 8009e84:	20000008 	.word	0x20000008
 8009e88:	10624dd3 	.word	0x10624dd3
 8009e8c:	e000e014 	.word	0xe000e014

08009e90 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009e90:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009ea0 <vPortEnableVFP+0x10>
 8009e94:	6801      	ldr	r1, [r0, #0]
 8009e96:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009e9a:	6001      	str	r1, [r0, #0]
 8009e9c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009e9e:	bf00      	nop
 8009ea0:	e000ed88 	.word	0xe000ed88

08009ea4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009eaa:	f3ef 8305 	mrs	r3, IPSR
 8009eae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2b0f      	cmp	r3, #15
 8009eb4:	d913      	bls.n	8009ede <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009eb6:	4a16      	ldr	r2, [pc, #88]	; (8009f10 <vPortValidateInterruptPriority+0x6c>)
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	4413      	add	r3, r2
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009ec0:	4b14      	ldr	r3, [pc, #80]	; (8009f14 <vPortValidateInterruptPriority+0x70>)
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	7afa      	ldrb	r2, [r7, #11]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d209      	bcs.n	8009ede <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ece:	f383 8811 	msr	BASEPRI, r3
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	607b      	str	r3, [r7, #4]
 8009edc:	e7fe      	b.n	8009edc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009ede:	4b0e      	ldr	r3, [pc, #56]	; (8009f18 <vPortValidateInterruptPriority+0x74>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009ee6:	4b0d      	ldr	r3, [pc, #52]	; (8009f1c <vPortValidateInterruptPriority+0x78>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d909      	bls.n	8009f02 <vPortValidateInterruptPriority+0x5e>
 8009eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef2:	f383 8811 	msr	BASEPRI, r3
 8009ef6:	f3bf 8f6f 	isb	sy
 8009efa:	f3bf 8f4f 	dsb	sy
 8009efe:	603b      	str	r3, [r7, #0]
 8009f00:	e7fe      	b.n	8009f00 <vPortValidateInterruptPriority+0x5c>
	}
 8009f02:	bf00      	nop
 8009f04:	3714      	adds	r7, #20
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr
 8009f0e:	bf00      	nop
 8009f10:	e000e3f0 	.word	0xe000e3f0
 8009f14:	2000116c 	.word	0x2000116c
 8009f18:	e000ed0c 	.word	0xe000ed0c
 8009f1c:	20001170 	.word	0x20001170

08009f20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b08a      	sub	sp, #40	; 0x28
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009f2c:	f7fe fc7e 	bl	800882c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009f30:	4b57      	ldr	r3, [pc, #348]	; (800a090 <pvPortMalloc+0x170>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d101      	bne.n	8009f3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009f38:	f000 f90c 	bl	800a154 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009f3c:	4b55      	ldr	r3, [pc, #340]	; (800a094 <pvPortMalloc+0x174>)
 8009f3e:	681a      	ldr	r2, [r3, #0]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	4013      	ands	r3, r2
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	f040 808c 	bne.w	800a062 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d01c      	beq.n	8009f8a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009f50:	2208      	movs	r2, #8
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4413      	add	r3, r2
 8009f56:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f003 0307 	and.w	r3, r3, #7
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d013      	beq.n	8009f8a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f023 0307 	bic.w	r3, r3, #7
 8009f68:	3308      	adds	r3, #8
 8009f6a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f003 0307 	and.w	r3, r3, #7
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d009      	beq.n	8009f8a <pvPortMalloc+0x6a>
 8009f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7a:	f383 8811 	msr	BASEPRI, r3
 8009f7e:	f3bf 8f6f 	isb	sy
 8009f82:	f3bf 8f4f 	dsb	sy
 8009f86:	617b      	str	r3, [r7, #20]
 8009f88:	e7fe      	b.n	8009f88 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d068      	beq.n	800a062 <pvPortMalloc+0x142>
 8009f90:	4b41      	ldr	r3, [pc, #260]	; (800a098 <pvPortMalloc+0x178>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d863      	bhi.n	800a062 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009f9a:	4b40      	ldr	r3, [pc, #256]	; (800a09c <pvPortMalloc+0x17c>)
 8009f9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009f9e:	4b3f      	ldr	r3, [pc, #252]	; (800a09c <pvPortMalloc+0x17c>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009fa4:	e004      	b.n	8009fb0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d903      	bls.n	8009fc2 <pvPortMalloc+0xa2>
 8009fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d1f1      	bne.n	8009fa6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009fc2:	4b33      	ldr	r3, [pc, #204]	; (800a090 <pvPortMalloc+0x170>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d04a      	beq.n	800a062 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009fcc:	6a3b      	ldr	r3, [r7, #32]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	2208      	movs	r2, #8
 8009fd2:	4413      	add	r3, r2
 8009fd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	6a3b      	ldr	r3, [r7, #32]
 8009fdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe0:	685a      	ldr	r2, [r3, #4]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	1ad2      	subs	r2, r2, r3
 8009fe6:	2308      	movs	r3, #8
 8009fe8:	005b      	lsls	r3, r3, #1
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d91e      	bls.n	800a02c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	f003 0307 	and.w	r3, r3, #7
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d009      	beq.n	800a014 <pvPortMalloc+0xf4>
 800a000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a004:	f383 8811 	msr	BASEPRI, r3
 800a008:	f3bf 8f6f 	isb	sy
 800a00c:	f3bf 8f4f 	dsb	sy
 800a010:	613b      	str	r3, [r7, #16]
 800a012:	e7fe      	b.n	800a012 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a016:	685a      	ldr	r2, [r3, #4]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	1ad2      	subs	r2, r2, r3
 800a01c:	69bb      	ldr	r3, [r7, #24]
 800a01e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a026:	69b8      	ldr	r0, [r7, #24]
 800a028:	f000 f8f6 	bl	800a218 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a02c:	4b1a      	ldr	r3, [pc, #104]	; (800a098 <pvPortMalloc+0x178>)
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	1ad3      	subs	r3, r2, r3
 800a036:	4a18      	ldr	r2, [pc, #96]	; (800a098 <pvPortMalloc+0x178>)
 800a038:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a03a:	4b17      	ldr	r3, [pc, #92]	; (800a098 <pvPortMalloc+0x178>)
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	4b18      	ldr	r3, [pc, #96]	; (800a0a0 <pvPortMalloc+0x180>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	429a      	cmp	r2, r3
 800a044:	d203      	bcs.n	800a04e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a046:	4b14      	ldr	r3, [pc, #80]	; (800a098 <pvPortMalloc+0x178>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a15      	ldr	r2, [pc, #84]	; (800a0a0 <pvPortMalloc+0x180>)
 800a04c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a050:	685a      	ldr	r2, [r3, #4]
 800a052:	4b10      	ldr	r3, [pc, #64]	; (800a094 <pvPortMalloc+0x174>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	431a      	orrs	r2, r3
 800a058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05e:	2200      	movs	r2, #0
 800a060:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a062:	f7fe fbf1 	bl	8008848 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a066:	69fb      	ldr	r3, [r7, #28]
 800a068:	f003 0307 	and.w	r3, r3, #7
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d009      	beq.n	800a084 <pvPortMalloc+0x164>
 800a070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	60fb      	str	r3, [r7, #12]
 800a082:	e7fe      	b.n	800a082 <pvPortMalloc+0x162>
	return pvReturn;
 800a084:	69fb      	ldr	r3, [r7, #28]
}
 800a086:	4618      	mov	r0, r3
 800a088:	3728      	adds	r7, #40	; 0x28
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	2000d4cc 	.word	0x2000d4cc
 800a094:	2000d4d8 	.word	0x2000d4d8
 800a098:	2000d4d0 	.word	0x2000d4d0
 800a09c:	2000d4c4 	.word	0x2000d4c4
 800a0a0:	2000d4d4 	.word	0x2000d4d4

0800a0a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b086      	sub	sp, #24
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d046      	beq.n	800a144 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a0b6:	2308      	movs	r3, #8
 800a0b8:	425b      	negs	r3, r3
 800a0ba:	697a      	ldr	r2, [r7, #20]
 800a0bc:	4413      	add	r3, r2
 800a0be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	685a      	ldr	r2, [r3, #4]
 800a0c8:	4b20      	ldr	r3, [pc, #128]	; (800a14c <vPortFree+0xa8>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4013      	ands	r3, r2
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d109      	bne.n	800a0e6 <vPortFree+0x42>
 800a0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d6:	f383 8811 	msr	BASEPRI, r3
 800a0da:	f3bf 8f6f 	isb	sy
 800a0de:	f3bf 8f4f 	dsb	sy
 800a0e2:	60fb      	str	r3, [r7, #12]
 800a0e4:	e7fe      	b.n	800a0e4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d009      	beq.n	800a102 <vPortFree+0x5e>
 800a0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f2:	f383 8811 	msr	BASEPRI, r3
 800a0f6:	f3bf 8f6f 	isb	sy
 800a0fa:	f3bf 8f4f 	dsb	sy
 800a0fe:	60bb      	str	r3, [r7, #8]
 800a100:	e7fe      	b.n	800a100 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	685a      	ldr	r2, [r3, #4]
 800a106:	4b11      	ldr	r3, [pc, #68]	; (800a14c <vPortFree+0xa8>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4013      	ands	r3, r2
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d019      	beq.n	800a144 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d115      	bne.n	800a144 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	685a      	ldr	r2, [r3, #4]
 800a11c:	4b0b      	ldr	r3, [pc, #44]	; (800a14c <vPortFree+0xa8>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	43db      	mvns	r3, r3
 800a122:	401a      	ands	r2, r3
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a128:	f7fe fb80 	bl	800882c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	685a      	ldr	r2, [r3, #4]
 800a130:	4b07      	ldr	r3, [pc, #28]	; (800a150 <vPortFree+0xac>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4413      	add	r3, r2
 800a136:	4a06      	ldr	r2, [pc, #24]	; (800a150 <vPortFree+0xac>)
 800a138:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a13a:	6938      	ldr	r0, [r7, #16]
 800a13c:	f000 f86c 	bl	800a218 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a140:	f7fe fb82 	bl	8008848 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a144:	bf00      	nop
 800a146:	3718      	adds	r7, #24
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	2000d4d8 	.word	0x2000d4d8
 800a150:	2000d4d0 	.word	0x2000d4d0

0800a154 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a154:	b480      	push	{r7}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a15a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a15e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a160:	4b27      	ldr	r3, [pc, #156]	; (800a200 <prvHeapInit+0xac>)
 800a162:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f003 0307 	and.w	r3, r3, #7
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00c      	beq.n	800a188 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	3307      	adds	r3, #7
 800a172:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f023 0307 	bic.w	r3, r3, #7
 800a17a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a17c:	68ba      	ldr	r2, [r7, #8]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	4a1f      	ldr	r2, [pc, #124]	; (800a200 <prvHeapInit+0xac>)
 800a184:	4413      	add	r3, r2
 800a186:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a18c:	4a1d      	ldr	r2, [pc, #116]	; (800a204 <prvHeapInit+0xb0>)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a192:	4b1c      	ldr	r3, [pc, #112]	; (800a204 <prvHeapInit+0xb0>)
 800a194:	2200      	movs	r2, #0
 800a196:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	68ba      	ldr	r2, [r7, #8]
 800a19c:	4413      	add	r3, r2
 800a19e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a1a0:	2208      	movs	r2, #8
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	1a9b      	subs	r3, r3, r2
 800a1a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f023 0307 	bic.w	r3, r3, #7
 800a1ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	4a15      	ldr	r2, [pc, #84]	; (800a208 <prvHeapInit+0xb4>)
 800a1b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a1b6:	4b14      	ldr	r3, [pc, #80]	; (800a208 <prvHeapInit+0xb4>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a1be:	4b12      	ldr	r3, [pc, #72]	; (800a208 <prvHeapInit+0xb4>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	1ad2      	subs	r2, r2, r3
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a1d4:	4b0c      	ldr	r3, [pc, #48]	; (800a208 <prvHeapInit+0xb4>)
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	4a0a      	ldr	r2, [pc, #40]	; (800a20c <prvHeapInit+0xb8>)
 800a1e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	4a09      	ldr	r2, [pc, #36]	; (800a210 <prvHeapInit+0xbc>)
 800a1ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a1ec:	4b09      	ldr	r3, [pc, #36]	; (800a214 <prvHeapInit+0xc0>)
 800a1ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a1f2:	601a      	str	r2, [r3, #0]
}
 800a1f4:	bf00      	nop
 800a1f6:	3714      	adds	r7, #20
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr
 800a200:	20001174 	.word	0x20001174
 800a204:	2000d4c4 	.word	0x2000d4c4
 800a208:	2000d4cc 	.word	0x2000d4cc
 800a20c:	2000d4d4 	.word	0x2000d4d4
 800a210:	2000d4d0 	.word	0x2000d4d0
 800a214:	2000d4d8 	.word	0x2000d4d8

0800a218 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a218:	b480      	push	{r7}
 800a21a:	b085      	sub	sp, #20
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a220:	4b28      	ldr	r3, [pc, #160]	; (800a2c4 <prvInsertBlockIntoFreeList+0xac>)
 800a222:	60fb      	str	r3, [r7, #12]
 800a224:	e002      	b.n	800a22c <prvInsertBlockIntoFreeList+0x14>
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	60fb      	str	r3, [r7, #12]
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	429a      	cmp	r2, r3
 800a234:	d8f7      	bhi.n	800a226 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	68ba      	ldr	r2, [r7, #8]
 800a240:	4413      	add	r3, r2
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	429a      	cmp	r2, r3
 800a246:	d108      	bne.n	800a25a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	685a      	ldr	r2, [r3, #4]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	441a      	add	r2, r3
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	68ba      	ldr	r2, [r7, #8]
 800a264:	441a      	add	r2, r3
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d118      	bne.n	800a2a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	4b15      	ldr	r3, [pc, #84]	; (800a2c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	429a      	cmp	r2, r3
 800a278:	d00d      	beq.n	800a296 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	685a      	ldr	r2, [r3, #4]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	441a      	add	r2, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	601a      	str	r2, [r3, #0]
 800a294:	e008      	b.n	800a2a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a296:	4b0c      	ldr	r3, [pc, #48]	; (800a2c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	601a      	str	r2, [r3, #0]
 800a29e:	e003      	b.n	800a2a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a2a8:	68fa      	ldr	r2, [r7, #12]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d002      	beq.n	800a2b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2b6:	bf00      	nop
 800a2b8:	3714      	adds	r7, #20
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop
 800a2c4:	2000d4c4 	.word	0x2000d4c4
 800a2c8:	2000d4cc 	.word	0x2000d4cc

0800a2cc <adc_interface_init>:

static ADC_HandleTypeDef m1;
static ADC_HandleTypeDef m2;

void adc_interface_init(ADC_HandleTypeDef ch1, ADC_HandleTypeDef ch2)
{
 800a2cc:	b084      	sub	sp, #16
 800a2ce:	b580      	push	{r7, lr}
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	f107 0c08 	add.w	ip, r7, #8
 800a2d6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	m1 = ch1;
 800a2da:	4b0e      	ldr	r3, [pc, #56]	; (800a314 <adc_interface_init+0x48>)
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f107 0108 	add.w	r1, r7, #8
 800a2e2:	2348      	movs	r3, #72	; 0x48
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	f002 f9b7 	bl	800c658 <memcpy>
	m2 = ch2;
 800a2ea:	4b0b      	ldr	r3, [pc, #44]	; (800a318 <adc_interface_init+0x4c>)
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a2f2:	2248      	movs	r2, #72	; 0x48
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	f002 f9af 	bl	800c658 <memcpy>
	HAL_ADC_Start(&m1);
 800a2fa:	4806      	ldr	r0, [pc, #24]	; (800a314 <adc_interface_init+0x48>)
 800a2fc:	f7f9 fdc2 	bl	8003e84 <HAL_ADC_Start>
	HAL_ADC_Start(&m2);
 800a300:	4805      	ldr	r0, [pc, #20]	; (800a318 <adc_interface_init+0x4c>)
 800a302:	f7f9 fdbf 	bl	8003e84 <HAL_ADC_Start>
}
 800a306:	bf00      	nop
 800a308:	46bd      	mov	sp, r7
 800a30a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a30e:	b004      	add	sp, #16
 800a310:	4770      	bx	lr
 800a312:	bf00      	nop
 800a314:	2000d4dc 	.word	0x2000d4dc
 800a318:	2000d524 	.word	0x2000d524
 800a31c:	00000000 	.word	0x00000000

0800a320 <get_motor_current_ma>:

uint32_t get_motor_current_ma(uint8_t channel)
{
 800a320:	b590      	push	{r4, r7, lr}
 800a322:	b087      	sub	sp, #28
 800a324:	af00      	add	r7, sp, #0
 800a326:	4603      	mov	r3, r0
 800a328:	71fb      	strb	r3, [r7, #7]
	if(channel == 0)
 800a32a:	79fb      	ldrb	r3, [r7, #7]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d13c      	bne.n	800a3aa <get_motor_current_ma+0x8a>
	{
		HAL_ADC_PollForConversion(&m1, 5);
 800a330:	2105      	movs	r1, #5
 800a332:	4845      	ldr	r0, [pc, #276]	; (800a448 <get_motor_current_ma+0x128>)
 800a334:	f7f9 fe6c 	bl	8004010 <HAL_ADC_PollForConversion>
		uint16_t raw = HAL_ADC_GetValue(&m1);
 800a338:	4843      	ldr	r0, [pc, #268]	; (800a448 <get_motor_current_ma+0x128>)
 800a33a:	f7fa f82e 	bl	800439a <HAL_ADC_GetValue>
 800a33e:	4603      	mov	r3, r0
 800a340:	81fb      	strh	r3, [r7, #14]
		uint32_t current_ma = (uint32_t) (((raw / 4095.0) * 3.0)/2.15) * 1000.0;
 800a342:	89fb      	ldrh	r3, [r7, #14]
 800a344:	4618      	mov	r0, r3
 800a346:	f7f6 f895 	bl	8000474 <__aeabi_i2d>
 800a34a:	a33b      	add	r3, pc, #236	; (adr r3, 800a438 <get_motor_current_ma+0x118>)
 800a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a350:	f7f6 fa24 	bl	800079c <__aeabi_ddiv>
 800a354:	4603      	mov	r3, r0
 800a356:	460c      	mov	r4, r1
 800a358:	4618      	mov	r0, r3
 800a35a:	4621      	mov	r1, r4
 800a35c:	f04f 0200 	mov.w	r2, #0
 800a360:	4b3a      	ldr	r3, [pc, #232]	; (800a44c <get_motor_current_ma+0x12c>)
 800a362:	f7f6 f8f1 	bl	8000548 <__aeabi_dmul>
 800a366:	4603      	mov	r3, r0
 800a368:	460c      	mov	r4, r1
 800a36a:	4618      	mov	r0, r3
 800a36c:	4621      	mov	r1, r4
 800a36e:	a334      	add	r3, pc, #208	; (adr r3, 800a440 <get_motor_current_ma+0x120>)
 800a370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a374:	f7f6 fa12 	bl	800079c <__aeabi_ddiv>
 800a378:	4603      	mov	r3, r0
 800a37a:	460c      	mov	r4, r1
 800a37c:	4618      	mov	r0, r3
 800a37e:	4621      	mov	r1, r4
 800a380:	f7f6 fbba 	bl	8000af8 <__aeabi_d2uiz>
 800a384:	4603      	mov	r3, r0
 800a386:	4618      	mov	r0, r3
 800a388:	f7f6 f864 	bl	8000454 <__aeabi_ui2d>
 800a38c:	f04f 0200 	mov.w	r2, #0
 800a390:	4b2f      	ldr	r3, [pc, #188]	; (800a450 <get_motor_current_ma+0x130>)
 800a392:	f7f6 f8d9 	bl	8000548 <__aeabi_dmul>
 800a396:	4603      	mov	r3, r0
 800a398:	460c      	mov	r4, r1
 800a39a:	4618      	mov	r0, r3
 800a39c:	4621      	mov	r1, r4
 800a39e:	f7f6 fbab 	bl	8000af8 <__aeabi_d2uiz>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	60bb      	str	r3, [r7, #8]
		return current_ma;
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	e040      	b.n	800a42c <get_motor_current_ma+0x10c>
	}
	else if(channel == 1)
 800a3aa:	79fb      	ldrb	r3, [r7, #7]
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d13c      	bne.n	800a42a <get_motor_current_ma+0x10a>
	{
		HAL_ADC_PollForConversion(&m2, 5);
 800a3b0:	2105      	movs	r1, #5
 800a3b2:	4828      	ldr	r0, [pc, #160]	; (800a454 <get_motor_current_ma+0x134>)
 800a3b4:	f7f9 fe2c 	bl	8004010 <HAL_ADC_PollForConversion>
		uint16_t raw = HAL_ADC_GetValue(&m2);
 800a3b8:	4826      	ldr	r0, [pc, #152]	; (800a454 <get_motor_current_ma+0x134>)
 800a3ba:	f7f9 ffee 	bl	800439a <HAL_ADC_GetValue>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	82fb      	strh	r3, [r7, #22]
		uint32_t current_ma = (uint32_t) (((raw / 4095.0) * 3.0)/2.15) * 1000.0;
 800a3c2:	8afb      	ldrh	r3, [r7, #22]
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7f6 f855 	bl	8000474 <__aeabi_i2d>
 800a3ca:	a31b      	add	r3, pc, #108	; (adr r3, 800a438 <get_motor_current_ma+0x118>)
 800a3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d0:	f7f6 f9e4 	bl	800079c <__aeabi_ddiv>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	460c      	mov	r4, r1
 800a3d8:	4618      	mov	r0, r3
 800a3da:	4621      	mov	r1, r4
 800a3dc:	f04f 0200 	mov.w	r2, #0
 800a3e0:	4b1a      	ldr	r3, [pc, #104]	; (800a44c <get_motor_current_ma+0x12c>)
 800a3e2:	f7f6 f8b1 	bl	8000548 <__aeabi_dmul>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	460c      	mov	r4, r1
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	4621      	mov	r1, r4
 800a3ee:	a314      	add	r3, pc, #80	; (adr r3, 800a440 <get_motor_current_ma+0x120>)
 800a3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f4:	f7f6 f9d2 	bl	800079c <__aeabi_ddiv>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	460c      	mov	r4, r1
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	4621      	mov	r1, r4
 800a400:	f7f6 fb7a 	bl	8000af8 <__aeabi_d2uiz>
 800a404:	4603      	mov	r3, r0
 800a406:	4618      	mov	r0, r3
 800a408:	f7f6 f824 	bl	8000454 <__aeabi_ui2d>
 800a40c:	f04f 0200 	mov.w	r2, #0
 800a410:	4b0f      	ldr	r3, [pc, #60]	; (800a450 <get_motor_current_ma+0x130>)
 800a412:	f7f6 f899 	bl	8000548 <__aeabi_dmul>
 800a416:	4603      	mov	r3, r0
 800a418:	460c      	mov	r4, r1
 800a41a:	4618      	mov	r0, r3
 800a41c:	4621      	mov	r1, r4
 800a41e:	f7f6 fb6b 	bl	8000af8 <__aeabi_d2uiz>
 800a422:	4603      	mov	r3, r0
 800a424:	613b      	str	r3, [r7, #16]
		return current_ma;
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	e000      	b.n	800a42c <get_motor_current_ma+0x10c>
	}
	else
	{
		return 0;
 800a42a:	2300      	movs	r3, #0
	}
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	371c      	adds	r7, #28
 800a430:	46bd      	mov	sp, r7
 800a432:	bd90      	pop	{r4, r7, pc}
 800a434:	f3af 8000 	nop.w
 800a438:	00000000 	.word	0x00000000
 800a43c:	40affe00 	.word	0x40affe00
 800a440:	33333333 	.word	0x33333333
 800a444:	40013333 	.word	0x40013333
 800a448:	2000d4dc 	.word	0x2000d4dc
 800a44c:	40080000 	.word	0x40080000
 800a450:	408f4000 	.word	0x408f4000
 800a454:	2000d524 	.word	0x2000d524

0800a458 <unpack_can_message>:
 */

#include "can_messages.h"

 void unpack_can_message(can_message_id_t * msg)
 {
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
	msg->can_msg_type = ((msg->raw_id & CAN_MSG_TYPE_MASK) >> CAN_MSG_TYPE_SHIFT);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	0a9b      	lsrs	r3, r3, #10
 800a466:	f003 0201 	and.w	r2, r3, #1
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	605a      	str	r2, [r3, #4]
	msg->can_class = ((msg->raw_id & CAN_MSG_CLASS_MASK) >> CAN_MSG_CLASS_SHIFT);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	09db      	lsrs	r3, r3, #7
 800a474:	f003 0207 	and.w	r2, r3, #7
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	609a      	str	r2, [r3, #8]
	msg->can_index = ((msg->raw_id & CAN_MSG_INDEX_MASK) >> CAN_MSG_INDEX_SHIFT);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	091b      	lsrs	r3, r3, #4
 800a482:	f003 0207 	and.w	r2, r3, #7
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	60da      	str	r2, [r3, #12]
	msg->can_device = ((msg->raw_id & CAN_MSG_DEVICE_MASK) >> CAN_MSG_DEVICE_SHIFT);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f003 020f 	and.w	r2, r3, #15
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	611a      	str	r2, [r3, #16]
 }
 800a496:	bf00      	nop
 800a498:	370c      	adds	r7, #12
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr

0800a4a2 <pack_can_message>:

 void pack_can_message(can_message_id_t * msg)
 {
 800a4a2:	b480      	push	{r7}
 800a4a4:	b083      	sub	sp, #12
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
	msg->raw_id = ((msg->can_msg_type << CAN_MSG_TYPE_SHIFT) & CAN_MSG_TYPE_MASK);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	029b      	lsls	r3, r3, #10
 800a4b0:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	601a      	str	r2, [r3, #0]
	msg->raw_id |= ((msg->can_class << CAN_MSG_CLASS_SHIFT) & CAN_MSG_CLASS_MASK);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	01db      	lsls	r3, r3, #7
 800a4c2:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800a4c6:	431a      	orrs	r2, r3
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	601a      	str	r2, [r3, #0]
	msg->raw_id |= ((msg->can_index << CAN_MSG_INDEX_SHIFT) & CAN_MSG_INDEX_MASK);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	011b      	lsls	r3, r3, #4
 800a4d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a4da:	431a      	orrs	r2, r3
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	601a      	str	r2, [r3, #0]
	msg->raw_id |= ((msg->can_device << CAN_MSG_DEVICE_SHIFT) & CAN_MSG_DEVICE_MASK);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681a      	ldr	r2, [r3, #0]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	691b      	ldr	r3, [r3, #16]
 800a4e8:	f003 030f 	and.w	r3, r3, #15
 800a4ec:	431a      	orrs	r2, r3
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	601a      	str	r2, [r3, #0]
 }
 800a4f2:	bf00      	nop
 800a4f4:	370c      	adds	r7, #12
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
	...

0800a500 <get_motor_encoder_ticks>:
 static volatile int32_t ticks_offset[NUMBER_MOTORS] = {0};
 static volatile int32_t ticks_count[NUMBER_MOTORS] = {0};
 static volatile uint16_t last_cnt[NUMBER_MOTORS] = {0};

 int32_t get_motor_encoder_ticks(uint8_t channel)
 {
 800a500:	b480      	push	{r7}
 800a502:	b085      	sub	sp, #20
 800a504:	af00      	add	r7, sp, #0
 800a506:	4603      	mov	r3, r0
 800a508:	71fb      	strb	r3, [r7, #7]
	 if(channel == 0)
 800a50a:	79fb      	ldrb	r3, [r7, #7]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d143      	bne.n	800a598 <get_motor_encoder_ticks+0x98>
	 {
		 uint16_t current_count =  TIM1->CNT;
 800a510:	4b4c      	ldr	r3, [pc, #304]	; (800a644 <get_motor_encoder_ticks+0x144>)
 800a512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a514:	81bb      	strh	r3, [r7, #12]
		 // Check for rollover
		 if(current_count < 5000 && last_cnt[channel] > 60000)
 800a516:	89bb      	ldrh	r3, [r7, #12]
 800a518:	f241 3287 	movw	r2, #4999	; 0x1387
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d813      	bhi.n	800a548 <get_motor_encoder_ticks+0x48>
 800a520:	79fb      	ldrb	r3, [r7, #7]
 800a522:	4a49      	ldr	r2, [pc, #292]	; (800a648 <get_motor_encoder_ticks+0x148>)
 800a524:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a528:	b29b      	uxth	r3, r3
 800a52a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800a52e:	4293      	cmp	r3, r2
 800a530:	d90a      	bls.n	800a548 <get_motor_encoder_ticks+0x48>
		 {
			 // Overflow
			 ticks_offset[channel] += 65536;
 800a532:	79fb      	ldrb	r3, [r7, #7]
 800a534:	4a45      	ldr	r2, [pc, #276]	; (800a64c <get_motor_encoder_ticks+0x14c>)
 800a536:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a53a:	79fb      	ldrb	r3, [r7, #7]
 800a53c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800a540:	4942      	ldr	r1, [pc, #264]	; (800a64c <get_motor_encoder_ticks+0x14c>)
 800a542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a546:	e017      	b.n	800a578 <get_motor_encoder_ticks+0x78>
		 }
		 else if(current_count > 60000 && last_cnt[channel] < 5000)
 800a548:	89bb      	ldrh	r3, [r7, #12]
 800a54a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800a54e:	4293      	cmp	r3, r2
 800a550:	d912      	bls.n	800a578 <get_motor_encoder_ticks+0x78>
 800a552:	79fb      	ldrb	r3, [r7, #7]
 800a554:	4a3c      	ldr	r2, [pc, #240]	; (800a648 <get_motor_encoder_ticks+0x148>)
 800a556:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	f241 3287 	movw	r2, #4999	; 0x1387
 800a560:	4293      	cmp	r3, r2
 800a562:	d809      	bhi.n	800a578 <get_motor_encoder_ticks+0x78>
		 {
			 // Underflow
			 ticks_offset[channel] -= 65536;
 800a564:	79fb      	ldrb	r3, [r7, #7]
 800a566:	4a39      	ldr	r2, [pc, #228]	; (800a64c <get_motor_encoder_ticks+0x14c>)
 800a568:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a56c:	79fb      	ldrb	r3, [r7, #7]
 800a56e:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 800a572:	4936      	ldr	r1, [pc, #216]	; (800a64c <get_motor_encoder_ticks+0x14c>)
 800a574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		 }

		 last_cnt[channel] = current_count;
 800a578:	79fb      	ldrb	r3, [r7, #7]
 800a57a:	4933      	ldr	r1, [pc, #204]	; (800a648 <get_motor_encoder_ticks+0x148>)
 800a57c:	89ba      	ldrh	r2, [r7, #12]
 800a57e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		 ticks_count[channel] = current_count + ticks_offset[channel];
 800a582:	89b9      	ldrh	r1, [r7, #12]
 800a584:	79fb      	ldrb	r3, [r7, #7]
 800a586:	4a31      	ldr	r2, [pc, #196]	; (800a64c <get_motor_encoder_ticks+0x14c>)
 800a588:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a58c:	79fb      	ldrb	r3, [r7, #7]
 800a58e:	440a      	add	r2, r1
 800a590:	492f      	ldr	r1, [pc, #188]	; (800a650 <get_motor_encoder_ticks+0x150>)
 800a592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a596:	e04b      	b.n	800a630 <get_motor_encoder_ticks+0x130>
	 }
	 else if(channel == 1)
 800a598:	79fb      	ldrb	r3, [r7, #7]
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d143      	bne.n	800a626 <get_motor_encoder_ticks+0x126>
	 {
		 uint16_t current_count =  TIM3->CNT;
 800a59e:	4b2d      	ldr	r3, [pc, #180]	; (800a654 <get_motor_encoder_ticks+0x154>)
 800a5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a2:	81fb      	strh	r3, [r7, #14]
		 // Check for rollover
		 if(current_count < 5000 && last_cnt[channel] > 60000)
 800a5a4:	89fb      	ldrh	r3, [r7, #14]
 800a5a6:	f241 3287 	movw	r2, #4999	; 0x1387
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d813      	bhi.n	800a5d6 <get_motor_encoder_ticks+0xd6>
 800a5ae:	79fb      	ldrb	r3, [r7, #7]
 800a5b0:	4a25      	ldr	r2, [pc, #148]	; (800a648 <get_motor_encoder_ticks+0x148>)
 800a5b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	f64e 2260 	movw	r2, #60000	; 0xea60
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d90a      	bls.n	800a5d6 <get_motor_encoder_ticks+0xd6>
		 {
			 // Overflow
			 ticks_offset[channel] += 65536;
 800a5c0:	79fb      	ldrb	r3, [r7, #7]
 800a5c2:	4a22      	ldr	r2, [pc, #136]	; (800a64c <get_motor_encoder_ticks+0x14c>)
 800a5c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a5c8:	79fb      	ldrb	r3, [r7, #7]
 800a5ca:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800a5ce:	491f      	ldr	r1, [pc, #124]	; (800a64c <get_motor_encoder_ticks+0x14c>)
 800a5d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a5d4:	e017      	b.n	800a606 <get_motor_encoder_ticks+0x106>
		 }
		 else if(current_count > 60000 && last_cnt[channel] < 5000)
 800a5d6:	89fb      	ldrh	r3, [r7, #14]
 800a5d8:	f64e 2260 	movw	r2, #60000	; 0xea60
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d912      	bls.n	800a606 <get_motor_encoder_ticks+0x106>
 800a5e0:	79fb      	ldrb	r3, [r7, #7]
 800a5e2:	4a19      	ldr	r2, [pc, #100]	; (800a648 <get_motor_encoder_ticks+0x148>)
 800a5e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	f241 3287 	movw	r2, #4999	; 0x1387
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d809      	bhi.n	800a606 <get_motor_encoder_ticks+0x106>
		 {
			 // Underflow
			 ticks_offset[channel] -= 65536;
 800a5f2:	79fb      	ldrb	r3, [r7, #7]
 800a5f4:	4a15      	ldr	r2, [pc, #84]	; (800a64c <get_motor_encoder_ticks+0x14c>)
 800a5f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a5fa:	79fb      	ldrb	r3, [r7, #7]
 800a5fc:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 800a600:	4912      	ldr	r1, [pc, #72]	; (800a64c <get_motor_encoder_ticks+0x14c>)
 800a602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		 }

		 last_cnt[channel] = current_count;
 800a606:	79fb      	ldrb	r3, [r7, #7]
 800a608:	490f      	ldr	r1, [pc, #60]	; (800a648 <get_motor_encoder_ticks+0x148>)
 800a60a:	89fa      	ldrh	r2, [r7, #14]
 800a60c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		 ticks_count[channel] = current_count + ticks_offset[channel];
 800a610:	89f9      	ldrh	r1, [r7, #14]
 800a612:	79fb      	ldrb	r3, [r7, #7]
 800a614:	4a0d      	ldr	r2, [pc, #52]	; (800a64c <get_motor_encoder_ticks+0x14c>)
 800a616:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a61a:	79fb      	ldrb	r3, [r7, #7]
 800a61c:	440a      	add	r2, r1
 800a61e:	490c      	ldr	r1, [pc, #48]	; (800a650 <get_motor_encoder_ticks+0x150>)
 800a620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a624:	e004      	b.n	800a630 <get_motor_encoder_ticks+0x130>
	 }
	 else if(channel >= NUMBER_MOTORS)
 800a626:	79fb      	ldrb	r3, [r7, #7]
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d901      	bls.n	800a630 <get_motor_encoder_ticks+0x130>
	 {
		return 0;
 800a62c:	2300      	movs	r3, #0
 800a62e:	e003      	b.n	800a638 <get_motor_encoder_ticks+0x138>
	 }
	 return ticks_count[channel];
 800a630:	79fb      	ldrb	r3, [r7, #7]
 800a632:	4a07      	ldr	r2, [pc, #28]	; (800a650 <get_motor_encoder_ticks+0x150>)
 800a634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 }
 800a638:	4618      	mov	r0, r3
 800a63a:	3714      	adds	r7, #20
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr
 800a644:	40010000 	.word	0x40010000
 800a648:	2000d57c 	.word	0x2000d57c
 800a64c:	2000d56c 	.word	0x2000d56c
 800a650:	2000d574 	.word	0x2000d574
 800a654:	40000400 	.word	0x40000400

0800a658 <set_motor_encoder_ticks>:

 void set_motor_encoder_ticks(uint8_t channel, int32_t ticks)
 {
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	4603      	mov	r3, r0
 800a660:	6039      	str	r1, [r7, #0]
 800a662:	71fb      	strb	r3, [r7, #7]
	if(channel >= NUMBER_MOTORS)
 800a664:	79fb      	ldrb	r3, [r7, #7]
 800a666:	2b01      	cmp	r3, #1
 800a668:	d80f      	bhi.n	800a68a <set_motor_encoder_ticks+0x32>
	{
		return;
	}
	// TODO check this
	ticks_offset[channel] += (ticks - ticks_count[channel]);
 800a66a:	79fb      	ldrb	r3, [r7, #7]
 800a66c:	4a0a      	ldr	r2, [pc, #40]	; (800a698 <set_motor_encoder_ticks+0x40>)
 800a66e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a672:	683a      	ldr	r2, [r7, #0]
 800a674:	1ad1      	subs	r1, r2, r3
 800a676:	79fb      	ldrb	r3, [r7, #7]
 800a678:	4a08      	ldr	r2, [pc, #32]	; (800a69c <set_motor_encoder_ticks+0x44>)
 800a67a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a67e:	79fb      	ldrb	r3, [r7, #7]
 800a680:	440a      	add	r2, r1
 800a682:	4906      	ldr	r1, [pc, #24]	; (800a69c <set_motor_encoder_ticks+0x44>)
 800a684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a688:	e000      	b.n	800a68c <set_motor_encoder_ticks+0x34>
		return;
 800a68a:	bf00      	nop
 }
 800a68c:	370c      	adds	r7, #12
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop
 800a698:	2000d574 	.word	0x2000d574
 800a69c:	2000d56c 	.word	0x2000d56c

0800a6a0 <precalc_inverse_trig>:
static float acos_div = 0.1;
static float atan_div = 0.1;
int32_t half_range = 10;

void precalc_inverse_trig(void)
{
 800a6a0:	b590      	push	{r4, r7, lr}
 800a6a2:	b085      	sub	sp, #20
 800a6a4:	af00      	add	r7, sp, #0
	int32_t i;
	// acos domain from -1 to 1
	float darg = 2.0 / NUM_ELEMENTS_IT;
 800a6a6:	4b42      	ldr	r3, [pc, #264]	; (800a7b0 <precalc_inverse_trig+0x110>)
 800a6a8:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < NUM_ELEMENTS_IT; i++)
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	60fb      	str	r3, [r7, #12]
 800a6ae:	e031      	b.n	800a714 <precalc_inverse_trig+0x74>
	{
		float arg = -1.0 + i*darg;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	ee07 3a90 	vmov	s15, r3
 800a6b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a6ba:	edd7 7a02 	vldr	s15, [r7, #8]
 800a6be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a6c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a6ca:	edc7 7a00 	vstr	s15, [r7]
		acos_arg_table[i] = arg;
 800a6ce:	4a39      	ldr	r2, [pc, #228]	; (800a7b4 <precalc_inverse_trig+0x114>)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	009b      	lsls	r3, r3, #2
 800a6d4:	4413      	add	r3, r2
 800a6d6:	683a      	ldr	r2, [r7, #0]
 800a6d8:	601a      	str	r2, [r3, #0]
		acos_out_table[i] = acos(acos_arg_table[i]);
 800a6da:	4a36      	ldr	r2, [pc, #216]	; (800a7b4 <precalc_inverse_trig+0x114>)
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	4413      	add	r3, r2
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7f5 fed7 	bl	8000498 <__aeabi_f2d>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	460c      	mov	r4, r1
 800a6ee:	ec44 3b10 	vmov	d0, r3, r4
 800a6f2:	f002 f96f 	bl	800c9d4 <acos>
 800a6f6:	ec54 3b10 	vmov	r3, r4, d0
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	4621      	mov	r1, r4
 800a6fe:	f7f6 fa1b 	bl	8000b38 <__aeabi_d2f>
 800a702:	4601      	mov	r1, r0
 800a704:	4a2c      	ldr	r2, [pc, #176]	; (800a7b8 <precalc_inverse_trig+0x118>)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	4413      	add	r3, r2
 800a70c:	6019      	str	r1, [r3, #0]
	for(i = 0; i < NUM_ELEMENTS_IT; i++)
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	3301      	adds	r3, #1
 800a712:	60fb      	str	r3, [r7, #12]
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a71a:	dbc9      	blt.n	800a6b0 <precalc_inverse_trig+0x10>
	}
	acos_div = 1.0f / (1.0f / (NUM_ELEMENTS_IT/2));
 800a71c:	4b27      	ldr	r3, [pc, #156]	; (800a7bc <precalc_inverse_trig+0x11c>)
 800a71e:	4a28      	ldr	r2, [pc, #160]	; (800a7c0 <precalc_inverse_trig+0x120>)
 800a720:	601a      	str	r2, [r3, #0]
	half_range = NUM_ELEMENTS_IT / 2;
 800a722:	4b28      	ldr	r3, [pc, #160]	; (800a7c4 <precalc_inverse_trig+0x124>)
 800a724:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a728:	601a      	str	r2, [r3, #0]

	// atan domain all real numbers, but asymptotic to +-pi/2 outside of roughly +-20.0
	darg = (2.0 * ATAN_ARG_RANGE) / NUM_ELEMENTS_IT;
 800a72a:	4b27      	ldr	r3, [pc, #156]	; (800a7c8 <precalc_inverse_trig+0x128>)
 800a72c:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < NUM_ELEMENTS_IT; i++)
 800a72e:	2300      	movs	r3, #0
 800a730:	60fb      	str	r3, [r7, #12]
 800a732:	e031      	b.n	800a798 <precalc_inverse_trig+0xf8>
	{
		float arg = -ATAN_ARG_RANGE + i*darg;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	ee07 3a90 	vmov	s15, r3
 800a73a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a73e:	edd7 7a02 	vldr	s15, [r7, #8]
 800a742:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a746:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800a74a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a74e:	edc7 7a01 	vstr	s15, [r7, #4]
		atan_arg_table[i] = arg;
 800a752:	4a1e      	ldr	r2, [pc, #120]	; (800a7cc <precalc_inverse_trig+0x12c>)
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	4413      	add	r3, r2
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	601a      	str	r2, [r3, #0]
		atan_out_table[i] = atan(atan_arg_table[i]);
 800a75e:	4a1b      	ldr	r2, [pc, #108]	; (800a7cc <precalc_inverse_trig+0x12c>)
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	4413      	add	r3, r2
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4618      	mov	r0, r3
 800a76a:	f7f5 fe95 	bl	8000498 <__aeabi_f2d>
 800a76e:	4603      	mov	r3, r0
 800a770:	460c      	mov	r4, r1
 800a772:	ec44 3b10 	vmov	d0, r3, r4
 800a776:	f001 ff83 	bl	800c680 <atan>
 800a77a:	ec54 3b10 	vmov	r3, r4, d0
 800a77e:	4618      	mov	r0, r3
 800a780:	4621      	mov	r1, r4
 800a782:	f7f6 f9d9 	bl	8000b38 <__aeabi_d2f>
 800a786:	4601      	mov	r1, r0
 800a788:	4a11      	ldr	r2, [pc, #68]	; (800a7d0 <precalc_inverse_trig+0x130>)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	4413      	add	r3, r2
 800a790:	6019      	str	r1, [r3, #0]
	for(i = 0; i < NUM_ELEMENTS_IT; i++)
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	3301      	adds	r3, #1
 800a796:	60fb      	str	r3, [r7, #12]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a79e:	dbc9      	blt.n	800a734 <precalc_inverse_trig+0x94>
	}
	atan_div = 1.0f / ((1.0f * ATAN_ARG_RANGE) / (NUM_ELEMENTS_IT/2));
 800a7a0:	4b0c      	ldr	r3, [pc, #48]	; (800a7d4 <precalc_inverse_trig+0x134>)
 800a7a2:	4a0d      	ldr	r2, [pc, #52]	; (800a7d8 <precalc_inverse_trig+0x138>)
 800a7a4:	601a      	str	r2, [r3, #0]
}
 800a7a6:	bf00      	nop
 800a7a8:	3714      	adds	r7, #20
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd90      	pop	{r4, r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	3a83126f 	.word	0x3a83126f
 800a7b4:	2000d580 	.word	0x2000d580
 800a7b8:	2000f4c0 	.word	0x2000f4c0
 800a7bc:	20000018 	.word	0x20000018
 800a7c0:	4479ffff 	.word	0x4479ffff
 800a7c4:	20000020 	.word	0x20000020
 800a7c8:	3c23d70a 	.word	0x3c23d70a
 800a7cc:	20011400 	.word	0x20011400
 800a7d0:	20013340 	.word	0x20013340
 800a7d4:	2000001c 	.word	0x2000001c
 800a7d8:	42c80000 	.word	0x42c80000

0800a7dc <fast_acos>:

float fast_acos(float x)
{
 800a7dc:	b590      	push	{r4, r7, lr}
 800a7de:	b087      	sub	sp, #28
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	ed87 0a01 	vstr	s0, [r7, #4]
	// Wrap to +-1
	if(x > 1.0 || x < -1.0)
 800a7e6:	edd7 7a01 	vldr	s15, [r7, #4]
 800a7ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a7ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7f6:	dc08      	bgt.n	800a80a <fast_acos+0x2e>
 800a7f8:	edd7 7a01 	vldr	s15, [r7, #4]
 800a7fc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a800:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a808:	d510      	bpl.n	800a82c <fast_acos+0x50>
	{
		return acos(x); // TODO
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f7f5 fe44 	bl	8000498 <__aeabi_f2d>
 800a810:	4603      	mov	r3, r0
 800a812:	460c      	mov	r4, r1
 800a814:	ec44 3b10 	vmov	d0, r3, r4
 800a818:	f002 f8dc 	bl	800c9d4 <acos>
 800a81c:	ec54 3b10 	vmov	r3, r4, d0
 800a820:	4618      	mov	r0, r3
 800a822:	4621      	mov	r1, r4
 800a824:	f7f6 f988 	bl	8000b38 <__aeabi_d2f>
 800a828:	4603      	mov	r3, r0
 800a82a:	e025      	b.n	800a878 <fast_acos+0x9c>
	}
	// Fast search
	float temp = x * acos_div; // Divided by 1.0 / NUM_ELEMENTS/2. E.g. 0.5 /( 1.0/ 10 ) goes to 5, -0.5 goes to -5
 800a82c:	4b16      	ldr	r3, [pc, #88]	; (800a888 <fast_acos+0xac>)
 800a82e:	edd3 7a00 	vldr	s15, [r3]
 800a832:	ed97 7a01 	vldr	s14, [r7, #4]
 800a836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a83a:	edc7 7a04 	vstr	s15, [r7, #16]
	int32_t offset = half_range + (int32_t) temp;
 800a83e:	edd7 7a04 	vldr	s15, [r7, #16]
 800a842:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a846:	ee17 2a90 	vmov	r2, s15
 800a84a:	4b10      	ldr	r3, [pc, #64]	; (800a88c <fast_acos+0xb0>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4413      	add	r3, r2
 800a850:	617b      	str	r3, [r7, #20]
	if(offset < 0){offset = 0;}
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	2b00      	cmp	r3, #0
 800a856:	da01      	bge.n	800a85c <fast_acos+0x80>
 800a858:	2300      	movs	r3, #0
 800a85a:	617b      	str	r3, [r7, #20]
	if(offset >= NUM_ELEMENTS_IT){offset = NUM_ELEMENTS_IT-1;}
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a862:	db02      	blt.n	800a86a <fast_acos+0x8e>
 800a864:	f240 73cf 	movw	r3, #1999	; 0x7cf
 800a868:	617b      	str	r3, [r7, #20]
	float val = acos_out_table[offset];
 800a86a:	4a09      	ldr	r2, [pc, #36]	; (800a890 <fast_acos+0xb4>)
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	009b      	lsls	r3, r3, #2
 800a870:	4413      	add	r3, r2
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	60fb      	str	r3, [r7, #12]
	return val;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	ee07 3a90 	vmov	s15, r3
}
 800a87c:	eeb0 0a67 	vmov.f32	s0, s15
 800a880:	371c      	adds	r7, #28
 800a882:	46bd      	mov	sp, r7
 800a884:	bd90      	pop	{r4, r7, pc}
 800a886:	bf00      	nop
 800a888:	20000018 	.word	0x20000018
 800a88c:	20000020 	.word	0x20000020
 800a890:	2000f4c0 	.word	0x2000f4c0

0800a894 <fast_atan>:

float fast_atan(float x)
{
 800a894:	b480      	push	{r7}
 800a896:	b087      	sub	sp, #28
 800a898:	af00      	add	r7, sp, #0
 800a89a:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x > ATAN_ARG_RANGE)
 800a89e:	edd7 7a01 	vldr	s15, [r7, #4]
 800a8a2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800a8a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8ae:	dd01      	ble.n	800a8b4 <fast_atan+0x20>
	{
		return M_PI_2; // TODO interpolate?
 800a8b0:	4b1d      	ldr	r3, [pc, #116]	; (800a928 <fast_atan+0x94>)
 800a8b2:	e030      	b.n	800a916 <fast_atan+0x82>
	}
	else if(x < -ATAN_ARG_RANGE)
 800a8b4:	edd7 7a01 	vldr	s15, [r7, #4]
 800a8b8:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800a8bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a8c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8c4:	d501      	bpl.n	800a8ca <fast_atan+0x36>
	{
		return -M_PI_2; // TODO interpolate?
 800a8c6:	4b19      	ldr	r3, [pc, #100]	; (800a92c <fast_atan+0x98>)
 800a8c8:	e025      	b.n	800a916 <fast_atan+0x82>
	}
	else
	{
		// Search through
		// Fast search
		float temp = x * atan_div; // Divided by RANGE / NUM_ELEMENTS/2. E.g. 10.0 /( 20.0/ 10 ) goes to 5, -10 goes to -5
 800a8ca:	4b19      	ldr	r3, [pc, #100]	; (800a930 <fast_atan+0x9c>)
 800a8cc:	edd3 7a00 	vldr	s15, [r3]
 800a8d0:	ed97 7a01 	vldr	s14, [r7, #4]
 800a8d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8d8:	edc7 7a04 	vstr	s15, [r7, #16]
		int32_t offset = half_range + (int32_t) temp;
 800a8dc:	edd7 7a04 	vldr	s15, [r7, #16]
 800a8e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a8e4:	ee17 2a90 	vmov	r2, s15
 800a8e8:	4b12      	ldr	r3, [pc, #72]	; (800a934 <fast_atan+0xa0>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4413      	add	r3, r2
 800a8ee:	617b      	str	r3, [r7, #20]
		if(offset < 0){offset = 0;}
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	da01      	bge.n	800a8fa <fast_atan+0x66>
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	617b      	str	r3, [r7, #20]
		if(offset >= NUM_ELEMENTS_IT){offset = NUM_ELEMENTS_IT-1;}
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a900:	db02      	blt.n	800a908 <fast_atan+0x74>
 800a902:	f240 73cf 	movw	r3, #1999	; 0x7cf
 800a906:	617b      	str	r3, [r7, #20]
		float val = atan_out_table[offset];
 800a908:	4a0b      	ldr	r2, [pc, #44]	; (800a938 <fast_atan+0xa4>)
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	009b      	lsls	r3, r3, #2
 800a90e:	4413      	add	r3, r2
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	60fb      	str	r3, [r7, #12]
		return val;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	ee07 3a90 	vmov	s15, r3
	}
}
 800a91a:	eeb0 0a67 	vmov.f32	s0, s15
 800a91e:	371c      	adds	r7, #28
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr
 800a928:	3fc90fdb 	.word	0x3fc90fdb
 800a92c:	bfc90fdb 	.word	0xbfc90fdb
 800a930:	2000001c 	.word	0x2000001c
 800a934:	20000020 	.word	0x20000020
 800a938:	20013340 	.word	0x20013340

0800a93c <calculate_impedance_control>:
 #include "inverse_kinematics.h"

 #include "impedance_controller.h"

 void calculate_impedance_control(const impedance_control_params_t params, const leg_ik_t leg, const pos_joint_space_t current_pos, const pos_cartesian_t desired_pos, impedance_control_cmds_t * cmds)
 {
 800a93c:	b084      	sub	sp, #16
 800a93e:	b590      	push	{r4, r7, lr}
 800a940:	b095      	sub	sp, #84	; 0x54
 800a942:	af00      	add	r7, sp, #0
 800a944:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800a948:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a94c:	eeb0 4a40 	vmov.f32	s8, s0
 800a950:	eef0 4a60 	vmov.f32	s9, s1
 800a954:	eeb0 5a41 	vmov.f32	s10, s2
 800a958:	eef0 5a61 	vmov.f32	s11, s3
 800a95c:	eeb0 6a42 	vmov.f32	s12, s4
 800a960:	eef0 6a62 	vmov.f32	s13, s5
 800a964:	eeb0 7a43 	vmov.f32	s14, s6
 800a968:	eef0 7a63 	vmov.f32	s15, s7
 800a96c:	ed87 4a04 	vstr	s8, [r7, #16]
 800a970:	edc7 4a05 	vstr	s9, [r7, #20]
 800a974:	ed87 5a06 	vstr	s10, [r7, #24]
 800a978:	edc7 5a07 	vstr	s11, [r7, #28]
 800a97c:	ed87 6a02 	vstr	s12, [r7, #8]
 800a980:	edc7 6a03 	vstr	s13, [r7, #12]
 800a984:	ed87 7a00 	vstr	s14, [r7]
 800a988:	edc7 7a01 	vstr	s15, [r7, #4]
	static pos_cartesian_t des_cart_speed_mps;
	pos_cartesian_t current_pos_cart;
	jacobian_t jac;

	//calculate_fk(&leg, &current_pos_cart, current_pos);
	calculate_fk_and_jacobian(&leg, &current_pos_cart, current_pos, &jac);
 800a98c:	f107 0220 	add.w	r2, r7, #32
 800a990:	ed97 7a02 	vldr	s14, [r7, #8]
 800a994:	edd7 7a03 	vldr	s15, [r7, #12]
 800a998:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800a99c:	f107 0310 	add.w	r3, r7, #16
 800a9a0:	eeb0 0a47 	vmov.f32	s0, s14
 800a9a4:	eef0 0a67 	vmov.f32	s1, s15
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f000 f93f 	bl	800ac2c <calculate_fk_and_jacobian>
	last_des_pos_cart.x = desired_pos.x;
	last_des_pos_cart.y = desired_pos.y;
	last_time = current_time;*/

	// Calculate desired force from springs
	float fx = params.k_eff_x * (desired_pos.x - current_pos_cart.x); // In N
 800a9ae:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800a9b2:	edd7 6a00 	vldr	s13, [r7]
 800a9b6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a9ba:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a9be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9c2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	float fy = params.k_eff_y * (desired_pos.y - current_pos_cart.y);
 800a9c6:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800a9ca:	edd7 6a01 	vldr	s13, [r7, #4]
 800a9ce:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a9d2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a9d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9da:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	// Damping
	//fx += params.c_eff_x * (act_cart_speed_mps.x); // TODO use relative
	//fy += params.c_eff_y * (act_cart_speed_mps.y);

	// Calculate desired torque, tau_d = J^T * f_d
	float tau_hip = fx*jac.j_00 + fy*jac.j_10; // In N * m
 800a9de:	ed97 7a08 	vldr	s14, [r7, #32]
 800a9e2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800a9e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a9ea:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a9ee:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800a9f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a9f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9fa:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	float tau_knee = fx*jac.j_01 + fy*jac.j_11;
 800a9fe:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800aa02:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800aa06:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa0a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800aa0e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800aa12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aa16:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa1a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	float j_11_inv = det_inv * jac.j_00;
	float tau_hip = fx*j_00_inv + fy*j_01_inv; // In N * m
	float tau_knee = fx*j_10_inv + fy*j_11_inv;*/

	// Account for gear ratio
	tau_hip = tau_hip / params.gear_ratio;
 800aa1e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800aa22:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800aa26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa2a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	tau_knee = tau_knee / params.gear_ratio;
 800aa2e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800aa32:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800aa36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa3a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

	// Calculate desired current to meet torque
	float current_hip = params.gain_current_per_torque * tau_hip;
 800aa3e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800aa42:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800aa46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa4a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float current_knee = params.gain_current_per_torque * tau_knee;
 800aa4e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800aa52:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800aa56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa5a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	// Current controller outside of here
	cmds->hip_cmd_ma = current_hip * 1000.0;
 800aa5e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800aa60:	f7f5 fd1a 	bl	8000498 <__aeabi_f2d>
 800aa64:	f04f 0200 	mov.w	r2, #0
 800aa68:	4b11      	ldr	r3, [pc, #68]	; (800aab0 <calculate_impedance_control+0x174>)
 800aa6a:	f7f5 fd6d 	bl	8000548 <__aeabi_dmul>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	460c      	mov	r4, r1
 800aa72:	4618      	mov	r0, r3
 800aa74:	4621      	mov	r1, r4
 800aa76:	f7f6 f817 	bl	8000aa8 <__aeabi_d2iz>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa7e:	601a      	str	r2, [r3, #0]
	cmds->knee_cmd_ma = current_knee * 1000.0;
 800aa80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aa82:	f7f5 fd09 	bl	8000498 <__aeabi_f2d>
 800aa86:	f04f 0200 	mov.w	r2, #0
 800aa8a:	4b09      	ldr	r3, [pc, #36]	; (800aab0 <calculate_impedance_control+0x174>)
 800aa8c:	f7f5 fd5c 	bl	8000548 <__aeabi_dmul>
 800aa90:	4603      	mov	r3, r0
 800aa92:	460c      	mov	r4, r1
 800aa94:	4618      	mov	r0, r3
 800aa96:	4621      	mov	r1, r4
 800aa98:	f7f6 f806 	bl	8000aa8 <__aeabi_d2iz>
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aaa0:	605a      	str	r2, [r3, #4]
 }
 800aaa2:	bf00      	nop
 800aaa4:	3754      	adds	r7, #84	; 0x54
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800aaac:	b004      	add	sp, #16
 800aaae:	4770      	bx	lr
 800aab0:	408f4000 	.word	0x408f4000

0800aab4 <init_leg_precalcs>:
 #include <math.h>
 #include "fast_inverse_trig.h"
 #include "arm_math.h"

 void init_leg_precalcs(leg_ik_t * leg)
 {
 800aab4:	b5b0      	push	{r4, r5, r7, lr}
 800aab6:	b082      	sub	sp, #8
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
	leg->alpha_1 = -(leg->calf_length_m*leg->calf_length_m + leg->thigh_length_m*leg->thigh_length_m);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	ed93 7a01 	vldr	s14, [r3, #4]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	edd3 7a01 	vldr	s15, [r3, #4]
 800aac8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	edd3 6a00 	vldr	s13, [r3]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	edd3 7a00 	vldr	s15, [r3]
 800aad8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aadc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aae0:	eef1 7a67 	vneg.f32	s15, s15
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	edc3 7a02 	vstr	s15, [r3, #8]
	leg->alpha_2 = 1.0 / (2.0 * leg->calf_length_m * leg->thigh_length_m);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f7f5 fcd2 	bl	8000498 <__aeabi_f2d>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	f7f5 fb70 	bl	80001dc <__adddf3>
 800aafc:	4603      	mov	r3, r0
 800aafe:	460c      	mov	r4, r1
 800ab00:	4625      	mov	r5, r4
 800ab02:	461c      	mov	r4, r3
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f7f5 fcc5 	bl	8000498 <__aeabi_f2d>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	460b      	mov	r3, r1
 800ab12:	4620      	mov	r0, r4
 800ab14:	4629      	mov	r1, r5
 800ab16:	f7f5 fd17 	bl	8000548 <__aeabi_dmul>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	460c      	mov	r4, r1
 800ab1e:	461a      	mov	r2, r3
 800ab20:	4623      	mov	r3, r4
 800ab22:	f04f 0000 	mov.w	r0, #0
 800ab26:	4908      	ldr	r1, [pc, #32]	; (800ab48 <init_leg_precalcs+0x94>)
 800ab28:	f7f5 fe38 	bl	800079c <__aeabi_ddiv>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	460c      	mov	r4, r1
 800ab30:	4618      	mov	r0, r3
 800ab32:	4621      	mov	r1, r4
 800ab34:	f7f6 f800 	bl	8000b38 <__aeabi_d2f>
 800ab38:	4602      	mov	r2, r0
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	60da      	str	r2, [r3, #12]
 }
 800ab3e:	bf00      	nop
 800ab40:	3708      	adds	r7, #8
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bdb0      	pop	{r4, r5, r7, pc}
 800ab46:	bf00      	nop
 800ab48:	3ff00000 	.word	0x3ff00000

0800ab4c <calculate_ik>:

 void calculate_ik(leg_ik_t * leg, pos_joint_space_t * joint_angles, const pos_cartesian_t pos)
 {
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	ed2d 8b04 	vpush	{d8-d9}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	60b9      	str	r1, [r7, #8]
 800ab5a:	eeb0 7a40 	vmov.f32	s14, s0
 800ab5e:	eef0 7a60 	vmov.f32	s15, s1
 800ab62:	ed87 7a00 	vstr	s14, [r7]
 800ab66:	edc7 7a01 	vstr	s15, [r7, #4]
	joint_angles->knee_angle_rad = fast_acos(leg->alpha_2 * (pos.x*pos.x + pos.y*pos.y + leg->alpha_1) );
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	ed93 7a03 	vldr	s14, [r3, #12]
 800ab70:	edd7 6a00 	vldr	s13, [r7]
 800ab74:	edd7 7a00 	vldr	s15, [r7]
 800ab78:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ab7c:	ed97 6a01 	vldr	s12, [r7, #4]
 800ab80:	edd7 7a01 	vldr	s15, [r7, #4]
 800ab84:	ee66 7a27 	vmul.f32	s15, s12, s15
 800ab88:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	edd3 7a02 	vldr	s15, [r3, #8]
 800ab92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab9a:	eeb0 0a67 	vmov.f32	s0, s15
 800ab9e:	f7ff fe1d 	bl	800a7dc <fast_acos>
 800aba2:	eef0 7a40 	vmov.f32	s15, s0
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	edc3 7a01 	vstr	s15, [r3, #4]
	joint_angles->thigh_angle_rad = fast_atan( pos.y / pos.x ) - fast_atan( (leg->calf_length_m * arm_sin_f32(joint_angles->knee_angle_rad)) / (leg->thigh_length_m + leg->calf_length_m * arm_cos_f32(joint_angles->knee_angle_rad)) );
 800abac:	ed97 7a01 	vldr	s14, [r7, #4]
 800abb0:	edd7 7a00 	vldr	s15, [r7]
 800abb4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800abb8:	eeb0 0a66 	vmov.f32	s0, s13
 800abbc:	f7ff fe6a 	bl	800a894 <fast_atan>
 800abc0:	eef0 9a40 	vmov.f32	s19, s0
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	ed93 8a01 	vldr	s16, [r3, #4]
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	edd3 7a01 	vldr	s15, [r3, #4]
 800abd0:	eeb0 0a67 	vmov.f32	s0, s15
 800abd4:	f001 fc92 	bl	800c4fc <arm_sin_f32>
 800abd8:	eef0 7a40 	vmov.f32	s15, s0
 800abdc:	ee28 8a27 	vmul.f32	s16, s16, s15
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	edd3 8a00 	vldr	s17, [r3]
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	ed93 9a01 	vldr	s18, [r3, #4]
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	edd3 7a01 	vldr	s15, [r3, #4]
 800abf2:	eeb0 0a67 	vmov.f32	s0, s15
 800abf6:	f001 fcc5 	bl	800c584 <arm_cos_f32>
 800abfa:	eef0 7a40 	vmov.f32	s15, s0
 800abfe:	ee69 7a27 	vmul.f32	s15, s18, s15
 800ac02:	ee78 7aa7 	vadd.f32	s15, s17, s15
 800ac06:	ee88 7a27 	vdiv.f32	s14, s16, s15
 800ac0a:	eeb0 0a47 	vmov.f32	s0, s14
 800ac0e:	f7ff fe41 	bl	800a894 <fast_atan>
 800ac12:	eef0 7a40 	vmov.f32	s15, s0
 800ac16:	ee79 7ae7 	vsub.f32	s15, s19, s15
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	edc3 7a00 	vstr	s15, [r3]
 }
 800ac20:	bf00      	nop
 800ac22:	3710      	adds	r7, #16
 800ac24:	46bd      	mov	sp, r7
 800ac26:	ecbd 8b04 	vpop	{d8-d9}
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <calculate_fk_and_jacobian>:
	pos->x = leg->thigh_length_m * arm_cos_f32(joint_angles.thigh_angle_rad) + leg->calf_length_m * arm_cos_f32(joint_angles.thigh_angle_rad + joint_angles.knee_angle_rad);
	pos->y = leg->thigh_length_m * arm_sin_f32(joint_angles.thigh_angle_rad) + leg->calf_length_m * arm_sin_f32(joint_angles.thigh_angle_rad + joint_angles.knee_angle_rad);
 }

 void calculate_fk_and_jacobian(leg_ik_t * leg, pos_cartesian_t * pos, const pos_joint_space_t joint_angles, jacobian_t * j)
 {
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b08a      	sub	sp, #40	; 0x28
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6178      	str	r0, [r7, #20]
 800ac34:	6139      	str	r1, [r7, #16]
 800ac36:	eeb0 7a40 	vmov.f32	s14, s0
 800ac3a:	eef0 7a60 	vmov.f32	s15, s1
 800ac3e:	607a      	str	r2, [r7, #4]
 800ac40:	ed87 7a02 	vstr	s14, [r7, #8]
 800ac44:	edc7 7a03 	vstr	s15, [r7, #12]
	// Optimization, avoid calculating sin and cos functions twice
	float ct = arm_cos_f32(joint_angles.thigh_angle_rad);
 800ac48:	edd7 7a02 	vldr	s15, [r7, #8]
 800ac4c:	eeb0 0a67 	vmov.f32	s0, s15
 800ac50:	f001 fc98 	bl	800c584 <arm_cos_f32>
 800ac54:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float st = arm_sin_f32(joint_angles.thigh_angle_rad);
 800ac58:	edd7 7a02 	vldr	s15, [r7, #8]
 800ac5c:	eeb0 0a67 	vmov.f32	s0, s15
 800ac60:	f001 fc4c 	bl	800c4fc <arm_sin_f32>
 800ac64:	ed87 0a08 	vstr	s0, [r7, #32]
	float ctk = arm_cos_f32(joint_angles.thigh_angle_rad + joint_angles.knee_angle_rad);
 800ac68:	ed97 7a02 	vldr	s14, [r7, #8]
 800ac6c:	edd7 7a03 	vldr	s15, [r7, #12]
 800ac70:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac74:	eeb0 0a67 	vmov.f32	s0, s15
 800ac78:	f001 fc84 	bl	800c584 <arm_cos_f32>
 800ac7c:	ed87 0a07 	vstr	s0, [r7, #28]
	float stk = arm_sin_f32(joint_angles.thigh_angle_rad + joint_angles.knee_angle_rad);
 800ac80:	ed97 7a02 	vldr	s14, [r7, #8]
 800ac84:	edd7 7a03 	vldr	s15, [r7, #12]
 800ac88:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac8c:	eeb0 0a67 	vmov.f32	s0, s15
 800ac90:	f001 fc34 	bl	800c4fc <arm_sin_f32>
 800ac94:	ed87 0a06 	vstr	s0, [r7, #24]

	pos->x = leg->thigh_length_m * ct + leg->calf_length_m * ctk;
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	ed93 7a00 	vldr	s14, [r3]
 800ac9e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800aca2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	edd3 6a01 	vldr	s13, [r3, #4]
 800acac:	edd7 7a07 	vldr	s15, [r7, #28]
 800acb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800acb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	edc3 7a00 	vstr	s15, [r3]
	pos->y = leg->thigh_length_m * st + leg->calf_length_m * stk;
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	ed93 7a00 	vldr	s14, [r3]
 800acc4:	edd7 7a08 	vldr	s15, [r7, #32]
 800acc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	edd3 6a01 	vldr	s13, [r3, #4]
 800acd2:	edd7 7a06 	vldr	s15, [r7, #24]
 800acd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800acda:	ee77 7a27 	vadd.f32	s15, s14, s15
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	edc3 7a01 	vstr	s15, [r3, #4]

	j->j_01 = -leg->calf_length_m * stk;
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	edd3 7a01 	vldr	s15, [r3, #4]
 800acea:	eeb1 7a67 	vneg.f32	s14, s15
 800acee:	edd7 7a06 	vldr	s15, [r7, #24]
 800acf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	edc3 7a01 	vstr	s15, [r3, #4]
	j->j_00 = -leg->thigh_length_m * ct + j->j_01;
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	edd3 7a00 	vldr	s15, [r3]
 800ad02:	eeb1 7a67 	vneg.f32	s14, s15
 800ad06:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ad0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	edd3 7a01 	vldr	s15, [r3, #4]
 800ad14:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	edc3 7a00 	vstr	s15, [r3]
	j->j_11 = leg->calf_length_m * ctk;
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	ed93 7a01 	vldr	s14, [r3, #4]
 800ad24:	edd7 7a07 	vldr	s15, [r7, #28]
 800ad28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	edc3 7a03 	vstr	s15, [r3, #12]
	j->j_10 = leg->thigh_length_m * ct + j->j_11;
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	ed93 7a00 	vldr	s14, [r3]
 800ad38:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ad3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	edd3 7a03 	vldr	s15, [r3, #12]
 800ad46:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	edc3 7a02 	vstr	s15, [r3, #8]
 }
 800ad50:	bf00      	nop
 800ad52:	3728      	adds	r7, #40	; 0x28
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <motion_primitive_init>:
 static volatile uint8_t primitive_index = 0;
 static uint32_t time_offset = 0;
 static primitive_t primitives[NUMBER_PRIMITIVES];

 void motion_primitive_init(void)
 {
 800ad58:	b480      	push	{r7}
 800ad5a:	af00      	add	r7, sp, #0

	// t_part must be always increasing, never > 1.0. Must be a cyclical motion primitive

	// Slow trot walk
	// Triangular, 1Hz, roughly 3X longer on ground than in air, front slightly forward of hip
	primitives[0].num_keyframes = 3;
 800ad5c:	4bb6      	ldr	r3, [pc, #728]	; (800b038 <motion_primitive_init+0x2e0>)
 800ad5e:	2203      	movs	r2, #3
 800ad60:	701a      	strb	r2, [r3, #0]
	primitives[0].tau = 2.0;
 800ad62:	4bb5      	ldr	r3, [pc, #724]	; (800b038 <motion_primitive_init+0x2e0>)
 800ad64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ad68:	615a      	str	r2, [r3, #20]
	primitives[0].t_offset = 0.0;
 800ad6a:	4bb3      	ldr	r3, [pc, #716]	; (800b038 <motion_primitive_init+0x2e0>)
 800ad6c:	f04f 0200 	mov.w	r2, #0
 800ad70:	619a      	str	r2, [r3, #24]
	primitives[0].invert = 0;
 800ad72:	4bb1      	ldr	r3, [pc, #708]	; (800b038 <motion_primitive_init+0x2e0>)
 800ad74:	2200      	movs	r2, #0
 800ad76:	705a      	strb	r2, [r3, #1]
	primitives[0].time_reverse = 0;
 800ad78:	4baf      	ldr	r3, [pc, #700]	; (800b038 <motion_primitive_init+0x2e0>)
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	709a      	strb	r2, [r3, #2]
	primitives[0].x_offset_m = 0;
 800ad7e:	4bae      	ldr	r3, [pc, #696]	; (800b038 <motion_primitive_init+0x2e0>)
 800ad80:	f04f 0200 	mov.w	r2, #0
 800ad84:	605a      	str	r2, [r3, #4]
	primitives[0].y_offset_m = 0;
 800ad86:	4bac      	ldr	r3, [pc, #688]	; (800b038 <motion_primitive_init+0x2e0>)
 800ad88:	f04f 0200 	mov.w	r2, #0
 800ad8c:	609a      	str	r2, [r3, #8]
	primitives[0].x_scale = 1.0;
 800ad8e:	4baa      	ldr	r3, [pc, #680]	; (800b038 <motion_primitive_init+0x2e0>)
 800ad90:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ad94:	60da      	str	r2, [r3, #12]
	primitives[0].y_scale = 1.0;
 800ad96:	4ba8      	ldr	r3, [pc, #672]	; (800b038 <motion_primitive_init+0x2e0>)
 800ad98:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ad9c:	611a      	str	r2, [r3, #16]

	primitives[0].frames[0].t_part = 0.0;
 800ad9e:	4ba6      	ldr	r3, [pc, #664]	; (800b038 <motion_primitive_init+0x2e0>)
 800ada0:	f04f 0200 	mov.w	r2, #0
 800ada4:	625a      	str	r2, [r3, #36]	; 0x24
	primitives[0].frames[0].x = 0.105;
 800ada6:	4ba4      	ldr	r3, [pc, #656]	; (800b038 <motion_primitive_init+0x2e0>)
 800ada8:	4aa4      	ldr	r2, [pc, #656]	; (800b03c <motion_primitive_init+0x2e4>)
 800adaa:	61da      	str	r2, [r3, #28]
	primitives[0].frames[0].y = 0.01;
 800adac:	4ba2      	ldr	r3, [pc, #648]	; (800b038 <motion_primitive_init+0x2e0>)
 800adae:	4aa4      	ldr	r2, [pc, #656]	; (800b040 <motion_primitive_init+0x2e8>)
 800adb0:	621a      	str	r2, [r3, #32]

	primitives[0].frames[1].t_part = 0.75;
 800adb2:	4ba1      	ldr	r3, [pc, #644]	; (800b038 <motion_primitive_init+0x2e0>)
 800adb4:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 800adb8:	631a      	str	r2, [r3, #48]	; 0x30
	primitives[0].frames[1].x = 0.105;
 800adba:	4b9f      	ldr	r3, [pc, #636]	; (800b038 <motion_primitive_init+0x2e0>)
 800adbc:	4a9f      	ldr	r2, [pc, #636]	; (800b03c <motion_primitive_init+0x2e4>)
 800adbe:	629a      	str	r2, [r3, #40]	; 0x28
	primitives[0].frames[1].y = -0.05;
 800adc0:	4b9d      	ldr	r3, [pc, #628]	; (800b038 <motion_primitive_init+0x2e0>)
 800adc2:	4aa0      	ldr	r2, [pc, #640]	; (800b044 <motion_primitive_init+0x2ec>)
 800adc4:	62da      	str	r2, [r3, #44]	; 0x2c

	primitives[0].frames[2].t_part = 0.875;
 800adc6:	4b9c      	ldr	r3, [pc, #624]	; (800b038 <motion_primitive_init+0x2e0>)
 800adc8:	4a9f      	ldr	r2, [pc, #636]	; (800b048 <motion_primitive_init+0x2f0>)
 800adca:	63da      	str	r2, [r3, #60]	; 0x3c
	primitives[0].frames[2].x = 0.06;
 800adcc:	4b9a      	ldr	r3, [pc, #616]	; (800b038 <motion_primitive_init+0x2e0>)
 800adce:	4a9f      	ldr	r2, [pc, #636]	; (800b04c <motion_primitive_init+0x2f4>)
 800add0:	635a      	str	r2, [r3, #52]	; 0x34
	primitives[0].frames[2].y = -0.02;
 800add2:	4b99      	ldr	r3, [pc, #612]	; (800b038 <motion_primitive_init+0x2e0>)
 800add4:	4a9e      	ldr	r2, [pc, #632]	; (800b050 <motion_primitive_init+0x2f8>)
 800add6:	639a      	str	r2, [r3, #56]	; 0x38

	// Fast trot walk
	// Mostly triangular, in air roughly same as on ground, rear slightly backward of hip
	primitives[1].num_keyframes = 4;
 800add8:	4b97      	ldr	r3, [pc, #604]	; (800b038 <motion_primitive_init+0x2e0>)
 800adda:	2204      	movs	r2, #4
 800addc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	primitives[1].tau = 2.0;
 800ade0:	4b95      	ldr	r3, [pc, #596]	; (800b038 <motion_primitive_init+0x2e0>)
 800ade2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ade6:	679a      	str	r2, [r3, #120]	; 0x78
	primitives[1].t_offset = 0.0;
 800ade8:	4b93      	ldr	r3, [pc, #588]	; (800b038 <motion_primitive_init+0x2e0>)
 800adea:	f04f 0200 	mov.w	r2, #0
 800adee:	67da      	str	r2, [r3, #124]	; 0x7c
	primitives[1].invert = 0;
 800adf0:	4b91      	ldr	r3, [pc, #580]	; (800b038 <motion_primitive_init+0x2e0>)
 800adf2:	2200      	movs	r2, #0
 800adf4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	primitives[1].time_reverse = 0;
 800adf8:	4b8f      	ldr	r3, [pc, #572]	; (800b038 <motion_primitive_init+0x2e0>)
 800adfa:	2200      	movs	r2, #0
 800adfc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	primitives[1].x_offset_m = 0;
 800ae00:	4b8d      	ldr	r3, [pc, #564]	; (800b038 <motion_primitive_init+0x2e0>)
 800ae02:	f04f 0200 	mov.w	r2, #0
 800ae06:	669a      	str	r2, [r3, #104]	; 0x68
	primitives[1].y_offset_m = 0;
 800ae08:	4b8b      	ldr	r3, [pc, #556]	; (800b038 <motion_primitive_init+0x2e0>)
 800ae0a:	f04f 0200 	mov.w	r2, #0
 800ae0e:	66da      	str	r2, [r3, #108]	; 0x6c
	primitives[1].x_scale = 1.0;
 800ae10:	4b89      	ldr	r3, [pc, #548]	; (800b038 <motion_primitive_init+0x2e0>)
 800ae12:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ae16:	671a      	str	r2, [r3, #112]	; 0x70
	primitives[1].y_scale = 1.0;
 800ae18:	4b87      	ldr	r3, [pc, #540]	; (800b038 <motion_primitive_init+0x2e0>)
 800ae1a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ae1e:	675a      	str	r2, [r3, #116]	; 0x74

	primitives[1].frames[0].t_part = 0.0;
 800ae20:	4b85      	ldr	r3, [pc, #532]	; (800b038 <motion_primitive_init+0x2e0>)
 800ae22:	f04f 0200 	mov.w	r2, #0
 800ae26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	primitives[1].frames[0].x = 0.09;
 800ae2a:	4b83      	ldr	r3, [pc, #524]	; (800b038 <motion_primitive_init+0x2e0>)
 800ae2c:	4a89      	ldr	r2, [pc, #548]	; (800b054 <motion_primitive_init+0x2fc>)
 800ae2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	primitives[1].frames[0].y = 0.06;
 800ae32:	4b81      	ldr	r3, [pc, #516]	; (800b038 <motion_primitive_init+0x2e0>)
 800ae34:	4a85      	ldr	r2, [pc, #532]	; (800b04c <motion_primitive_init+0x2f4>)
 800ae36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	primitives[1].frames[1].t_part = 0.5;
 800ae3a:	4b7f      	ldr	r3, [pc, #508]	; (800b038 <motion_primitive_init+0x2e0>)
 800ae3c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800ae40:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	primitives[1].frames[1].x = 0.09;
 800ae44:	4b7c      	ldr	r3, [pc, #496]	; (800b038 <motion_primitive_init+0x2e0>)
 800ae46:	4a83      	ldr	r2, [pc, #524]	; (800b054 <motion_primitive_init+0x2fc>)
 800ae48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	primitives[1].frames[1].y = -0.01;
 800ae4c:	4b7a      	ldr	r3, [pc, #488]	; (800b038 <motion_primitive_init+0x2e0>)
 800ae4e:	4a82      	ldr	r2, [pc, #520]	; (800b058 <motion_primitive_init+0x300>)
 800ae50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	primitives[1].frames[2].t_part = 0.75;
 800ae54:	4b78      	ldr	r3, [pc, #480]	; (800b038 <motion_primitive_init+0x2e0>)
 800ae56:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 800ae5a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	primitives[1].frames[2].x = 0.05;
 800ae5e:	4b76      	ldr	r3, [pc, #472]	; (800b038 <motion_primitive_init+0x2e0>)
 800ae60:	4a7e      	ldr	r2, [pc, #504]	; (800b05c <motion_primitive_init+0x304>)
 800ae62:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	primitives[1].frames[2].y = 0.02;
 800ae66:	4b74      	ldr	r3, [pc, #464]	; (800b038 <motion_primitive_init+0x2e0>)
 800ae68:	4a7d      	ldr	r2, [pc, #500]	; (800b060 <motion_primitive_init+0x308>)
 800ae6a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	primitives[1].frames[3].t_part = 0.95;
 800ae6e:	4b72      	ldr	r3, [pc, #456]	; (800b038 <motion_primitive_init+0x2e0>)
 800ae70:	4a7c      	ldr	r2, [pc, #496]	; (800b064 <motion_primitive_init+0x30c>)
 800ae72:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	primitives[1].frames[3].x = 0.08;
 800ae76:	4b70      	ldr	r3, [pc, #448]	; (800b038 <motion_primitive_init+0x2e0>)
 800ae78:	4a7b      	ldr	r2, [pc, #492]	; (800b068 <motion_primitive_init+0x310>)
 800ae7a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	primitives[1].frames[3].y = 0.065;
 800ae7e:	4b6e      	ldr	r3, [pc, #440]	; (800b038 <motion_primitive_init+0x2e0>)
 800ae80:	4a7a      	ldr	r2, [pc, #488]	; (800b06c <motion_primitive_init+0x314>)
 800ae82:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

	// Bound
	// Mostly triangular, in air roughly same as on ground, centered on hip
	primitives[2].num_keyframes = 4;
 800ae86:	4b6c      	ldr	r3, [pc, #432]	; (800b038 <motion_primitive_init+0x2e0>)
 800ae88:	2204      	movs	r2, #4
 800ae8a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	primitives[2].tau = 2.0;
 800ae8e:	4b6a      	ldr	r3, [pc, #424]	; (800b038 <motion_primitive_init+0x2e0>)
 800ae90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ae94:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	primitives[2].t_offset = 0.0;
 800ae98:	4b67      	ldr	r3, [pc, #412]	; (800b038 <motion_primitive_init+0x2e0>)
 800ae9a:	f04f 0200 	mov.w	r2, #0
 800ae9e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	primitives[2].invert = 0;
 800aea2:	4b65      	ldr	r3, [pc, #404]	; (800b038 <motion_primitive_init+0x2e0>)
 800aea4:	2200      	movs	r2, #0
 800aea6:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	primitives[2].time_reverse = 0;
 800aeaa:	4b63      	ldr	r3, [pc, #396]	; (800b038 <motion_primitive_init+0x2e0>)
 800aeac:	2200      	movs	r2, #0
 800aeae:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	primitives[2].x_offset_m = 0;
 800aeb2:	4b61      	ldr	r3, [pc, #388]	; (800b038 <motion_primitive_init+0x2e0>)
 800aeb4:	f04f 0200 	mov.w	r2, #0
 800aeb8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	primitives[2].y_offset_m = 0;
 800aebc:	4b5e      	ldr	r3, [pc, #376]	; (800b038 <motion_primitive_init+0x2e0>)
 800aebe:	f04f 0200 	mov.w	r2, #0
 800aec2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	primitives[2].x_scale = 1.0;
 800aec6:	4b5c      	ldr	r3, [pc, #368]	; (800b038 <motion_primitive_init+0x2e0>)
 800aec8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800aecc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	primitives[2].y_scale = 1.0;
 800aed0:	4b59      	ldr	r3, [pc, #356]	; (800b038 <motion_primitive_init+0x2e0>)
 800aed2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800aed6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	primitives[2].frames[0].t_part = 0.0;
 800aeda:	4b57      	ldr	r3, [pc, #348]	; (800b038 <motion_primitive_init+0x2e0>)
 800aedc:	f04f 0200 	mov.w	r2, #0
 800aee0:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	primitives[2].frames[0].x = 0.105;
 800aee4:	4b54      	ldr	r3, [pc, #336]	; (800b038 <motion_primitive_init+0x2e0>)
 800aee6:	4a55      	ldr	r2, [pc, #340]	; (800b03c <motion_primitive_init+0x2e4>)
 800aee8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	primitives[2].frames[0].y = 0.03;
 800aeec:	4b52      	ldr	r3, [pc, #328]	; (800b038 <motion_primitive_init+0x2e0>)
 800aeee:	4a60      	ldr	r2, [pc, #384]	; (800b070 <motion_primitive_init+0x318>)
 800aef0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

	primitives[2].frames[1].t_part = 0.5;
 800aef4:	4b50      	ldr	r3, [pc, #320]	; (800b038 <motion_primitive_init+0x2e0>)
 800aef6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800aefa:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	primitives[2].frames[1].x = 0.105;
 800aefe:	4b4e      	ldr	r3, [pc, #312]	; (800b038 <motion_primitive_init+0x2e0>)
 800af00:	4a4e      	ldr	r2, [pc, #312]	; (800b03c <motion_primitive_init+0x2e4>)
 800af02:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	primitives[2].frames[1].y = -0.03;
 800af06:	4b4c      	ldr	r3, [pc, #304]	; (800b038 <motion_primitive_init+0x2e0>)
 800af08:	4a5a      	ldr	r2, [pc, #360]	; (800b074 <motion_primitive_init+0x31c>)
 800af0a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

	primitives[2].frames[2].t_part = 0.7;
 800af0e:	4b4a      	ldr	r3, [pc, #296]	; (800b038 <motion_primitive_init+0x2e0>)
 800af10:	4a59      	ldr	r2, [pc, #356]	; (800b078 <motion_primitive_init+0x320>)
 800af12:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	primitives[2].frames[2].x = 0.08;
 800af16:	4b48      	ldr	r3, [pc, #288]	; (800b038 <motion_primitive_init+0x2e0>)
 800af18:	4a53      	ldr	r2, [pc, #332]	; (800b068 <motion_primitive_init+0x310>)
 800af1a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	primitives[2].frames[2].y = -0.015;
 800af1e:	4b46      	ldr	r3, [pc, #280]	; (800b038 <motion_primitive_init+0x2e0>)
 800af20:	4a56      	ldr	r2, [pc, #344]	; (800b07c <motion_primitive_init+0x324>)
 800af22:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	primitives[2].frames[3].t_part = 0.9;
 800af26:	4b44      	ldr	r3, [pc, #272]	; (800b038 <motion_primitive_init+0x2e0>)
 800af28:	4a55      	ldr	r2, [pc, #340]	; (800b080 <motion_primitive_init+0x328>)
 800af2a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	primitives[2].frames[3].x = 0.095;
 800af2e:	4b42      	ldr	r3, [pc, #264]	; (800b038 <motion_primitive_init+0x2e0>)
 800af30:	4a54      	ldr	r2, [pc, #336]	; (800b084 <motion_primitive_init+0x32c>)
 800af32:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	primitives[2].frames[3].y = 0.04;
 800af36:	4b40      	ldr	r3, [pc, #256]	; (800b038 <motion_primitive_init+0x2e0>)
 800af38:	4a53      	ldr	r2, [pc, #332]	; (800b088 <motion_primitive_init+0x330>)
 800af3a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

	// Pronk
	// Only vertical motion, slow down, fast down, fast up, fast to nominal
	primitives[3].num_keyframes = 5;
 800af3e:	4b3e      	ldr	r3, [pc, #248]	; (800b038 <motion_primitive_init+0x2e0>)
 800af40:	2205      	movs	r2, #5
 800af42:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
	primitives[3].tau = 2.0;
 800af46:	4b3c      	ldr	r3, [pc, #240]	; (800b038 <motion_primitive_init+0x2e0>)
 800af48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800af4c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	primitives[3].t_offset = 0.0;
 800af50:	4b39      	ldr	r3, [pc, #228]	; (800b038 <motion_primitive_init+0x2e0>)
 800af52:	f04f 0200 	mov.w	r2, #0
 800af56:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	primitives[3].invert = 0;
 800af5a:	4b37      	ldr	r3, [pc, #220]	; (800b038 <motion_primitive_init+0x2e0>)
 800af5c:	2200      	movs	r2, #0
 800af5e:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
	primitives[3].time_reverse = 0;
 800af62:	4b35      	ldr	r3, [pc, #212]	; (800b038 <motion_primitive_init+0x2e0>)
 800af64:	2200      	movs	r2, #0
 800af66:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
	primitives[3].x_offset_m = 0;
 800af6a:	4b33      	ldr	r3, [pc, #204]	; (800b038 <motion_primitive_init+0x2e0>)
 800af6c:	f04f 0200 	mov.w	r2, #0
 800af70:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	primitives[3].y_offset_m = 0;
 800af74:	4b30      	ldr	r3, [pc, #192]	; (800b038 <motion_primitive_init+0x2e0>)
 800af76:	f04f 0200 	mov.w	r2, #0
 800af7a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	primitives[3].x_scale = 1.0;
 800af7e:	4b2e      	ldr	r3, [pc, #184]	; (800b038 <motion_primitive_init+0x2e0>)
 800af80:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800af84:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	primitives[3].y_scale = 1.0;
 800af88:	4b2b      	ldr	r3, [pc, #172]	; (800b038 <motion_primitive_init+0x2e0>)
 800af8a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800af8e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

	primitives[3].frames[0].t_part = 0.0;
 800af92:	4b29      	ldr	r3, [pc, #164]	; (800b038 <motion_primitive_init+0x2e0>)
 800af94:	f04f 0200 	mov.w	r2, #0
 800af98:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	primitives[3].frames[0].x = 0.07;
 800af9c:	4b26      	ldr	r3, [pc, #152]	; (800b038 <motion_primitive_init+0x2e0>)
 800af9e:	4a3b      	ldr	r2, [pc, #236]	; (800b08c <motion_primitive_init+0x334>)
 800afa0:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	primitives[3].frames[0].y = 0.0;
 800afa4:	4b24      	ldr	r3, [pc, #144]	; (800b038 <motion_primitive_init+0x2e0>)
 800afa6:	f04f 0200 	mov.w	r2, #0
 800afaa:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

	primitives[3].frames[1].t_part = 0.3;
 800afae:	4b22      	ldr	r3, [pc, #136]	; (800b038 <motion_primitive_init+0x2e0>)
 800afb0:	4a37      	ldr	r2, [pc, #220]	; (800b090 <motion_primitive_init+0x338>)
 800afb2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	primitives[3].frames[1].x = 0.09;
 800afb6:	4b20      	ldr	r3, [pc, #128]	; (800b038 <motion_primitive_init+0x2e0>)
 800afb8:	4a26      	ldr	r2, [pc, #152]	; (800b054 <motion_primitive_init+0x2fc>)
 800afba:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	primitives[3].frames[1].y = 0.0;
 800afbe:	4b1e      	ldr	r3, [pc, #120]	; (800b038 <motion_primitive_init+0x2e0>)
 800afc0:	f04f 0200 	mov.w	r2, #0
 800afc4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

	primitives[3].frames[2].t_part = 0.4;
 800afc8:	4b1b      	ldr	r3, [pc, #108]	; (800b038 <motion_primitive_init+0x2e0>)
 800afca:	4a32      	ldr	r2, [pc, #200]	; (800b094 <motion_primitive_init+0x33c>)
 800afcc:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	primitives[3].frames[2].x = 0.105;
 800afd0:	4b19      	ldr	r3, [pc, #100]	; (800b038 <motion_primitive_init+0x2e0>)
 800afd2:	4a1a      	ldr	r2, [pc, #104]	; (800b03c <motion_primitive_init+0x2e4>)
 800afd4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	primitives[3].frames[2].y = 0.0;
 800afd8:	4b17      	ldr	r3, [pc, #92]	; (800b038 <motion_primitive_init+0x2e0>)
 800afda:	f04f 0200 	mov.w	r2, #0
 800afde:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

	primitives[3].frames[3].t_part = 0.5;
 800afe2:	4b15      	ldr	r3, [pc, #84]	; (800b038 <motion_primitive_init+0x2e0>)
 800afe4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800afe8:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	primitives[3].frames[3].x = 0.05;
 800afec:	4b12      	ldr	r3, [pc, #72]	; (800b038 <motion_primitive_init+0x2e0>)
 800afee:	4a1b      	ldr	r2, [pc, #108]	; (800b05c <motion_primitive_init+0x304>)
 800aff0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	primitives[3].frames[3].y = 0.0;
 800aff4:	4b10      	ldr	r3, [pc, #64]	; (800b038 <motion_primitive_init+0x2e0>)
 800aff6:	f04f 0200 	mov.w	r2, #0
 800affa:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

	primitives[3].frames[4].t_part = 0.6;
 800affe:	4b0e      	ldr	r3, [pc, #56]	; (800b038 <motion_primitive_init+0x2e0>)
 800b000:	4a25      	ldr	r2, [pc, #148]	; (800b098 <motion_primitive_init+0x340>)
 800b002:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	primitives[3].frames[4].x = 0.07;
 800b006:	4b0c      	ldr	r3, [pc, #48]	; (800b038 <motion_primitive_init+0x2e0>)
 800b008:	4a20      	ldr	r2, [pc, #128]	; (800b08c <motion_primitive_init+0x334>)
 800b00a:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	primitives[3].frames[4].y = 0.0;
 800b00e:	4b0a      	ldr	r3, [pc, #40]	; (800b038 <motion_primitive_init+0x2e0>)
 800b010:	f04f 0200 	mov.w	r2, #0
 800b014:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	/*************  Bezier curves starting  **************************/

	// Slow trot walk with quadratic Bezier curve
	// Triangular, 1Hz, roughly 3X longer on ground than in air, front slightly forward of hip
	primitives[4].num_keyframes = 6;
 800b018:	4b07      	ldr	r3, [pc, #28]	; (800b038 <motion_primitive_init+0x2e0>)
 800b01a:	2206      	movs	r2, #6
 800b01c:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
	primitives[4].tau = 2.0;
 800b020:	4b05      	ldr	r3, [pc, #20]	; (800b038 <motion_primitive_init+0x2e0>)
 800b022:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b026:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	primitives[4].t_offset = 0.0;
 800b02a:	4b03      	ldr	r3, [pc, #12]	; (800b038 <motion_primitive_init+0x2e0>)
 800b02c:	f04f 0200 	mov.w	r2, #0
 800b030:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
 800b034:	e032      	b.n	800b09c <motion_primitive_init+0x344>
 800b036:	bf00      	nop
 800b038:	20015288 	.word	0x20015288
 800b03c:	3dd70a3d 	.word	0x3dd70a3d
 800b040:	3c23d70a 	.word	0x3c23d70a
 800b044:	bd4ccccd 	.word	0xbd4ccccd
 800b048:	3f600000 	.word	0x3f600000
 800b04c:	3d75c28f 	.word	0x3d75c28f
 800b050:	bca3d70a 	.word	0xbca3d70a
 800b054:	3db851ec 	.word	0x3db851ec
 800b058:	bc23d70a 	.word	0xbc23d70a
 800b05c:	3d4ccccd 	.word	0x3d4ccccd
 800b060:	3ca3d70a 	.word	0x3ca3d70a
 800b064:	3f733333 	.word	0x3f733333
 800b068:	3da3d70a 	.word	0x3da3d70a
 800b06c:	3d851eb8 	.word	0x3d851eb8
 800b070:	3cf5c28f 	.word	0x3cf5c28f
 800b074:	bcf5c28f 	.word	0xbcf5c28f
 800b078:	3f333333 	.word	0x3f333333
 800b07c:	bc75c28f 	.word	0xbc75c28f
 800b080:	3f666666 	.word	0x3f666666
 800b084:	3dc28f5c 	.word	0x3dc28f5c
 800b088:	3d23d70a 	.word	0x3d23d70a
 800b08c:	3d8f5c29 	.word	0x3d8f5c29
 800b090:	3e99999a 	.word	0x3e99999a
 800b094:	3ecccccd 	.word	0x3ecccccd
 800b098:	3f19999a 	.word	0x3f19999a
	primitives[4].invert = 0;
 800b09c:	4b70      	ldr	r3, [pc, #448]	; (800b260 <motion_primitive_init+0x508>)
 800b09e:	2200      	movs	r2, #0
 800b0a0:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
	primitives[4].time_reverse = 0;
 800b0a4:	4b6e      	ldr	r3, [pc, #440]	; (800b260 <motion_primitive_init+0x508>)
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
	primitives[4].x_offset_m = 0;
 800b0ac:	4b6c      	ldr	r3, [pc, #432]	; (800b260 <motion_primitive_init+0x508>)
 800b0ae:	f04f 0200 	mov.w	r2, #0
 800b0b2:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	primitives[4].y_offset_m = 0;
 800b0b6:	4b6a      	ldr	r3, [pc, #424]	; (800b260 <motion_primitive_init+0x508>)
 800b0b8:	f04f 0200 	mov.w	r2, #0
 800b0bc:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	primitives[4].x_scale = 1.0;
 800b0c0:	4b67      	ldr	r3, [pc, #412]	; (800b260 <motion_primitive_init+0x508>)
 800b0c2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b0c6:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	primitives[4].y_scale = 1.0;
 800b0ca:	4b65      	ldr	r3, [pc, #404]	; (800b260 <motion_primitive_init+0x508>)
 800b0cc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b0d0:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0

	primitives[4].frames[0].t_part = 0.0;
 800b0d4:	4b62      	ldr	r3, [pc, #392]	; (800b260 <motion_primitive_init+0x508>)
 800b0d6:	f04f 0200 	mov.w	r2, #0
 800b0da:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
	primitives[4].frames[0].x = 0.105;
 800b0de:	4b60      	ldr	r3, [pc, #384]	; (800b260 <motion_primitive_init+0x508>)
 800b0e0:	4a60      	ldr	r2, [pc, #384]	; (800b264 <motion_primitive_init+0x50c>)
 800b0e2:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	primitives[4].frames[0].y = 0.01;
 800b0e6:	4b5e      	ldr	r3, [pc, #376]	; (800b260 <motion_primitive_init+0x508>)
 800b0e8:	4a5f      	ldr	r2, [pc, #380]	; (800b268 <motion_primitive_init+0x510>)
 800b0ea:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

	primitives[4].frames[1].t_part = 0.375; // Time not used
 800b0ee:	4b5c      	ldr	r3, [pc, #368]	; (800b260 <motion_primitive_init+0x508>)
 800b0f0:	f04f 527b 	mov.w	r2, #1052770304	; 0x3ec00000
 800b0f4:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
	primitives[4].frames[1].x = 0.115;
 800b0f8:	4b59      	ldr	r3, [pc, #356]	; (800b260 <motion_primitive_init+0x508>)
 800b0fa:	4a5c      	ldr	r2, [pc, #368]	; (800b26c <motion_primitive_init+0x514>)
 800b0fc:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
	primitives[4].frames[1].y = -0.02;
 800b100:	4b57      	ldr	r3, [pc, #348]	; (800b260 <motion_primitive_init+0x508>)
 800b102:	4a5b      	ldr	r2, [pc, #364]	; (800b270 <motion_primitive_init+0x518>)
 800b104:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc

	primitives[4].frames[2].t_part = 0.75;
 800b108:	4b55      	ldr	r3, [pc, #340]	; (800b260 <motion_primitive_init+0x508>)
 800b10a:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 800b10e:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
	primitives[4].frames[2].x = 0.105;
 800b112:	4b53      	ldr	r3, [pc, #332]	; (800b260 <motion_primitive_init+0x508>)
 800b114:	4a53      	ldr	r2, [pc, #332]	; (800b264 <motion_primitive_init+0x50c>)
 800b116:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
	primitives[4].frames[2].y = -0.05;
 800b11a:	4b51      	ldr	r3, [pc, #324]	; (800b260 <motion_primitive_init+0x508>)
 800b11c:	4a55      	ldr	r2, [pc, #340]	; (800b274 <motion_primitive_init+0x51c>)
 800b11e:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8

	primitives[4].frames[3].t_part = 0.8; // Time not used
 800b122:	4b4f      	ldr	r3, [pc, #316]	; (800b260 <motion_primitive_init+0x508>)
 800b124:	4a54      	ldr	r2, [pc, #336]	; (800b278 <motion_primitive_init+0x520>)
 800b126:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	primitives[4].frames[3].x = 0.07;
 800b12a:	4b4d      	ldr	r3, [pc, #308]	; (800b260 <motion_primitive_init+0x508>)
 800b12c:	4a53      	ldr	r2, [pc, #332]	; (800b27c <motion_primitive_init+0x524>)
 800b12e:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	primitives[4].frames[3].y = -0.075;
 800b132:	4b4b      	ldr	r3, [pc, #300]	; (800b260 <motion_primitive_init+0x508>)
 800b134:	4a52      	ldr	r2, [pc, #328]	; (800b280 <motion_primitive_init+0x528>)
 800b136:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

	primitives[4].frames[4].t_part = 0.875;
 800b13a:	4b49      	ldr	r3, [pc, #292]	; (800b260 <motion_primitive_init+0x508>)
 800b13c:	4a51      	ldr	r2, [pc, #324]	; (800b284 <motion_primitive_init+0x52c>)
 800b13e:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	primitives[4].frames[4].x = 0.06;
 800b142:	4b47      	ldr	r3, [pc, #284]	; (800b260 <motion_primitive_init+0x508>)
 800b144:	4a50      	ldr	r2, [pc, #320]	; (800b288 <motion_primitive_init+0x530>)
 800b146:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	primitives[4].frames[4].y = -0.02;
 800b14a:	4b45      	ldr	r3, [pc, #276]	; (800b260 <motion_primitive_init+0x508>)
 800b14c:	4a48      	ldr	r2, [pc, #288]	; (800b270 <motion_primitive_init+0x518>)
 800b14e:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0

	primitives[4].frames[5].t_part = 0.9; // Time not used
 800b152:	4b43      	ldr	r3, [pc, #268]	; (800b260 <motion_primitive_init+0x508>)
 800b154:	4a4d      	ldr	r2, [pc, #308]	; (800b28c <motion_primitive_init+0x534>)
 800b156:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	primitives[4].frames[5].x = 0.07;
 800b15a:	4b41      	ldr	r3, [pc, #260]	; (800b260 <motion_primitive_init+0x508>)
 800b15c:	4a47      	ldr	r2, [pc, #284]	; (800b27c <motion_primitive_init+0x524>)
 800b15e:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	primitives[4].frames[5].y = 0.035;
 800b162:	4b3f      	ldr	r3, [pc, #252]	; (800b260 <motion_primitive_init+0x508>)
 800b164:	4a4a      	ldr	r2, [pc, #296]	; (800b290 <motion_primitive_init+0x538>)
 800b166:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec

	// Fast trot walk
	// Mostly triangular, in air roughly same as on ground, rear slightly backward of hip
	primitives[5].num_keyframes = 6;
 800b16a:	4b3d      	ldr	r3, [pc, #244]	; (800b260 <motion_primitive_init+0x508>)
 800b16c:	2206      	movs	r2, #6
 800b16e:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
	primitives[5].tau = 2.0;
 800b172:	4b3b      	ldr	r3, [pc, #236]	; (800b260 <motion_primitive_init+0x508>)
 800b174:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b178:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	primitives[5].t_offset = 0.0;
 800b17c:	4b38      	ldr	r3, [pc, #224]	; (800b260 <motion_primitive_init+0x508>)
 800b17e:	f04f 0200 	mov.w	r2, #0
 800b182:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	primitives[5].invert = 0;
 800b186:	4b36      	ldr	r3, [pc, #216]	; (800b260 <motion_primitive_init+0x508>)
 800b188:	2200      	movs	r2, #0
 800b18a:	f883 21f5 	strb.w	r2, [r3, #501]	; 0x1f5
	primitives[5].time_reverse = 0;
 800b18e:	4b34      	ldr	r3, [pc, #208]	; (800b260 <motion_primitive_init+0x508>)
 800b190:	2200      	movs	r2, #0
 800b192:	f883 21f6 	strb.w	r2, [r3, #502]	; 0x1f6
	primitives[5].x_offset_m = 0;
 800b196:	4b32      	ldr	r3, [pc, #200]	; (800b260 <motion_primitive_init+0x508>)
 800b198:	f04f 0200 	mov.w	r2, #0
 800b19c:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	primitives[5].y_offset_m = 0;
 800b1a0:	4b2f      	ldr	r3, [pc, #188]	; (800b260 <motion_primitive_init+0x508>)
 800b1a2:	f04f 0200 	mov.w	r2, #0
 800b1a6:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
	primitives[5].x_scale = 1.0;
 800b1aa:	4b2d      	ldr	r3, [pc, #180]	; (800b260 <motion_primitive_init+0x508>)
 800b1ac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b1b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	primitives[5].y_scale = 1.0;
 800b1b4:	4b2a      	ldr	r3, [pc, #168]	; (800b260 <motion_primitive_init+0x508>)
 800b1b6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b1ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

	primitives[5].frames[0].t_part = 0.0;
 800b1be:	4b28      	ldr	r3, [pc, #160]	; (800b260 <motion_primitive_init+0x508>)
 800b1c0:	f04f 0200 	mov.w	r2, #0
 800b1c4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	primitives[5].frames[0].x = 0.09;
 800b1c8:	4b25      	ldr	r3, [pc, #148]	; (800b260 <motion_primitive_init+0x508>)
 800b1ca:	4a32      	ldr	r2, [pc, #200]	; (800b294 <motion_primitive_init+0x53c>)
 800b1cc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	primitives[5].frames[0].y = 0.06;
 800b1d0:	4b23      	ldr	r3, [pc, #140]	; (800b260 <motion_primitive_init+0x508>)
 800b1d2:	4a2d      	ldr	r2, [pc, #180]	; (800b288 <motion_primitive_init+0x530>)
 800b1d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	primitives[5].frames[1].t_part = 0.25; // Time not used
 800b1d8:	4b21      	ldr	r3, [pc, #132]	; (800b260 <motion_primitive_init+0x508>)
 800b1da:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800b1de:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	primitives[5].frames[1].x = 0.105;
 800b1e2:	4b1f      	ldr	r3, [pc, #124]	; (800b260 <motion_primitive_init+0x508>)
 800b1e4:	4a1f      	ldr	r2, [pc, #124]	; (800b264 <motion_primitive_init+0x50c>)
 800b1e6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	primitives[5].frames[1].y = 0.025;
 800b1ea:	4b1d      	ldr	r3, [pc, #116]	; (800b260 <motion_primitive_init+0x508>)
 800b1ec:	4a2a      	ldr	r2, [pc, #168]	; (800b298 <motion_primitive_init+0x540>)
 800b1ee:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

	primitives[5].frames[2].t_part = 0.5;
 800b1f2:	4b1b      	ldr	r3, [pc, #108]	; (800b260 <motion_primitive_init+0x508>)
 800b1f4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800b1f8:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	primitives[5].frames[2].x = 0.09;
 800b1fc:	4b18      	ldr	r3, [pc, #96]	; (800b260 <motion_primitive_init+0x508>)
 800b1fe:	4a25      	ldr	r2, [pc, #148]	; (800b294 <motion_primitive_init+0x53c>)
 800b200:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	primitives[5].frames[2].y = -0.01;
 800b204:	4b16      	ldr	r3, [pc, #88]	; (800b260 <motion_primitive_init+0x508>)
 800b206:	4a25      	ldr	r2, [pc, #148]	; (800b29c <motion_primitive_init+0x544>)
 800b208:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c

	primitives[5].frames[3].t_part = 0.6; // Time not used
 800b20c:	4b14      	ldr	r3, [pc, #80]	; (800b260 <motion_primitive_init+0x508>)
 800b20e:	4a24      	ldr	r2, [pc, #144]	; (800b2a0 <motion_primitive_init+0x548>)
 800b210:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
	primitives[5].frames[3].x = 0.06;
 800b214:	4b12      	ldr	r3, [pc, #72]	; (800b260 <motion_primitive_init+0x508>)
 800b216:	4a1c      	ldr	r2, [pc, #112]	; (800b288 <motion_primitive_init+0x530>)
 800b218:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	primitives[5].frames[3].y = -0.025;
 800b21c:	4b10      	ldr	r3, [pc, #64]	; (800b260 <motion_primitive_init+0x508>)
 800b21e:	4a21      	ldr	r2, [pc, #132]	; (800b2a4 <motion_primitive_init+0x54c>)
 800b220:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

	primitives[5].frames[4].t_part = 0.75;
 800b224:	4b0e      	ldr	r3, [pc, #56]	; (800b260 <motion_primitive_init+0x508>)
 800b226:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 800b22a:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
	primitives[5].frames[4].x = 0.06;
 800b22e:	4b0c      	ldr	r3, [pc, #48]	; (800b260 <motion_primitive_init+0x508>)
 800b230:	4a15      	ldr	r2, [pc, #84]	; (800b288 <motion_primitive_init+0x530>)
 800b232:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	primitives[5].frames[4].y = 0.02;
 800b236:	4b0a      	ldr	r3, [pc, #40]	; (800b260 <motion_primitive_init+0x508>)
 800b238:	4a1b      	ldr	r2, [pc, #108]	; (800b2a8 <motion_primitive_init+0x550>)
 800b23a:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244

	primitives[5].frames[5].t_part = 0.85; // Time not used
 800b23e:	4b08      	ldr	r3, [pc, #32]	; (800b260 <motion_primitive_init+0x508>)
 800b240:	4a1a      	ldr	r2, [pc, #104]	; (800b2ac <motion_primitive_init+0x554>)
 800b242:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
	primitives[5].frames[5].x = 0.06;
 800b246:	4b06      	ldr	r3, [pc, #24]	; (800b260 <motion_primitive_init+0x508>)
 800b248:	4a0f      	ldr	r2, [pc, #60]	; (800b288 <motion_primitive_init+0x530>)
 800b24a:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
	primitives[5].frames[5].y = 0.08;
 800b24e:	4b04      	ldr	r3, [pc, #16]	; (800b260 <motion_primitive_init+0x508>)
 800b250:	4a17      	ldr	r2, [pc, #92]	; (800b2b0 <motion_primitive_init+0x558>)
 800b252:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 }
 800b256:	bf00      	nop
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr
 800b260:	20015288 	.word	0x20015288
 800b264:	3dd70a3d 	.word	0x3dd70a3d
 800b268:	3c23d70a 	.word	0x3c23d70a
 800b26c:	3deb851f 	.word	0x3deb851f
 800b270:	bca3d70a 	.word	0xbca3d70a
 800b274:	bd4ccccd 	.word	0xbd4ccccd
 800b278:	3f4ccccd 	.word	0x3f4ccccd
 800b27c:	3d8f5c29 	.word	0x3d8f5c29
 800b280:	bd99999a 	.word	0xbd99999a
 800b284:	3f600000 	.word	0x3f600000
 800b288:	3d75c28f 	.word	0x3d75c28f
 800b28c:	3f666666 	.word	0x3f666666
 800b290:	3d0f5c29 	.word	0x3d0f5c29
 800b294:	3db851ec 	.word	0x3db851ec
 800b298:	3ccccccd 	.word	0x3ccccccd
 800b29c:	bc23d70a 	.word	0xbc23d70a
 800b2a0:	3f19999a 	.word	0x3f19999a
 800b2a4:	bccccccd 	.word	0xbccccccd
 800b2a8:	3ca3d70a 	.word	0x3ca3d70a
 800b2ac:	3f59999a 	.word	0x3f59999a
 800b2b0:	3da3d70a 	.word	0x3da3d70a

0800b2b4 <motion_primitive_time_sync>:

 void motion_primitive_time_sync(uint32_t external_time)
 {
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
	time_offset = (xTaskGetTickCount() - external_time);
 800b2bc:	f7fd fb60 	bl	8008980 <xTaskGetTickCount>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	1ad3      	subs	r3, r2, r3
 800b2c8:	4a02      	ldr	r2, [pc, #8]	; (800b2d4 <motion_primitive_time_sync+0x20>)
 800b2ca:	6013      	str	r3, [r2, #0]
 }
 800b2cc:	bf00      	nop
 800b2ce:	3708      	adds	r7, #8
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}
 800b2d4:	20015284 	.word	0x20015284

0800b2d8 <motion_primitive_set_index>:

 void motion_primitive_set_index(uint8_t index)
 {
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	4603      	mov	r3, r0
 800b2e0:	71fb      	strb	r3, [r7, #7]
	if(index >= NUMBER_PRIMITIVES)
 800b2e2:	79fb      	ldrb	r3, [r7, #7]
 800b2e4:	2b05      	cmp	r3, #5
 800b2e6:	d803      	bhi.n	800b2f0 <motion_primitive_set_index+0x18>
	{
		return;
	}
	primitive_index = index;
 800b2e8:	4a04      	ldr	r2, [pc, #16]	; (800b2fc <motion_primitive_set_index+0x24>)
 800b2ea:	79fb      	ldrb	r3, [r7, #7]
 800b2ec:	7013      	strb	r3, [r2, #0]
 800b2ee:	e000      	b.n	800b2f2 <motion_primitive_set_index+0x1a>
		return;
 800b2f0:	bf00      	nop
 }
 800b2f2:	370c      	adds	r7, #12
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr
 800b2fc:	20015280 	.word	0x20015280

0800b300 <motion_primitive_set_timing>:

 void motion_primitive_set_timing(uint8_t index, float tau, float t_offset, uint8_t invert, uint8_t time_reverse)
 {
 800b300:	b480      	push	{r7}
 800b302:	b085      	sub	sp, #20
 800b304:	af00      	add	r7, sp, #0
 800b306:	4603      	mov	r3, r0
 800b308:	ed87 0a02 	vstr	s0, [r7, #8]
 800b30c:	edc7 0a01 	vstr	s1, [r7, #4]
 800b310:	73fb      	strb	r3, [r7, #15]
 800b312:	460b      	mov	r3, r1
 800b314:	73bb      	strb	r3, [r7, #14]
 800b316:	4613      	mov	r3, r2
 800b318:	737b      	strb	r3, [r7, #13]
	if(index >= NUMBER_PRIMITIVES)
 800b31a:	7bfb      	ldrb	r3, [r7, #15]
 800b31c:	2b05      	cmp	r3, #5
 800b31e:	d824      	bhi.n	800b36a <motion_primitive_set_timing+0x6a>
	{
		return;
	}
	primitives[index].tau = tau;
 800b320:	7bfb      	ldrb	r3, [r7, #15]
 800b322:	4a15      	ldr	r2, [pc, #84]	; (800b378 <motion_primitive_set_timing+0x78>)
 800b324:	2164      	movs	r1, #100	; 0x64
 800b326:	fb01 f303 	mul.w	r3, r1, r3
 800b32a:	4413      	add	r3, r2
 800b32c:	3314      	adds	r3, #20
 800b32e:	68ba      	ldr	r2, [r7, #8]
 800b330:	601a      	str	r2, [r3, #0]
	primitives[index].t_offset = t_offset;
 800b332:	7bfb      	ldrb	r3, [r7, #15]
 800b334:	4a10      	ldr	r2, [pc, #64]	; (800b378 <motion_primitive_set_timing+0x78>)
 800b336:	2164      	movs	r1, #100	; 0x64
 800b338:	fb01 f303 	mul.w	r3, r1, r3
 800b33c:	4413      	add	r3, r2
 800b33e:	3318      	adds	r3, #24
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	601a      	str	r2, [r3, #0]
	primitives[index].invert = invert;
 800b344:	7bfb      	ldrb	r3, [r7, #15]
 800b346:	4a0c      	ldr	r2, [pc, #48]	; (800b378 <motion_primitive_set_timing+0x78>)
 800b348:	2164      	movs	r1, #100	; 0x64
 800b34a:	fb01 f303 	mul.w	r3, r1, r3
 800b34e:	4413      	add	r3, r2
 800b350:	3301      	adds	r3, #1
 800b352:	7bba      	ldrb	r2, [r7, #14]
 800b354:	701a      	strb	r2, [r3, #0]
	primitives[index].time_reverse = time_reverse;
 800b356:	7bfb      	ldrb	r3, [r7, #15]
 800b358:	4a07      	ldr	r2, [pc, #28]	; (800b378 <motion_primitive_set_timing+0x78>)
 800b35a:	2164      	movs	r1, #100	; 0x64
 800b35c:	fb01 f303 	mul.w	r3, r1, r3
 800b360:	4413      	add	r3, r2
 800b362:	3302      	adds	r3, #2
 800b364:	7b7a      	ldrb	r2, [r7, #13]
 800b366:	701a      	strb	r2, [r3, #0]
 800b368:	e000      	b.n	800b36c <motion_primitive_set_timing+0x6c>
		return;
 800b36a:	bf00      	nop
 }
 800b36c:	3714      	adds	r7, #20
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr
 800b376:	bf00      	nop
 800b378:	20015288 	.word	0x20015288

0800b37c <motion_primitive_set_scaling>:

 void motion_primitive_set_scaling(uint8_t index, float x_offset, float y_offset, float x_scale, float y_scale)
 {
 800b37c:	b480      	push	{r7}
 800b37e:	b087      	sub	sp, #28
 800b380:	af00      	add	r7, sp, #0
 800b382:	4603      	mov	r3, r0
 800b384:	ed87 0a04 	vstr	s0, [r7, #16]
 800b388:	edc7 0a03 	vstr	s1, [r7, #12]
 800b38c:	ed87 1a02 	vstr	s2, [r7, #8]
 800b390:	edc7 1a01 	vstr	s3, [r7, #4]
 800b394:	75fb      	strb	r3, [r7, #23]
	if(index >= NUMBER_PRIMITIVES)
 800b396:	7dfb      	ldrb	r3, [r7, #23]
 800b398:	2b05      	cmp	r3, #5
 800b39a:	d824      	bhi.n	800b3e6 <motion_primitive_set_scaling+0x6a>
	{
		return;
	}
	primitives[index].x_offset_m = x_offset;
 800b39c:	7dfb      	ldrb	r3, [r7, #23]
 800b39e:	4a15      	ldr	r2, [pc, #84]	; (800b3f4 <motion_primitive_set_scaling+0x78>)
 800b3a0:	2164      	movs	r1, #100	; 0x64
 800b3a2:	fb01 f303 	mul.w	r3, r1, r3
 800b3a6:	4413      	add	r3, r2
 800b3a8:	3304      	adds	r3, #4
 800b3aa:	693a      	ldr	r2, [r7, #16]
 800b3ac:	601a      	str	r2, [r3, #0]
	primitives[index].y_offset_m = y_offset;
 800b3ae:	7dfb      	ldrb	r3, [r7, #23]
 800b3b0:	4a10      	ldr	r2, [pc, #64]	; (800b3f4 <motion_primitive_set_scaling+0x78>)
 800b3b2:	2164      	movs	r1, #100	; 0x64
 800b3b4:	fb01 f303 	mul.w	r3, r1, r3
 800b3b8:	4413      	add	r3, r2
 800b3ba:	3308      	adds	r3, #8
 800b3bc:	68fa      	ldr	r2, [r7, #12]
 800b3be:	601a      	str	r2, [r3, #0]
	primitives[index].x_scale = x_scale;
 800b3c0:	7dfb      	ldrb	r3, [r7, #23]
 800b3c2:	4a0c      	ldr	r2, [pc, #48]	; (800b3f4 <motion_primitive_set_scaling+0x78>)
 800b3c4:	2164      	movs	r1, #100	; 0x64
 800b3c6:	fb01 f303 	mul.w	r3, r1, r3
 800b3ca:	4413      	add	r3, r2
 800b3cc:	330c      	adds	r3, #12
 800b3ce:	68ba      	ldr	r2, [r7, #8]
 800b3d0:	601a      	str	r2, [r3, #0]
	primitives[index].y_scale = y_scale;
 800b3d2:	7dfb      	ldrb	r3, [r7, #23]
 800b3d4:	4a07      	ldr	r2, [pc, #28]	; (800b3f4 <motion_primitive_set_scaling+0x78>)
 800b3d6:	2164      	movs	r1, #100	; 0x64
 800b3d8:	fb01 f303 	mul.w	r3, r1, r3
 800b3dc:	4413      	add	r3, r2
 800b3de:	3310      	adds	r3, #16
 800b3e0:	687a      	ldr	r2, [r7, #4]
 800b3e2:	601a      	str	r2, [r3, #0]
 800b3e4:	e000      	b.n	800b3e8 <motion_primitive_set_scaling+0x6c>
		return;
 800b3e6:	bf00      	nop
 }
 800b3e8:	371c      	adds	r7, #28
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr
 800b3f2:	bf00      	nop
 800b3f4:	20015288 	.word	0x20015288

0800b3f8 <motion_primitive_get_position>:

 void motion_primitive_get_position(float * x, float * y)
 {
 800b3f8:	b5b0      	push	{r4, r5, r7, lr}
 800b3fa:	b08c      	sub	sp, #48	; 0x30
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
	// First find global time,taking into account time syncs and primitive local offsets
	float current_t = 0.001 * (xTaskGetTickCount() - time_offset) - primitives[primitive_index].t_offset;
 800b402:	f7fd fabd 	bl	8008980 <xTaskGetTickCount>
 800b406:	4603      	mov	r3, r0
 800b408:	461a      	mov	r2, r3
 800b40a:	4b3f      	ldr	r3, [pc, #252]	; (800b508 <motion_primitive_get_position+0x110>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	1ad3      	subs	r3, r2, r3
 800b410:	4618      	mov	r0, r3
 800b412:	f7f5 f81f 	bl	8000454 <__aeabi_ui2d>
 800b416:	a33a      	add	r3, pc, #232	; (adr r3, 800b500 <motion_primitive_get_position+0x108>)
 800b418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41c:	f7f5 f894 	bl	8000548 <__aeabi_dmul>
 800b420:	4603      	mov	r3, r0
 800b422:	460c      	mov	r4, r1
 800b424:	4625      	mov	r5, r4
 800b426:	461c      	mov	r4, r3
 800b428:	4b38      	ldr	r3, [pc, #224]	; (800b50c <motion_primitive_get_position+0x114>)
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	4619      	mov	r1, r3
 800b430:	4a37      	ldr	r2, [pc, #220]	; (800b510 <motion_primitive_get_position+0x118>)
 800b432:	2364      	movs	r3, #100	; 0x64
 800b434:	fb03 f301 	mul.w	r3, r3, r1
 800b438:	4413      	add	r3, r2
 800b43a:	3318      	adds	r3, #24
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	4618      	mov	r0, r3
 800b440:	f7f5 f82a 	bl	8000498 <__aeabi_f2d>
 800b444:	4602      	mov	r2, r0
 800b446:	460b      	mov	r3, r1
 800b448:	4620      	mov	r0, r4
 800b44a:	4629      	mov	r1, r5
 800b44c:	f7f4 fec4 	bl	80001d8 <__aeabi_dsub>
 800b450:	4603      	mov	r3, r0
 800b452:	460c      	mov	r4, r1
 800b454:	4618      	mov	r0, r3
 800b456:	4621      	mov	r1, r4
 800b458:	f7f5 fb6e 	bl	8000b38 <__aeabi_d2f>
 800b45c:	4603      	mov	r3, r0
 800b45e:	627b      	str	r3, [r7, #36]	; 0x24

	float time_in_cycle = fmod(current_t, primitives[primitive_index].tau);
 800b460:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b462:	f7f5 f819 	bl	8000498 <__aeabi_f2d>
 800b466:	4604      	mov	r4, r0
 800b468:	460d      	mov	r5, r1
 800b46a:	4b28      	ldr	r3, [pc, #160]	; (800b50c <motion_primitive_get_position+0x114>)
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	b2db      	uxtb	r3, r3
 800b470:	4619      	mov	r1, r3
 800b472:	4a27      	ldr	r2, [pc, #156]	; (800b510 <motion_primitive_get_position+0x118>)
 800b474:	2364      	movs	r3, #100	; 0x64
 800b476:	fb03 f301 	mul.w	r3, r3, r1
 800b47a:	4413      	add	r3, r2
 800b47c:	3314      	adds	r3, #20
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4618      	mov	r0, r3
 800b482:	f7f5 f809 	bl	8000498 <__aeabi_f2d>
 800b486:	4602      	mov	r2, r0
 800b488:	460b      	mov	r3, r1
 800b48a:	ec43 2b11 	vmov	d1, r2, r3
 800b48e:	ec45 4b10 	vmov	d0, r4, r5
 800b492:	f001 faf7 	bl	800ca84 <fmod>
 800b496:	ec54 3b10 	vmov	r3, r4, d0
 800b49a:	4618      	mov	r0, r3
 800b49c:	4621      	mov	r1, r4
 800b49e:	f7f5 fb4b 	bl	8000b38 <__aeabi_d2f>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	623b      	str	r3, [r7, #32]
	float time_in_cycle_part = time_in_cycle / primitives[primitive_index].tau; // Prevent further mults
 800b4a6:	4b19      	ldr	r3, [pc, #100]	; (800b50c <motion_primitive_get_position+0x114>)
 800b4a8:	781b      	ldrb	r3, [r3, #0]
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	4a18      	ldr	r2, [pc, #96]	; (800b510 <motion_primitive_get_position+0x118>)
 800b4b0:	2364      	movs	r3, #100	; 0x64
 800b4b2:	fb03 f301 	mul.w	r3, r3, r1
 800b4b6:	4413      	add	r3, r2
 800b4b8:	3314      	adds	r3, #20
 800b4ba:	ed93 7a00 	vldr	s14, [r3]
 800b4be:	edd7 6a08 	vldr	s13, [r7, #32]
 800b4c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4c6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	if(primitives[primitive_index].time_reverse > 0)
 800b4ca:	4b10      	ldr	r3, [pc, #64]	; (800b50c <motion_primitive_get_position+0x114>)
 800b4cc:	781b      	ldrb	r3, [r3, #0]
 800b4ce:	b2db      	uxtb	r3, r3
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	4a0f      	ldr	r2, [pc, #60]	; (800b510 <motion_primitive_get_position+0x118>)
 800b4d4:	2364      	movs	r3, #100	; 0x64
 800b4d6:	fb03 f301 	mul.w	r3, r3, r1
 800b4da:	4413      	add	r3, r2
 800b4dc:	3302      	adds	r3, #2
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d007      	beq.n	800b4f4 <motion_primitive_get_position+0xfc>
	{
		time_in_cycle_part = 1.0 - time_in_cycle_part;
 800b4e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b4e8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800b4ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b4f0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	}

	// Now find where we are in the cycle and linearly interpolate
	int i;
	float x_cmd, y_cmd;
	for(i = 1; i < primitives[primitive_index].num_keyframes; i++)
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4f8:	e2a3      	b.n	800ba42 <motion_primitive_get_position+0x64a>
 800b4fa:	bf00      	nop
 800b4fc:	f3af 8000 	nop.w
 800b500:	d2f1a9fc 	.word	0xd2f1a9fc
 800b504:	3f50624d 	.word	0x3f50624d
 800b508:	20015284 	.word	0x20015284
 800b50c:	20015280 	.word	0x20015280
 800b510:	20015288 	.word	0x20015288
	{
		// Are we between keyframes?
		if(time_in_cycle_part >= primitives[primitive_index].frames[i-1].t_part && time_in_cycle_part < primitives[primitive_index].frames[i].t_part)
 800b514:	4baa      	ldr	r3, [pc, #680]	; (800b7c0 <motion_primitive_get_position+0x3c8>)
 800b516:	781b      	ldrb	r3, [r3, #0]
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	4618      	mov	r0, r3
 800b51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b51e:	1e5a      	subs	r2, r3, #1
 800b520:	49a8      	ldr	r1, [pc, #672]	; (800b7c4 <motion_primitive_get_position+0x3cc>)
 800b522:	4613      	mov	r3, r2
 800b524:	005b      	lsls	r3, r3, #1
 800b526:	4413      	add	r3, r2
 800b528:	009b      	lsls	r3, r3, #2
 800b52a:	2264      	movs	r2, #100	; 0x64
 800b52c:	fb02 f200 	mul.w	r2, r2, r0
 800b530:	4413      	add	r3, r2
 800b532:	440b      	add	r3, r1
 800b534:	3324      	adds	r3, #36	; 0x24
 800b536:	edd3 7a00 	vldr	s15, [r3]
 800b53a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b53e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b546:	f2c0 813f 	blt.w	800b7c8 <motion_primitive_get_position+0x3d0>
 800b54a:	4b9d      	ldr	r3, [pc, #628]	; (800b7c0 <motion_primitive_get_position+0x3c8>)
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	b2db      	uxtb	r3, r3
 800b550:	4618      	mov	r0, r3
 800b552:	499c      	ldr	r1, [pc, #624]	; (800b7c4 <motion_primitive_get_position+0x3cc>)
 800b554:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b556:	4613      	mov	r3, r2
 800b558:	005b      	lsls	r3, r3, #1
 800b55a:	4413      	add	r3, r2
 800b55c:	009b      	lsls	r3, r3, #2
 800b55e:	2264      	movs	r2, #100	; 0x64
 800b560:	fb02 f200 	mul.w	r2, r2, r0
 800b564:	4413      	add	r3, r2
 800b566:	440b      	add	r3, r1
 800b568:	3324      	adds	r3, #36	; 0x24
 800b56a:	edd3 7a00 	vldr	s15, [r3]
 800b56e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b572:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b57a:	f140 8125 	bpl.w	800b7c8 <motion_primitive_get_position+0x3d0>
		{
			// Last value plus section of new value
			float dt = (time_in_cycle_part - primitives[primitive_index].frames[i-1].t_part);
 800b57e:	4b90      	ldr	r3, [pc, #576]	; (800b7c0 <motion_primitive_get_position+0x3c8>)
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	b2db      	uxtb	r3, r3
 800b584:	4618      	mov	r0, r3
 800b586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b588:	1e5a      	subs	r2, r3, #1
 800b58a:	498e      	ldr	r1, [pc, #568]	; (800b7c4 <motion_primitive_get_position+0x3cc>)
 800b58c:	4613      	mov	r3, r2
 800b58e:	005b      	lsls	r3, r3, #1
 800b590:	4413      	add	r3, r2
 800b592:	009b      	lsls	r3, r3, #2
 800b594:	2264      	movs	r2, #100	; 0x64
 800b596:	fb02 f200 	mul.w	r2, r2, r0
 800b59a:	4413      	add	r3, r2
 800b59c:	440b      	add	r3, r1
 800b59e:	3324      	adds	r3, #36	; 0x24
 800b5a0:	edd3 7a00 	vldr	s15, [r3]
 800b5a4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b5a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5ac:	edc7 7a07 	vstr	s15, [r7, #28]
			float d_section_dt = 1.0 / (primitives[primitive_index].frames[i].t_part - primitives[primitive_index].frames[i-1].t_part);
 800b5b0:	4b83      	ldr	r3, [pc, #524]	; (800b7c0 <motion_primitive_get_position+0x3c8>)
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	b2db      	uxtb	r3, r3
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	4982      	ldr	r1, [pc, #520]	; (800b7c4 <motion_primitive_get_position+0x3cc>)
 800b5ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5bc:	4613      	mov	r3, r2
 800b5be:	005b      	lsls	r3, r3, #1
 800b5c0:	4413      	add	r3, r2
 800b5c2:	009b      	lsls	r3, r3, #2
 800b5c4:	2264      	movs	r2, #100	; 0x64
 800b5c6:	fb02 f200 	mul.w	r2, r2, r0
 800b5ca:	4413      	add	r3, r2
 800b5cc:	440b      	add	r3, r1
 800b5ce:	3324      	adds	r3, #36	; 0x24
 800b5d0:	ed93 7a00 	vldr	s14, [r3]
 800b5d4:	4b7a      	ldr	r3, [pc, #488]	; (800b7c0 <motion_primitive_get_position+0x3c8>)
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	b2db      	uxtb	r3, r3
 800b5da:	4618      	mov	r0, r3
 800b5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5de:	1e5a      	subs	r2, r3, #1
 800b5e0:	4978      	ldr	r1, [pc, #480]	; (800b7c4 <motion_primitive_get_position+0x3cc>)
 800b5e2:	4613      	mov	r3, r2
 800b5e4:	005b      	lsls	r3, r3, #1
 800b5e6:	4413      	add	r3, r2
 800b5e8:	009b      	lsls	r3, r3, #2
 800b5ea:	2264      	movs	r2, #100	; 0x64
 800b5ec:	fb02 f200 	mul.w	r2, r2, r0
 800b5f0:	4413      	add	r3, r2
 800b5f2:	440b      	add	r3, r1
 800b5f4:	3324      	adds	r3, #36	; 0x24
 800b5f6:	edd3 7a00 	vldr	s15, [r3]
 800b5fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b5fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b602:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b606:	edc7 7a06 	vstr	s15, [r7, #24]
			x_cmd = primitives[primitive_index].frames[i-1].x + (dt * (primitives[primitive_index].frames[i].x - primitives[primitive_index].frames[i-1].x) * d_section_dt);
 800b60a:	4b6d      	ldr	r3, [pc, #436]	; (800b7c0 <motion_primitive_get_position+0x3c8>)
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	b2db      	uxtb	r3, r3
 800b610:	4618      	mov	r0, r3
 800b612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b614:	1e5a      	subs	r2, r3, #1
 800b616:	496b      	ldr	r1, [pc, #428]	; (800b7c4 <motion_primitive_get_position+0x3cc>)
 800b618:	4613      	mov	r3, r2
 800b61a:	005b      	lsls	r3, r3, #1
 800b61c:	4413      	add	r3, r2
 800b61e:	009b      	lsls	r3, r3, #2
 800b620:	2264      	movs	r2, #100	; 0x64
 800b622:	fb02 f200 	mul.w	r2, r2, r0
 800b626:	4413      	add	r3, r2
 800b628:	440b      	add	r3, r1
 800b62a:	331c      	adds	r3, #28
 800b62c:	ed93 7a00 	vldr	s14, [r3]
 800b630:	4b63      	ldr	r3, [pc, #396]	; (800b7c0 <motion_primitive_get_position+0x3c8>)
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	b2db      	uxtb	r3, r3
 800b636:	4618      	mov	r0, r3
 800b638:	4962      	ldr	r1, [pc, #392]	; (800b7c4 <motion_primitive_get_position+0x3cc>)
 800b63a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b63c:	4613      	mov	r3, r2
 800b63e:	005b      	lsls	r3, r3, #1
 800b640:	4413      	add	r3, r2
 800b642:	009b      	lsls	r3, r3, #2
 800b644:	2264      	movs	r2, #100	; 0x64
 800b646:	fb02 f200 	mul.w	r2, r2, r0
 800b64a:	4413      	add	r3, r2
 800b64c:	440b      	add	r3, r1
 800b64e:	331c      	adds	r3, #28
 800b650:	edd3 6a00 	vldr	s13, [r3]
 800b654:	4b5a      	ldr	r3, [pc, #360]	; (800b7c0 <motion_primitive_get_position+0x3c8>)
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	b2db      	uxtb	r3, r3
 800b65a:	4618      	mov	r0, r3
 800b65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65e:	1e5a      	subs	r2, r3, #1
 800b660:	4958      	ldr	r1, [pc, #352]	; (800b7c4 <motion_primitive_get_position+0x3cc>)
 800b662:	4613      	mov	r3, r2
 800b664:	005b      	lsls	r3, r3, #1
 800b666:	4413      	add	r3, r2
 800b668:	009b      	lsls	r3, r3, #2
 800b66a:	2264      	movs	r2, #100	; 0x64
 800b66c:	fb02 f200 	mul.w	r2, r2, r0
 800b670:	4413      	add	r3, r2
 800b672:	440b      	add	r3, r1
 800b674:	331c      	adds	r3, #28
 800b676:	edd3 7a00 	vldr	s15, [r3]
 800b67a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b67e:	edd7 7a07 	vldr	s15, [r7, #28]
 800b682:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b686:	edd7 7a06 	vldr	s15, [r7, #24]
 800b68a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b68e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b692:	edc7 7a05 	vstr	s15, [r7, #20]
			y_cmd = primitives[primitive_index].frames[i-1].y + (dt * (primitives[primitive_index].frames[i].y - primitives[primitive_index].frames[i-1].y) * d_section_dt);
 800b696:	4b4a      	ldr	r3, [pc, #296]	; (800b7c0 <motion_primitive_get_position+0x3c8>)
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	b2db      	uxtb	r3, r3
 800b69c:	4618      	mov	r0, r3
 800b69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a0:	1e5a      	subs	r2, r3, #1
 800b6a2:	4948      	ldr	r1, [pc, #288]	; (800b7c4 <motion_primitive_get_position+0x3cc>)
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	005b      	lsls	r3, r3, #1
 800b6a8:	4413      	add	r3, r2
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	2264      	movs	r2, #100	; 0x64
 800b6ae:	fb02 f200 	mul.w	r2, r2, r0
 800b6b2:	4413      	add	r3, r2
 800b6b4:	440b      	add	r3, r1
 800b6b6:	3320      	adds	r3, #32
 800b6b8:	ed93 7a00 	vldr	s14, [r3]
 800b6bc:	4b40      	ldr	r3, [pc, #256]	; (800b7c0 <motion_primitive_get_position+0x3c8>)
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	493f      	ldr	r1, [pc, #252]	; (800b7c4 <motion_primitive_get_position+0x3cc>)
 800b6c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6c8:	4613      	mov	r3, r2
 800b6ca:	005b      	lsls	r3, r3, #1
 800b6cc:	4413      	add	r3, r2
 800b6ce:	009b      	lsls	r3, r3, #2
 800b6d0:	2264      	movs	r2, #100	; 0x64
 800b6d2:	fb02 f200 	mul.w	r2, r2, r0
 800b6d6:	4413      	add	r3, r2
 800b6d8:	440b      	add	r3, r1
 800b6da:	3320      	adds	r3, #32
 800b6dc:	edd3 6a00 	vldr	s13, [r3]
 800b6e0:	4b37      	ldr	r3, [pc, #220]	; (800b7c0 <motion_primitive_get_position+0x3c8>)
 800b6e2:	781b      	ldrb	r3, [r3, #0]
 800b6e4:	b2db      	uxtb	r3, r3
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ea:	1e5a      	subs	r2, r3, #1
 800b6ec:	4935      	ldr	r1, [pc, #212]	; (800b7c4 <motion_primitive_get_position+0x3cc>)
 800b6ee:	4613      	mov	r3, r2
 800b6f0:	005b      	lsls	r3, r3, #1
 800b6f2:	4413      	add	r3, r2
 800b6f4:	009b      	lsls	r3, r3, #2
 800b6f6:	2264      	movs	r2, #100	; 0x64
 800b6f8:	fb02 f200 	mul.w	r2, r2, r0
 800b6fc:	4413      	add	r3, r2
 800b6fe:	440b      	add	r3, r1
 800b700:	3320      	adds	r3, #32
 800b702:	edd3 7a00 	vldr	s15, [r3]
 800b706:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b70a:	edd7 7a07 	vldr	s15, [r7, #28]
 800b70e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b712:	edd7 7a06 	vldr	s15, [r7, #24]
 800b716:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b71a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b71e:	edc7 7a04 	vstr	s15, [r7, #16]
			// Apply offset, then scale it
			x_cmd += primitives[primitive_index].x_offset_m;
 800b722:	4b27      	ldr	r3, [pc, #156]	; (800b7c0 <motion_primitive_get_position+0x3c8>)
 800b724:	781b      	ldrb	r3, [r3, #0]
 800b726:	b2db      	uxtb	r3, r3
 800b728:	4619      	mov	r1, r3
 800b72a:	4a26      	ldr	r2, [pc, #152]	; (800b7c4 <motion_primitive_get_position+0x3cc>)
 800b72c:	2364      	movs	r3, #100	; 0x64
 800b72e:	fb03 f301 	mul.w	r3, r3, r1
 800b732:	4413      	add	r3, r2
 800b734:	3304      	adds	r3, #4
 800b736:	edd3 7a00 	vldr	s15, [r3]
 800b73a:	ed97 7a05 	vldr	s14, [r7, #20]
 800b73e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b742:	edc7 7a05 	vstr	s15, [r7, #20]
			x_cmd *= primitives[primitive_index].x_scale;
 800b746:	4b1e      	ldr	r3, [pc, #120]	; (800b7c0 <motion_primitive_get_position+0x3c8>)
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	4619      	mov	r1, r3
 800b74e:	4a1d      	ldr	r2, [pc, #116]	; (800b7c4 <motion_primitive_get_position+0x3cc>)
 800b750:	2364      	movs	r3, #100	; 0x64
 800b752:	fb03 f301 	mul.w	r3, r3, r1
 800b756:	4413      	add	r3, r2
 800b758:	330c      	adds	r3, #12
 800b75a:	edd3 7a00 	vldr	s15, [r3]
 800b75e:	ed97 7a05 	vldr	s14, [r7, #20]
 800b762:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b766:	edc7 7a05 	vstr	s15, [r7, #20]
			y_cmd += primitives[primitive_index].y_offset_m;
 800b76a:	4b15      	ldr	r3, [pc, #84]	; (800b7c0 <motion_primitive_get_position+0x3c8>)
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	b2db      	uxtb	r3, r3
 800b770:	4619      	mov	r1, r3
 800b772:	4a14      	ldr	r2, [pc, #80]	; (800b7c4 <motion_primitive_get_position+0x3cc>)
 800b774:	2364      	movs	r3, #100	; 0x64
 800b776:	fb03 f301 	mul.w	r3, r3, r1
 800b77a:	4413      	add	r3, r2
 800b77c:	3308      	adds	r3, #8
 800b77e:	edd3 7a00 	vldr	s15, [r3]
 800b782:	ed97 7a04 	vldr	s14, [r7, #16]
 800b786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b78a:	edc7 7a04 	vstr	s15, [r7, #16]
			y_cmd *= primitives[primitive_index].y_scale;
 800b78e:	4b0c      	ldr	r3, [pc, #48]	; (800b7c0 <motion_primitive_get_position+0x3c8>)
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	b2db      	uxtb	r3, r3
 800b794:	4619      	mov	r1, r3
 800b796:	4a0b      	ldr	r2, [pc, #44]	; (800b7c4 <motion_primitive_get_position+0x3cc>)
 800b798:	2364      	movs	r3, #100	; 0x64
 800b79a:	fb03 f301 	mul.w	r3, r3, r1
 800b79e:	4413      	add	r3, r2
 800b7a0:	3310      	adds	r3, #16
 800b7a2:	edd3 7a00 	vldr	s15, [r3]
 800b7a6:	ed97 7a04 	vldr	s14, [r7, #16]
 800b7aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7ae:	edc7 7a04 	vstr	s15, [r7, #16]

			*x = x_cmd;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	697a      	ldr	r2, [r7, #20]
 800b7b6:	601a      	str	r2, [r3, #0]
			*y = y_cmd;
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	693a      	ldr	r2, [r7, #16]
 800b7bc:	601a      	str	r2, [r3, #0]
			return;
 800b7be:	e14f      	b.n	800ba60 <motion_primitive_get_position+0x668>
 800b7c0:	20015280 	.word	0x20015280
 800b7c4:	20015288 	.word	0x20015288
		}
		// Are we at the end, and after last keyframe
		if(i == (primitives[primitive_index].num_keyframes-1) && time_in_cycle_part >= primitives[primitive_index].frames[i].t_part)
 800b7c8:	4ba7      	ldr	r3, [pc, #668]	; (800ba68 <motion_primitive_get_position+0x670>)
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	b2db      	uxtb	r3, r3
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	4aa6      	ldr	r2, [pc, #664]	; (800ba6c <motion_primitive_get_position+0x674>)
 800b7d2:	2364      	movs	r3, #100	; 0x64
 800b7d4:	fb03 f301 	mul.w	r3, r3, r1
 800b7d8:	4413      	add	r3, r2
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	3b01      	subs	r3, #1
 800b7de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	f040 812b 	bne.w	800ba3c <motion_primitive_get_position+0x644>
 800b7e6:	4ba0      	ldr	r3, [pc, #640]	; (800ba68 <motion_primitive_get_position+0x670>)
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	b2db      	uxtb	r3, r3
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	499f      	ldr	r1, [pc, #636]	; (800ba6c <motion_primitive_get_position+0x674>)
 800b7f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7f2:	4613      	mov	r3, r2
 800b7f4:	005b      	lsls	r3, r3, #1
 800b7f6:	4413      	add	r3, r2
 800b7f8:	009b      	lsls	r3, r3, #2
 800b7fa:	2264      	movs	r2, #100	; 0x64
 800b7fc:	fb02 f200 	mul.w	r2, r2, r0
 800b800:	4413      	add	r3, r2
 800b802:	440b      	add	r3, r1
 800b804:	3324      	adds	r3, #36	; 0x24
 800b806:	edd3 7a00 	vldr	s15, [r3]
 800b80a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b80e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b816:	f2c0 8111 	blt.w	800ba3c <motion_primitive_get_position+0x644>
		{
			// Last value plus section of new value
			float dt = (time_in_cycle_part - primitives[primitive_index].frames[i].t_part);
 800b81a:	4b93      	ldr	r3, [pc, #588]	; (800ba68 <motion_primitive_get_position+0x670>)
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	4618      	mov	r0, r3
 800b822:	4992      	ldr	r1, [pc, #584]	; (800ba6c <motion_primitive_get_position+0x674>)
 800b824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b826:	4613      	mov	r3, r2
 800b828:	005b      	lsls	r3, r3, #1
 800b82a:	4413      	add	r3, r2
 800b82c:	009b      	lsls	r3, r3, #2
 800b82e:	2264      	movs	r2, #100	; 0x64
 800b830:	fb02 f200 	mul.w	r2, r2, r0
 800b834:	4413      	add	r3, r2
 800b836:	440b      	add	r3, r1
 800b838:	3324      	adds	r3, #36	; 0x24
 800b83a:	edd3 7a00 	vldr	s15, [r3]
 800b83e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b842:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b846:	edc7 7a03 	vstr	s15, [r7, #12]
			float d_section_dt = 1.0 / (1.0 - primitives[primitive_index].frames[i].t_part);
 800b84a:	4b87      	ldr	r3, [pc, #540]	; (800ba68 <motion_primitive_get_position+0x670>)
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	b2db      	uxtb	r3, r3
 800b850:	4618      	mov	r0, r3
 800b852:	4986      	ldr	r1, [pc, #536]	; (800ba6c <motion_primitive_get_position+0x674>)
 800b854:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b856:	4613      	mov	r3, r2
 800b858:	005b      	lsls	r3, r3, #1
 800b85a:	4413      	add	r3, r2
 800b85c:	009b      	lsls	r3, r3, #2
 800b85e:	2264      	movs	r2, #100	; 0x64
 800b860:	fb02 f200 	mul.w	r2, r2, r0
 800b864:	4413      	add	r3, r2
 800b866:	440b      	add	r3, r1
 800b868:	3324      	adds	r3, #36	; 0x24
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4618      	mov	r0, r3
 800b86e:	f7f4 fe13 	bl	8000498 <__aeabi_f2d>
 800b872:	4603      	mov	r3, r0
 800b874:	460c      	mov	r4, r1
 800b876:	461a      	mov	r2, r3
 800b878:	4623      	mov	r3, r4
 800b87a:	f04f 0000 	mov.w	r0, #0
 800b87e:	497c      	ldr	r1, [pc, #496]	; (800ba70 <motion_primitive_get_position+0x678>)
 800b880:	f7f4 fcaa 	bl	80001d8 <__aeabi_dsub>
 800b884:	4603      	mov	r3, r0
 800b886:	460c      	mov	r4, r1
 800b888:	461a      	mov	r2, r3
 800b88a:	4623      	mov	r3, r4
 800b88c:	f04f 0000 	mov.w	r0, #0
 800b890:	4977      	ldr	r1, [pc, #476]	; (800ba70 <motion_primitive_get_position+0x678>)
 800b892:	f7f4 ff83 	bl	800079c <__aeabi_ddiv>
 800b896:	4603      	mov	r3, r0
 800b898:	460c      	mov	r4, r1
 800b89a:	4618      	mov	r0, r3
 800b89c:	4621      	mov	r1, r4
 800b89e:	f7f5 f94b 	bl	8000b38 <__aeabi_d2f>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	60bb      	str	r3, [r7, #8]
			x_cmd = primitives[primitive_index].frames[i].x + (dt * (primitives[primitive_index].frames[0].x - primitives[primitive_index].frames[i].x) * d_section_dt); // Cyclical, so zero index is next frame at end
 800b8a6:	4b70      	ldr	r3, [pc, #448]	; (800ba68 <motion_primitive_get_position+0x670>)
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	496f      	ldr	r1, [pc, #444]	; (800ba6c <motion_primitive_get_position+0x674>)
 800b8b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	005b      	lsls	r3, r3, #1
 800b8b6:	4413      	add	r3, r2
 800b8b8:	009b      	lsls	r3, r3, #2
 800b8ba:	2264      	movs	r2, #100	; 0x64
 800b8bc:	fb02 f200 	mul.w	r2, r2, r0
 800b8c0:	4413      	add	r3, r2
 800b8c2:	440b      	add	r3, r1
 800b8c4:	331c      	adds	r3, #28
 800b8c6:	ed93 7a00 	vldr	s14, [r3]
 800b8ca:	4b67      	ldr	r3, [pc, #412]	; (800ba68 <motion_primitive_get_position+0x670>)
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	b2db      	uxtb	r3, r3
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	4a66      	ldr	r2, [pc, #408]	; (800ba6c <motion_primitive_get_position+0x674>)
 800b8d4:	2364      	movs	r3, #100	; 0x64
 800b8d6:	fb03 f301 	mul.w	r3, r3, r1
 800b8da:	4413      	add	r3, r2
 800b8dc:	331c      	adds	r3, #28
 800b8de:	edd3 6a00 	vldr	s13, [r3]
 800b8e2:	4b61      	ldr	r3, [pc, #388]	; (800ba68 <motion_primitive_get_position+0x670>)
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	b2db      	uxtb	r3, r3
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	4960      	ldr	r1, [pc, #384]	; (800ba6c <motion_primitive_get_position+0x674>)
 800b8ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8ee:	4613      	mov	r3, r2
 800b8f0:	005b      	lsls	r3, r3, #1
 800b8f2:	4413      	add	r3, r2
 800b8f4:	009b      	lsls	r3, r3, #2
 800b8f6:	2264      	movs	r2, #100	; 0x64
 800b8f8:	fb02 f200 	mul.w	r2, r2, r0
 800b8fc:	4413      	add	r3, r2
 800b8fe:	440b      	add	r3, r1
 800b900:	331c      	adds	r3, #28
 800b902:	edd3 7a00 	vldr	s15, [r3]
 800b906:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b90a:	edd7 7a03 	vldr	s15, [r7, #12]
 800b90e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b912:	edd7 7a02 	vldr	s15, [r7, #8]
 800b916:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b91a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b91e:	edc7 7a05 	vstr	s15, [r7, #20]
			y_cmd = primitives[primitive_index].frames[i].y + (dt * (primitives[primitive_index].frames[0].y - primitives[primitive_index].frames[i].y) * d_section_dt);
 800b922:	4b51      	ldr	r3, [pc, #324]	; (800ba68 <motion_primitive_get_position+0x670>)
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	b2db      	uxtb	r3, r3
 800b928:	4618      	mov	r0, r3
 800b92a:	4950      	ldr	r1, [pc, #320]	; (800ba6c <motion_primitive_get_position+0x674>)
 800b92c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b92e:	4613      	mov	r3, r2
 800b930:	005b      	lsls	r3, r3, #1
 800b932:	4413      	add	r3, r2
 800b934:	009b      	lsls	r3, r3, #2
 800b936:	2264      	movs	r2, #100	; 0x64
 800b938:	fb02 f200 	mul.w	r2, r2, r0
 800b93c:	4413      	add	r3, r2
 800b93e:	440b      	add	r3, r1
 800b940:	3320      	adds	r3, #32
 800b942:	ed93 7a00 	vldr	s14, [r3]
 800b946:	4b48      	ldr	r3, [pc, #288]	; (800ba68 <motion_primitive_get_position+0x670>)
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	4619      	mov	r1, r3
 800b94e:	4a47      	ldr	r2, [pc, #284]	; (800ba6c <motion_primitive_get_position+0x674>)
 800b950:	2364      	movs	r3, #100	; 0x64
 800b952:	fb03 f301 	mul.w	r3, r3, r1
 800b956:	4413      	add	r3, r2
 800b958:	3320      	adds	r3, #32
 800b95a:	edd3 6a00 	vldr	s13, [r3]
 800b95e:	4b42      	ldr	r3, [pc, #264]	; (800ba68 <motion_primitive_get_position+0x670>)
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	b2db      	uxtb	r3, r3
 800b964:	4618      	mov	r0, r3
 800b966:	4941      	ldr	r1, [pc, #260]	; (800ba6c <motion_primitive_get_position+0x674>)
 800b968:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b96a:	4613      	mov	r3, r2
 800b96c:	005b      	lsls	r3, r3, #1
 800b96e:	4413      	add	r3, r2
 800b970:	009b      	lsls	r3, r3, #2
 800b972:	2264      	movs	r2, #100	; 0x64
 800b974:	fb02 f200 	mul.w	r2, r2, r0
 800b978:	4413      	add	r3, r2
 800b97a:	440b      	add	r3, r1
 800b97c:	3320      	adds	r3, #32
 800b97e:	edd3 7a00 	vldr	s15, [r3]
 800b982:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b986:	edd7 7a03 	vldr	s15, [r7, #12]
 800b98a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b98e:	edd7 7a02 	vldr	s15, [r7, #8]
 800b992:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b996:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b99a:	edc7 7a04 	vstr	s15, [r7, #16]
			// Apply offset, then scale it
			x_cmd += primitives[primitive_index].x_offset_m;
 800b99e:	4b32      	ldr	r3, [pc, #200]	; (800ba68 <motion_primitive_get_position+0x670>)
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	b2db      	uxtb	r3, r3
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	4a31      	ldr	r2, [pc, #196]	; (800ba6c <motion_primitive_get_position+0x674>)
 800b9a8:	2364      	movs	r3, #100	; 0x64
 800b9aa:	fb03 f301 	mul.w	r3, r3, r1
 800b9ae:	4413      	add	r3, r2
 800b9b0:	3304      	adds	r3, #4
 800b9b2:	edd3 7a00 	vldr	s15, [r3]
 800b9b6:	ed97 7a05 	vldr	s14, [r7, #20]
 800b9ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b9be:	edc7 7a05 	vstr	s15, [r7, #20]
			x_cmd *= primitives[primitive_index].x_scale;
 800b9c2:	4b29      	ldr	r3, [pc, #164]	; (800ba68 <motion_primitive_get_position+0x670>)
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	b2db      	uxtb	r3, r3
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	4a28      	ldr	r2, [pc, #160]	; (800ba6c <motion_primitive_get_position+0x674>)
 800b9cc:	2364      	movs	r3, #100	; 0x64
 800b9ce:	fb03 f301 	mul.w	r3, r3, r1
 800b9d2:	4413      	add	r3, r2
 800b9d4:	330c      	adds	r3, #12
 800b9d6:	edd3 7a00 	vldr	s15, [r3]
 800b9da:	ed97 7a05 	vldr	s14, [r7, #20]
 800b9de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9e2:	edc7 7a05 	vstr	s15, [r7, #20]
			y_cmd += primitives[primitive_index].y_offset_m;
 800b9e6:	4b20      	ldr	r3, [pc, #128]	; (800ba68 <motion_primitive_get_position+0x670>)
 800b9e8:	781b      	ldrb	r3, [r3, #0]
 800b9ea:	b2db      	uxtb	r3, r3
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	4a1f      	ldr	r2, [pc, #124]	; (800ba6c <motion_primitive_get_position+0x674>)
 800b9f0:	2364      	movs	r3, #100	; 0x64
 800b9f2:	fb03 f301 	mul.w	r3, r3, r1
 800b9f6:	4413      	add	r3, r2
 800b9f8:	3308      	adds	r3, #8
 800b9fa:	edd3 7a00 	vldr	s15, [r3]
 800b9fe:	ed97 7a04 	vldr	s14, [r7, #16]
 800ba02:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba06:	edc7 7a04 	vstr	s15, [r7, #16]
			y_cmd *= primitives[primitive_index].y_scale;
 800ba0a:	4b17      	ldr	r3, [pc, #92]	; (800ba68 <motion_primitive_get_position+0x670>)
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	b2db      	uxtb	r3, r3
 800ba10:	4619      	mov	r1, r3
 800ba12:	4a16      	ldr	r2, [pc, #88]	; (800ba6c <motion_primitive_get_position+0x674>)
 800ba14:	2364      	movs	r3, #100	; 0x64
 800ba16:	fb03 f301 	mul.w	r3, r3, r1
 800ba1a:	4413      	add	r3, r2
 800ba1c:	3310      	adds	r3, #16
 800ba1e:	edd3 7a00 	vldr	s15, [r3]
 800ba22:	ed97 7a04 	vldr	s14, [r7, #16]
 800ba26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba2a:	edc7 7a04 	vstr	s15, [r7, #16]

			*x = x_cmd;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	697a      	ldr	r2, [r7, #20]
 800ba32:	601a      	str	r2, [r3, #0]
			*y = y_cmd;
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	693a      	ldr	r2, [r7, #16]
 800ba38:	601a      	str	r2, [r3, #0]
			return;
 800ba3a:	e011      	b.n	800ba60 <motion_primitive_get_position+0x668>
	for(i = 1; i < primitives[primitive_index].num_keyframes; i++)
 800ba3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba3e:	3301      	adds	r3, #1
 800ba40:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba42:	4b09      	ldr	r3, [pc, #36]	; (800ba68 <motion_primitive_get_position+0x670>)
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	b2db      	uxtb	r3, r3
 800ba48:	4619      	mov	r1, r3
 800ba4a:	4a08      	ldr	r2, [pc, #32]	; (800ba6c <motion_primitive_get_position+0x674>)
 800ba4c:	2364      	movs	r3, #100	; 0x64
 800ba4e:	fb03 f301 	mul.w	r3, r3, r1
 800ba52:	4413      	add	r3, r2
 800ba54:	781b      	ldrb	r3, [r3, #0]
 800ba56:	461a      	mov	r2, r3
 800ba58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	f6ff ad5a 	blt.w	800b514 <motion_primitive_get_position+0x11c>
		}
	}
 }
 800ba60:	3730      	adds	r7, #48	; 0x30
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bdb0      	pop	{r4, r5, r7, pc}
 800ba66:	bf00      	nop
 800ba68:	20015280 	.word	0x20015280
 800ba6c:	20015288 	.word	0x20015288
 800ba70:	3ff00000 	.word	0x3ff00000
 800ba74:	00000000 	.word	0x00000000

0800ba78 <motion_primitive_get_position_bezier_quadratic>:

 void motion_primitive_get_position_bezier_quadratic(float * x, float * y)
 {
 800ba78:	b5b0      	push	{r4, r5, r7, lr}
 800ba7a:	b08c      	sub	sp, #48	; 0x30
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	6039      	str	r1, [r7, #0]
	if( primitives[primitive_index].num_keyframes % 2 != 0)
 800ba82:	4b55      	ldr	r3, [pc, #340]	; (800bbd8 <motion_primitive_get_position_bezier_quadratic+0x160>)
 800ba84:	781b      	ldrb	r3, [r3, #0]
 800ba86:	b2db      	uxtb	r3, r3
 800ba88:	4619      	mov	r1, r3
 800ba8a:	4a54      	ldr	r2, [pc, #336]	; (800bbdc <motion_primitive_get_position_bezier_quadratic+0x164>)
 800ba8c:	2364      	movs	r3, #100	; 0x64
 800ba8e:	fb03 f301 	mul.w	r3, r3, r1
 800ba92:	4413      	add	r3, r2
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	f003 0301 	and.w	r3, r3, #1
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d019      	beq.n	800bad4 <motion_primitive_get_position_bezier_quadratic+0x5c>
	{
		// Stay at first element, assume it is safe.
		// Bezier quadratic curve cycle must have even number of elements
		*x = primitives[primitive_index].frames[0].x;
 800baa0:	4b4d      	ldr	r3, [pc, #308]	; (800bbd8 <motion_primitive_get_position_bezier_quadratic+0x160>)
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	4619      	mov	r1, r3
 800baa8:	4a4c      	ldr	r2, [pc, #304]	; (800bbdc <motion_primitive_get_position_bezier_quadratic+0x164>)
 800baaa:	2364      	movs	r3, #100	; 0x64
 800baac:	fb03 f301 	mul.w	r3, r3, r1
 800bab0:	4413      	add	r3, r2
 800bab2:	331c      	adds	r3, #28
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	601a      	str	r2, [r3, #0]
		*y = primitives[primitive_index].frames[0].y;
 800baba:	4b47      	ldr	r3, [pc, #284]	; (800bbd8 <motion_primitive_get_position_bezier_quadratic+0x160>)
 800babc:	781b      	ldrb	r3, [r3, #0]
 800babe:	b2db      	uxtb	r3, r3
 800bac0:	4619      	mov	r1, r3
 800bac2:	4a46      	ldr	r2, [pc, #280]	; (800bbdc <motion_primitive_get_position_bezier_quadratic+0x164>)
 800bac4:	2364      	movs	r3, #100	; 0x64
 800bac6:	fb03 f301 	mul.w	r3, r3, r1
 800baca:	4413      	add	r3, r2
 800bacc:	3320      	adds	r3, #32
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	601a      	str	r2, [r3, #0]
	}
	// First find global time,taking into account time syncs and primitive local offsets
	float current_t = 0.001 * (xTaskGetTickCount() - time_offset) - primitives[primitive_index].t_offset;
 800bad4:	f7fc ff54 	bl	8008980 <xTaskGetTickCount>
 800bad8:	4603      	mov	r3, r0
 800bada:	461a      	mov	r2, r3
 800badc:	4b40      	ldr	r3, [pc, #256]	; (800bbe0 <motion_primitive_get_position_bezier_quadratic+0x168>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	1ad3      	subs	r3, r2, r3
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7f4 fcb6 	bl	8000454 <__aeabi_ui2d>
 800bae8:	a339      	add	r3, pc, #228	; (adr r3, 800bbd0 <motion_primitive_get_position_bezier_quadratic+0x158>)
 800baea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baee:	f7f4 fd2b 	bl	8000548 <__aeabi_dmul>
 800baf2:	4603      	mov	r3, r0
 800baf4:	460c      	mov	r4, r1
 800baf6:	4625      	mov	r5, r4
 800baf8:	461c      	mov	r4, r3
 800bafa:	4b37      	ldr	r3, [pc, #220]	; (800bbd8 <motion_primitive_get_position_bezier_quadratic+0x160>)
 800bafc:	781b      	ldrb	r3, [r3, #0]
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	4619      	mov	r1, r3
 800bb02:	4a36      	ldr	r2, [pc, #216]	; (800bbdc <motion_primitive_get_position_bezier_quadratic+0x164>)
 800bb04:	2364      	movs	r3, #100	; 0x64
 800bb06:	fb03 f301 	mul.w	r3, r3, r1
 800bb0a:	4413      	add	r3, r2
 800bb0c:	3318      	adds	r3, #24
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	4618      	mov	r0, r3
 800bb12:	f7f4 fcc1 	bl	8000498 <__aeabi_f2d>
 800bb16:	4602      	mov	r2, r0
 800bb18:	460b      	mov	r3, r1
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	4629      	mov	r1, r5
 800bb1e:	f7f4 fb5b 	bl	80001d8 <__aeabi_dsub>
 800bb22:	4603      	mov	r3, r0
 800bb24:	460c      	mov	r4, r1
 800bb26:	4618      	mov	r0, r3
 800bb28:	4621      	mov	r1, r4
 800bb2a:	f7f5 f805 	bl	8000b38 <__aeabi_d2f>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	627b      	str	r3, [r7, #36]	; 0x24

	float time_in_cycle = fmod(current_t, primitives[primitive_index].tau);
 800bb32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb34:	f7f4 fcb0 	bl	8000498 <__aeabi_f2d>
 800bb38:	4604      	mov	r4, r0
 800bb3a:	460d      	mov	r5, r1
 800bb3c:	4b26      	ldr	r3, [pc, #152]	; (800bbd8 <motion_primitive_get_position_bezier_quadratic+0x160>)
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	4619      	mov	r1, r3
 800bb44:	4a25      	ldr	r2, [pc, #148]	; (800bbdc <motion_primitive_get_position_bezier_quadratic+0x164>)
 800bb46:	2364      	movs	r3, #100	; 0x64
 800bb48:	fb03 f301 	mul.w	r3, r3, r1
 800bb4c:	4413      	add	r3, r2
 800bb4e:	3314      	adds	r3, #20
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7f4 fca0 	bl	8000498 <__aeabi_f2d>
 800bb58:	4602      	mov	r2, r0
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	ec43 2b11 	vmov	d1, r2, r3
 800bb60:	ec45 4b10 	vmov	d0, r4, r5
 800bb64:	f000 ff8e 	bl	800ca84 <fmod>
 800bb68:	ec54 3b10 	vmov	r3, r4, d0
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	4621      	mov	r1, r4
 800bb70:	f7f4 ffe2 	bl	8000b38 <__aeabi_d2f>
 800bb74:	4603      	mov	r3, r0
 800bb76:	623b      	str	r3, [r7, #32]
	float time_in_cycle_part = time_in_cycle / primitives[primitive_index].tau; // Prevent further mults
 800bb78:	4b17      	ldr	r3, [pc, #92]	; (800bbd8 <motion_primitive_get_position_bezier_quadratic+0x160>)
 800bb7a:	781b      	ldrb	r3, [r3, #0]
 800bb7c:	b2db      	uxtb	r3, r3
 800bb7e:	4619      	mov	r1, r3
 800bb80:	4a16      	ldr	r2, [pc, #88]	; (800bbdc <motion_primitive_get_position_bezier_quadratic+0x164>)
 800bb82:	2364      	movs	r3, #100	; 0x64
 800bb84:	fb03 f301 	mul.w	r3, r3, r1
 800bb88:	4413      	add	r3, r2
 800bb8a:	3314      	adds	r3, #20
 800bb8c:	ed93 7a00 	vldr	s14, [r3]
 800bb90:	edd7 6a08 	vldr	s13, [r7, #32]
 800bb94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb98:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	if(primitives[primitive_index].time_reverse > 0)
 800bb9c:	4b0e      	ldr	r3, [pc, #56]	; (800bbd8 <motion_primitive_get_position_bezier_quadratic+0x160>)
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	b2db      	uxtb	r3, r3
 800bba2:	4619      	mov	r1, r3
 800bba4:	4a0d      	ldr	r2, [pc, #52]	; (800bbdc <motion_primitive_get_position_bezier_quadratic+0x164>)
 800bba6:	2364      	movs	r3, #100	; 0x64
 800bba8:	fb03 f301 	mul.w	r3, r3, r1
 800bbac:	4413      	add	r3, r2
 800bbae:	3302      	adds	r3, #2
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d007      	beq.n	800bbc6 <motion_primitive_get_position_bezier_quadratic+0x14e>
	{
		time_in_cycle_part = 1.0 - time_in_cycle_part;
 800bbb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bbba:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800bbbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bbc2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	// Now find where we are in the cycle and Bezier quadratic interpolation
	// Every odd keyframe is a guide point. Path moves through even keyframes
	int i;
	float x_cmd, y_cmd;
	for(i = 1; i < primitives[primitive_index].num_keyframes/2; i++)
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	62bb      	str	r3, [r7, #40]	; 0x28
 800bbca:	e34d      	b.n	800c268 <motion_primitive_get_position_bezier_quadratic+0x7f0>
 800bbcc:	f3af 8000 	nop.w
 800bbd0:	d2f1a9fc 	.word	0xd2f1a9fc
 800bbd4:	3f50624d 	.word	0x3f50624d
 800bbd8:	20015280 	.word	0x20015280
 800bbdc:	20015288 	.word	0x20015288
 800bbe0:	20015284 	.word	0x20015284
	{
		// find the keyframe, looking between every other, starting at index 0
		// e.g. for 6 keyframes, we look at 0, 2, 4, and consider "6" as 0 again
		if(time_in_cycle_part >= primitives[primitive_index].frames[2*i-2].t_part && time_in_cycle_part < primitives[primitive_index].frames[2*i].t_part)
 800bbe4:	4bd7      	ldr	r3, [pc, #860]	; (800bf44 <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	b2db      	uxtb	r3, r3
 800bbea:	4618      	mov	r0, r3
 800bbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbee:	3b01      	subs	r3, #1
 800bbf0:	005a      	lsls	r2, r3, #1
 800bbf2:	49d5      	ldr	r1, [pc, #852]	; (800bf48 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800bbf4:	4613      	mov	r3, r2
 800bbf6:	005b      	lsls	r3, r3, #1
 800bbf8:	4413      	add	r3, r2
 800bbfa:	009b      	lsls	r3, r3, #2
 800bbfc:	2264      	movs	r2, #100	; 0x64
 800bbfe:	fb02 f200 	mul.w	r2, r2, r0
 800bc02:	4413      	add	r3, r2
 800bc04:	440b      	add	r3, r1
 800bc06:	3324      	adds	r3, #36	; 0x24
 800bc08:	edd3 7a00 	vldr	s15, [r3]
 800bc0c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800bc10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bc14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc18:	f2c0 8198 	blt.w	800bf4c <motion_primitive_get_position_bezier_quadratic+0x4d4>
 800bc1c:	4bc9      	ldr	r3, [pc, #804]	; (800bf44 <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	4618      	mov	r0, r3
 800bc24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc26:	005a      	lsls	r2, r3, #1
 800bc28:	49c7      	ldr	r1, [pc, #796]	; (800bf48 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800bc2a:	4613      	mov	r3, r2
 800bc2c:	005b      	lsls	r3, r3, #1
 800bc2e:	4413      	add	r3, r2
 800bc30:	009b      	lsls	r3, r3, #2
 800bc32:	2264      	movs	r2, #100	; 0x64
 800bc34:	fb02 f200 	mul.w	r2, r2, r0
 800bc38:	4413      	add	r3, r2
 800bc3a:	440b      	add	r3, r1
 800bc3c:	3324      	adds	r3, #36	; 0x24
 800bc3e:	edd3 7a00 	vldr	s15, [r3]
 800bc42:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800bc46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bc4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc4e:	f140 817d 	bpl.w	800bf4c <motion_primitive_get_position_bezier_quadratic+0x4d4>
		{
			// scale to something that varies 0 <= dt < 1 between the points
			float dt = (primitives[primitive_index].frames[2*i].t_part - time_in_cycle_part) / (primitives[primitive_index].frames[2*i].t_part - primitives[primitive_index].frames[2*i - 2].t_part);
 800bc52:	4bbc      	ldr	r3, [pc, #752]	; (800bf44 <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	b2db      	uxtb	r3, r3
 800bc58:	4618      	mov	r0, r3
 800bc5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc5c:	005a      	lsls	r2, r3, #1
 800bc5e:	49ba      	ldr	r1, [pc, #744]	; (800bf48 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800bc60:	4613      	mov	r3, r2
 800bc62:	005b      	lsls	r3, r3, #1
 800bc64:	4413      	add	r3, r2
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	2264      	movs	r2, #100	; 0x64
 800bc6a:	fb02 f200 	mul.w	r2, r2, r0
 800bc6e:	4413      	add	r3, r2
 800bc70:	440b      	add	r3, r1
 800bc72:	3324      	adds	r3, #36	; 0x24
 800bc74:	ed93 7a00 	vldr	s14, [r3]
 800bc78:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800bc7c:	ee77 6a67 	vsub.f32	s13, s14, s15
 800bc80:	4bb0      	ldr	r3, [pc, #704]	; (800bf44 <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800bc82:	781b      	ldrb	r3, [r3, #0]
 800bc84:	b2db      	uxtb	r3, r3
 800bc86:	4618      	mov	r0, r3
 800bc88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8a:	005a      	lsls	r2, r3, #1
 800bc8c:	49ae      	ldr	r1, [pc, #696]	; (800bf48 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800bc8e:	4613      	mov	r3, r2
 800bc90:	005b      	lsls	r3, r3, #1
 800bc92:	4413      	add	r3, r2
 800bc94:	009b      	lsls	r3, r3, #2
 800bc96:	2264      	movs	r2, #100	; 0x64
 800bc98:	fb02 f200 	mul.w	r2, r2, r0
 800bc9c:	4413      	add	r3, r2
 800bc9e:	440b      	add	r3, r1
 800bca0:	3324      	adds	r3, #36	; 0x24
 800bca2:	ed93 7a00 	vldr	s14, [r3]
 800bca6:	4ba7      	ldr	r3, [pc, #668]	; (800bf44 <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800bca8:	781b      	ldrb	r3, [r3, #0]
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	4618      	mov	r0, r3
 800bcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb0:	3b01      	subs	r3, #1
 800bcb2:	005a      	lsls	r2, r3, #1
 800bcb4:	49a4      	ldr	r1, [pc, #656]	; (800bf48 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800bcb6:	4613      	mov	r3, r2
 800bcb8:	005b      	lsls	r3, r3, #1
 800bcba:	4413      	add	r3, r2
 800bcbc:	009b      	lsls	r3, r3, #2
 800bcbe:	2264      	movs	r2, #100	; 0x64
 800bcc0:	fb02 f200 	mul.w	r2, r2, r0
 800bcc4:	4413      	add	r3, r2
 800bcc6:	440b      	add	r3, r1
 800bcc8:	3324      	adds	r3, #36	; 0x24
 800bcca:	edd3 7a00 	vldr	s15, [r3]
 800bcce:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bcd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcd6:	edc7 7a07 	vstr	s15, [r7, #28]
			float one_min_dt = 1.0 - dt; // used many times
 800bcda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bcde:	edd7 7a07 	vldr	s15, [r7, #28]
 800bce2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bce6:	edc7 7a06 	vstr	s15, [r7, #24]
			x_cmd = one_min_dt*(one_min_dt*primitives[primitive_index].frames[2*i].x + dt*primitives[primitive_index].frames[2*i-1].x) + dt * (one_min_dt * primitives[primitive_index].frames[2*i-1].x + dt * primitives[primitive_index].frames[2*i-2].x);
 800bcea:	4b96      	ldr	r3, [pc, #600]	; (800bf44 <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	b2db      	uxtb	r3, r3
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf4:	005a      	lsls	r2, r3, #1
 800bcf6:	4994      	ldr	r1, [pc, #592]	; (800bf48 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800bcf8:	4613      	mov	r3, r2
 800bcfa:	005b      	lsls	r3, r3, #1
 800bcfc:	4413      	add	r3, r2
 800bcfe:	009b      	lsls	r3, r3, #2
 800bd00:	2264      	movs	r2, #100	; 0x64
 800bd02:	fb02 f200 	mul.w	r2, r2, r0
 800bd06:	4413      	add	r3, r2
 800bd08:	440b      	add	r3, r1
 800bd0a:	331c      	adds	r3, #28
 800bd0c:	ed93 7a00 	vldr	s14, [r3]
 800bd10:	edd7 7a06 	vldr	s15, [r7, #24]
 800bd14:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd18:	4b8a      	ldr	r3, [pc, #552]	; (800bf44 <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	b2db      	uxtb	r3, r3
 800bd1e:	4618      	mov	r0, r3
 800bd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd22:	005b      	lsls	r3, r3, #1
 800bd24:	1e5a      	subs	r2, r3, #1
 800bd26:	4988      	ldr	r1, [pc, #544]	; (800bf48 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800bd28:	4613      	mov	r3, r2
 800bd2a:	005b      	lsls	r3, r3, #1
 800bd2c:	4413      	add	r3, r2
 800bd2e:	009b      	lsls	r3, r3, #2
 800bd30:	2264      	movs	r2, #100	; 0x64
 800bd32:	fb02 f200 	mul.w	r2, r2, r0
 800bd36:	4413      	add	r3, r2
 800bd38:	440b      	add	r3, r1
 800bd3a:	331c      	adds	r3, #28
 800bd3c:	edd3 6a00 	vldr	s13, [r3]
 800bd40:	edd7 7a07 	vldr	s15, [r7, #28]
 800bd44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bd48:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bd4c:	edd7 7a06 	vldr	s15, [r7, #24]
 800bd50:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd54:	4b7b      	ldr	r3, [pc, #492]	; (800bf44 <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd5e:	005b      	lsls	r3, r3, #1
 800bd60:	1e5a      	subs	r2, r3, #1
 800bd62:	4979      	ldr	r1, [pc, #484]	; (800bf48 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800bd64:	4613      	mov	r3, r2
 800bd66:	005b      	lsls	r3, r3, #1
 800bd68:	4413      	add	r3, r2
 800bd6a:	009b      	lsls	r3, r3, #2
 800bd6c:	2264      	movs	r2, #100	; 0x64
 800bd6e:	fb02 f200 	mul.w	r2, r2, r0
 800bd72:	4413      	add	r3, r2
 800bd74:	440b      	add	r3, r1
 800bd76:	331c      	adds	r3, #28
 800bd78:	edd3 6a00 	vldr	s13, [r3]
 800bd7c:	edd7 7a06 	vldr	s15, [r7, #24]
 800bd80:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800bd84:	4b6f      	ldr	r3, [pc, #444]	; (800bf44 <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	b2db      	uxtb	r3, r3
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8e:	3b01      	subs	r3, #1
 800bd90:	005a      	lsls	r2, r3, #1
 800bd92:	496d      	ldr	r1, [pc, #436]	; (800bf48 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800bd94:	4613      	mov	r3, r2
 800bd96:	005b      	lsls	r3, r3, #1
 800bd98:	4413      	add	r3, r2
 800bd9a:	009b      	lsls	r3, r3, #2
 800bd9c:	2264      	movs	r2, #100	; 0x64
 800bd9e:	fb02 f200 	mul.w	r2, r2, r0
 800bda2:	4413      	add	r3, r2
 800bda4:	440b      	add	r3, r1
 800bda6:	331c      	adds	r3, #28
 800bda8:	ed93 6a00 	vldr	s12, [r3]
 800bdac:	edd7 7a07 	vldr	s15, [r7, #28]
 800bdb0:	ee66 7a27 	vmul.f32	s15, s12, s15
 800bdb4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800bdb8:	edd7 7a07 	vldr	s15, [r7, #28]
 800bdbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bdc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bdc4:	edc7 7a05 	vstr	s15, [r7, #20]
			y_cmd = one_min_dt*(one_min_dt*primitives[primitive_index].frames[2*i].y + dt*primitives[primitive_index].frames[2*i-1].y) + dt * (one_min_dt * primitives[primitive_index].frames[2*i-1].y + dt * primitives[primitive_index].frames[2*i-2].y);
 800bdc8:	4b5e      	ldr	r3, [pc, #376]	; (800bf44 <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	b2db      	uxtb	r3, r3
 800bdce:	4618      	mov	r0, r3
 800bdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd2:	005a      	lsls	r2, r3, #1
 800bdd4:	495c      	ldr	r1, [pc, #368]	; (800bf48 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800bdd6:	4613      	mov	r3, r2
 800bdd8:	005b      	lsls	r3, r3, #1
 800bdda:	4413      	add	r3, r2
 800bddc:	009b      	lsls	r3, r3, #2
 800bdde:	2264      	movs	r2, #100	; 0x64
 800bde0:	fb02 f200 	mul.w	r2, r2, r0
 800bde4:	4413      	add	r3, r2
 800bde6:	440b      	add	r3, r1
 800bde8:	3320      	adds	r3, #32
 800bdea:	ed93 7a00 	vldr	s14, [r3]
 800bdee:	edd7 7a06 	vldr	s15, [r7, #24]
 800bdf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bdf6:	4b53      	ldr	r3, [pc, #332]	; (800bf44 <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be00:	005b      	lsls	r3, r3, #1
 800be02:	1e5a      	subs	r2, r3, #1
 800be04:	4950      	ldr	r1, [pc, #320]	; (800bf48 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800be06:	4613      	mov	r3, r2
 800be08:	005b      	lsls	r3, r3, #1
 800be0a:	4413      	add	r3, r2
 800be0c:	009b      	lsls	r3, r3, #2
 800be0e:	2264      	movs	r2, #100	; 0x64
 800be10:	fb02 f200 	mul.w	r2, r2, r0
 800be14:	4413      	add	r3, r2
 800be16:	440b      	add	r3, r1
 800be18:	3320      	adds	r3, #32
 800be1a:	edd3 6a00 	vldr	s13, [r3]
 800be1e:	edd7 7a07 	vldr	s15, [r7, #28]
 800be22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800be26:	ee37 7a27 	vadd.f32	s14, s14, s15
 800be2a:	edd7 7a06 	vldr	s15, [r7, #24]
 800be2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be32:	4b44      	ldr	r3, [pc, #272]	; (800bf44 <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	b2db      	uxtb	r3, r3
 800be38:	4618      	mov	r0, r3
 800be3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3c:	005b      	lsls	r3, r3, #1
 800be3e:	1e5a      	subs	r2, r3, #1
 800be40:	4941      	ldr	r1, [pc, #260]	; (800bf48 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800be42:	4613      	mov	r3, r2
 800be44:	005b      	lsls	r3, r3, #1
 800be46:	4413      	add	r3, r2
 800be48:	009b      	lsls	r3, r3, #2
 800be4a:	2264      	movs	r2, #100	; 0x64
 800be4c:	fb02 f200 	mul.w	r2, r2, r0
 800be50:	4413      	add	r3, r2
 800be52:	440b      	add	r3, r1
 800be54:	3320      	adds	r3, #32
 800be56:	edd3 6a00 	vldr	s13, [r3]
 800be5a:	edd7 7a06 	vldr	s15, [r7, #24]
 800be5e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800be62:	4b38      	ldr	r3, [pc, #224]	; (800bf44 <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800be64:	781b      	ldrb	r3, [r3, #0]
 800be66:	b2db      	uxtb	r3, r3
 800be68:	4618      	mov	r0, r3
 800be6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be6c:	3b01      	subs	r3, #1
 800be6e:	005a      	lsls	r2, r3, #1
 800be70:	4935      	ldr	r1, [pc, #212]	; (800bf48 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800be72:	4613      	mov	r3, r2
 800be74:	005b      	lsls	r3, r3, #1
 800be76:	4413      	add	r3, r2
 800be78:	009b      	lsls	r3, r3, #2
 800be7a:	2264      	movs	r2, #100	; 0x64
 800be7c:	fb02 f200 	mul.w	r2, r2, r0
 800be80:	4413      	add	r3, r2
 800be82:	440b      	add	r3, r1
 800be84:	3320      	adds	r3, #32
 800be86:	ed93 6a00 	vldr	s12, [r3]
 800be8a:	edd7 7a07 	vldr	s15, [r7, #28]
 800be8e:	ee66 7a27 	vmul.f32	s15, s12, s15
 800be92:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800be96:	edd7 7a07 	vldr	s15, [r7, #28]
 800be9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800be9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bea2:	edc7 7a04 	vstr	s15, [r7, #16]
			// Apply offset, then scale it
			x_cmd += primitives[primitive_index].x_offset_m;
 800bea6:	4b27      	ldr	r3, [pc, #156]	; (800bf44 <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	b2db      	uxtb	r3, r3
 800beac:	4619      	mov	r1, r3
 800beae:	4a26      	ldr	r2, [pc, #152]	; (800bf48 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800beb0:	2364      	movs	r3, #100	; 0x64
 800beb2:	fb03 f301 	mul.w	r3, r3, r1
 800beb6:	4413      	add	r3, r2
 800beb8:	3304      	adds	r3, #4
 800beba:	edd3 7a00 	vldr	s15, [r3]
 800bebe:	ed97 7a05 	vldr	s14, [r7, #20]
 800bec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bec6:	edc7 7a05 	vstr	s15, [r7, #20]
			x_cmd *= primitives[primitive_index].x_scale;
 800beca:	4b1e      	ldr	r3, [pc, #120]	; (800bf44 <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	b2db      	uxtb	r3, r3
 800bed0:	4619      	mov	r1, r3
 800bed2:	4a1d      	ldr	r2, [pc, #116]	; (800bf48 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800bed4:	2364      	movs	r3, #100	; 0x64
 800bed6:	fb03 f301 	mul.w	r3, r3, r1
 800beda:	4413      	add	r3, r2
 800bedc:	330c      	adds	r3, #12
 800bede:	edd3 7a00 	vldr	s15, [r3]
 800bee2:	ed97 7a05 	vldr	s14, [r7, #20]
 800bee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800beea:	edc7 7a05 	vstr	s15, [r7, #20]
			y_cmd += primitives[primitive_index].y_offset_m;
 800beee:	4b15      	ldr	r3, [pc, #84]	; (800bf44 <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	4619      	mov	r1, r3
 800bef6:	4a14      	ldr	r2, [pc, #80]	; (800bf48 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800bef8:	2364      	movs	r3, #100	; 0x64
 800befa:	fb03 f301 	mul.w	r3, r3, r1
 800befe:	4413      	add	r3, r2
 800bf00:	3308      	adds	r3, #8
 800bf02:	edd3 7a00 	vldr	s15, [r3]
 800bf06:	ed97 7a04 	vldr	s14, [r7, #16]
 800bf0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf0e:	edc7 7a04 	vstr	s15, [r7, #16]
			y_cmd *= primitives[primitive_index].y_scale;
 800bf12:	4b0c      	ldr	r3, [pc, #48]	; (800bf44 <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	b2db      	uxtb	r3, r3
 800bf18:	4619      	mov	r1, r3
 800bf1a:	4a0b      	ldr	r2, [pc, #44]	; (800bf48 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800bf1c:	2364      	movs	r3, #100	; 0x64
 800bf1e:	fb03 f301 	mul.w	r3, r3, r1
 800bf22:	4413      	add	r3, r2
 800bf24:	3310      	adds	r3, #16
 800bf26:	edd3 7a00 	vldr	s15, [r3]
 800bf2a:	ed97 7a04 	vldr	s14, [r7, #16]
 800bf2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf32:	edc7 7a04 	vstr	s15, [r7, #16]

			*x = x_cmd;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	697a      	ldr	r2, [r7, #20]
 800bf3a:	601a      	str	r2, [r3, #0]
			*y = y_cmd;
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	693a      	ldr	r2, [r7, #16]
 800bf40:	601a      	str	r2, [r3, #0]
			return;
 800bf42:	e1a2      	b.n	800c28a <motion_primitive_get_position_bezier_quadratic+0x812>
 800bf44:	20015280 	.word	0x20015280
 800bf48:	20015288 	.word	0x20015288
		}
		// Are we at the end, and after last keyframe
		if(i == ((primitives[primitive_index].num_keyframes/2)-1) && time_in_cycle_part >= primitives[primitive_index].frames[2*i].t_part)
 800bf4c:	4bd0      	ldr	r3, [pc, #832]	; (800c290 <motion_primitive_get_position_bezier_quadratic+0x818>)
 800bf4e:	781b      	ldrb	r3, [r3, #0]
 800bf50:	b2db      	uxtb	r3, r3
 800bf52:	4619      	mov	r1, r3
 800bf54:	4acf      	ldr	r2, [pc, #828]	; (800c294 <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800bf56:	2364      	movs	r3, #100	; 0x64
 800bf58:	fb03 f301 	mul.w	r3, r3, r1
 800bf5c:	4413      	add	r3, r2
 800bf5e:	781b      	ldrb	r3, [r3, #0]
 800bf60:	085b      	lsrs	r3, r3, #1
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	3b01      	subs	r3, #1
 800bf66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	f040 817a 	bne.w	800c262 <motion_primitive_get_position_bezier_quadratic+0x7ea>
 800bf6e:	4bc8      	ldr	r3, [pc, #800]	; (800c290 <motion_primitive_get_position_bezier_quadratic+0x818>)
 800bf70:	781b      	ldrb	r3, [r3, #0]
 800bf72:	b2db      	uxtb	r3, r3
 800bf74:	4618      	mov	r0, r3
 800bf76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf78:	005a      	lsls	r2, r3, #1
 800bf7a:	49c6      	ldr	r1, [pc, #792]	; (800c294 <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800bf7c:	4613      	mov	r3, r2
 800bf7e:	005b      	lsls	r3, r3, #1
 800bf80:	4413      	add	r3, r2
 800bf82:	009b      	lsls	r3, r3, #2
 800bf84:	2264      	movs	r2, #100	; 0x64
 800bf86:	fb02 f200 	mul.w	r2, r2, r0
 800bf8a:	4413      	add	r3, r2
 800bf8c:	440b      	add	r3, r1
 800bf8e:	3324      	adds	r3, #36	; 0x24
 800bf90:	edd3 7a00 	vldr	s15, [r3]
 800bf94:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800bf98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bf9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfa0:	f2c0 815f 	blt.w	800c262 <motion_primitive_get_position_bezier_quadratic+0x7ea>
		{
			// Cyclical, so zero index is last
			// scale to something that varies 0 <= dt < 1 between the points
			float dt = (1.0 - time_in_cycle_part) / (1.0 - primitives[primitive_index].frames[2*i].t_part);
 800bfa4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfa6:	f7f4 fa77 	bl	8000498 <__aeabi_f2d>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	460c      	mov	r4, r1
 800bfae:	461a      	mov	r2, r3
 800bfb0:	4623      	mov	r3, r4
 800bfb2:	f04f 0000 	mov.w	r0, #0
 800bfb6:	49b8      	ldr	r1, [pc, #736]	; (800c298 <motion_primitive_get_position_bezier_quadratic+0x820>)
 800bfb8:	f7f4 f90e 	bl	80001d8 <__aeabi_dsub>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	460c      	mov	r4, r1
 800bfc0:	4625      	mov	r5, r4
 800bfc2:	461c      	mov	r4, r3
 800bfc4:	4bb2      	ldr	r3, [pc, #712]	; (800c290 <motion_primitive_get_position_bezier_quadratic+0x818>)
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	b2db      	uxtb	r3, r3
 800bfca:	4618      	mov	r0, r3
 800bfcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfce:	005a      	lsls	r2, r3, #1
 800bfd0:	49b0      	ldr	r1, [pc, #704]	; (800c294 <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800bfd2:	4613      	mov	r3, r2
 800bfd4:	005b      	lsls	r3, r3, #1
 800bfd6:	4413      	add	r3, r2
 800bfd8:	009b      	lsls	r3, r3, #2
 800bfda:	2264      	movs	r2, #100	; 0x64
 800bfdc:	fb02 f200 	mul.w	r2, r2, r0
 800bfe0:	4413      	add	r3, r2
 800bfe2:	440b      	add	r3, r1
 800bfe4:	3324      	adds	r3, #36	; 0x24
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f7f4 fa55 	bl	8000498 <__aeabi_f2d>
 800bfee:	4602      	mov	r2, r0
 800bff0:	460b      	mov	r3, r1
 800bff2:	f04f 0000 	mov.w	r0, #0
 800bff6:	49a8      	ldr	r1, [pc, #672]	; (800c298 <motion_primitive_get_position_bezier_quadratic+0x820>)
 800bff8:	f7f4 f8ee 	bl	80001d8 <__aeabi_dsub>
 800bffc:	4602      	mov	r2, r0
 800bffe:	460b      	mov	r3, r1
 800c000:	4620      	mov	r0, r4
 800c002:	4629      	mov	r1, r5
 800c004:	f7f4 fbca 	bl	800079c <__aeabi_ddiv>
 800c008:	4603      	mov	r3, r0
 800c00a:	460c      	mov	r4, r1
 800c00c:	4618      	mov	r0, r3
 800c00e:	4621      	mov	r1, r4
 800c010:	f7f4 fd92 	bl	8000b38 <__aeabi_d2f>
 800c014:	4603      	mov	r3, r0
 800c016:	60fb      	str	r3, [r7, #12]
			float one_min_dt = 1.0 - dt; // used many times
 800c018:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c01c:	edd7 7a03 	vldr	s15, [r7, #12]
 800c020:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c024:	edc7 7a02 	vstr	s15, [r7, #8]
			x_cmd = one_min_dt*(one_min_dt*primitives[primitive_index].frames[0].x + dt*primitives[primitive_index].frames[2*i+1].x) + dt * (one_min_dt * primitives[primitive_index].frames[2*i+1].x + dt * primitives[primitive_index].frames[2*i].x);
 800c028:	4b99      	ldr	r3, [pc, #612]	; (800c290 <motion_primitive_get_position_bezier_quadratic+0x818>)
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	4619      	mov	r1, r3
 800c030:	4a98      	ldr	r2, [pc, #608]	; (800c294 <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c032:	2364      	movs	r3, #100	; 0x64
 800c034:	fb03 f301 	mul.w	r3, r3, r1
 800c038:	4413      	add	r3, r2
 800c03a:	331c      	adds	r3, #28
 800c03c:	ed93 7a00 	vldr	s14, [r3]
 800c040:	edd7 7a02 	vldr	s15, [r7, #8]
 800c044:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c048:	4b91      	ldr	r3, [pc, #580]	; (800c290 <motion_primitive_get_position_bezier_quadratic+0x818>)
 800c04a:	781b      	ldrb	r3, [r3, #0]
 800c04c:	b2db      	uxtb	r3, r3
 800c04e:	4618      	mov	r0, r3
 800c050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c052:	005b      	lsls	r3, r3, #1
 800c054:	1c5a      	adds	r2, r3, #1
 800c056:	498f      	ldr	r1, [pc, #572]	; (800c294 <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c058:	4613      	mov	r3, r2
 800c05a:	005b      	lsls	r3, r3, #1
 800c05c:	4413      	add	r3, r2
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	2264      	movs	r2, #100	; 0x64
 800c062:	fb02 f200 	mul.w	r2, r2, r0
 800c066:	4413      	add	r3, r2
 800c068:	440b      	add	r3, r1
 800c06a:	331c      	adds	r3, #28
 800c06c:	edd3 6a00 	vldr	s13, [r3]
 800c070:	edd7 7a03 	vldr	s15, [r7, #12]
 800c074:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c078:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c07c:	edd7 7a02 	vldr	s15, [r7, #8]
 800c080:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c084:	4b82      	ldr	r3, [pc, #520]	; (800c290 <motion_primitive_get_position_bezier_quadratic+0x818>)
 800c086:	781b      	ldrb	r3, [r3, #0]
 800c088:	b2db      	uxtb	r3, r3
 800c08a:	4618      	mov	r0, r3
 800c08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08e:	005b      	lsls	r3, r3, #1
 800c090:	1c5a      	adds	r2, r3, #1
 800c092:	4980      	ldr	r1, [pc, #512]	; (800c294 <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c094:	4613      	mov	r3, r2
 800c096:	005b      	lsls	r3, r3, #1
 800c098:	4413      	add	r3, r2
 800c09a:	009b      	lsls	r3, r3, #2
 800c09c:	2264      	movs	r2, #100	; 0x64
 800c09e:	fb02 f200 	mul.w	r2, r2, r0
 800c0a2:	4413      	add	r3, r2
 800c0a4:	440b      	add	r3, r1
 800c0a6:	331c      	adds	r3, #28
 800c0a8:	edd3 6a00 	vldr	s13, [r3]
 800c0ac:	edd7 7a02 	vldr	s15, [r7, #8]
 800c0b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c0b4:	4b76      	ldr	r3, [pc, #472]	; (800c290 <motion_primitive_get_position_bezier_quadratic+0x818>)
 800c0b6:	781b      	ldrb	r3, [r3, #0]
 800c0b8:	b2db      	uxtb	r3, r3
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0be:	005a      	lsls	r2, r3, #1
 800c0c0:	4974      	ldr	r1, [pc, #464]	; (800c294 <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c0c2:	4613      	mov	r3, r2
 800c0c4:	005b      	lsls	r3, r3, #1
 800c0c6:	4413      	add	r3, r2
 800c0c8:	009b      	lsls	r3, r3, #2
 800c0ca:	2264      	movs	r2, #100	; 0x64
 800c0cc:	fb02 f200 	mul.w	r2, r2, r0
 800c0d0:	4413      	add	r3, r2
 800c0d2:	440b      	add	r3, r1
 800c0d4:	331c      	adds	r3, #28
 800c0d6:	ed93 6a00 	vldr	s12, [r3]
 800c0da:	edd7 7a03 	vldr	s15, [r7, #12]
 800c0de:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c0e2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c0e6:	edd7 7a03 	vldr	s15, [r7, #12]
 800c0ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c0ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0f2:	edc7 7a05 	vstr	s15, [r7, #20]
			y_cmd = one_min_dt*(one_min_dt*primitives[primitive_index].frames[0].y + dt*primitives[primitive_index].frames[2*i+1].y) + dt * (one_min_dt * primitives[primitive_index].frames[2*i+1].y + dt * primitives[primitive_index].frames[2*i].y);
 800c0f6:	4b66      	ldr	r3, [pc, #408]	; (800c290 <motion_primitive_get_position_bezier_quadratic+0x818>)
 800c0f8:	781b      	ldrb	r3, [r3, #0]
 800c0fa:	b2db      	uxtb	r3, r3
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	4a65      	ldr	r2, [pc, #404]	; (800c294 <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c100:	2364      	movs	r3, #100	; 0x64
 800c102:	fb03 f301 	mul.w	r3, r3, r1
 800c106:	4413      	add	r3, r2
 800c108:	3320      	adds	r3, #32
 800c10a:	ed93 7a00 	vldr	s14, [r3]
 800c10e:	edd7 7a02 	vldr	s15, [r7, #8]
 800c112:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c116:	4b5e      	ldr	r3, [pc, #376]	; (800c290 <motion_primitive_get_position_bezier_quadratic+0x818>)
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	b2db      	uxtb	r3, r3
 800c11c:	4618      	mov	r0, r3
 800c11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c120:	005b      	lsls	r3, r3, #1
 800c122:	1c5a      	adds	r2, r3, #1
 800c124:	495b      	ldr	r1, [pc, #364]	; (800c294 <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c126:	4613      	mov	r3, r2
 800c128:	005b      	lsls	r3, r3, #1
 800c12a:	4413      	add	r3, r2
 800c12c:	009b      	lsls	r3, r3, #2
 800c12e:	2264      	movs	r2, #100	; 0x64
 800c130:	fb02 f200 	mul.w	r2, r2, r0
 800c134:	4413      	add	r3, r2
 800c136:	440b      	add	r3, r1
 800c138:	3320      	adds	r3, #32
 800c13a:	edd3 6a00 	vldr	s13, [r3]
 800c13e:	edd7 7a03 	vldr	s15, [r7, #12]
 800c142:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c146:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c14a:	edd7 7a02 	vldr	s15, [r7, #8]
 800c14e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c152:	4b4f      	ldr	r3, [pc, #316]	; (800c290 <motion_primitive_get_position_bezier_quadratic+0x818>)
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	b2db      	uxtb	r3, r3
 800c158:	4618      	mov	r0, r3
 800c15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c15c:	005b      	lsls	r3, r3, #1
 800c15e:	1c5a      	adds	r2, r3, #1
 800c160:	494c      	ldr	r1, [pc, #304]	; (800c294 <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c162:	4613      	mov	r3, r2
 800c164:	005b      	lsls	r3, r3, #1
 800c166:	4413      	add	r3, r2
 800c168:	009b      	lsls	r3, r3, #2
 800c16a:	2264      	movs	r2, #100	; 0x64
 800c16c:	fb02 f200 	mul.w	r2, r2, r0
 800c170:	4413      	add	r3, r2
 800c172:	440b      	add	r3, r1
 800c174:	3320      	adds	r3, #32
 800c176:	edd3 6a00 	vldr	s13, [r3]
 800c17a:	edd7 7a02 	vldr	s15, [r7, #8]
 800c17e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c182:	4b43      	ldr	r3, [pc, #268]	; (800c290 <motion_primitive_get_position_bezier_quadratic+0x818>)
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	b2db      	uxtb	r3, r3
 800c188:	4618      	mov	r0, r3
 800c18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c18c:	005a      	lsls	r2, r3, #1
 800c18e:	4941      	ldr	r1, [pc, #260]	; (800c294 <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c190:	4613      	mov	r3, r2
 800c192:	005b      	lsls	r3, r3, #1
 800c194:	4413      	add	r3, r2
 800c196:	009b      	lsls	r3, r3, #2
 800c198:	2264      	movs	r2, #100	; 0x64
 800c19a:	fb02 f200 	mul.w	r2, r2, r0
 800c19e:	4413      	add	r3, r2
 800c1a0:	440b      	add	r3, r1
 800c1a2:	3320      	adds	r3, #32
 800c1a4:	ed93 6a00 	vldr	s12, [r3]
 800c1a8:	edd7 7a03 	vldr	s15, [r7, #12]
 800c1ac:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c1b0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c1b4:	edd7 7a03 	vldr	s15, [r7, #12]
 800c1b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c1bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1c0:	edc7 7a04 	vstr	s15, [r7, #16]
			// Apply offset, then scale it
			x_cmd += primitives[primitive_index].x_offset_m;
 800c1c4:	4b32      	ldr	r3, [pc, #200]	; (800c290 <motion_primitive_get_position_bezier_quadratic+0x818>)
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	b2db      	uxtb	r3, r3
 800c1ca:	4619      	mov	r1, r3
 800c1cc:	4a31      	ldr	r2, [pc, #196]	; (800c294 <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c1ce:	2364      	movs	r3, #100	; 0x64
 800c1d0:	fb03 f301 	mul.w	r3, r3, r1
 800c1d4:	4413      	add	r3, r2
 800c1d6:	3304      	adds	r3, #4
 800c1d8:	edd3 7a00 	vldr	s15, [r3]
 800c1dc:	ed97 7a05 	vldr	s14, [r7, #20]
 800c1e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1e4:	edc7 7a05 	vstr	s15, [r7, #20]
			x_cmd *= primitives[primitive_index].x_scale;
 800c1e8:	4b29      	ldr	r3, [pc, #164]	; (800c290 <motion_primitive_get_position_bezier_quadratic+0x818>)
 800c1ea:	781b      	ldrb	r3, [r3, #0]
 800c1ec:	b2db      	uxtb	r3, r3
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	4a28      	ldr	r2, [pc, #160]	; (800c294 <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c1f2:	2364      	movs	r3, #100	; 0x64
 800c1f4:	fb03 f301 	mul.w	r3, r3, r1
 800c1f8:	4413      	add	r3, r2
 800c1fa:	330c      	adds	r3, #12
 800c1fc:	edd3 7a00 	vldr	s15, [r3]
 800c200:	ed97 7a05 	vldr	s14, [r7, #20]
 800c204:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c208:	edc7 7a05 	vstr	s15, [r7, #20]
			y_cmd += primitives[primitive_index].y_offset_m;
 800c20c:	4b20      	ldr	r3, [pc, #128]	; (800c290 <motion_primitive_get_position_bezier_quadratic+0x818>)
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	b2db      	uxtb	r3, r3
 800c212:	4619      	mov	r1, r3
 800c214:	4a1f      	ldr	r2, [pc, #124]	; (800c294 <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c216:	2364      	movs	r3, #100	; 0x64
 800c218:	fb03 f301 	mul.w	r3, r3, r1
 800c21c:	4413      	add	r3, r2
 800c21e:	3308      	adds	r3, #8
 800c220:	edd3 7a00 	vldr	s15, [r3]
 800c224:	ed97 7a04 	vldr	s14, [r7, #16]
 800c228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c22c:	edc7 7a04 	vstr	s15, [r7, #16]
			y_cmd *= primitives[primitive_index].y_scale;
 800c230:	4b17      	ldr	r3, [pc, #92]	; (800c290 <motion_primitive_get_position_bezier_quadratic+0x818>)
 800c232:	781b      	ldrb	r3, [r3, #0]
 800c234:	b2db      	uxtb	r3, r3
 800c236:	4619      	mov	r1, r3
 800c238:	4a16      	ldr	r2, [pc, #88]	; (800c294 <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c23a:	2364      	movs	r3, #100	; 0x64
 800c23c:	fb03 f301 	mul.w	r3, r3, r1
 800c240:	4413      	add	r3, r2
 800c242:	3310      	adds	r3, #16
 800c244:	edd3 7a00 	vldr	s15, [r3]
 800c248:	ed97 7a04 	vldr	s14, [r7, #16]
 800c24c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c250:	edc7 7a04 	vstr	s15, [r7, #16]

			*x = x_cmd;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	697a      	ldr	r2, [r7, #20]
 800c258:	601a      	str	r2, [r3, #0]
			*y = y_cmd;
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	693a      	ldr	r2, [r7, #16]
 800c25e:	601a      	str	r2, [r3, #0]
			return;
 800c260:	e013      	b.n	800c28a <motion_primitive_get_position_bezier_quadratic+0x812>
	for(i = 1; i < primitives[primitive_index].num_keyframes/2; i++)
 800c262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c264:	3301      	adds	r3, #1
 800c266:	62bb      	str	r3, [r7, #40]	; 0x28
 800c268:	4b09      	ldr	r3, [pc, #36]	; (800c290 <motion_primitive_get_position_bezier_quadratic+0x818>)
 800c26a:	781b      	ldrb	r3, [r3, #0]
 800c26c:	b2db      	uxtb	r3, r3
 800c26e:	4619      	mov	r1, r3
 800c270:	4a08      	ldr	r2, [pc, #32]	; (800c294 <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c272:	2364      	movs	r3, #100	; 0x64
 800c274:	fb03 f301 	mul.w	r3, r3, r1
 800c278:	4413      	add	r3, r2
 800c27a:	781b      	ldrb	r3, [r3, #0]
 800c27c:	085b      	lsrs	r3, r3, #1
 800c27e:	b2db      	uxtb	r3, r3
 800c280:	461a      	mov	r2, r3
 800c282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c284:	4293      	cmp	r3, r2
 800c286:	f6ff acad 	blt.w	800bbe4 <motion_primitive_get_position_bezier_quadratic+0x16c>
		}
	}
 }
 800c28a:	3730      	adds	r7, #48	; 0x30
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bdb0      	pop	{r4, r5, r7, pc}
 800c290:	20015280 	.word	0x20015280
 800c294:	20015288 	.word	0x20015288
 800c298:	3ff00000 	.word	0x3ff00000

0800c29c <motion_primitive_is_inverted>:

 bool motion_primitive_is_inverted(void)
 {
 800c29c:	b480      	push	{r7}
 800c29e:	af00      	add	r7, sp, #0
	return (primitives[primitive_index].invert > 0);
 800c2a0:	4b0a      	ldr	r3, [pc, #40]	; (800c2cc <motion_primitive_is_inverted+0x30>)
 800c2a2:	781b      	ldrb	r3, [r3, #0]
 800c2a4:	b2db      	uxtb	r3, r3
 800c2a6:	4619      	mov	r1, r3
 800c2a8:	4a09      	ldr	r2, [pc, #36]	; (800c2d0 <motion_primitive_is_inverted+0x34>)
 800c2aa:	2364      	movs	r3, #100	; 0x64
 800c2ac:	fb03 f301 	mul.w	r3, r3, r1
 800c2b0:	4413      	add	r3, r2
 800c2b2:	3301      	adds	r3, #1
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	bf14      	ite	ne
 800c2ba:	2301      	movne	r3, #1
 800c2bc:	2300      	moveq	r3, #0
 800c2be:	b2db      	uxtb	r3, r3
 }
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr
 800c2ca:	bf00      	nop
 800c2cc:	20015280 	.word	0x20015280
 800c2d0:	20015288 	.word	0x20015288

0800c2d4 <motion_primitive_set_keyframe>:

 void motion_primitive_set_keyframe(uint8_t index, uint8_t keyframe_index, float x, float y, float t_part)
 {
 800c2d4:	b480      	push	{r7}
 800c2d6:	b085      	sub	sp, #20
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	4603      	mov	r3, r0
 800c2dc:	460a      	mov	r2, r1
 800c2de:	ed87 0a02 	vstr	s0, [r7, #8]
 800c2e2:	edc7 0a01 	vstr	s1, [r7, #4]
 800c2e6:	ed87 1a00 	vstr	s2, [r7]
 800c2ea:	73fb      	strb	r3, [r7, #15]
 800c2ec:	4613      	mov	r3, r2
 800c2ee:	73bb      	strb	r3, [r7, #14]
	if(index >= NUMBER_PRIMITIVES)
 800c2f0:	7bfb      	ldrb	r3, [r7, #15]
 800c2f2:	2b05      	cmp	r3, #5
 800c2f4:	d830      	bhi.n	800c358 <motion_primitive_set_keyframe+0x84>
	{
		return;
	}
	if(keyframe_index >= MAX_NUMBER_KEYFRAMES)
 800c2f6:	7bbb      	ldrb	r3, [r7, #14]
 800c2f8:	2b05      	cmp	r3, #5
 800c2fa:	d82f      	bhi.n	800c35c <motion_primitive_set_keyframe+0x88>
	{
		return;
	}
	primitives[index].frames[keyframe_index].t_part = t_part;
 800c2fc:	7bf9      	ldrb	r1, [r7, #15]
 800c2fe:	7bba      	ldrb	r2, [r7, #14]
 800c300:	4819      	ldr	r0, [pc, #100]	; (800c368 <motion_primitive_set_keyframe+0x94>)
 800c302:	4613      	mov	r3, r2
 800c304:	005b      	lsls	r3, r3, #1
 800c306:	4413      	add	r3, r2
 800c308:	009b      	lsls	r3, r3, #2
 800c30a:	2264      	movs	r2, #100	; 0x64
 800c30c:	fb02 f201 	mul.w	r2, r2, r1
 800c310:	4413      	add	r3, r2
 800c312:	4403      	add	r3, r0
 800c314:	3324      	adds	r3, #36	; 0x24
 800c316:	683a      	ldr	r2, [r7, #0]
 800c318:	601a      	str	r2, [r3, #0]
	primitives[index].frames[keyframe_index].x = x;
 800c31a:	7bf9      	ldrb	r1, [r7, #15]
 800c31c:	7bba      	ldrb	r2, [r7, #14]
 800c31e:	4812      	ldr	r0, [pc, #72]	; (800c368 <motion_primitive_set_keyframe+0x94>)
 800c320:	4613      	mov	r3, r2
 800c322:	005b      	lsls	r3, r3, #1
 800c324:	4413      	add	r3, r2
 800c326:	009b      	lsls	r3, r3, #2
 800c328:	2264      	movs	r2, #100	; 0x64
 800c32a:	fb02 f201 	mul.w	r2, r2, r1
 800c32e:	4413      	add	r3, r2
 800c330:	4403      	add	r3, r0
 800c332:	331c      	adds	r3, #28
 800c334:	68ba      	ldr	r2, [r7, #8]
 800c336:	601a      	str	r2, [r3, #0]
	primitives[index].frames[keyframe_index].y = y;
 800c338:	7bf9      	ldrb	r1, [r7, #15]
 800c33a:	7bba      	ldrb	r2, [r7, #14]
 800c33c:	480a      	ldr	r0, [pc, #40]	; (800c368 <motion_primitive_set_keyframe+0x94>)
 800c33e:	4613      	mov	r3, r2
 800c340:	005b      	lsls	r3, r3, #1
 800c342:	4413      	add	r3, r2
 800c344:	009b      	lsls	r3, r3, #2
 800c346:	2264      	movs	r2, #100	; 0x64
 800c348:	fb02 f201 	mul.w	r2, r2, r1
 800c34c:	4413      	add	r3, r2
 800c34e:	4403      	add	r3, r0
 800c350:	3320      	adds	r3, #32
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	601a      	str	r2, [r3, #0]
 800c356:	e002      	b.n	800c35e <motion_primitive_set_keyframe+0x8a>
		return;
 800c358:	bf00      	nop
 800c35a:	e000      	b.n	800c35e <motion_primitive_set_keyframe+0x8a>
		return;
 800c35c:	bf00      	nop
 }
 800c35e:	3714      	adds	r7, #20
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr
 800c368:	20015288 	.word	0x20015288

0800c36c <get_motion_primitive>:

 uint8_t get_motion_primitive(void)
 {
 800c36c:	b480      	push	{r7}
 800c36e:	af00      	add	r7, sp, #0
	return primitive_index;
 800c370:	4b03      	ldr	r3, [pc, #12]	; (800c380 <get_motion_primitive+0x14>)
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	b2db      	uxtb	r3, r3
 }
 800c376:	4618      	mov	r0, r3
 800c378:	46bd      	mov	sp, r7
 800c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37e:	4770      	bx	lr
 800c380:	20015280 	.word	0x20015280

0800c384 <calculate_pid>:

 #include <stdint.h>
 #include "pid_controller.h"

 float calculate_pid(pid_control_t * pid, int32_t setpoint, int32_t current_position)
 {
 800c384:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c388:	b086      	sub	sp, #24
 800c38a:	af00      	add	r7, sp, #0
 800c38c:	60f8      	str	r0, [r7, #12]
 800c38e:	60b9      	str	r1, [r7, #8]
 800c390:	607a      	str	r2, [r7, #4]
	float error = setpoint - current_position;
 800c392:	68ba      	ldr	r2, [r7, #8]
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	1ad3      	subs	r3, r2, r3
 800c398:	ee07 3a90 	vmov	s15, r3
 800c39c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3a0:	edc7 7a04 	vstr	s15, [r7, #16]

	// Use current vs last position instead of error changes. This is the same if setpoint does not change, but setpoint jumps
	// can cause odd spikes in command otherwise
	pid->speed = (pid->speed_alpha)*pid->speed + (1.0-pid->speed_alpha)*(current_position - pid->last_position);
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	ed93 7a08 	vldr	s14, [r3, #32]
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	edd3 7a02 	vldr	s15, [r3, #8]
 800c3b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3b4:	ee17 0a90 	vmov	r0, s15
 800c3b8:	f7f4 f86e 	bl	8000498 <__aeabi_f2d>
 800c3bc:	4604      	mov	r4, r0
 800c3be:	460d      	mov	r5, r1
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	6a1b      	ldr	r3, [r3, #32]
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f7f4 f867 	bl	8000498 <__aeabi_f2d>
 800c3ca:	4602      	mov	r2, r0
 800c3cc:	460b      	mov	r3, r1
 800c3ce:	f04f 0000 	mov.w	r0, #0
 800c3d2:	4949      	ldr	r1, [pc, #292]	; (800c4f8 <calculate_pid+0x174>)
 800c3d4:	f7f3 ff00 	bl	80001d8 <__aeabi_dsub>
 800c3d8:	4602      	mov	r2, r0
 800c3da:	460b      	mov	r3, r1
 800c3dc:	4690      	mov	r8, r2
 800c3de:	4699      	mov	r9, r3
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	1ad3      	subs	r3, r2, r3
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7f4 f843 	bl	8000474 <__aeabi_i2d>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	4640      	mov	r0, r8
 800c3f4:	4649      	mov	r1, r9
 800c3f6:	f7f4 f8a7 	bl	8000548 <__aeabi_dmul>
 800c3fa:	4602      	mov	r2, r0
 800c3fc:	460b      	mov	r3, r1
 800c3fe:	4620      	mov	r0, r4
 800c400:	4629      	mov	r1, r5
 800c402:	f7f3 feeb 	bl	80001dc <__adddf3>
 800c406:	4603      	mov	r3, r0
 800c408:	460c      	mov	r4, r1
 800c40a:	4618      	mov	r0, r3
 800c40c:	4621      	mov	r1, r4
 800c40e:	f7f4 fb93 	bl	8000b38 <__aeabi_d2f>
 800c412:	4602      	mov	r2, r0
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	609a      	str	r2, [r3, #8]

	pid->integral += error;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	ed93 7a03 	vldr	s14, [r3, #12]
 800c41e:	edd7 7a04 	vldr	s15, [r7, #16]
 800c422:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	edc3 7a03 	vstr	s15, [r3, #12]

	if(pid->integral > pid->integral_max)
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	ed93 7a03 	vldr	s14, [r3, #12]
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	edd3 7a04 	vldr	s15, [r3, #16]
 800c438:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c440:	dd04      	ble.n	800c44c <calculate_pid+0xc8>
	{
		pid->integral = pid->integral_max;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	691a      	ldr	r2, [r3, #16]
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	60da      	str	r2, [r3, #12]
 800c44a:	e00e      	b.n	800c46a <calculate_pid+0xe6>
	}
	else if(pid->integral < pid->integral_min)
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	ed93 7a03 	vldr	s14, [r3, #12]
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	edd3 7a05 	vldr	s15, [r3, #20]
 800c458:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c45c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c460:	d503      	bpl.n	800c46a <calculate_pid+0xe6>
	{
		pid->integral = pid->integral_min;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	695a      	ldr	r2, [r3, #20]
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	60da      	str	r2, [r3, #12]
	}

	float cmd = pid->kp * error + pid->kd * pid->speed + pid->ki * pid->integral;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800c470:	edd7 7a04 	vldr	s15, [r7, #16]
 800c474:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	edd3 7a02 	vldr	s15, [r3, #8]
 800c484:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c488:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	edd3 7a03 	vldr	s15, [r3, #12]
 800c498:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c49c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4a0:	edc7 7a05 	vstr	s15, [r7, #20]

	if(cmd > pid->cmd_max)
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	edd3 7a06 	vldr	s15, [r3, #24]
 800c4aa:	ed97 7a05 	vldr	s14, [r7, #20]
 800c4ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c4b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4b6:	dd03      	ble.n	800c4c0 <calculate_pid+0x13c>
	{
		cmd	= pid->cmd_max;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	699b      	ldr	r3, [r3, #24]
 800c4bc:	617b      	str	r3, [r7, #20]
 800c4be:	e00c      	b.n	800c4da <calculate_pid+0x156>
	}
	else if(cmd < pid->cmd_min)
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	edd3 7a07 	vldr	s15, [r3, #28]
 800c4c6:	ed97 7a05 	vldr	s14, [r7, #20]
 800c4ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4d2:	d502      	bpl.n	800c4da <calculate_pid+0x156>
	{
		cmd = pid->cmd_min;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	69db      	ldr	r3, [r3, #28]
 800c4d8:	617b      	str	r3, [r7, #20]
	}

	pid->last_error = error;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	693a      	ldr	r2, [r7, #16]
 800c4de:	605a      	str	r2, [r3, #4]
	pid->last_position = current_position;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	601a      	str	r2, [r3, #0]
	return cmd;
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	ee07 3a90 	vmov	s15, r3
 }
 800c4ec:	eeb0 0a67 	vmov.f32	s0, s15
 800c4f0:	3718      	adds	r7, #24
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c4f8:	3ff00000 	.word	0x3ff00000

0800c4fc <arm_sin_f32>:
 800c4fc:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800c578 <arm_sin_f32+0x7c>
 800c500:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c504:	ee20 7a07 	vmul.f32	s14, s0, s14
 800c508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c50c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800c510:	d42c      	bmi.n	800c56c <arm_sin_f32+0x70>
 800c512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c516:	eddf 6a19 	vldr	s13, [pc, #100]	; 800c57c <arm_sin_f32+0x80>
 800c51a:	4a19      	ldr	r2, [pc, #100]	; (800c580 <arm_sin_f32+0x84>)
 800c51c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c520:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c524:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c528:	eef4 7ae6 	vcmpe.f32	s15, s13
 800c52c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c530:	bfa8      	it	ge
 800c532:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 800c536:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800c53a:	ee17 3a10 	vmov	r3, s14
 800c53e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c542:	ee07 3a10 	vmov	s14, r3
 800c546:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800c54a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800c54e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c552:	edd1 6a01 	vldr	s13, [r1, #4]
 800c556:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c55a:	ed91 0a00 	vldr	s0, [r1]
 800c55e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c562:	ee27 0a00 	vmul.f32	s0, s14, s0
 800c566:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c56a:	4770      	bx	lr
 800c56c:	ee17 3a90 	vmov	r3, s15
 800c570:	3b01      	subs	r3, #1
 800c572:	ee07 3a90 	vmov	s15, r3
 800c576:	e7cc      	b.n	800c512 <arm_sin_f32+0x16>
 800c578:	3e22f983 	.word	0x3e22f983
 800c57c:	44000000 	.word	0x44000000
 800c580:	0800d440 	.word	0x0800d440

0800c584 <arm_cos_f32>:
 800c584:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800c5f8 <arm_cos_f32+0x74>
 800c588:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c58c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800c590:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c594:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c59c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c5a0:	d504      	bpl.n	800c5ac <arm_cos_f32+0x28>
 800c5a2:	ee17 3a90 	vmov	r3, s15
 800c5a6:	3b01      	subs	r3, #1
 800c5a8:	ee07 3a90 	vmov	s15, r3
 800c5ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c5b0:	eddf 6a12 	vldr	s13, [pc, #72]	; 800c5fc <arm_cos_f32+0x78>
 800c5b4:	4a12      	ldr	r2, [pc, #72]	; (800c600 <arm_cos_f32+0x7c>)
 800c5b6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c5ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c5be:	ee20 0a26 	vmul.f32	s0, s0, s13
 800c5c2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800c5c6:	ee17 3a90 	vmov	r3, s15
 800c5ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5ce:	ee07 3a90 	vmov	s15, r3
 800c5d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5d6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800c5da:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c5de:	edd1 6a01 	vldr	s13, [r1, #4]
 800c5e2:	ed91 0a00 	vldr	s0, [r1]
 800c5e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c5ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c5ee:	ee27 0a00 	vmul.f32	s0, s14, s0
 800c5f2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c5f6:	4770      	bx	lr
 800c5f8:	3e22f983 	.word	0x3e22f983
 800c5fc:	44000000 	.word	0x44000000
 800c600:	0800d440 	.word	0x0800d440

0800c604 <__errno>:
 800c604:	4b01      	ldr	r3, [pc, #4]	; (800c60c <__errno+0x8>)
 800c606:	6818      	ldr	r0, [r3, #0]
 800c608:	4770      	bx	lr
 800c60a:	bf00      	nop
 800c60c:	20000024 	.word	0x20000024

0800c610 <__libc_init_array>:
 800c610:	b570      	push	{r4, r5, r6, lr}
 800c612:	4e0d      	ldr	r6, [pc, #52]	; (800c648 <__libc_init_array+0x38>)
 800c614:	4c0d      	ldr	r4, [pc, #52]	; (800c64c <__libc_init_array+0x3c>)
 800c616:	1ba4      	subs	r4, r4, r6
 800c618:	10a4      	asrs	r4, r4, #2
 800c61a:	2500      	movs	r5, #0
 800c61c:	42a5      	cmp	r5, r4
 800c61e:	d109      	bne.n	800c634 <__libc_init_array+0x24>
 800c620:	4e0b      	ldr	r6, [pc, #44]	; (800c650 <__libc_init_array+0x40>)
 800c622:	4c0c      	ldr	r4, [pc, #48]	; (800c654 <__libc_init_array+0x44>)
 800c624:	f000 febc 	bl	800d3a0 <_init>
 800c628:	1ba4      	subs	r4, r4, r6
 800c62a:	10a4      	asrs	r4, r4, #2
 800c62c:	2500      	movs	r5, #0
 800c62e:	42a5      	cmp	r5, r4
 800c630:	d105      	bne.n	800c63e <__libc_init_array+0x2e>
 800c632:	bd70      	pop	{r4, r5, r6, pc}
 800c634:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c638:	4798      	blx	r3
 800c63a:	3501      	adds	r5, #1
 800c63c:	e7ee      	b.n	800c61c <__libc_init_array+0xc>
 800c63e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c642:	4798      	blx	r3
 800c644:	3501      	adds	r5, #1
 800c646:	e7f2      	b.n	800c62e <__libc_init_array+0x1e>
 800c648:	0800dcb0 	.word	0x0800dcb0
 800c64c:	0800dcb0 	.word	0x0800dcb0
 800c650:	0800dcb0 	.word	0x0800dcb0
 800c654:	0800dcb4 	.word	0x0800dcb4

0800c658 <memcpy>:
 800c658:	b510      	push	{r4, lr}
 800c65a:	1e43      	subs	r3, r0, #1
 800c65c:	440a      	add	r2, r1
 800c65e:	4291      	cmp	r1, r2
 800c660:	d100      	bne.n	800c664 <memcpy+0xc>
 800c662:	bd10      	pop	{r4, pc}
 800c664:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c668:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c66c:	e7f7      	b.n	800c65e <memcpy+0x6>

0800c66e <memset>:
 800c66e:	4402      	add	r2, r0
 800c670:	4603      	mov	r3, r0
 800c672:	4293      	cmp	r3, r2
 800c674:	d100      	bne.n	800c678 <memset+0xa>
 800c676:	4770      	bx	lr
 800c678:	f803 1b01 	strb.w	r1, [r3], #1
 800c67c:	e7f9      	b.n	800c672 <memset+0x4>
	...

0800c680 <atan>:
 800c680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c684:	ec55 4b10 	vmov	r4, r5, d0
 800c688:	4bc3      	ldr	r3, [pc, #780]	; (800c998 <atan+0x318>)
 800c68a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c68e:	429e      	cmp	r6, r3
 800c690:	46ab      	mov	fp, r5
 800c692:	dd18      	ble.n	800c6c6 <atan+0x46>
 800c694:	4bc1      	ldr	r3, [pc, #772]	; (800c99c <atan+0x31c>)
 800c696:	429e      	cmp	r6, r3
 800c698:	dc01      	bgt.n	800c69e <atan+0x1e>
 800c69a:	d109      	bne.n	800c6b0 <atan+0x30>
 800c69c:	b144      	cbz	r4, 800c6b0 <atan+0x30>
 800c69e:	4622      	mov	r2, r4
 800c6a0:	462b      	mov	r3, r5
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	4629      	mov	r1, r5
 800c6a6:	f7f3 fd99 	bl	80001dc <__adddf3>
 800c6aa:	4604      	mov	r4, r0
 800c6ac:	460d      	mov	r5, r1
 800c6ae:	e006      	b.n	800c6be <atan+0x3e>
 800c6b0:	f1bb 0f00 	cmp.w	fp, #0
 800c6b4:	f340 8131 	ble.w	800c91a <atan+0x29a>
 800c6b8:	a59b      	add	r5, pc, #620	; (adr r5, 800c928 <atan+0x2a8>)
 800c6ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c6be:	ec45 4b10 	vmov	d0, r4, r5
 800c6c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6c6:	4bb6      	ldr	r3, [pc, #728]	; (800c9a0 <atan+0x320>)
 800c6c8:	429e      	cmp	r6, r3
 800c6ca:	dc14      	bgt.n	800c6f6 <atan+0x76>
 800c6cc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c6d0:	429e      	cmp	r6, r3
 800c6d2:	dc0d      	bgt.n	800c6f0 <atan+0x70>
 800c6d4:	a396      	add	r3, pc, #600	; (adr r3, 800c930 <atan+0x2b0>)
 800c6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6da:	ee10 0a10 	vmov	r0, s0
 800c6de:	4629      	mov	r1, r5
 800c6e0:	f7f3 fd7c 	bl	80001dc <__adddf3>
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	4baf      	ldr	r3, [pc, #700]	; (800c9a4 <atan+0x324>)
 800c6e8:	f7f4 f9be 	bl	8000a68 <__aeabi_dcmpgt>
 800c6ec:	2800      	cmp	r0, #0
 800c6ee:	d1e6      	bne.n	800c6be <atan+0x3e>
 800c6f0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c6f4:	e02b      	b.n	800c74e <atan+0xce>
 800c6f6:	f000 f963 	bl	800c9c0 <fabs>
 800c6fa:	4bab      	ldr	r3, [pc, #684]	; (800c9a8 <atan+0x328>)
 800c6fc:	429e      	cmp	r6, r3
 800c6fe:	ec55 4b10 	vmov	r4, r5, d0
 800c702:	f300 80bf 	bgt.w	800c884 <atan+0x204>
 800c706:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c70a:	429e      	cmp	r6, r3
 800c70c:	f300 80a0 	bgt.w	800c850 <atan+0x1d0>
 800c710:	ee10 2a10 	vmov	r2, s0
 800c714:	ee10 0a10 	vmov	r0, s0
 800c718:	462b      	mov	r3, r5
 800c71a:	4629      	mov	r1, r5
 800c71c:	f7f3 fd5e 	bl	80001dc <__adddf3>
 800c720:	2200      	movs	r2, #0
 800c722:	4ba0      	ldr	r3, [pc, #640]	; (800c9a4 <atan+0x324>)
 800c724:	f7f3 fd58 	bl	80001d8 <__aeabi_dsub>
 800c728:	2200      	movs	r2, #0
 800c72a:	4606      	mov	r6, r0
 800c72c:	460f      	mov	r7, r1
 800c72e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c732:	4620      	mov	r0, r4
 800c734:	4629      	mov	r1, r5
 800c736:	f7f3 fd51 	bl	80001dc <__adddf3>
 800c73a:	4602      	mov	r2, r0
 800c73c:	460b      	mov	r3, r1
 800c73e:	4630      	mov	r0, r6
 800c740:	4639      	mov	r1, r7
 800c742:	f7f4 f82b 	bl	800079c <__aeabi_ddiv>
 800c746:	f04f 0a00 	mov.w	sl, #0
 800c74a:	4604      	mov	r4, r0
 800c74c:	460d      	mov	r5, r1
 800c74e:	4622      	mov	r2, r4
 800c750:	462b      	mov	r3, r5
 800c752:	4620      	mov	r0, r4
 800c754:	4629      	mov	r1, r5
 800c756:	f7f3 fef7 	bl	8000548 <__aeabi_dmul>
 800c75a:	4602      	mov	r2, r0
 800c75c:	460b      	mov	r3, r1
 800c75e:	4680      	mov	r8, r0
 800c760:	4689      	mov	r9, r1
 800c762:	f7f3 fef1 	bl	8000548 <__aeabi_dmul>
 800c766:	a374      	add	r3, pc, #464	; (adr r3, 800c938 <atan+0x2b8>)
 800c768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76c:	4606      	mov	r6, r0
 800c76e:	460f      	mov	r7, r1
 800c770:	f7f3 feea 	bl	8000548 <__aeabi_dmul>
 800c774:	a372      	add	r3, pc, #456	; (adr r3, 800c940 <atan+0x2c0>)
 800c776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77a:	f7f3 fd2f 	bl	80001dc <__adddf3>
 800c77e:	4632      	mov	r2, r6
 800c780:	463b      	mov	r3, r7
 800c782:	f7f3 fee1 	bl	8000548 <__aeabi_dmul>
 800c786:	a370      	add	r3, pc, #448	; (adr r3, 800c948 <atan+0x2c8>)
 800c788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78c:	f7f3 fd26 	bl	80001dc <__adddf3>
 800c790:	4632      	mov	r2, r6
 800c792:	463b      	mov	r3, r7
 800c794:	f7f3 fed8 	bl	8000548 <__aeabi_dmul>
 800c798:	a36d      	add	r3, pc, #436	; (adr r3, 800c950 <atan+0x2d0>)
 800c79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c79e:	f7f3 fd1d 	bl	80001dc <__adddf3>
 800c7a2:	4632      	mov	r2, r6
 800c7a4:	463b      	mov	r3, r7
 800c7a6:	f7f3 fecf 	bl	8000548 <__aeabi_dmul>
 800c7aa:	a36b      	add	r3, pc, #428	; (adr r3, 800c958 <atan+0x2d8>)
 800c7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b0:	f7f3 fd14 	bl	80001dc <__adddf3>
 800c7b4:	4632      	mov	r2, r6
 800c7b6:	463b      	mov	r3, r7
 800c7b8:	f7f3 fec6 	bl	8000548 <__aeabi_dmul>
 800c7bc:	a368      	add	r3, pc, #416	; (adr r3, 800c960 <atan+0x2e0>)
 800c7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c2:	f7f3 fd0b 	bl	80001dc <__adddf3>
 800c7c6:	4642      	mov	r2, r8
 800c7c8:	464b      	mov	r3, r9
 800c7ca:	f7f3 febd 	bl	8000548 <__aeabi_dmul>
 800c7ce:	a366      	add	r3, pc, #408	; (adr r3, 800c968 <atan+0x2e8>)
 800c7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d4:	4680      	mov	r8, r0
 800c7d6:	4689      	mov	r9, r1
 800c7d8:	4630      	mov	r0, r6
 800c7da:	4639      	mov	r1, r7
 800c7dc:	f7f3 feb4 	bl	8000548 <__aeabi_dmul>
 800c7e0:	a363      	add	r3, pc, #396	; (adr r3, 800c970 <atan+0x2f0>)
 800c7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e6:	f7f3 fcf7 	bl	80001d8 <__aeabi_dsub>
 800c7ea:	4632      	mov	r2, r6
 800c7ec:	463b      	mov	r3, r7
 800c7ee:	f7f3 feab 	bl	8000548 <__aeabi_dmul>
 800c7f2:	a361      	add	r3, pc, #388	; (adr r3, 800c978 <atan+0x2f8>)
 800c7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f8:	f7f3 fcee 	bl	80001d8 <__aeabi_dsub>
 800c7fc:	4632      	mov	r2, r6
 800c7fe:	463b      	mov	r3, r7
 800c800:	f7f3 fea2 	bl	8000548 <__aeabi_dmul>
 800c804:	a35e      	add	r3, pc, #376	; (adr r3, 800c980 <atan+0x300>)
 800c806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c80a:	f7f3 fce5 	bl	80001d8 <__aeabi_dsub>
 800c80e:	4632      	mov	r2, r6
 800c810:	463b      	mov	r3, r7
 800c812:	f7f3 fe99 	bl	8000548 <__aeabi_dmul>
 800c816:	a35c      	add	r3, pc, #368	; (adr r3, 800c988 <atan+0x308>)
 800c818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81c:	f7f3 fcdc 	bl	80001d8 <__aeabi_dsub>
 800c820:	4632      	mov	r2, r6
 800c822:	463b      	mov	r3, r7
 800c824:	f7f3 fe90 	bl	8000548 <__aeabi_dmul>
 800c828:	4602      	mov	r2, r0
 800c82a:	460b      	mov	r3, r1
 800c82c:	4640      	mov	r0, r8
 800c82e:	4649      	mov	r1, r9
 800c830:	f7f3 fcd4 	bl	80001dc <__adddf3>
 800c834:	4622      	mov	r2, r4
 800c836:	462b      	mov	r3, r5
 800c838:	f7f3 fe86 	bl	8000548 <__aeabi_dmul>
 800c83c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800c840:	4602      	mov	r2, r0
 800c842:	460b      	mov	r3, r1
 800c844:	d14b      	bne.n	800c8de <atan+0x25e>
 800c846:	4620      	mov	r0, r4
 800c848:	4629      	mov	r1, r5
 800c84a:	f7f3 fcc5 	bl	80001d8 <__aeabi_dsub>
 800c84e:	e72c      	b.n	800c6aa <atan+0x2a>
 800c850:	ee10 0a10 	vmov	r0, s0
 800c854:	2200      	movs	r2, #0
 800c856:	4b53      	ldr	r3, [pc, #332]	; (800c9a4 <atan+0x324>)
 800c858:	4629      	mov	r1, r5
 800c85a:	f7f3 fcbd 	bl	80001d8 <__aeabi_dsub>
 800c85e:	2200      	movs	r2, #0
 800c860:	4606      	mov	r6, r0
 800c862:	460f      	mov	r7, r1
 800c864:	4b4f      	ldr	r3, [pc, #316]	; (800c9a4 <atan+0x324>)
 800c866:	4620      	mov	r0, r4
 800c868:	4629      	mov	r1, r5
 800c86a:	f7f3 fcb7 	bl	80001dc <__adddf3>
 800c86e:	4602      	mov	r2, r0
 800c870:	460b      	mov	r3, r1
 800c872:	4630      	mov	r0, r6
 800c874:	4639      	mov	r1, r7
 800c876:	f7f3 ff91 	bl	800079c <__aeabi_ddiv>
 800c87a:	f04f 0a01 	mov.w	sl, #1
 800c87e:	4604      	mov	r4, r0
 800c880:	460d      	mov	r5, r1
 800c882:	e764      	b.n	800c74e <atan+0xce>
 800c884:	4b49      	ldr	r3, [pc, #292]	; (800c9ac <atan+0x32c>)
 800c886:	429e      	cmp	r6, r3
 800c888:	dc1d      	bgt.n	800c8c6 <atan+0x246>
 800c88a:	ee10 0a10 	vmov	r0, s0
 800c88e:	2200      	movs	r2, #0
 800c890:	4b47      	ldr	r3, [pc, #284]	; (800c9b0 <atan+0x330>)
 800c892:	4629      	mov	r1, r5
 800c894:	f7f3 fca0 	bl	80001d8 <__aeabi_dsub>
 800c898:	2200      	movs	r2, #0
 800c89a:	4606      	mov	r6, r0
 800c89c:	460f      	mov	r7, r1
 800c89e:	4b44      	ldr	r3, [pc, #272]	; (800c9b0 <atan+0x330>)
 800c8a0:	4620      	mov	r0, r4
 800c8a2:	4629      	mov	r1, r5
 800c8a4:	f7f3 fe50 	bl	8000548 <__aeabi_dmul>
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	4b3e      	ldr	r3, [pc, #248]	; (800c9a4 <atan+0x324>)
 800c8ac:	f7f3 fc96 	bl	80001dc <__adddf3>
 800c8b0:	4602      	mov	r2, r0
 800c8b2:	460b      	mov	r3, r1
 800c8b4:	4630      	mov	r0, r6
 800c8b6:	4639      	mov	r1, r7
 800c8b8:	f7f3 ff70 	bl	800079c <__aeabi_ddiv>
 800c8bc:	f04f 0a02 	mov.w	sl, #2
 800c8c0:	4604      	mov	r4, r0
 800c8c2:	460d      	mov	r5, r1
 800c8c4:	e743      	b.n	800c74e <atan+0xce>
 800c8c6:	462b      	mov	r3, r5
 800c8c8:	ee10 2a10 	vmov	r2, s0
 800c8cc:	2000      	movs	r0, #0
 800c8ce:	4939      	ldr	r1, [pc, #228]	; (800c9b4 <atan+0x334>)
 800c8d0:	f7f3 ff64 	bl	800079c <__aeabi_ddiv>
 800c8d4:	f04f 0a03 	mov.w	sl, #3
 800c8d8:	4604      	mov	r4, r0
 800c8da:	460d      	mov	r5, r1
 800c8dc:	e737      	b.n	800c74e <atan+0xce>
 800c8de:	4b36      	ldr	r3, [pc, #216]	; (800c9b8 <atan+0x338>)
 800c8e0:	4e36      	ldr	r6, [pc, #216]	; (800c9bc <atan+0x33c>)
 800c8e2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800c8e6:	4456      	add	r6, sl
 800c8e8:	449a      	add	sl, r3
 800c8ea:	e9da 2300 	ldrd	r2, r3, [sl]
 800c8ee:	f7f3 fc73 	bl	80001d8 <__aeabi_dsub>
 800c8f2:	4622      	mov	r2, r4
 800c8f4:	462b      	mov	r3, r5
 800c8f6:	f7f3 fc6f 	bl	80001d8 <__aeabi_dsub>
 800c8fa:	4602      	mov	r2, r0
 800c8fc:	460b      	mov	r3, r1
 800c8fe:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c902:	f7f3 fc69 	bl	80001d8 <__aeabi_dsub>
 800c906:	f1bb 0f00 	cmp.w	fp, #0
 800c90a:	4604      	mov	r4, r0
 800c90c:	460d      	mov	r5, r1
 800c90e:	f6bf aed6 	bge.w	800c6be <atan+0x3e>
 800c912:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c916:	461d      	mov	r5, r3
 800c918:	e6d1      	b.n	800c6be <atan+0x3e>
 800c91a:	a51d      	add	r5, pc, #116	; (adr r5, 800c990 <atan+0x310>)
 800c91c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c920:	e6cd      	b.n	800c6be <atan+0x3e>
 800c922:	bf00      	nop
 800c924:	f3af 8000 	nop.w
 800c928:	54442d18 	.word	0x54442d18
 800c92c:	3ff921fb 	.word	0x3ff921fb
 800c930:	8800759c 	.word	0x8800759c
 800c934:	7e37e43c 	.word	0x7e37e43c
 800c938:	e322da11 	.word	0xe322da11
 800c93c:	3f90ad3a 	.word	0x3f90ad3a
 800c940:	24760deb 	.word	0x24760deb
 800c944:	3fa97b4b 	.word	0x3fa97b4b
 800c948:	a0d03d51 	.word	0xa0d03d51
 800c94c:	3fb10d66 	.word	0x3fb10d66
 800c950:	c54c206e 	.word	0xc54c206e
 800c954:	3fb745cd 	.word	0x3fb745cd
 800c958:	920083ff 	.word	0x920083ff
 800c95c:	3fc24924 	.word	0x3fc24924
 800c960:	5555550d 	.word	0x5555550d
 800c964:	3fd55555 	.word	0x3fd55555
 800c968:	2c6a6c2f 	.word	0x2c6a6c2f
 800c96c:	bfa2b444 	.word	0xbfa2b444
 800c970:	52defd9a 	.word	0x52defd9a
 800c974:	3fadde2d 	.word	0x3fadde2d
 800c978:	af749a6d 	.word	0xaf749a6d
 800c97c:	3fb3b0f2 	.word	0x3fb3b0f2
 800c980:	fe231671 	.word	0xfe231671
 800c984:	3fbc71c6 	.word	0x3fbc71c6
 800c988:	9998ebc4 	.word	0x9998ebc4
 800c98c:	3fc99999 	.word	0x3fc99999
 800c990:	54442d18 	.word	0x54442d18
 800c994:	bff921fb 	.word	0xbff921fb
 800c998:	440fffff 	.word	0x440fffff
 800c99c:	7ff00000 	.word	0x7ff00000
 800c9a0:	3fdbffff 	.word	0x3fdbffff
 800c9a4:	3ff00000 	.word	0x3ff00000
 800c9a8:	3ff2ffff 	.word	0x3ff2ffff
 800c9ac:	40037fff 	.word	0x40037fff
 800c9b0:	3ff80000 	.word	0x3ff80000
 800c9b4:	bff00000 	.word	0xbff00000
 800c9b8:	0800dc68 	.word	0x0800dc68
 800c9bc:	0800dc48 	.word	0x0800dc48

0800c9c0 <fabs>:
 800c9c0:	ec51 0b10 	vmov	r0, r1, d0
 800c9c4:	ee10 2a10 	vmov	r2, s0
 800c9c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c9cc:	ec43 2b10 	vmov	d0, r2, r3
 800c9d0:	4770      	bx	lr
	...

0800c9d4 <acos>:
 800c9d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9d6:	ed2d 8b02 	vpush	{d8}
 800c9da:	4e26      	ldr	r6, [pc, #152]	; (800ca74 <acos+0xa0>)
 800c9dc:	b08b      	sub	sp, #44	; 0x2c
 800c9de:	ec55 4b10 	vmov	r4, r5, d0
 800c9e2:	f000 f8b5 	bl	800cb50 <__ieee754_acos>
 800c9e6:	f996 3000 	ldrsb.w	r3, [r6]
 800c9ea:	eeb0 8a40 	vmov.f32	s16, s0
 800c9ee:	eef0 8a60 	vmov.f32	s17, s1
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	d036      	beq.n	800ca64 <acos+0x90>
 800c9f6:	4622      	mov	r2, r4
 800c9f8:	462b      	mov	r3, r5
 800c9fa:	4620      	mov	r0, r4
 800c9fc:	4629      	mov	r1, r5
 800c9fe:	f7f4 f83d 	bl	8000a7c <__aeabi_dcmpun>
 800ca02:	4607      	mov	r7, r0
 800ca04:	bb70      	cbnz	r0, 800ca64 <acos+0x90>
 800ca06:	ec45 4b10 	vmov	d0, r4, r5
 800ca0a:	f7ff ffd9 	bl	800c9c0 <fabs>
 800ca0e:	2200      	movs	r2, #0
 800ca10:	4b19      	ldr	r3, [pc, #100]	; (800ca78 <acos+0xa4>)
 800ca12:	ec51 0b10 	vmov	r0, r1, d0
 800ca16:	f7f4 f827 	bl	8000a68 <__aeabi_dcmpgt>
 800ca1a:	b318      	cbz	r0, 800ca64 <acos+0x90>
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	9300      	str	r3, [sp, #0]
 800ca20:	4816      	ldr	r0, [pc, #88]	; (800ca7c <acos+0xa8>)
 800ca22:	4b17      	ldr	r3, [pc, #92]	; (800ca80 <acos+0xac>)
 800ca24:	9301      	str	r3, [sp, #4]
 800ca26:	9708      	str	r7, [sp, #32]
 800ca28:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800ca2c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ca30:	f000 fcae 	bl	800d390 <nan>
 800ca34:	f996 3000 	ldrsb.w	r3, [r6]
 800ca38:	2b02      	cmp	r3, #2
 800ca3a:	ed8d 0b06 	vstr	d0, [sp, #24]
 800ca3e:	d104      	bne.n	800ca4a <acos+0x76>
 800ca40:	f7ff fde0 	bl	800c604 <__errno>
 800ca44:	2321      	movs	r3, #33	; 0x21
 800ca46:	6003      	str	r3, [r0, #0]
 800ca48:	e004      	b.n	800ca54 <acos+0x80>
 800ca4a:	4668      	mov	r0, sp
 800ca4c:	f000 fc9e 	bl	800d38c <matherr>
 800ca50:	2800      	cmp	r0, #0
 800ca52:	d0f5      	beq.n	800ca40 <acos+0x6c>
 800ca54:	9b08      	ldr	r3, [sp, #32]
 800ca56:	b11b      	cbz	r3, 800ca60 <acos+0x8c>
 800ca58:	f7ff fdd4 	bl	800c604 <__errno>
 800ca5c:	9b08      	ldr	r3, [sp, #32]
 800ca5e:	6003      	str	r3, [r0, #0]
 800ca60:	ed9d 8b06 	vldr	d8, [sp, #24]
 800ca64:	eeb0 0a48 	vmov.f32	s0, s16
 800ca68:	eef0 0a68 	vmov.f32	s1, s17
 800ca6c:	b00b      	add	sp, #44	; 0x2c
 800ca6e:	ecbd 8b02 	vpop	{d8}
 800ca72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca74:	20000088 	.word	0x20000088
 800ca78:	3ff00000 	.word	0x3ff00000
 800ca7c:	0800dc91 	.word	0x0800dc91
 800ca80:	0800dc88 	.word	0x0800dc88

0800ca84 <fmod>:
 800ca84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca88:	ed2d 8b02 	vpush	{d8}
 800ca8c:	b08b      	sub	sp, #44	; 0x2c
 800ca8e:	ec55 4b10 	vmov	r4, r5, d0
 800ca92:	ec57 6b11 	vmov	r6, r7, d1
 800ca96:	f000 fab7 	bl	800d008 <__ieee754_fmod>
 800ca9a:	4b2a      	ldr	r3, [pc, #168]	; (800cb44 <fmod+0xc0>)
 800ca9c:	eeb0 8a40 	vmov.f32	s16, s0
 800caa0:	eef0 8a60 	vmov.f32	s17, s1
 800caa4:	f993 8000 	ldrsb.w	r8, [r3]
 800caa8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800caac:	d030      	beq.n	800cb10 <fmod+0x8c>
 800caae:	4632      	mov	r2, r6
 800cab0:	463b      	mov	r3, r7
 800cab2:	4630      	mov	r0, r6
 800cab4:	4639      	mov	r1, r7
 800cab6:	f7f3 ffe1 	bl	8000a7c <__aeabi_dcmpun>
 800caba:	bb48      	cbnz	r0, 800cb10 <fmod+0x8c>
 800cabc:	4622      	mov	r2, r4
 800cabe:	462b      	mov	r3, r5
 800cac0:	4620      	mov	r0, r4
 800cac2:	4629      	mov	r1, r5
 800cac4:	f7f3 ffda 	bl	8000a7c <__aeabi_dcmpun>
 800cac8:	4681      	mov	r9, r0
 800caca:	bb08      	cbnz	r0, 800cb10 <fmod+0x8c>
 800cacc:	2200      	movs	r2, #0
 800cace:	2300      	movs	r3, #0
 800cad0:	4630      	mov	r0, r6
 800cad2:	4639      	mov	r1, r7
 800cad4:	f7f3 ffa0 	bl	8000a18 <__aeabi_dcmpeq>
 800cad8:	b1d0      	cbz	r0, 800cb10 <fmod+0x8c>
 800cada:	2301      	movs	r3, #1
 800cadc:	9300      	str	r3, [sp, #0]
 800cade:	4b1a      	ldr	r3, [pc, #104]	; (800cb48 <fmod+0xc4>)
 800cae0:	9301      	str	r3, [sp, #4]
 800cae2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800cae6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800caea:	f8cd 9020 	str.w	r9, [sp, #32]
 800caee:	f1b8 0f00 	cmp.w	r8, #0
 800caf2:	d116      	bne.n	800cb22 <fmod+0x9e>
 800caf4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800caf8:	4668      	mov	r0, sp
 800cafa:	f000 fc47 	bl	800d38c <matherr>
 800cafe:	b1d8      	cbz	r0, 800cb38 <fmod+0xb4>
 800cb00:	9b08      	ldr	r3, [sp, #32]
 800cb02:	b11b      	cbz	r3, 800cb0c <fmod+0x88>
 800cb04:	f7ff fd7e 	bl	800c604 <__errno>
 800cb08:	9b08      	ldr	r3, [sp, #32]
 800cb0a:	6003      	str	r3, [r0, #0]
 800cb0c:	ed9d 8b06 	vldr	d8, [sp, #24]
 800cb10:	eeb0 0a48 	vmov.f32	s0, s16
 800cb14:	eef0 0a68 	vmov.f32	s1, s17
 800cb18:	b00b      	add	sp, #44	; 0x2c
 800cb1a:	ecbd 8b02 	vpop	{d8}
 800cb1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb22:	2200      	movs	r2, #0
 800cb24:	2300      	movs	r3, #0
 800cb26:	4610      	mov	r0, r2
 800cb28:	4619      	mov	r1, r3
 800cb2a:	f7f3 fe37 	bl	800079c <__aeabi_ddiv>
 800cb2e:	f1b8 0f02 	cmp.w	r8, #2
 800cb32:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cb36:	d1df      	bne.n	800caf8 <fmod+0x74>
 800cb38:	f7ff fd64 	bl	800c604 <__errno>
 800cb3c:	2321      	movs	r3, #33	; 0x21
 800cb3e:	6003      	str	r3, [r0, #0]
 800cb40:	e7de      	b.n	800cb00 <fmod+0x7c>
 800cb42:	bf00      	nop
 800cb44:	20000088 	.word	0x20000088
 800cb48:	0800dc8d 	.word	0x0800dc8d
 800cb4c:	00000000 	.word	0x00000000

0800cb50 <__ieee754_acos>:
 800cb50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb54:	ec55 4b10 	vmov	r4, r5, d0
 800cb58:	49b7      	ldr	r1, [pc, #732]	; (800ce38 <__ieee754_acos+0x2e8>)
 800cb5a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cb5e:	428b      	cmp	r3, r1
 800cb60:	dd1b      	ble.n	800cb9a <__ieee754_acos+0x4a>
 800cb62:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800cb66:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cb6a:	4323      	orrs	r3, r4
 800cb6c:	d109      	bne.n	800cb82 <__ieee754_acos+0x32>
 800cb6e:	2d00      	cmp	r5, #0
 800cb70:	f300 8211 	bgt.w	800cf96 <__ieee754_acos+0x446>
 800cb74:	a196      	add	r1, pc, #600	; (adr r1, 800cdd0 <__ieee754_acos+0x280>)
 800cb76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb7a:	ec41 0b10 	vmov	d0, r0, r1
 800cb7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb82:	ee10 2a10 	vmov	r2, s0
 800cb86:	462b      	mov	r3, r5
 800cb88:	4620      	mov	r0, r4
 800cb8a:	4629      	mov	r1, r5
 800cb8c:	f7f3 fb24 	bl	80001d8 <__aeabi_dsub>
 800cb90:	4602      	mov	r2, r0
 800cb92:	460b      	mov	r3, r1
 800cb94:	f7f3 fe02 	bl	800079c <__aeabi_ddiv>
 800cb98:	e7ef      	b.n	800cb7a <__ieee754_acos+0x2a>
 800cb9a:	49a8      	ldr	r1, [pc, #672]	; (800ce3c <__ieee754_acos+0x2ec>)
 800cb9c:	428b      	cmp	r3, r1
 800cb9e:	f300 8087 	bgt.w	800ccb0 <__ieee754_acos+0x160>
 800cba2:	4aa7      	ldr	r2, [pc, #668]	; (800ce40 <__ieee754_acos+0x2f0>)
 800cba4:	4293      	cmp	r3, r2
 800cba6:	f340 81f9 	ble.w	800cf9c <__ieee754_acos+0x44c>
 800cbaa:	ee10 2a10 	vmov	r2, s0
 800cbae:	ee10 0a10 	vmov	r0, s0
 800cbb2:	462b      	mov	r3, r5
 800cbb4:	4629      	mov	r1, r5
 800cbb6:	f7f3 fcc7 	bl	8000548 <__aeabi_dmul>
 800cbba:	a387      	add	r3, pc, #540	; (adr r3, 800cdd8 <__ieee754_acos+0x288>)
 800cbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc0:	4606      	mov	r6, r0
 800cbc2:	460f      	mov	r7, r1
 800cbc4:	f7f3 fcc0 	bl	8000548 <__aeabi_dmul>
 800cbc8:	a385      	add	r3, pc, #532	; (adr r3, 800cde0 <__ieee754_acos+0x290>)
 800cbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbce:	f7f3 fb05 	bl	80001dc <__adddf3>
 800cbd2:	4632      	mov	r2, r6
 800cbd4:	463b      	mov	r3, r7
 800cbd6:	f7f3 fcb7 	bl	8000548 <__aeabi_dmul>
 800cbda:	a383      	add	r3, pc, #524	; (adr r3, 800cde8 <__ieee754_acos+0x298>)
 800cbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe0:	f7f3 fafa 	bl	80001d8 <__aeabi_dsub>
 800cbe4:	4632      	mov	r2, r6
 800cbe6:	463b      	mov	r3, r7
 800cbe8:	f7f3 fcae 	bl	8000548 <__aeabi_dmul>
 800cbec:	a380      	add	r3, pc, #512	; (adr r3, 800cdf0 <__ieee754_acos+0x2a0>)
 800cbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf2:	f7f3 faf3 	bl	80001dc <__adddf3>
 800cbf6:	4632      	mov	r2, r6
 800cbf8:	463b      	mov	r3, r7
 800cbfa:	f7f3 fca5 	bl	8000548 <__aeabi_dmul>
 800cbfe:	a37e      	add	r3, pc, #504	; (adr r3, 800cdf8 <__ieee754_acos+0x2a8>)
 800cc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc04:	f7f3 fae8 	bl	80001d8 <__aeabi_dsub>
 800cc08:	4632      	mov	r2, r6
 800cc0a:	463b      	mov	r3, r7
 800cc0c:	f7f3 fc9c 	bl	8000548 <__aeabi_dmul>
 800cc10:	a37b      	add	r3, pc, #492	; (adr r3, 800ce00 <__ieee754_acos+0x2b0>)
 800cc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc16:	f7f3 fae1 	bl	80001dc <__adddf3>
 800cc1a:	4632      	mov	r2, r6
 800cc1c:	463b      	mov	r3, r7
 800cc1e:	f7f3 fc93 	bl	8000548 <__aeabi_dmul>
 800cc22:	a379      	add	r3, pc, #484	; (adr r3, 800ce08 <__ieee754_acos+0x2b8>)
 800cc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc28:	4680      	mov	r8, r0
 800cc2a:	4689      	mov	r9, r1
 800cc2c:	4630      	mov	r0, r6
 800cc2e:	4639      	mov	r1, r7
 800cc30:	f7f3 fc8a 	bl	8000548 <__aeabi_dmul>
 800cc34:	a376      	add	r3, pc, #472	; (adr r3, 800ce10 <__ieee754_acos+0x2c0>)
 800cc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc3a:	f7f3 facd 	bl	80001d8 <__aeabi_dsub>
 800cc3e:	4632      	mov	r2, r6
 800cc40:	463b      	mov	r3, r7
 800cc42:	f7f3 fc81 	bl	8000548 <__aeabi_dmul>
 800cc46:	a374      	add	r3, pc, #464	; (adr r3, 800ce18 <__ieee754_acos+0x2c8>)
 800cc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc4c:	f7f3 fac6 	bl	80001dc <__adddf3>
 800cc50:	4632      	mov	r2, r6
 800cc52:	463b      	mov	r3, r7
 800cc54:	f7f3 fc78 	bl	8000548 <__aeabi_dmul>
 800cc58:	a371      	add	r3, pc, #452	; (adr r3, 800ce20 <__ieee754_acos+0x2d0>)
 800cc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5e:	f7f3 fabb 	bl	80001d8 <__aeabi_dsub>
 800cc62:	4632      	mov	r2, r6
 800cc64:	463b      	mov	r3, r7
 800cc66:	f7f3 fc6f 	bl	8000548 <__aeabi_dmul>
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	4b75      	ldr	r3, [pc, #468]	; (800ce44 <__ieee754_acos+0x2f4>)
 800cc6e:	f7f3 fab5 	bl	80001dc <__adddf3>
 800cc72:	4602      	mov	r2, r0
 800cc74:	460b      	mov	r3, r1
 800cc76:	4640      	mov	r0, r8
 800cc78:	4649      	mov	r1, r9
 800cc7a:	f7f3 fd8f 	bl	800079c <__aeabi_ddiv>
 800cc7e:	4622      	mov	r2, r4
 800cc80:	462b      	mov	r3, r5
 800cc82:	f7f3 fc61 	bl	8000548 <__aeabi_dmul>
 800cc86:	4602      	mov	r2, r0
 800cc88:	460b      	mov	r3, r1
 800cc8a:	a167      	add	r1, pc, #412	; (adr r1, 800ce28 <__ieee754_acos+0x2d8>)
 800cc8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc90:	f7f3 faa2 	bl	80001d8 <__aeabi_dsub>
 800cc94:	4602      	mov	r2, r0
 800cc96:	460b      	mov	r3, r1
 800cc98:	4620      	mov	r0, r4
 800cc9a:	4629      	mov	r1, r5
 800cc9c:	f7f3 fa9c 	bl	80001d8 <__aeabi_dsub>
 800cca0:	4602      	mov	r2, r0
 800cca2:	460b      	mov	r3, r1
 800cca4:	a162      	add	r1, pc, #392	; (adr r1, 800ce30 <__ieee754_acos+0x2e0>)
 800cca6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccaa:	f7f3 fa95 	bl	80001d8 <__aeabi_dsub>
 800ccae:	e764      	b.n	800cb7a <__ieee754_acos+0x2a>
 800ccb0:	2d00      	cmp	r5, #0
 800ccb2:	f280 80cb 	bge.w	800ce4c <__ieee754_acos+0x2fc>
 800ccb6:	ee10 0a10 	vmov	r0, s0
 800ccba:	2200      	movs	r2, #0
 800ccbc:	4b61      	ldr	r3, [pc, #388]	; (800ce44 <__ieee754_acos+0x2f4>)
 800ccbe:	4629      	mov	r1, r5
 800ccc0:	f7f3 fa8c 	bl	80001dc <__adddf3>
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	4b60      	ldr	r3, [pc, #384]	; (800ce48 <__ieee754_acos+0x2f8>)
 800ccc8:	f7f3 fc3e 	bl	8000548 <__aeabi_dmul>
 800cccc:	a342      	add	r3, pc, #264	; (adr r3, 800cdd8 <__ieee754_acos+0x288>)
 800ccce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd2:	4604      	mov	r4, r0
 800ccd4:	460d      	mov	r5, r1
 800ccd6:	f7f3 fc37 	bl	8000548 <__aeabi_dmul>
 800ccda:	a341      	add	r3, pc, #260	; (adr r3, 800cde0 <__ieee754_acos+0x290>)
 800ccdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce0:	f7f3 fa7c 	bl	80001dc <__adddf3>
 800cce4:	4622      	mov	r2, r4
 800cce6:	462b      	mov	r3, r5
 800cce8:	f7f3 fc2e 	bl	8000548 <__aeabi_dmul>
 800ccec:	a33e      	add	r3, pc, #248	; (adr r3, 800cde8 <__ieee754_acos+0x298>)
 800ccee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf2:	f7f3 fa71 	bl	80001d8 <__aeabi_dsub>
 800ccf6:	4622      	mov	r2, r4
 800ccf8:	462b      	mov	r3, r5
 800ccfa:	f7f3 fc25 	bl	8000548 <__aeabi_dmul>
 800ccfe:	a33c      	add	r3, pc, #240	; (adr r3, 800cdf0 <__ieee754_acos+0x2a0>)
 800cd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd04:	f7f3 fa6a 	bl	80001dc <__adddf3>
 800cd08:	4622      	mov	r2, r4
 800cd0a:	462b      	mov	r3, r5
 800cd0c:	f7f3 fc1c 	bl	8000548 <__aeabi_dmul>
 800cd10:	a339      	add	r3, pc, #228	; (adr r3, 800cdf8 <__ieee754_acos+0x2a8>)
 800cd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd16:	f7f3 fa5f 	bl	80001d8 <__aeabi_dsub>
 800cd1a:	4622      	mov	r2, r4
 800cd1c:	462b      	mov	r3, r5
 800cd1e:	f7f3 fc13 	bl	8000548 <__aeabi_dmul>
 800cd22:	a337      	add	r3, pc, #220	; (adr r3, 800ce00 <__ieee754_acos+0x2b0>)
 800cd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd28:	f7f3 fa58 	bl	80001dc <__adddf3>
 800cd2c:	4622      	mov	r2, r4
 800cd2e:	462b      	mov	r3, r5
 800cd30:	f7f3 fc0a 	bl	8000548 <__aeabi_dmul>
 800cd34:	ec45 4b10 	vmov	d0, r4, r5
 800cd38:	4680      	mov	r8, r0
 800cd3a:	4689      	mov	r9, r1
 800cd3c:	f000 fa76 	bl	800d22c <__ieee754_sqrt>
 800cd40:	a331      	add	r3, pc, #196	; (adr r3, 800ce08 <__ieee754_acos+0x2b8>)
 800cd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd46:	4620      	mov	r0, r4
 800cd48:	4629      	mov	r1, r5
 800cd4a:	ec57 6b10 	vmov	r6, r7, d0
 800cd4e:	f7f3 fbfb 	bl	8000548 <__aeabi_dmul>
 800cd52:	a32f      	add	r3, pc, #188	; (adr r3, 800ce10 <__ieee754_acos+0x2c0>)
 800cd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd58:	f7f3 fa3e 	bl	80001d8 <__aeabi_dsub>
 800cd5c:	4622      	mov	r2, r4
 800cd5e:	462b      	mov	r3, r5
 800cd60:	f7f3 fbf2 	bl	8000548 <__aeabi_dmul>
 800cd64:	a32c      	add	r3, pc, #176	; (adr r3, 800ce18 <__ieee754_acos+0x2c8>)
 800cd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd6a:	f7f3 fa37 	bl	80001dc <__adddf3>
 800cd6e:	4622      	mov	r2, r4
 800cd70:	462b      	mov	r3, r5
 800cd72:	f7f3 fbe9 	bl	8000548 <__aeabi_dmul>
 800cd76:	a32a      	add	r3, pc, #168	; (adr r3, 800ce20 <__ieee754_acos+0x2d0>)
 800cd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7c:	f7f3 fa2c 	bl	80001d8 <__aeabi_dsub>
 800cd80:	4622      	mov	r2, r4
 800cd82:	462b      	mov	r3, r5
 800cd84:	f7f3 fbe0 	bl	8000548 <__aeabi_dmul>
 800cd88:	2200      	movs	r2, #0
 800cd8a:	4b2e      	ldr	r3, [pc, #184]	; (800ce44 <__ieee754_acos+0x2f4>)
 800cd8c:	f7f3 fa26 	bl	80001dc <__adddf3>
 800cd90:	4602      	mov	r2, r0
 800cd92:	460b      	mov	r3, r1
 800cd94:	4640      	mov	r0, r8
 800cd96:	4649      	mov	r1, r9
 800cd98:	f7f3 fd00 	bl	800079c <__aeabi_ddiv>
 800cd9c:	4632      	mov	r2, r6
 800cd9e:	463b      	mov	r3, r7
 800cda0:	f7f3 fbd2 	bl	8000548 <__aeabi_dmul>
 800cda4:	a320      	add	r3, pc, #128	; (adr r3, 800ce28 <__ieee754_acos+0x2d8>)
 800cda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdaa:	f7f3 fa15 	bl	80001d8 <__aeabi_dsub>
 800cdae:	4632      	mov	r2, r6
 800cdb0:	463b      	mov	r3, r7
 800cdb2:	f7f3 fa13 	bl	80001dc <__adddf3>
 800cdb6:	4602      	mov	r2, r0
 800cdb8:	460b      	mov	r3, r1
 800cdba:	f7f3 fa0f 	bl	80001dc <__adddf3>
 800cdbe:	4602      	mov	r2, r0
 800cdc0:	460b      	mov	r3, r1
 800cdc2:	a103      	add	r1, pc, #12	; (adr r1, 800cdd0 <__ieee754_acos+0x280>)
 800cdc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdc8:	e76f      	b.n	800ccaa <__ieee754_acos+0x15a>
 800cdca:	bf00      	nop
 800cdcc:	f3af 8000 	nop.w
 800cdd0:	54442d18 	.word	0x54442d18
 800cdd4:	400921fb 	.word	0x400921fb
 800cdd8:	0dfdf709 	.word	0x0dfdf709
 800cddc:	3f023de1 	.word	0x3f023de1
 800cde0:	7501b288 	.word	0x7501b288
 800cde4:	3f49efe0 	.word	0x3f49efe0
 800cde8:	b5688f3b 	.word	0xb5688f3b
 800cdec:	3fa48228 	.word	0x3fa48228
 800cdf0:	0e884455 	.word	0x0e884455
 800cdf4:	3fc9c155 	.word	0x3fc9c155
 800cdf8:	03eb6f7d 	.word	0x03eb6f7d
 800cdfc:	3fd4d612 	.word	0x3fd4d612
 800ce00:	55555555 	.word	0x55555555
 800ce04:	3fc55555 	.word	0x3fc55555
 800ce08:	b12e9282 	.word	0xb12e9282
 800ce0c:	3fb3b8c5 	.word	0x3fb3b8c5
 800ce10:	1b8d0159 	.word	0x1b8d0159
 800ce14:	3fe6066c 	.word	0x3fe6066c
 800ce18:	9c598ac8 	.word	0x9c598ac8
 800ce1c:	40002ae5 	.word	0x40002ae5
 800ce20:	1c8a2d4b 	.word	0x1c8a2d4b
 800ce24:	40033a27 	.word	0x40033a27
 800ce28:	33145c07 	.word	0x33145c07
 800ce2c:	3c91a626 	.word	0x3c91a626
 800ce30:	54442d18 	.word	0x54442d18
 800ce34:	3ff921fb 	.word	0x3ff921fb
 800ce38:	3fefffff 	.word	0x3fefffff
 800ce3c:	3fdfffff 	.word	0x3fdfffff
 800ce40:	3c600000 	.word	0x3c600000
 800ce44:	3ff00000 	.word	0x3ff00000
 800ce48:	3fe00000 	.word	0x3fe00000
 800ce4c:	ee10 2a10 	vmov	r2, s0
 800ce50:	462b      	mov	r3, r5
 800ce52:	2000      	movs	r0, #0
 800ce54:	496a      	ldr	r1, [pc, #424]	; (800d000 <__ieee754_acos+0x4b0>)
 800ce56:	f7f3 f9bf 	bl	80001d8 <__aeabi_dsub>
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	4b69      	ldr	r3, [pc, #420]	; (800d004 <__ieee754_acos+0x4b4>)
 800ce5e:	f7f3 fb73 	bl	8000548 <__aeabi_dmul>
 800ce62:	4604      	mov	r4, r0
 800ce64:	460d      	mov	r5, r1
 800ce66:	ec45 4b10 	vmov	d0, r4, r5
 800ce6a:	f000 f9df 	bl	800d22c <__ieee754_sqrt>
 800ce6e:	a34e      	add	r3, pc, #312	; (adr r3, 800cfa8 <__ieee754_acos+0x458>)
 800ce70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce74:	4620      	mov	r0, r4
 800ce76:	4629      	mov	r1, r5
 800ce78:	ec59 8b10 	vmov	r8, r9, d0
 800ce7c:	f7f3 fb64 	bl	8000548 <__aeabi_dmul>
 800ce80:	a34b      	add	r3, pc, #300	; (adr r3, 800cfb0 <__ieee754_acos+0x460>)
 800ce82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce86:	f7f3 f9a9 	bl	80001dc <__adddf3>
 800ce8a:	4622      	mov	r2, r4
 800ce8c:	462b      	mov	r3, r5
 800ce8e:	f7f3 fb5b 	bl	8000548 <__aeabi_dmul>
 800ce92:	a349      	add	r3, pc, #292	; (adr r3, 800cfb8 <__ieee754_acos+0x468>)
 800ce94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce98:	f7f3 f99e 	bl	80001d8 <__aeabi_dsub>
 800ce9c:	4622      	mov	r2, r4
 800ce9e:	462b      	mov	r3, r5
 800cea0:	f7f3 fb52 	bl	8000548 <__aeabi_dmul>
 800cea4:	a346      	add	r3, pc, #280	; (adr r3, 800cfc0 <__ieee754_acos+0x470>)
 800cea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceaa:	f7f3 f997 	bl	80001dc <__adddf3>
 800ceae:	4622      	mov	r2, r4
 800ceb0:	462b      	mov	r3, r5
 800ceb2:	f7f3 fb49 	bl	8000548 <__aeabi_dmul>
 800ceb6:	a344      	add	r3, pc, #272	; (adr r3, 800cfc8 <__ieee754_acos+0x478>)
 800ceb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cebc:	f7f3 f98c 	bl	80001d8 <__aeabi_dsub>
 800cec0:	4622      	mov	r2, r4
 800cec2:	462b      	mov	r3, r5
 800cec4:	f7f3 fb40 	bl	8000548 <__aeabi_dmul>
 800cec8:	a341      	add	r3, pc, #260	; (adr r3, 800cfd0 <__ieee754_acos+0x480>)
 800ceca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cece:	f7f3 f985 	bl	80001dc <__adddf3>
 800ced2:	4622      	mov	r2, r4
 800ced4:	462b      	mov	r3, r5
 800ced6:	f7f3 fb37 	bl	8000548 <__aeabi_dmul>
 800ceda:	a33f      	add	r3, pc, #252	; (adr r3, 800cfd8 <__ieee754_acos+0x488>)
 800cedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee0:	4682      	mov	sl, r0
 800cee2:	468b      	mov	fp, r1
 800cee4:	4620      	mov	r0, r4
 800cee6:	4629      	mov	r1, r5
 800cee8:	f7f3 fb2e 	bl	8000548 <__aeabi_dmul>
 800ceec:	a33c      	add	r3, pc, #240	; (adr r3, 800cfe0 <__ieee754_acos+0x490>)
 800ceee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef2:	f7f3 f971 	bl	80001d8 <__aeabi_dsub>
 800cef6:	4622      	mov	r2, r4
 800cef8:	462b      	mov	r3, r5
 800cefa:	f7f3 fb25 	bl	8000548 <__aeabi_dmul>
 800cefe:	a33a      	add	r3, pc, #232	; (adr r3, 800cfe8 <__ieee754_acos+0x498>)
 800cf00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf04:	f7f3 f96a 	bl	80001dc <__adddf3>
 800cf08:	4622      	mov	r2, r4
 800cf0a:	462b      	mov	r3, r5
 800cf0c:	f7f3 fb1c 	bl	8000548 <__aeabi_dmul>
 800cf10:	a337      	add	r3, pc, #220	; (adr r3, 800cff0 <__ieee754_acos+0x4a0>)
 800cf12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf16:	f7f3 f95f 	bl	80001d8 <__aeabi_dsub>
 800cf1a:	4622      	mov	r2, r4
 800cf1c:	462b      	mov	r3, r5
 800cf1e:	f7f3 fb13 	bl	8000548 <__aeabi_dmul>
 800cf22:	2200      	movs	r2, #0
 800cf24:	4b36      	ldr	r3, [pc, #216]	; (800d000 <__ieee754_acos+0x4b0>)
 800cf26:	f7f3 f959 	bl	80001dc <__adddf3>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	4650      	mov	r0, sl
 800cf30:	4659      	mov	r1, fp
 800cf32:	f7f3 fc33 	bl	800079c <__aeabi_ddiv>
 800cf36:	4642      	mov	r2, r8
 800cf38:	464b      	mov	r3, r9
 800cf3a:	f7f3 fb05 	bl	8000548 <__aeabi_dmul>
 800cf3e:	2600      	movs	r6, #0
 800cf40:	4682      	mov	sl, r0
 800cf42:	468b      	mov	fp, r1
 800cf44:	4632      	mov	r2, r6
 800cf46:	464b      	mov	r3, r9
 800cf48:	4630      	mov	r0, r6
 800cf4a:	4649      	mov	r1, r9
 800cf4c:	f7f3 fafc 	bl	8000548 <__aeabi_dmul>
 800cf50:	4602      	mov	r2, r0
 800cf52:	460b      	mov	r3, r1
 800cf54:	4620      	mov	r0, r4
 800cf56:	4629      	mov	r1, r5
 800cf58:	f7f3 f93e 	bl	80001d8 <__aeabi_dsub>
 800cf5c:	4632      	mov	r2, r6
 800cf5e:	4604      	mov	r4, r0
 800cf60:	460d      	mov	r5, r1
 800cf62:	464b      	mov	r3, r9
 800cf64:	4640      	mov	r0, r8
 800cf66:	4649      	mov	r1, r9
 800cf68:	f7f3 f938 	bl	80001dc <__adddf3>
 800cf6c:	4602      	mov	r2, r0
 800cf6e:	460b      	mov	r3, r1
 800cf70:	4620      	mov	r0, r4
 800cf72:	4629      	mov	r1, r5
 800cf74:	f7f3 fc12 	bl	800079c <__aeabi_ddiv>
 800cf78:	4602      	mov	r2, r0
 800cf7a:	460b      	mov	r3, r1
 800cf7c:	4650      	mov	r0, sl
 800cf7e:	4659      	mov	r1, fp
 800cf80:	f7f3 f92c 	bl	80001dc <__adddf3>
 800cf84:	4632      	mov	r2, r6
 800cf86:	464b      	mov	r3, r9
 800cf88:	f7f3 f928 	bl	80001dc <__adddf3>
 800cf8c:	4602      	mov	r2, r0
 800cf8e:	460b      	mov	r3, r1
 800cf90:	f7f3 f924 	bl	80001dc <__adddf3>
 800cf94:	e5f1      	b.n	800cb7a <__ieee754_acos+0x2a>
 800cf96:	2000      	movs	r0, #0
 800cf98:	2100      	movs	r1, #0
 800cf9a:	e5ee      	b.n	800cb7a <__ieee754_acos+0x2a>
 800cf9c:	a116      	add	r1, pc, #88	; (adr r1, 800cff8 <__ieee754_acos+0x4a8>)
 800cf9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfa2:	e5ea      	b.n	800cb7a <__ieee754_acos+0x2a>
 800cfa4:	f3af 8000 	nop.w
 800cfa8:	0dfdf709 	.word	0x0dfdf709
 800cfac:	3f023de1 	.word	0x3f023de1
 800cfb0:	7501b288 	.word	0x7501b288
 800cfb4:	3f49efe0 	.word	0x3f49efe0
 800cfb8:	b5688f3b 	.word	0xb5688f3b
 800cfbc:	3fa48228 	.word	0x3fa48228
 800cfc0:	0e884455 	.word	0x0e884455
 800cfc4:	3fc9c155 	.word	0x3fc9c155
 800cfc8:	03eb6f7d 	.word	0x03eb6f7d
 800cfcc:	3fd4d612 	.word	0x3fd4d612
 800cfd0:	55555555 	.word	0x55555555
 800cfd4:	3fc55555 	.word	0x3fc55555
 800cfd8:	b12e9282 	.word	0xb12e9282
 800cfdc:	3fb3b8c5 	.word	0x3fb3b8c5
 800cfe0:	1b8d0159 	.word	0x1b8d0159
 800cfe4:	3fe6066c 	.word	0x3fe6066c
 800cfe8:	9c598ac8 	.word	0x9c598ac8
 800cfec:	40002ae5 	.word	0x40002ae5
 800cff0:	1c8a2d4b 	.word	0x1c8a2d4b
 800cff4:	40033a27 	.word	0x40033a27
 800cff8:	54442d18 	.word	0x54442d18
 800cffc:	3ff921fb 	.word	0x3ff921fb
 800d000:	3ff00000 	.word	0x3ff00000
 800d004:	3fe00000 	.word	0x3fe00000

0800d008 <__ieee754_fmod>:
 800d008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d00c:	ec53 2b11 	vmov	r2, r3, d1
 800d010:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800d014:	ea5e 0402 	orrs.w	r4, lr, r2
 800d018:	ec51 0b10 	vmov	r0, r1, d0
 800d01c:	461e      	mov	r6, r3
 800d01e:	ee11 5a10 	vmov	r5, s2
 800d022:	4694      	mov	ip, r2
 800d024:	d00c      	beq.n	800d040 <__ieee754_fmod+0x38>
 800d026:	4c7a      	ldr	r4, [pc, #488]	; (800d210 <__ieee754_fmod+0x208>)
 800d028:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800d02c:	45a0      	cmp	r8, r4
 800d02e:	4689      	mov	r9, r1
 800d030:	dc06      	bgt.n	800d040 <__ieee754_fmod+0x38>
 800d032:	4254      	negs	r4, r2
 800d034:	4314      	orrs	r4, r2
 800d036:	4f77      	ldr	r7, [pc, #476]	; (800d214 <__ieee754_fmod+0x20c>)
 800d038:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800d03c:	42bc      	cmp	r4, r7
 800d03e:	d909      	bls.n	800d054 <__ieee754_fmod+0x4c>
 800d040:	f7f3 fa82 	bl	8000548 <__aeabi_dmul>
 800d044:	4602      	mov	r2, r0
 800d046:	460b      	mov	r3, r1
 800d048:	f7f3 fba8 	bl	800079c <__aeabi_ddiv>
 800d04c:	ec41 0b10 	vmov	d0, r0, r1
 800d050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d054:	45f0      	cmp	r8, lr
 800d056:	ee10 2a10 	vmov	r2, s0
 800d05a:	4607      	mov	r7, r0
 800d05c:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 800d060:	dc0a      	bgt.n	800d078 <__ieee754_fmod+0x70>
 800d062:	dbf3      	blt.n	800d04c <__ieee754_fmod+0x44>
 800d064:	42a8      	cmp	r0, r5
 800d066:	d3f1      	bcc.n	800d04c <__ieee754_fmod+0x44>
 800d068:	d106      	bne.n	800d078 <__ieee754_fmod+0x70>
 800d06a:	496b      	ldr	r1, [pc, #428]	; (800d218 <__ieee754_fmod+0x210>)
 800d06c:	0fe4      	lsrs	r4, r4, #31
 800d06e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800d072:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d076:	e7e9      	b.n	800d04c <__ieee754_fmod+0x44>
 800d078:	4b68      	ldr	r3, [pc, #416]	; (800d21c <__ieee754_fmod+0x214>)
 800d07a:	4598      	cmp	r8, r3
 800d07c:	dc49      	bgt.n	800d112 <__ieee754_fmod+0x10a>
 800d07e:	f1b8 0f00 	cmp.w	r8, #0
 800d082:	d13d      	bne.n	800d100 <__ieee754_fmod+0xf8>
 800d084:	4866      	ldr	r0, [pc, #408]	; (800d220 <__ieee754_fmod+0x218>)
 800d086:	4611      	mov	r1, r2
 800d088:	2900      	cmp	r1, #0
 800d08a:	dc36      	bgt.n	800d0fa <__ieee754_fmod+0xf2>
 800d08c:	459e      	cmp	lr, r3
 800d08e:	dc51      	bgt.n	800d134 <__ieee754_fmod+0x12c>
 800d090:	f1be 0f00 	cmp.w	lr, #0
 800d094:	d145      	bne.n	800d122 <__ieee754_fmod+0x11a>
 800d096:	4b62      	ldr	r3, [pc, #392]	; (800d220 <__ieee754_fmod+0x218>)
 800d098:	4629      	mov	r1, r5
 800d09a:	2900      	cmp	r1, #0
 800d09c:	dc3e      	bgt.n	800d11c <__ieee754_fmod+0x114>
 800d09e:	4961      	ldr	r1, [pc, #388]	; (800d224 <__ieee754_fmod+0x21c>)
 800d0a0:	4288      	cmp	r0, r1
 800d0a2:	db4c      	blt.n	800d13e <__ieee754_fmod+0x136>
 800d0a4:	f3c9 0113 	ubfx	r1, r9, #0, #20
 800d0a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d0ac:	4a5d      	ldr	r2, [pc, #372]	; (800d224 <__ieee754_fmod+0x21c>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	db59      	blt.n	800d166 <__ieee754_fmod+0x15e>
 800d0b2:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800d0b6:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800d0ba:	1ac0      	subs	r0, r0, r3
 800d0bc:	1b8a      	subs	r2, r1, r6
 800d0be:	eba7 050c 	sub.w	r5, r7, ip
 800d0c2:	2800      	cmp	r0, #0
 800d0c4:	d166      	bne.n	800d194 <__ieee754_fmod+0x18c>
 800d0c6:	4567      	cmp	r7, ip
 800d0c8:	bf38      	it	cc
 800d0ca:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 800d0ce:	2a00      	cmp	r2, #0
 800d0d0:	bfbc      	itt	lt
 800d0d2:	463d      	movlt	r5, r7
 800d0d4:	460a      	movlt	r2, r1
 800d0d6:	ea52 0105 	orrs.w	r1, r2, r5
 800d0da:	d0c6      	beq.n	800d06a <__ieee754_fmod+0x62>
 800d0dc:	494f      	ldr	r1, [pc, #316]	; (800d21c <__ieee754_fmod+0x214>)
 800d0de:	428a      	cmp	r2, r1
 800d0e0:	dd6d      	ble.n	800d1be <__ieee754_fmod+0x1b6>
 800d0e2:	4950      	ldr	r1, [pc, #320]	; (800d224 <__ieee754_fmod+0x21c>)
 800d0e4:	428b      	cmp	r3, r1
 800d0e6:	db70      	blt.n	800d1ca <__ieee754_fmod+0x1c2>
 800d0e8:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 800d0ec:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800d0f0:	4314      	orrs	r4, r2
 800d0f2:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 800d0f6:	4628      	mov	r0, r5
 800d0f8:	e7a8      	b.n	800d04c <__ieee754_fmod+0x44>
 800d0fa:	3801      	subs	r0, #1
 800d0fc:	0049      	lsls	r1, r1, #1
 800d0fe:	e7c3      	b.n	800d088 <__ieee754_fmod+0x80>
 800d100:	4848      	ldr	r0, [pc, #288]	; (800d224 <__ieee754_fmod+0x21c>)
 800d102:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 800d106:	0049      	lsls	r1, r1, #1
 800d108:	2900      	cmp	r1, #0
 800d10a:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800d10e:	dcfa      	bgt.n	800d106 <__ieee754_fmod+0xfe>
 800d110:	e7bc      	b.n	800d08c <__ieee754_fmod+0x84>
 800d112:	ea4f 5028 	mov.w	r0, r8, asr #20
 800d116:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800d11a:	e7b7      	b.n	800d08c <__ieee754_fmod+0x84>
 800d11c:	3b01      	subs	r3, #1
 800d11e:	0049      	lsls	r1, r1, #1
 800d120:	e7bb      	b.n	800d09a <__ieee754_fmod+0x92>
 800d122:	4b40      	ldr	r3, [pc, #256]	; (800d224 <__ieee754_fmod+0x21c>)
 800d124:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 800d128:	0049      	lsls	r1, r1, #1
 800d12a:	2900      	cmp	r1, #0
 800d12c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800d130:	dcfa      	bgt.n	800d128 <__ieee754_fmod+0x120>
 800d132:	e7b4      	b.n	800d09e <__ieee754_fmod+0x96>
 800d134:	ea4f 532e 	mov.w	r3, lr, asr #20
 800d138:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d13c:	e7af      	b.n	800d09e <__ieee754_fmod+0x96>
 800d13e:	1a0f      	subs	r7, r1, r0
 800d140:	2f1f      	cmp	r7, #31
 800d142:	dc0a      	bgt.n	800d15a <__ieee754_fmod+0x152>
 800d144:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 800d148:	fa08 f807 	lsl.w	r8, r8, r7
 800d14c:	fa22 f101 	lsr.w	r1, r2, r1
 800d150:	ea41 0108 	orr.w	r1, r1, r8
 800d154:	fa02 f707 	lsl.w	r7, r2, r7
 800d158:	e7a8      	b.n	800d0ac <__ieee754_fmod+0xa4>
 800d15a:	4933      	ldr	r1, [pc, #204]	; (800d228 <__ieee754_fmod+0x220>)
 800d15c:	1a09      	subs	r1, r1, r0
 800d15e:	fa02 f101 	lsl.w	r1, r2, r1
 800d162:	2700      	movs	r7, #0
 800d164:	e7a2      	b.n	800d0ac <__ieee754_fmod+0xa4>
 800d166:	eba2 0c03 	sub.w	ip, r2, r3
 800d16a:	f1bc 0f1f 	cmp.w	ip, #31
 800d16e:	dc0a      	bgt.n	800d186 <__ieee754_fmod+0x17e>
 800d170:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 800d174:	fa0e fe0c 	lsl.w	lr, lr, ip
 800d178:	fa25 f606 	lsr.w	r6, r5, r6
 800d17c:	ea46 060e 	orr.w	r6, r6, lr
 800d180:	fa05 fc0c 	lsl.w	ip, r5, ip
 800d184:	e799      	b.n	800d0ba <__ieee754_fmod+0xb2>
 800d186:	4e28      	ldr	r6, [pc, #160]	; (800d228 <__ieee754_fmod+0x220>)
 800d188:	1af6      	subs	r6, r6, r3
 800d18a:	fa05 f606 	lsl.w	r6, r5, r6
 800d18e:	f04f 0c00 	mov.w	ip, #0
 800d192:	e792      	b.n	800d0ba <__ieee754_fmod+0xb2>
 800d194:	4567      	cmp	r7, ip
 800d196:	bf38      	it	cc
 800d198:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 800d19c:	2a00      	cmp	r2, #0
 800d19e:	da05      	bge.n	800d1ac <__ieee754_fmod+0x1a4>
 800d1a0:	0ffa      	lsrs	r2, r7, #31
 800d1a2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d1a6:	007f      	lsls	r7, r7, #1
 800d1a8:	3801      	subs	r0, #1
 800d1aa:	e787      	b.n	800d0bc <__ieee754_fmod+0xb4>
 800d1ac:	ea52 0105 	orrs.w	r1, r2, r5
 800d1b0:	f43f af5b 	beq.w	800d06a <__ieee754_fmod+0x62>
 800d1b4:	0fe9      	lsrs	r1, r5, #31
 800d1b6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800d1ba:	006f      	lsls	r7, r5, #1
 800d1bc:	e7f4      	b.n	800d1a8 <__ieee754_fmod+0x1a0>
 800d1be:	0fe8      	lsrs	r0, r5, #31
 800d1c0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800d1c4:	006d      	lsls	r5, r5, #1
 800d1c6:	3b01      	subs	r3, #1
 800d1c8:	e789      	b.n	800d0de <__ieee754_fmod+0xd6>
 800d1ca:	1ac9      	subs	r1, r1, r3
 800d1cc:	2914      	cmp	r1, #20
 800d1ce:	dc0a      	bgt.n	800d1e6 <__ieee754_fmod+0x1de>
 800d1d0:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800d1d4:	fa02 f303 	lsl.w	r3, r2, r3
 800d1d8:	40cd      	lsrs	r5, r1
 800d1da:	432b      	orrs	r3, r5
 800d1dc:	410a      	asrs	r2, r1
 800d1de:	ea42 0104 	orr.w	r1, r2, r4
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	e732      	b.n	800d04c <__ieee754_fmod+0x44>
 800d1e6:	291f      	cmp	r1, #31
 800d1e8:	dc07      	bgt.n	800d1fa <__ieee754_fmod+0x1f2>
 800d1ea:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800d1ee:	40cd      	lsrs	r5, r1
 800d1f0:	fa02 f303 	lsl.w	r3, r2, r3
 800d1f4:	432b      	orrs	r3, r5
 800d1f6:	4622      	mov	r2, r4
 800d1f8:	e7f1      	b.n	800d1de <__ieee754_fmod+0x1d6>
 800d1fa:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800d1fe:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800d202:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800d206:	33e2      	adds	r3, #226	; 0xe2
 800d208:	fa42 f303 	asr.w	r3, r2, r3
 800d20c:	e7f3      	b.n	800d1f6 <__ieee754_fmod+0x1ee>
 800d20e:	bf00      	nop
 800d210:	7fefffff 	.word	0x7fefffff
 800d214:	7ff00000 	.word	0x7ff00000
 800d218:	0800dc98 	.word	0x0800dc98
 800d21c:	000fffff 	.word	0x000fffff
 800d220:	fffffbed 	.word	0xfffffbed
 800d224:	fffffc02 	.word	0xfffffc02
 800d228:	fffffbe2 	.word	0xfffffbe2

0800d22c <__ieee754_sqrt>:
 800d22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d230:	4955      	ldr	r1, [pc, #340]	; (800d388 <__ieee754_sqrt+0x15c>)
 800d232:	ec55 4b10 	vmov	r4, r5, d0
 800d236:	43a9      	bics	r1, r5
 800d238:	462b      	mov	r3, r5
 800d23a:	462a      	mov	r2, r5
 800d23c:	d112      	bne.n	800d264 <__ieee754_sqrt+0x38>
 800d23e:	ee10 2a10 	vmov	r2, s0
 800d242:	ee10 0a10 	vmov	r0, s0
 800d246:	4629      	mov	r1, r5
 800d248:	f7f3 f97e 	bl	8000548 <__aeabi_dmul>
 800d24c:	4602      	mov	r2, r0
 800d24e:	460b      	mov	r3, r1
 800d250:	4620      	mov	r0, r4
 800d252:	4629      	mov	r1, r5
 800d254:	f7f2 ffc2 	bl	80001dc <__adddf3>
 800d258:	4604      	mov	r4, r0
 800d25a:	460d      	mov	r5, r1
 800d25c:	ec45 4b10 	vmov	d0, r4, r5
 800d260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d264:	2d00      	cmp	r5, #0
 800d266:	ee10 0a10 	vmov	r0, s0
 800d26a:	4621      	mov	r1, r4
 800d26c:	dc0f      	bgt.n	800d28e <__ieee754_sqrt+0x62>
 800d26e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d272:	4330      	orrs	r0, r6
 800d274:	d0f2      	beq.n	800d25c <__ieee754_sqrt+0x30>
 800d276:	b155      	cbz	r5, 800d28e <__ieee754_sqrt+0x62>
 800d278:	ee10 2a10 	vmov	r2, s0
 800d27c:	4620      	mov	r0, r4
 800d27e:	4629      	mov	r1, r5
 800d280:	f7f2 ffaa 	bl	80001d8 <__aeabi_dsub>
 800d284:	4602      	mov	r2, r0
 800d286:	460b      	mov	r3, r1
 800d288:	f7f3 fa88 	bl	800079c <__aeabi_ddiv>
 800d28c:	e7e4      	b.n	800d258 <__ieee754_sqrt+0x2c>
 800d28e:	151b      	asrs	r3, r3, #20
 800d290:	d073      	beq.n	800d37a <__ieee754_sqrt+0x14e>
 800d292:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d296:	07dd      	lsls	r5, r3, #31
 800d298:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d29c:	bf48      	it	mi
 800d29e:	0fc8      	lsrmi	r0, r1, #31
 800d2a0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d2a4:	bf44      	itt	mi
 800d2a6:	0049      	lslmi	r1, r1, #1
 800d2a8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800d2ac:	2500      	movs	r5, #0
 800d2ae:	1058      	asrs	r0, r3, #1
 800d2b0:	0fcb      	lsrs	r3, r1, #31
 800d2b2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800d2b6:	0049      	lsls	r1, r1, #1
 800d2b8:	2316      	movs	r3, #22
 800d2ba:	462c      	mov	r4, r5
 800d2bc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800d2c0:	19a7      	adds	r7, r4, r6
 800d2c2:	4297      	cmp	r7, r2
 800d2c4:	bfde      	ittt	le
 800d2c6:	19bc      	addle	r4, r7, r6
 800d2c8:	1bd2      	suble	r2, r2, r7
 800d2ca:	19ad      	addle	r5, r5, r6
 800d2cc:	0fcf      	lsrs	r7, r1, #31
 800d2ce:	3b01      	subs	r3, #1
 800d2d0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800d2d4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d2d8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d2dc:	d1f0      	bne.n	800d2c0 <__ieee754_sqrt+0x94>
 800d2de:	f04f 0c20 	mov.w	ip, #32
 800d2e2:	469e      	mov	lr, r3
 800d2e4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d2e8:	42a2      	cmp	r2, r4
 800d2ea:	eb06 070e 	add.w	r7, r6, lr
 800d2ee:	dc02      	bgt.n	800d2f6 <__ieee754_sqrt+0xca>
 800d2f0:	d112      	bne.n	800d318 <__ieee754_sqrt+0xec>
 800d2f2:	428f      	cmp	r7, r1
 800d2f4:	d810      	bhi.n	800d318 <__ieee754_sqrt+0xec>
 800d2f6:	2f00      	cmp	r7, #0
 800d2f8:	eb07 0e06 	add.w	lr, r7, r6
 800d2fc:	da42      	bge.n	800d384 <__ieee754_sqrt+0x158>
 800d2fe:	f1be 0f00 	cmp.w	lr, #0
 800d302:	db3f      	blt.n	800d384 <__ieee754_sqrt+0x158>
 800d304:	f104 0801 	add.w	r8, r4, #1
 800d308:	1b12      	subs	r2, r2, r4
 800d30a:	428f      	cmp	r7, r1
 800d30c:	bf88      	it	hi
 800d30e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800d312:	1bc9      	subs	r1, r1, r7
 800d314:	4433      	add	r3, r6
 800d316:	4644      	mov	r4, r8
 800d318:	0052      	lsls	r2, r2, #1
 800d31a:	f1bc 0c01 	subs.w	ip, ip, #1
 800d31e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800d322:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d326:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d32a:	d1dd      	bne.n	800d2e8 <__ieee754_sqrt+0xbc>
 800d32c:	430a      	orrs	r2, r1
 800d32e:	d006      	beq.n	800d33e <__ieee754_sqrt+0x112>
 800d330:	1c5c      	adds	r4, r3, #1
 800d332:	bf13      	iteet	ne
 800d334:	3301      	addne	r3, #1
 800d336:	3501      	addeq	r5, #1
 800d338:	4663      	moveq	r3, ip
 800d33a:	f023 0301 	bicne.w	r3, r3, #1
 800d33e:	106a      	asrs	r2, r5, #1
 800d340:	085b      	lsrs	r3, r3, #1
 800d342:	07e9      	lsls	r1, r5, #31
 800d344:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d348:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d34c:	bf48      	it	mi
 800d34e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d352:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800d356:	461c      	mov	r4, r3
 800d358:	e780      	b.n	800d25c <__ieee754_sqrt+0x30>
 800d35a:	0aca      	lsrs	r2, r1, #11
 800d35c:	3815      	subs	r0, #21
 800d35e:	0549      	lsls	r1, r1, #21
 800d360:	2a00      	cmp	r2, #0
 800d362:	d0fa      	beq.n	800d35a <__ieee754_sqrt+0x12e>
 800d364:	02d6      	lsls	r6, r2, #11
 800d366:	d50a      	bpl.n	800d37e <__ieee754_sqrt+0x152>
 800d368:	f1c3 0420 	rsb	r4, r3, #32
 800d36c:	fa21 f404 	lsr.w	r4, r1, r4
 800d370:	1e5d      	subs	r5, r3, #1
 800d372:	4099      	lsls	r1, r3
 800d374:	4322      	orrs	r2, r4
 800d376:	1b43      	subs	r3, r0, r5
 800d378:	e78b      	b.n	800d292 <__ieee754_sqrt+0x66>
 800d37a:	4618      	mov	r0, r3
 800d37c:	e7f0      	b.n	800d360 <__ieee754_sqrt+0x134>
 800d37e:	0052      	lsls	r2, r2, #1
 800d380:	3301      	adds	r3, #1
 800d382:	e7ef      	b.n	800d364 <__ieee754_sqrt+0x138>
 800d384:	46a0      	mov	r8, r4
 800d386:	e7bf      	b.n	800d308 <__ieee754_sqrt+0xdc>
 800d388:	7ff00000 	.word	0x7ff00000

0800d38c <matherr>:
 800d38c:	2000      	movs	r0, #0
 800d38e:	4770      	bx	lr

0800d390 <nan>:
 800d390:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d398 <nan+0x8>
 800d394:	4770      	bx	lr
 800d396:	bf00      	nop
 800d398:	00000000 	.word	0x00000000
 800d39c:	7ff80000 	.word	0x7ff80000

0800d3a0 <_init>:
 800d3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3a2:	bf00      	nop
 800d3a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3a6:	bc08      	pop	{r3}
 800d3a8:	469e      	mov	lr, r3
 800d3aa:	4770      	bx	lr

0800d3ac <_fini>:
 800d3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ae:	bf00      	nop
 800d3b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3b2:	bc08      	pop	{r3}
 800d3b4:	469e      	mov	lr, r3
 800d3b6:	4770      	bx	lr
