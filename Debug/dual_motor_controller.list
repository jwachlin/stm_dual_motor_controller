
dual_motor_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f0  0800dc90  0800dc90  0001dc90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e580  0800e580  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e580  0800e580  0001e580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e588  0800e588  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e588  0800e588  0001e588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e58c  0800e58c  0001e58c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800e590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001596c  2000008c  0800e61c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200159f8  0800e61c  000259f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021eb4  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004a94  00000000  00000000  00041f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018d0  00000000  00000000  00046a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001718  00000000  00000000  000482d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002597a  00000000  00000000  000499f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015a0a  00000000  00000000  0006f36a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000db534  00000000  00000000  00084d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000eb  00000000  00000000  001602a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006904  00000000  00000000  00160394  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000016e  00000000  00000000  00166c98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dc78 	.word	0x0800dc78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	0800dc78 	.word	0x0800dc78

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bac:	f000 b972 	b.w	8000e94 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9e08      	ldr	r6, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	4688      	mov	r8, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d14b      	bne.n	8000c6e <__udivmoddi4+0xa6>
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	4615      	mov	r5, r2
 8000bda:	d967      	bls.n	8000cac <__udivmoddi4+0xe4>
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b14a      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be2:	f1c2 0720 	rsb	r7, r2, #32
 8000be6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bea:	fa20 f707 	lsr.w	r7, r0, r7
 8000bee:	4095      	lsls	r5, r2
 8000bf0:	ea47 0803 	orr.w	r8, r7, r3
 8000bf4:	4094      	lsls	r4, r2
 8000bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bfa:	0c23      	lsrs	r3, r4, #16
 8000bfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c00:	fa1f fc85 	uxth.w	ip, r5
 8000c04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c10:	4299      	cmp	r1, r3
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x60>
 8000c14:	18eb      	adds	r3, r5, r3
 8000c16:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c1a:	f080 811b 	bcs.w	8000e54 <__udivmoddi4+0x28c>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 8118 	bls.w	8000e54 <__udivmoddi4+0x28c>
 8000c24:	3f02      	subs	r7, #2
 8000c26:	442b      	add	r3, r5
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c3c:	45a4      	cmp	ip, r4
 8000c3e:	d909      	bls.n	8000c54 <__udivmoddi4+0x8c>
 8000c40:	192c      	adds	r4, r5, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c46:	f080 8107 	bcs.w	8000e58 <__udivmoddi4+0x290>
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	f240 8104 	bls.w	8000e58 <__udivmoddi4+0x290>
 8000c50:	3802      	subs	r0, #2
 8000c52:	442c      	add	r4, r5
 8000c54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c58:	eba4 040c 	sub.w	r4, r4, ip
 8000c5c:	2700      	movs	r7, #0
 8000c5e:	b11e      	cbz	r6, 8000c68 <__udivmoddi4+0xa0>
 8000c60:	40d4      	lsrs	r4, r2
 8000c62:	2300      	movs	r3, #0
 8000c64:	e9c6 4300 	strd	r4, r3, [r6]
 8000c68:	4639      	mov	r1, r7
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0xbe>
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	f000 80eb 	beq.w	8000e4e <__udivmoddi4+0x286>
 8000c78:	2700      	movs	r7, #0
 8000c7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c7e:	4638      	mov	r0, r7
 8000c80:	4639      	mov	r1, r7
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	fab3 f783 	clz	r7, r3
 8000c8a:	2f00      	cmp	r7, #0
 8000c8c:	d147      	bne.n	8000d1e <__udivmoddi4+0x156>
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d302      	bcc.n	8000c98 <__udivmoddi4+0xd0>
 8000c92:	4282      	cmp	r2, r0
 8000c94:	f200 80fa 	bhi.w	8000e8c <__udivmoddi4+0x2c4>
 8000c98:	1a84      	subs	r4, r0, r2
 8000c9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	4698      	mov	r8, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d0e0      	beq.n	8000c68 <__udivmoddi4+0xa0>
 8000ca6:	e9c6 4800 	strd	r4, r8, [r6]
 8000caa:	e7dd      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000cac:	b902      	cbnz	r2, 8000cb0 <__udivmoddi4+0xe8>
 8000cae:	deff      	udf	#255	; 0xff
 8000cb0:	fab2 f282 	clz	r2, r2
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f040 808f 	bne.w	8000dd8 <__udivmoddi4+0x210>
 8000cba:	1b49      	subs	r1, r1, r5
 8000cbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc0:	fa1f f885 	uxth.w	r8, r5
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cd8:	4299      	cmp	r1, r3
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0x124>
 8000cdc:	18eb      	adds	r3, r5, r3
 8000cde:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x122>
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	f200 80cd 	bhi.w	8000e84 <__udivmoddi4+0x2bc>
 8000cea:	4684      	mov	ip, r0
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	b2a3      	uxth	r3, r4
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cf8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cfc:	fb08 f800 	mul.w	r8, r8, r0
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x14c>
 8000d04:	192c      	adds	r4, r5, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x14a>
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	f200 80b6 	bhi.w	8000e7e <__udivmoddi4+0x2b6>
 8000d12:	4618      	mov	r0, r3
 8000d14:	eba4 0408 	sub.w	r4, r4, r8
 8000d18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1c:	e79f      	b.n	8000c5e <__udivmoddi4+0x96>
 8000d1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d22:	40bb      	lsls	r3, r7
 8000d24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d3c:	4325      	orrs	r5, r4
 8000d3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d42:	0c2c      	lsrs	r4, r5, #16
 8000d44:	fb08 3319 	mls	r3, r8, r9, r3
 8000d48:	fa1f fa8e 	uxth.w	sl, lr
 8000d4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d50:	fb09 f40a 	mul.w	r4, r9, sl
 8000d54:	429c      	cmp	r4, r3
 8000d56:	fa02 f207 	lsl.w	r2, r2, r7
 8000d5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b0>
 8000d60:	eb1e 0303 	adds.w	r3, lr, r3
 8000d64:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d68:	f080 8087 	bcs.w	8000e7a <__udivmoddi4+0x2b2>
 8000d6c:	429c      	cmp	r4, r3
 8000d6e:	f240 8084 	bls.w	8000e7a <__udivmoddi4+0x2b2>
 8000d72:	f1a9 0902 	sub.w	r9, r9, #2
 8000d76:	4473      	add	r3, lr
 8000d78:	1b1b      	subs	r3, r3, r4
 8000d7a:	b2ad      	uxth	r5, r5
 8000d7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d80:	fb08 3310 	mls	r3, r8, r0, r3
 8000d84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d8c:	45a2      	cmp	sl, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1da>
 8000d90:	eb1e 0404 	adds.w	r4, lr, r4
 8000d94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d98:	d26b      	bcs.n	8000e72 <__udivmoddi4+0x2aa>
 8000d9a:	45a2      	cmp	sl, r4
 8000d9c:	d969      	bls.n	8000e72 <__udivmoddi4+0x2aa>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4474      	add	r4, lr
 8000da2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000da6:	fba0 8902 	umull	r8, r9, r0, r2
 8000daa:	eba4 040a 	sub.w	r4, r4, sl
 8000dae:	454c      	cmp	r4, r9
 8000db0:	46c2      	mov	sl, r8
 8000db2:	464b      	mov	r3, r9
 8000db4:	d354      	bcc.n	8000e60 <__udivmoddi4+0x298>
 8000db6:	d051      	beq.n	8000e5c <__udivmoddi4+0x294>
 8000db8:	2e00      	cmp	r6, #0
 8000dba:	d069      	beq.n	8000e90 <__udivmoddi4+0x2c8>
 8000dbc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dc0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dc4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dc8:	40fd      	lsrs	r5, r7
 8000dca:	40fc      	lsrs	r4, r7
 8000dcc:	ea4c 0505 	orr.w	r5, ip, r5
 8000dd0:	e9c6 5400 	strd	r5, r4, [r6]
 8000dd4:	2700      	movs	r7, #0
 8000dd6:	e747      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f703 	lsr.w	r7, r0, r3
 8000de0:	4095      	lsls	r5, r2
 8000de2:	fa01 f002 	lsl.w	r0, r1, r2
 8000de6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dee:	4338      	orrs	r0, r7
 8000df0:	0c01      	lsrs	r1, r0, #16
 8000df2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000df6:	fa1f f885 	uxth.w	r8, r5
 8000dfa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e02:	fb07 f308 	mul.w	r3, r7, r8
 8000e06:	428b      	cmp	r3, r1
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d907      	bls.n	8000e1e <__udivmoddi4+0x256>
 8000e0e:	1869      	adds	r1, r5, r1
 8000e10:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e14:	d22f      	bcs.n	8000e76 <__udivmoddi4+0x2ae>
 8000e16:	428b      	cmp	r3, r1
 8000e18:	d92d      	bls.n	8000e76 <__udivmoddi4+0x2ae>
 8000e1a:	3f02      	subs	r7, #2
 8000e1c:	4429      	add	r1, r5
 8000e1e:	1acb      	subs	r3, r1, r3
 8000e20:	b281      	uxth	r1, r0
 8000e22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e2e:	fb00 f308 	mul.w	r3, r0, r8
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x27e>
 8000e36:	1869      	adds	r1, r5, r1
 8000e38:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e3c:	d217      	bcs.n	8000e6e <__udivmoddi4+0x2a6>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d915      	bls.n	8000e6e <__udivmoddi4+0x2a6>
 8000e42:	3802      	subs	r0, #2
 8000e44:	4429      	add	r1, r5
 8000e46:	1ac9      	subs	r1, r1, r3
 8000e48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e4c:	e73b      	b.n	8000cc6 <__udivmoddi4+0xfe>
 8000e4e:	4637      	mov	r7, r6
 8000e50:	4630      	mov	r0, r6
 8000e52:	e709      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e54:	4607      	mov	r7, r0
 8000e56:	e6e7      	b.n	8000c28 <__udivmoddi4+0x60>
 8000e58:	4618      	mov	r0, r3
 8000e5a:	e6fb      	b.n	8000c54 <__udivmoddi4+0x8c>
 8000e5c:	4541      	cmp	r1, r8
 8000e5e:	d2ab      	bcs.n	8000db8 <__udivmoddi4+0x1f0>
 8000e60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e64:	eb69 020e 	sbc.w	r2, r9, lr
 8000e68:	3801      	subs	r0, #1
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	e7a4      	b.n	8000db8 <__udivmoddi4+0x1f0>
 8000e6e:	4660      	mov	r0, ip
 8000e70:	e7e9      	b.n	8000e46 <__udivmoddi4+0x27e>
 8000e72:	4618      	mov	r0, r3
 8000e74:	e795      	b.n	8000da2 <__udivmoddi4+0x1da>
 8000e76:	4667      	mov	r7, ip
 8000e78:	e7d1      	b.n	8000e1e <__udivmoddi4+0x256>
 8000e7a:	4681      	mov	r9, r0
 8000e7c:	e77c      	b.n	8000d78 <__udivmoddi4+0x1b0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	442c      	add	r4, r5
 8000e82:	e747      	b.n	8000d14 <__udivmoddi4+0x14c>
 8000e84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e88:	442b      	add	r3, r5
 8000e8a:	e72f      	b.n	8000cec <__udivmoddi4+0x124>
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	e708      	b.n	8000ca2 <__udivmoddi4+0xda>
 8000e90:	4637      	mov	r7, r6
 8000e92:	e6e9      	b.n	8000c68 <__udivmoddi4+0xa0>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <HAL_CAN_RxFifo0MsgPendingCallback>:

 static uint32_t this_device = 1;
 static CAN_HandleTypeDef can_h;

 void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *_hcan)
 {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08e      	sub	sp, #56	; 0x38
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	 // ISR
	 CAN_RxHeaderTypeDef header;
	 canbus_frame_t can_frame;
	 HAL_CAN_GetRxMessage(_hcan, 0, &header, can_frame.data);
 8000ea0:	f107 030c 	add.w	r3, r7, #12
 8000ea4:	3305      	adds	r3, #5
 8000ea6:	f107 021c 	add.w	r2, r7, #28
 8000eaa:	2100      	movs	r1, #0
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f004 f8e6 	bl	800507e <HAL_CAN_GetRxMessage>
	 can_frame.id = header.StdId;
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	60fb      	str	r3, [r7, #12]
	 can_frame.length = header.DLC;
 8000eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	743b      	strb	r3, [r7, #16]
	 add_can_frame_to_rx_queue_from_isr(can_frame);
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ec2:	f000 fca7 	bl	8001814 <add_can_frame_to_rx_queue_from_isr>
 }
 8000ec6:	bf00      	nop
 8000ec8:	3738      	adds	r7, #56	; 0x38
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <canbus_task_init>:

void canbus_task_init(CAN_HandleTypeDef can_handle)
{
 8000ed0:	b084      	sub	sp, #16
 8000ed2:	b5b0      	push	{r4, r5, r7, lr}
 8000ed4:	b08a      	sub	sp, #40	; 0x28
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000edc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	this_device = (((HAL_GPIO_ReadPin(INDEX1_GPIO_Port, INDEX1_Pin) == GPIO_PIN_SET) ? 0 : 1) << 0);
 8000ee0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee4:	4846      	ldr	r0, [pc, #280]	; (8001000 <canbus_task_init+0x130>)
 8000ee6:	f004 fec9 	bl	8005c7c <HAL_GPIO_ReadPin>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	bf14      	ite	ne
 8000ef0:	2301      	movne	r3, #1
 8000ef2:	2300      	moveq	r3, #0
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4b42      	ldr	r3, [pc, #264]	; (8001004 <canbus_task_init+0x134>)
 8000efa:	601a      	str	r2, [r3, #0]
	this_device += (((HAL_GPIO_ReadPin(INDEX2_GPIO_Port, INDEX2_Pin) == GPIO_PIN_SET) ? 0 : 1) << 1);
 8000efc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f00:	483f      	ldr	r0, [pc, #252]	; (8001000 <canbus_task_init+0x130>)
 8000f02:	f004 febb 	bl	8005c7c <HAL_GPIO_ReadPin>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d001      	beq.n	8000f10 <canbus_task_init+0x40>
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	e000      	b.n	8000f12 <canbus_task_init+0x42>
 8000f10:	2300      	movs	r3, #0
 8000f12:	461a      	mov	r2, r3
 8000f14:	4b3b      	ldr	r3, [pc, #236]	; (8001004 <canbus_task_init+0x134>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4413      	add	r3, r2
 8000f1a:	4a3a      	ldr	r2, [pc, #232]	; (8001004 <canbus_task_init+0x134>)
 8000f1c:	6013      	str	r3, [r2, #0]
	this_device += (((HAL_GPIO_ReadPin(INDEX3_GPIO_Port, INDEX3_Pin) == GPIO_PIN_SET) ? 0 : 1) << 2);
 8000f1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f22:	4839      	ldr	r0, [pc, #228]	; (8001008 <canbus_task_init+0x138>)
 8000f24:	f004 feaa 	bl	8005c7c <HAL_GPIO_ReadPin>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d001      	beq.n	8000f32 <canbus_task_init+0x62>
 8000f2e:	2304      	movs	r3, #4
 8000f30:	e000      	b.n	8000f34 <canbus_task_init+0x64>
 8000f32:	2300      	movs	r3, #0
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b33      	ldr	r3, [pc, #204]	; (8001004 <canbus_task_init+0x134>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	4a31      	ldr	r2, [pc, #196]	; (8001004 <canbus_task_init+0x134>)
 8000f3e:	6013      	str	r3, [r2, #0]
	this_device += 1; // Always offset by 1, the main controller is 0
 8000f40:	4b30      	ldr	r3, [pc, #192]	; (8001004 <canbus_task_init+0x134>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	3301      	adds	r3, #1
 8000f46:	4a2f      	ldr	r2, [pc, #188]	; (8001004 <canbus_task_init+0x134>)
 8000f48:	6013      	str	r3, [r2, #0]

	canbus_queue_set = xQueueCreateSet( 2 * CAN_QUEUE_LENGTH );
 8000f4a:	201e      	movs	r0, #30
 8000f4c:	f007 fade 	bl	800850c <xQueueCreateSet>
 8000f50:	4602      	mov	r2, r0
 8000f52:	4b2e      	ldr	r3, [pc, #184]	; (800100c <canbus_task_init+0x13c>)
 8000f54:	601a      	str	r2, [r3, #0]
	canbus_rx_queue = xQueueCreate( CAN_QUEUE_LENGTH, sizeof(canbus_frame_t) );
 8000f56:	2200      	movs	r2, #0
 8000f58:	2110      	movs	r1, #16
 8000f5a:	200f      	movs	r0, #15
 8000f5c:	f006 fe61 	bl	8007c22 <xQueueGenericCreate>
 8000f60:	4602      	mov	r2, r0
 8000f62:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <canbus_task_init+0x140>)
 8000f64:	601a      	str	r2, [r3, #0]
	canbus_tx_queue = xQueueCreate( CAN_QUEUE_LENGTH, sizeof(canbus_frame_t) );
 8000f66:	2200      	movs	r2, #0
 8000f68:	2110      	movs	r1, #16
 8000f6a:	200f      	movs	r0, #15
 8000f6c:	f006 fe59 	bl	8007c22 <xQueueGenericCreate>
 8000f70:	4602      	mov	r2, r0
 8000f72:	4b28      	ldr	r3, [pc, #160]	; (8001014 <canbus_task_init+0x144>)
 8000f74:	601a      	str	r2, [r3, #0]

	xQueueAddToSet( canbus_rx_queue, canbus_queue_set );
 8000f76:	4b26      	ldr	r3, [pc, #152]	; (8001010 <canbus_task_init+0x140>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	4b24      	ldr	r3, [pc, #144]	; (800100c <canbus_task_init+0x13c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4610      	mov	r0, r2
 8000f82:	f007 fad2 	bl	800852a <xQueueAddToSet>
	xQueueAddToSet( canbus_tx_queue, canbus_queue_set );
 8000f86:	4b23      	ldr	r3, [pc, #140]	; (8001014 <canbus_task_init+0x144>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	4b20      	ldr	r3, [pc, #128]	; (800100c <canbus_task_init+0x13c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4610      	mov	r0, r2
 8000f92:	f007 faca 	bl	800852a <xQueueAddToSet>

	can_h = can_handle;
 8000f96:	4b20      	ldr	r3, [pc, #128]	; (8001018 <canbus_task_init+0x148>)
 8000f98:	461c      	mov	r4, r3
 8000f9a:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8000f9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000faa:	e884 0003 	stmia.w	r4, {r0, r1}

	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdHigh=0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow=0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh=0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow=0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //set filter scale
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterActivation=ENABLE;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	623b      	str	r3, [r7, #32]

	HAL_CAN_ConfigFilter(&can_h, &sFilterConfig); //configure CAN filter
 8000fca:	463b      	mov	r3, r7
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4812      	ldr	r0, [pc, #72]	; (8001018 <canbus_task_init+0x148>)
 8000fd0:	f003 fe56 	bl	8004c80 <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&can_h);
 8000fd4:	4810      	ldr	r0, [pc, #64]	; (8001018 <canbus_task_init+0x148>)
 8000fd6:	f003 ff33 	bl	8004e40 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(&can_h, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000fda:	2102      	movs	r1, #2
 8000fdc:	480e      	ldr	r0, [pc, #56]	; (8001018 <canbus_task_init+0x148>)
 8000fde:	f004 f960 	bl	80052a2 <HAL_CAN_ActivateNotification>
	HAL_CAN_ActivateNotification(&can_h, CAN_IT_RX_FIFO1_MSG_PENDING );
 8000fe2:	2110      	movs	r1, #16
 8000fe4:	480c      	ldr	r0, [pc, #48]	; (8001018 <canbus_task_init+0x148>)
 8000fe6:	f004 f95c 	bl	80052a2 <HAL_CAN_ActivateNotification>
	HAL_CAN_ActivateNotification(&can_h, CAN_IT_TX_MAILBOX_EMPTY);
 8000fea:	2101      	movs	r1, #1
 8000fec:	480a      	ldr	r0, [pc, #40]	; (8001018 <canbus_task_init+0x148>)
 8000fee:	f004 f958 	bl	80052a2 <HAL_CAN_ActivateNotification>
}
 8000ff2:	bf00      	nop
 8000ff4:	3728      	adds	r7, #40	; 0x28
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000ffc:	b004      	add	sp, #16
 8000ffe:	4770      	bx	lr
 8001000:	40020800 	.word	0x40020800
 8001004:	20000000 	.word	0x20000000
 8001008:	40020c00 	.word	0x40020c00
 800100c:	200000b0 	.word	0x200000b0
 8001010:	200000a8 	.word	0x200000a8
 8001014:	200000ac 	.word	0x200000ac
 8001018:	200000b4 	.word	0x200000b4
 800101c:	00000000 	.word	0x00000000

08001020 <canbus_task>:

void canbus_task(void)
{
 8001020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001022:	b0b1      	sub	sp, #196	; 0xc4
 8001024:	af00      	add	r7, sp, #0
	QueueSetMemberHandle_t xActivatedMember;
	canbus_frame_t can_frame;

	xActivatedMember = xQueueSelectFromSet( canbus_queue_set, portMAX_DELAY);
 8001026:	4bb0      	ldr	r3, [pc, #704]	; (80012e8 <canbus_task+0x2c8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800102e:	4618      	mov	r0, r3
 8001030:	f007 fa9c 	bl	800856c <xQueueSelectFromSet>
 8001034:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0

	if(xActivatedMember == canbus_rx_queue)
 8001038:	4bac      	ldr	r3, [pc, #688]	; (80012ec <canbus_task+0x2cc>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001040:	429a      	cmp	r2, r3
 8001042:	f040 8399 	bne.w	8001778 <canbus_task+0x758>
	{
		xQueueReceive( xActivatedMember, &can_frame, 0 );
 8001046:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800104a:	2200      	movs	r2, #0
 800104c:	4619      	mov	r1, r3
 800104e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8001052:	f007 f805 	bl	8008060 <xQueueReceive>
		can_message_id_t msg;
		msg.raw_id = can_frame.id;
 8001056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001058:	65bb      	str	r3, [r7, #88]	; 0x58
		unpack_can_message(&msg);
 800105a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800105e:	4618      	mov	r0, r3
 8001060:	f009 fb84 	bl	800a76c <unpack_can_message>

		if(msg.can_device == this_device)
 8001064:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001066:	4ba2      	ldr	r3, [pc, #648]	; (80012f0 <canbus_task+0x2d0>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	429a      	cmp	r2, r3
 800106c:	f040 83ac 	bne.w	80017c8 <canbus_task+0x7a8>
		{
			if(msg.can_msg_type == CAN_MSG_TYPE_CMD)
 8001070:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001072:	2b00      	cmp	r3, #0
 8001074:	f040 83a8 	bne.w	80017c8 <canbus_task+0x7a8>
			{
				if(msg.can_class == CAN_MSG_CLASS_CMD_CONTROL)
 8001078:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800107a:	2b00      	cmp	r3, #0
 800107c:	f040 813a 	bne.w	80012f4 <canbus_task+0x2d4>
				{
					if(msg.can_index == CAN_MSG_INDEX_CMD_POSITION)
 8001080:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001082:	2b00      	cmp	r3, #0
 8001084:	d11c      	bne.n	80010c0 <canbus_task+0xa0>
					{
						uint8_t motor_index = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						float position = 0;
 800108c:	f04f 0300 	mov.w	r3, #0
 8001090:	657b      	str	r3, [r7, #84]	; 0x54
						motor_index = can_frame.data[0];
 8001092:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001096:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						memcpy(&position, &can_frame.data[1], 4);
 800109a:	f8d7 3072 	ldr.w	r3, [r7, #114]	; 0x72
 800109e:	657b      	str	r3, [r7, #84]	; 0x54
						set_control_mode(POSITION, motor_index);
 80010a0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80010a4:	4619      	mov	r1, r3
 80010a6:	2000      	movs	r0, #0
 80010a8:	f002 f88a 	bl	80031c0 <set_control_mode>
						set_motor_position(position, motor_index);
 80010ac:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80010b0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80010b4:	4618      	mov	r0, r3
 80010b6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ba:	f002 f899 	bl	80031f0 <set_motor_position>
			header.TransmitGlobalTime = DISABLE;
			uint32_t mailbox = 0;
			HAL_CAN_AddTxMessage(&can_h, &header, can_frame.data, &mailbox);
		}
	}
}
 80010be:	e383      	b.n	80017c8 <canbus_task+0x7a8>
					else if(msg.can_index == CAN_MSG_INDEX_CMD_SPEED)
 80010c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d119      	bne.n	80010fa <canbus_task+0xda>
						uint8_t motor_index = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
						int32_t speed = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	653b      	str	r3, [r7, #80]	; 0x50
						motor_index = can_frame.data[0];
 80010d0:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80010d4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
						memcpy(&speed, &can_frame.data[1], 4);
 80010d8:	f8d7 3072 	ldr.w	r3, [r7, #114]	; 0x72
 80010dc:	653b      	str	r3, [r7, #80]	; 0x50
						set_control_mode(SPEED, motor_index);
 80010de:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80010e2:	4619      	mov	r1, r3
 80010e4:	2001      	movs	r0, #1
 80010e6:	f002 f86b 	bl	80031c0 <set_control_mode>
						set_motor_speed(speed, motor_index);
 80010ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010ec:	f897 2080 	ldrb.w	r2, [r7, #128]	; 0x80
 80010f0:	4611      	mov	r1, r2
 80010f2:	4618      	mov	r0, r3
 80010f4:	f002 f912 	bl	800331c <set_motor_speed>
}
 80010f8:	e366      	b.n	80017c8 <canbus_task+0x7a8>
					else if(msg.can_index == CAN_MSG_INDEX_CMD_DUTY)
 80010fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010fc:	2b04      	cmp	r3, #4
 80010fe:	d11c      	bne.n	800113a <canbus_task+0x11a>
						uint8_t motor_index = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
						float duty = 0;
 8001106:	f04f 0300 	mov.w	r3, #0
 800110a:	64fb      	str	r3, [r7, #76]	; 0x4c
						motor_index = can_frame.data[0];
 800110c:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001110:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
						memcpy(&duty, &can_frame.data[1], 4);
 8001114:	f8d7 3072 	ldr.w	r3, [r7, #114]	; 0x72
 8001118:	64fb      	str	r3, [r7, #76]	; 0x4c
						set_control_mode(DUTY, motor_index);
 800111a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800111e:	4619      	mov	r1, r3
 8001120:	2003      	movs	r0, #3
 8001122:	f002 f84d 	bl	80031c0 <set_control_mode>
						set_motor_duty(duty, motor_index);
 8001126:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800112a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800112e:	4618      	mov	r0, r3
 8001130:	eeb0 0a67 	vmov.f32	s0, s15
 8001134:	f002 f90e 	bl	8003354 <set_motor_duty>
}
 8001138:	e346      	b.n	80017c8 <canbus_task+0x7a8>
					else if(msg.can_index == CAN_MSG_INDEX_CMD_PRIMITIVE)
 800113a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800113c:	2b03      	cmp	r3, #3
 800113e:	d164      	bne.n	800120a <canbus_task+0x1ea>
						int16_t tau_ms = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
						int16_t t_offset_ms = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
						uint8_t primitive_index = can_frame.data[0];
 800114c:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001150:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
						if(primitive_index < NUMBER_PRIMITIVES)
 8001154:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8001158:	2b07      	cmp	r3, #7
 800115a:	f200 8335 	bhi.w	80017c8 <canbus_task+0x7a8>
							memcpy(&tau_ms, &can_frame.data[1], 2);
 800115e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8001162:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
							memcpy(&t_offset_ms, &can_frame.data[3], 2);
 8001166:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800116a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
							uint8_t invert = can_frame.data[5];
 800116e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001172:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
							uint8_t time_reverse = can_frame.data[6];
 8001176:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800117a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
							motion_primitive_set_index(primitive_index);
 800117e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8001182:	4618      	mov	r0, r3
 8001184:	f00a fd00 	bl	800bb88 <motion_primitive_set_index>
							motion_primitive_set_timing(primitive_index, (float) tau_ms * 0.001, (float) t_offset_ms * 0.001, invert, time_reverse);
 8001188:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800118c:	ee07 3a90 	vmov	s15, r3
 8001190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001194:	ee17 0a90 	vmov	r0, s15
 8001198:	f7ff f97e 	bl	8000498 <__aeabi_f2d>
 800119c:	a350      	add	r3, pc, #320	; (adr r3, 80012e0 <canbus_task+0x2c0>)
 800119e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a2:	f7ff f9d1 	bl	8000548 <__aeabi_dmul>
 80011a6:	4603      	mov	r3, r0
 80011a8:	460c      	mov	r4, r1
 80011aa:	4618      	mov	r0, r3
 80011ac:	4621      	mov	r1, r4
 80011ae:	f7ff fca3 	bl	8000af8 <__aeabi_d2f>
 80011b2:	4605      	mov	r5, r0
 80011b4:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 80011b8:	ee07 3a90 	vmov	s15, r3
 80011bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011c0:	ee17 0a90 	vmov	r0, s15
 80011c4:	f7ff f968 	bl	8000498 <__aeabi_f2d>
 80011c8:	a345      	add	r3, pc, #276	; (adr r3, 80012e0 <canbus_task+0x2c0>)
 80011ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ce:	f7ff f9bb 	bl	8000548 <__aeabi_dmul>
 80011d2:	4603      	mov	r3, r0
 80011d4:	460c      	mov	r4, r1
 80011d6:	4618      	mov	r0, r3
 80011d8:	4621      	mov	r1, r4
 80011da:	f7ff fc8d 	bl	8000af8 <__aeabi_d2f>
 80011de:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80011e2:	f897 1083 	ldrb.w	r1, [r7, #131]	; 0x83
 80011e6:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80011ea:	ee00 0a90 	vmov	s1, r0
 80011ee:	ee00 5a10 	vmov	s0, r5
 80011f2:	4618      	mov	r0, r3
 80011f4:	f00a fcdc 	bl	800bbb0 <motion_primitive_set_timing>
							set_control_mode(PRIMITIVE, 0);
 80011f8:	2100      	movs	r1, #0
 80011fa:	2004      	movs	r0, #4
 80011fc:	f001 ffe0 	bl	80031c0 <set_control_mode>
							set_control_mode(PRIMITIVE, 1);
 8001200:	2101      	movs	r1, #1
 8001202:	2004      	movs	r0, #4
 8001204:	f001 ffdc 	bl	80031c0 <set_control_mode>
}
 8001208:	e2de      	b.n	80017c8 <canbus_task+0x7a8>
					else if(msg.can_index == CAN_MSG_INDEX_CMD_PROPRIOCEPTIVE_PRIMITIVE)
 800120a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800120c:	2b05      	cmp	r3, #5
 800120e:	f040 82db 	bne.w	80017c8 <canbus_task+0x7a8>
						int16_t tau_ms = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
						int16_t t_offset_ms = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
						uint8_t primitive_index = can_frame.data[0];
 800121e:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001222:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						if(primitive_index < NUMBER_PRIMITIVES)
 8001226:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800122a:	2b07      	cmp	r3, #7
 800122c:	f200 82cc 	bhi.w	80017c8 <canbus_task+0x7a8>
							memcpy(&tau_ms, &can_frame.data[1], 2);
 8001230:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8001234:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
							memcpy(&t_offset_ms, &can_frame.data[3], 2);
 8001238:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800123c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
							uint8_t invert = can_frame.data[5];
 8001240:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001244:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
							uint8_t time_reverse = can_frame.data[6];
 8001248:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800124c:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
							motion_primitive_set_index(primitive_index);
 8001250:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001254:	4618      	mov	r0, r3
 8001256:	f00a fc97 	bl	800bb88 <motion_primitive_set_index>
							motion_primitive_set_timing(primitive_index, (float) tau_ms * 0.001, (float) t_offset_ms * 0.001, invert, time_reverse);
 800125a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800125e:	ee07 3a90 	vmov	s15, r3
 8001262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001266:	ee17 0a90 	vmov	r0, s15
 800126a:	f7ff f915 	bl	8000498 <__aeabi_f2d>
 800126e:	a31c      	add	r3, pc, #112	; (adr r3, 80012e0 <canbus_task+0x2c0>)
 8001270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001274:	f7ff f968 	bl	8000548 <__aeabi_dmul>
 8001278:	4603      	mov	r3, r0
 800127a:	460c      	mov	r4, r1
 800127c:	4618      	mov	r0, r3
 800127e:	4621      	mov	r1, r4
 8001280:	f7ff fc3a 	bl	8000af8 <__aeabi_d2f>
 8001284:	4605      	mov	r5, r0
 8001286:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800128a:	ee07 3a90 	vmov	s15, r3
 800128e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001292:	ee17 0a90 	vmov	r0, s15
 8001296:	f7ff f8ff 	bl	8000498 <__aeabi_f2d>
 800129a:	a311      	add	r3, pc, #68	; (adr r3, 80012e0 <canbus_task+0x2c0>)
 800129c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a0:	f7ff f952 	bl	8000548 <__aeabi_dmul>
 80012a4:	4603      	mov	r3, r0
 80012a6:	460c      	mov	r4, r1
 80012a8:	4618      	mov	r0, r3
 80012aa:	4621      	mov	r1, r4
 80012ac:	f7ff fc24 	bl	8000af8 <__aeabi_d2f>
 80012b0:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80012b4:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 80012b8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80012bc:	ee00 0a90 	vmov	s1, r0
 80012c0:	ee00 5a10 	vmov	s0, r5
 80012c4:	4618      	mov	r0, r3
 80012c6:	f00a fc73 	bl	800bbb0 <motion_primitive_set_timing>
							set_control_mode(PROPRIOCEPTIVE_PRIMITIVE, 0);
 80012ca:	2100      	movs	r1, #0
 80012cc:	2005      	movs	r0, #5
 80012ce:	f001 ff77 	bl	80031c0 <set_control_mode>
							set_control_mode(PROPRIOCEPTIVE_PRIMITIVE, 1);
 80012d2:	2101      	movs	r1, #1
 80012d4:	2005      	movs	r0, #5
 80012d6:	f001 ff73 	bl	80031c0 <set_control_mode>
}
 80012da:	e275      	b.n	80017c8 <canbus_task+0x7a8>
 80012dc:	f3af 8000 	nop.w
 80012e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80012e4:	3f50624d 	.word	0x3f50624d
 80012e8:	200000b0 	.word	0x200000b0
 80012ec:	200000a8 	.word	0x200000a8
 80012f0:	20000000 	.word	0x20000000
				else if(msg.can_class == CAN_MSG_CLASS_CMD_SET_PARAM)
 80012f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	f040 8223 	bne.w	8001742 <canbus_task+0x722>
					if(msg.can_index == CAN_MSG_INDEX_CMD_PARAM_PRIM_SCALE)
 80012fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d165      	bne.n	80013ce <canbus_task+0x3ae>
						uint8_t primitive_index = can_frame.data[0];
 8001302:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001306:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
						memcpy(&x_off, &can_frame.data[1], 1);
 800130a:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800130e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
						memcpy(&y_off, &can_frame.data[2], 1);
 8001312:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001316:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
						float x_scale = 0.01 *  can_frame.data[3];
 800131a:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f8a8 	bl	8000474 <__aeabi_i2d>
 8001324:	f20f 43c4 	addw	r3, pc, #1220	; 0x4c4
 8001328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132c:	f7ff f90c 	bl	8000548 <__aeabi_dmul>
 8001330:	4603      	mov	r3, r0
 8001332:	460c      	mov	r4, r1
 8001334:	4618      	mov	r0, r3
 8001336:	4621      	mov	r1, r4
 8001338:	f7ff fbde 	bl	8000af8 <__aeabi_d2f>
 800133c:	4603      	mov	r3, r0
 800133e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
						float y_scale = 0.01 *  can_frame.data[4];
 8001342:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f894 	bl	8000474 <__aeabi_i2d>
 800134c:	f20f 439c 	addw	r3, pc, #1180	; 0x49c
 8001350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001354:	f7ff f8f8 	bl	8000548 <__aeabi_dmul>
 8001358:	4603      	mov	r3, r0
 800135a:	460c      	mov	r4, r1
 800135c:	4618      	mov	r0, r3
 800135e:	4621      	mov	r1, r4
 8001360:	f7ff fbca 	bl	8000af8 <__aeabi_d2f>
 8001364:	4603      	mov	r3, r0
 8001366:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
						motion_primitive_set_scaling(primitive_index, 0.001*x_off,0.001*y_off, x_scale, y_scale);
 800136a:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff f880 	bl	8000474 <__aeabi_i2d>
 8001374:	f20f 4358 	addw	r3, pc, #1112	; 0x458
 8001378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137c:	f7ff f8e4 	bl	8000548 <__aeabi_dmul>
 8001380:	4603      	mov	r3, r0
 8001382:	460c      	mov	r4, r1
 8001384:	4618      	mov	r0, r3
 8001386:	4621      	mov	r1, r4
 8001388:	f7ff fbb6 	bl	8000af8 <__aeabi_d2f>
 800138c:	4605      	mov	r5, r0
 800138e:	f997 3042 	ldrsb.w	r3, [r7, #66]	; 0x42
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff f86e 	bl	8000474 <__aeabi_i2d>
 8001398:	f20f 4334 	addw	r3, pc, #1076	; 0x434
 800139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a0:	f7ff f8d2 	bl	8000548 <__aeabi_dmul>
 80013a4:	4603      	mov	r3, r0
 80013a6:	460c      	mov	r4, r1
 80013a8:	4618      	mov	r0, r3
 80013aa:	4621      	mov	r1, r4
 80013ac:	f7ff fba4 	bl	8000af8 <__aeabi_d2f>
 80013b0:	4602      	mov	r2, r0
 80013b2:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80013b6:	edd7 1a22 	vldr	s3, [r7, #136]	; 0x88
 80013ba:	ed97 1a23 	vldr	s2, [r7, #140]	; 0x8c
 80013be:	ee00 2a90 	vmov	s1, r2
 80013c2:	ee00 5a10 	vmov	s0, r5
 80013c6:	4618      	mov	r0, r3
 80013c8:	f00a fc34 	bl	800bc34 <motion_primitive_set_scaling>
}
 80013cc:	e1fc      	b.n	80017c8 <canbus_task+0x7a8>
					} else if(msg.can_index == CAN_MSG_INDEX_CMD_PARAM_PD_MINMAX)
 80013ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	f040 80dc 	bne.w	800158e <canbus_task+0x56e>
						uint8_t index_type = can_frame.data[0];
 80013d6:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80013da:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
						uint8_t index = (index_type & 0x01);
 80013de:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
						uint8_t ctrl_type = ((index_type & 0x06) >> 0x01);
 80013ea:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 80013ee:	105b      	asrs	r3, r3, #1
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	f003 0303 	and.w	r3, r3, #3
 80013f6:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
						memcpy(&kp_temp, &can_frame.data[1], 2);
 80013fa:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80013fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
						memcpy(&kd_temp, &can_frame.data[3], 2);
 8001402:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8001406:	87fb      	strh	r3, [r7, #62]	; 0x3e
						uint8_t speed_filt_pct = can_frame.data[5];
 8001408:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800140c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						uint8_t cmd_max_pct = can_frame.data[6];
 8001410:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001414:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
						uint8_t cmd_min_pct = can_frame.data[7];
 8001418:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800141c:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
						float kp = kp_temp * 0.01;
 8001420:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f825 	bl	8000474 <__aeabi_i2d>
 800142a:	a3f0      	add	r3, pc, #960	; (adr r3, 80017ec <canbus_task+0x7cc>)
 800142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001430:	f7ff f88a 	bl	8000548 <__aeabi_dmul>
 8001434:	4603      	mov	r3, r0
 8001436:	460c      	mov	r4, r1
 8001438:	4618      	mov	r0, r3
 800143a:	4621      	mov	r1, r4
 800143c:	f7ff fb5c 	bl	8000af8 <__aeabi_d2f>
 8001440:	4603      	mov	r3, r0
 8001442:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
						float kd = kd_temp * 1.0;
 8001446:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff f812 	bl	8000474 <__aeabi_i2d>
 8001450:	4603      	mov	r3, r0
 8001452:	460c      	mov	r4, r1
 8001454:	4618      	mov	r0, r3
 8001456:	4621      	mov	r1, r4
 8001458:	f7ff fb4e 	bl	8000af8 <__aeabi_d2f>
 800145c:	4603      	mov	r3, r0
 800145e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
						float alpha = speed_filt_pct * 0.01;
 8001462:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff f804 	bl	8000474 <__aeabi_i2d>
 800146c:	a3df      	add	r3, pc, #892	; (adr r3, 80017ec <canbus_task+0x7cc>)
 800146e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001472:	f7ff f869 	bl	8000548 <__aeabi_dmul>
 8001476:	4603      	mov	r3, r0
 8001478:	460c      	mov	r4, r1
 800147a:	4618      	mov	r0, r3
 800147c:	4621      	mov	r1, r4
 800147e:	f7ff fb3b 	bl	8000af8 <__aeabi_d2f>
 8001482:	4603      	mov	r3, r0
 8001484:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
						float cmd_max = cmd_max_pct * 0.01;
 8001488:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800148c:	4618      	mov	r0, r3
 800148e:	f7fe fff1 	bl	8000474 <__aeabi_i2d>
 8001492:	a3d6      	add	r3, pc, #856	; (adr r3, 80017ec <canbus_task+0x7cc>)
 8001494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001498:	f7ff f856 	bl	8000548 <__aeabi_dmul>
 800149c:	4603      	mov	r3, r0
 800149e:	460c      	mov	r4, r1
 80014a0:	4618      	mov	r0, r3
 80014a2:	4621      	mov	r1, r4
 80014a4:	f7ff fb28 	bl	8000af8 <__aeabi_d2f>
 80014a8:	4603      	mov	r3, r0
 80014aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
						float cmd_min = cmd_min_pct * 0.01;
 80014ae:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7fe ffde 	bl	8000474 <__aeabi_i2d>
 80014b8:	a3cc      	add	r3, pc, #816	; (adr r3, 80017ec <canbus_task+0x7cc>)
 80014ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014be:	f7ff f843 	bl	8000548 <__aeabi_dmul>
 80014c2:	4603      	mov	r3, r0
 80014c4:	460c      	mov	r4, r1
 80014c6:	4618      	mov	r0, r3
 80014c8:	4621      	mov	r1, r4
 80014ca:	f7ff fb15 	bl	8000af8 <__aeabi_d2f>
 80014ce:	4603      	mov	r3, r0
 80014d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
						if(alpha > 0.99)
 80014d4:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80014d8:	f7fe ffde 	bl	8000498 <__aeabi_f2d>
 80014dc:	a3c5      	add	r3, pc, #788	; (adr r3, 80017f4 <canbus_task+0x7d4>)
 80014de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e2:	f7ff fac1 	bl	8000a68 <__aeabi_dcmpgt>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d002      	beq.n	80014f2 <canbus_task+0x4d2>
							alpha = 0.99;
 80014ec:	4bbc      	ldr	r3, [pc, #752]	; (80017e0 <canbus_task+0x7c0>)
 80014ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
						if(alpha < 0.0)
 80014f2:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80014f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fe:	d503      	bpl.n	8001508 <canbus_task+0x4e8>
							alpha = 0.0;
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
						if(cmd_max > 1.0)
 8001508:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800150c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001510:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001518:	dd03      	ble.n	8001522 <canbus_task+0x502>
							cmd_max = 1.0;
 800151a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800151e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
						if(cmd_max < 0.0)
 8001522:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001526:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800152a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152e:	d503      	bpl.n	8001538 <canbus_task+0x518>
							cmd_max = 0.0;
 8001530:	f04f 0300 	mov.w	r3, #0
 8001534:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
						if(cmd_min > 1.0)
 8001538:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800153c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001540:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001548:	dd03      	ble.n	8001552 <canbus_task+0x532>
							cmd_min = 1.0;
 800154a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800154e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
						if(cmd_min < 0.0)
 8001552:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001556:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800155a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800155e:	d503      	bpl.n	8001568 <canbus_task+0x548>
							cmd_min = 0.0;
 8001560:	f04f 0300 	mov.w	r3, #0
 8001564:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
						set_control_params_kp_min_max(index, ctrl_type, kp, kd, alpha, cmd_min, cmd_max);
 8001568:	f897 20a0 	ldrb.w	r2, [r7, #160]	; 0xa0
 800156c:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8001570:	ed97 2a2e 	vldr	s4, [r7, #184]	; 0xb8
 8001574:	edd7 1a2d 	vldr	s3, [r7, #180]	; 0xb4
 8001578:	ed97 1a2f 	vldr	s2, [r7, #188]	; 0xbc
 800157c:	edd7 0a25 	vldr	s1, [r7, #148]	; 0x94
 8001580:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 8001584:	4611      	mov	r1, r2
 8001586:	4618      	mov	r0, r3
 8001588:	f001 ff1a 	bl	80033c0 <set_control_params_kp_min_max>
}
 800158c:	e11c      	b.n	80017c8 <canbus_task+0x7a8>
					} else if(msg.can_index == CAN_MSG_INDEX_CMD_PARAM_KI)
 800158e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001590:	2b02      	cmp	r3, #2
 8001592:	d121      	bne.n	80015d8 <canbus_task+0x5b8>
						uint8_t index_type = can_frame.data[0];
 8001594:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001598:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
						uint8_t index = (index_type & 0x01);
 800159c:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
						uint8_t ctrl_type = ((index_type & 0x06) >> 0x01);
 80015a8:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 80015ac:	105b      	asrs	r3, r3, #1
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
						memcpy(&ki, &can_frame.data[1], 4);
 80015b8:	f8d7 3072 	ldr.w	r3, [r7, #114]	; 0x72
 80015bc:	63bb      	str	r3, [r7, #56]	; 0x38
						set_control_params_ki(index, ctrl_type, ki);
 80015be:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80015c2:	f897 20a3 	ldrb.w	r2, [r7, #163]	; 0xa3
 80015c6:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 80015ca:	eeb0 0a67 	vmov.f32	s0, s15
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f001 ffeb 	bl	80035ac <set_control_params_ki>
}
 80015d6:	e0f7      	b.n	80017c8 <canbus_task+0x7a8>
					} else if(msg.can_index == CAN_MSG_INDEX_CMD_PARAM_MAX_INTEGRAL)
 80015d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d121      	bne.n	8001622 <canbus_task+0x602>
						uint8_t index_type = can_frame.data[0];
 80015de:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80015e2:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
						uint8_t index = (index_type & 0x01);
 80015e6:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						uint8_t ctrl_type = ((index_type & 0x06) >> 0x01);
 80015f2:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 80015f6:	105b      	asrs	r3, r3, #1
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
						memcpy(&int_max, &can_frame.data[1], 4);
 8001602:	f8d7 3072 	ldr.w	r3, [r7, #114]	; 0x72
 8001606:	637b      	str	r3, [r7, #52]	; 0x34
						set_control_params_int_max(index, ctrl_type, int_max);
 8001608:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800160c:	f897 20a6 	ldrb.w	r2, [r7, #166]	; 0xa6
 8001610:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001614:	eeb0 0a67 	vmov.f32	s0, s15
 8001618:	4611      	mov	r1, r2
 800161a:	4618      	mov	r0, r3
 800161c:	f002 f80e 	bl	800363c <set_control_params_int_max>
}
 8001620:	e0d2      	b.n	80017c8 <canbus_task+0x7a8>
					} else if(msg.can_index == CAN_MSG_INDEX_CMD_PARAM_MIN_INTEGRAL)
 8001622:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001624:	2b04      	cmp	r3, #4
 8001626:	d121      	bne.n	800166c <canbus_task+0x64c>
						uint8_t index_type = can_frame.data[0];
 8001628:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 800162c:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
						uint8_t index = (index_type & 0x01);
 8001630:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
						uint8_t ctrl_type = ((index_type & 0x06) >> 0x01);
 800163c:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8001640:	105b      	asrs	r3, r3, #1
 8001642:	b2db      	uxtb	r3, r3
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
						memcpy(&int_min, &can_frame.data[1], 4);
 800164c:	f8d7 3072 	ldr.w	r3, [r7, #114]	; 0x72
 8001650:	633b      	str	r3, [r7, #48]	; 0x30
						set_control_params_int_min(index, ctrl_type, int_min);
 8001652:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001656:	f897 20a9 	ldrb.w	r2, [r7, #169]	; 0xa9
 800165a:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 800165e:	eeb0 0a67 	vmov.f32	s0, s15
 8001662:	4611      	mov	r1, r2
 8001664:	4618      	mov	r0, r3
 8001666:	f002 f831 	bl	80036cc <set_control_params_int_min>
}
 800166a:	e0ad      	b.n	80017c8 <canbus_task+0x7a8>
					} else if(msg.can_index == CAN_MSG_INDEX_CMD_PARAM_TICKS_PER_REV)
 800166c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800166e:	2b05      	cmp	r3, #5
 8001670:	d10e      	bne.n	8001690 <canbus_task+0x670>
						uint8_t index = can_frame.data[0];
 8001672:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001676:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
						memcpy(&ticks_per_rev, &can_frame.data[1], 4);
 800167a:	f8d7 3072 	ldr.w	r3, [r7, #114]	; 0x72
 800167e:	62fb      	str	r3, [r7, #44]	; 0x2c
						set_motor_ticks_per_rev(ticks_per_rev, index);
 8001680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001682:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8001686:	4611      	mov	r1, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f002 f867 	bl	800375c <set_motor_ticks_per_rev>
}
 800168e:	e09b      	b.n	80017c8 <canbus_task+0x7a8>
					} else if(msg.can_index == CAN_MSG_INDEX_CMD_PARAM_PRIM_KEYFRAME)
 8001690:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001692:	2b06      	cmp	r3, #6
 8001694:	f040 8098 	bne.w	80017c8 <canbus_task+0x7a8>
						uint8_t prim_index = can_frame.data[0];
 8001698:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 800169c:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
						uint8_t keyframe_index = can_frame.data[1];
 80016a0:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80016a4:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
						memcpy(&x_temp, &can_frame.data[2], 2);
 80016a8:	f8b7 3073 	ldrh.w	r3, [r7, #115]	; 0x73
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	857b      	strh	r3, [r7, #42]	; 0x2a
						memcpy(&y_temp, &can_frame.data[4], 2);
 80016b0:	f8b7 3075 	ldrh.w	r3, [r7, #117]	; 0x75
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	853b      	strh	r3, [r7, #40]	; 0x28
						memcpy(&t_part_temp, &can_frame.data[6], 2);
 80016b8:	f8b7 3077 	ldrh.w	r3, [r7, #119]	; 0x77
 80016bc:	b29b      	uxth	r3, r3
 80016be:	84fb      	strh	r3, [r7, #38]	; 0x26
						motion_primitive_set_keyframe(prim_index, keyframe_index, x_temp * 0.001, y_temp * 0.001, t_part_temp * 1.5259e-5);
 80016c0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe fed5 	bl	8000474 <__aeabi_i2d>
 80016ca:	a341      	add	r3, pc, #260	; (adr r3, 80017d0 <canbus_task+0x7b0>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	f7fe ff3a 	bl	8000548 <__aeabi_dmul>
 80016d4:	4603      	mov	r3, r0
 80016d6:	460c      	mov	r4, r1
 80016d8:	4618      	mov	r0, r3
 80016da:	4621      	mov	r1, r4
 80016dc:	f7ff fa0c 	bl	8000af8 <__aeabi_d2f>
 80016e0:	4605      	mov	r5, r0
 80016e2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe fec4 	bl	8000474 <__aeabi_i2d>
 80016ec:	a338      	add	r3, pc, #224	; (adr r3, 80017d0 <canbus_task+0x7b0>)
 80016ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f2:	f7fe ff29 	bl	8000548 <__aeabi_dmul>
 80016f6:	4603      	mov	r3, r0
 80016f8:	460c      	mov	r4, r1
 80016fa:	4618      	mov	r0, r3
 80016fc:	4621      	mov	r1, r4
 80016fe:	f7ff f9fb 	bl	8000af8 <__aeabi_d2f>
 8001702:	4606      	mov	r6, r0
 8001704:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe feb4 	bl	8000474 <__aeabi_i2d>
 800170c:	a332      	add	r3, pc, #200	; (adr r3, 80017d8 <canbus_task+0x7b8>)
 800170e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001712:	f7fe ff19 	bl	8000548 <__aeabi_dmul>
 8001716:	4603      	mov	r3, r0
 8001718:	460c      	mov	r4, r1
 800171a:	4618      	mov	r0, r3
 800171c:	4621      	mov	r1, r4
 800171e:	f7ff f9eb 	bl	8000af8 <__aeabi_d2f>
 8001722:	4601      	mov	r1, r0
 8001724:	f897 20ad 	ldrb.w	r2, [r7, #173]	; 0xad
 8001728:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800172c:	ee01 1a10 	vmov	s2, r1
 8001730:	ee00 6a90 	vmov	s1, r6
 8001734:	ee00 5a10 	vmov	s0, r5
 8001738:	4611      	mov	r1, r2
 800173a:	4618      	mov	r0, r3
 800173c:	f00b fa38 	bl	800cbb0 <motion_primitive_set_keyframe>
}
 8001740:	e042      	b.n	80017c8 <canbus_task+0x7a8>
				else if(msg.can_class == CAN_MSG_CLASS_CMD_ZERO_POS)
 8001742:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001744:	2b03      	cmp	r3, #3
 8001746:	d10a      	bne.n	800175e <canbus_task+0x73e>
					uint8_t motor_index = can_frame.data[0];
 8001748:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 800174c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
					set_motor_encoder_ticks(motor_index, 0);
 8001750:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001754:	2100      	movs	r1, #0
 8001756:	4618      	mov	r0, r3
 8001758:	f009 f908 	bl	800a96c <set_motor_encoder_ticks>
}
 800175c:	e034      	b.n	80017c8 <canbus_task+0x7a8>
				else if(msg.can_class == CAN_MSG_CLASS_CMD_TIME)
 800175e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001760:	2b01      	cmp	r3, #1
 8001762:	d131      	bne.n	80017c8 <canbus_task+0x7a8>
					uint32_t external_time = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	623b      	str	r3, [r7, #32]
					memcpy(&external_time, &can_frame.data[0], 4);
 8001768:	f8d7 3071 	ldr.w	r3, [r7, #113]	; 0x71
 800176c:	623b      	str	r3, [r7, #32]
					motion_primitive_time_sync(external_time);
 800176e:	6a3b      	ldr	r3, [r7, #32]
 8001770:	4618      	mov	r0, r3
 8001772:	f00a f9f7 	bl	800bb64 <motion_primitive_time_sync>
}
 8001776:	e027      	b.n	80017c8 <canbus_task+0x7a8>
	else if(xActivatedMember == canbus_tx_queue)
 8001778:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <canbus_task+0x7c4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001780:	429a      	cmp	r2, r3
 8001782:	d121      	bne.n	80017c8 <canbus_task+0x7a8>
		if(xQueueReceive( xActivatedMember, &can_frame, 0 ) == pdTRUE)
 8001784:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001788:	2200      	movs	r2, #0
 800178a:	4619      	mov	r1, r3
 800178c:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8001790:	f006 fc66 	bl	8008060 <xQueueReceive>
 8001794:	4603      	mov	r3, r0
 8001796:	2b01      	cmp	r3, #1
 8001798:	d116      	bne.n	80017c8 <canbus_task+0x7a8>
			header.DLC = can_frame.length;
 800179a:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800179e:	61bb      	str	r3, [r7, #24]
			header.StdId = can_frame.id;
 80017a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017a2:	60bb      	str	r3, [r7, #8]
			header.RTR = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
			header.IDE = CAN_ID_STD;
 80017a8:	2300      	movs	r3, #0
 80017aa:	613b      	str	r3, [r7, #16]
			header.TransmitGlobalTime = DISABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	773b      	strb	r3, [r7, #28]
			uint32_t mailbox = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	607b      	str	r3, [r7, #4]
			HAL_CAN_AddTxMessage(&can_h, &header, can_frame.data, &mailbox);
 80017b4:	1d38      	adds	r0, r7, #4
 80017b6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017ba:	1d5a      	adds	r2, r3, #5
 80017bc:	f107 0108 	add.w	r1, r7, #8
 80017c0:	4603      	mov	r3, r0
 80017c2:	4809      	ldr	r0, [pc, #36]	; (80017e8 <canbus_task+0x7c8>)
 80017c4:	f003 fb80 	bl	8004ec8 <HAL_CAN_AddTxMessage>
}
 80017c8:	bf00      	nop
 80017ca:	37c4      	adds	r7, #196	; 0xc4
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80017d4:	3f50624d 	.word	0x3f50624d
 80017d8:	7eda0be1 	.word	0x7eda0be1
 80017dc:	3ef0000e 	.word	0x3ef0000e
 80017e0:	3f7d70a4 	.word	0x3f7d70a4
 80017e4:	200000ac 	.word	0x200000ac
 80017e8:	200000b4 	.word	0x200000b4
 80017ec:	47ae147b 	.word	0x47ae147b
 80017f0:	3f847ae1 	.word	0x3f847ae1
 80017f4:	7ae147ae 	.word	0x7ae147ae
 80017f8:	3fefae14 	.word	0x3fefae14

080017fc <get_device_index>:

/*
*	\brief Gets the device index
*/
uint32_t get_device_index(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
	return this_device;
 8001800:	4b03      	ldr	r3, [pc, #12]	; (8001810 <get_device_index+0x14>)
 8001802:	681b      	ldr	r3, [r3, #0]
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20000000 	.word	0x20000000

08001814 <add_can_frame_to_rx_queue_from_isr>:
*	\param frame The frame to process
*
*	\return True if added to queue, false otherwise
*/
bool add_can_frame_to_rx_queue_from_isr(canbus_frame_t frame)
{
 8001814:	b590      	push	{r4, r7, lr}
 8001816:	b087      	sub	sp, #28
 8001818:	af00      	add	r7, sp, #0
 800181a:	463c      	mov	r4, r7
 800181c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	bool success = false;
 8001820:	2300      	movs	r3, #0
 8001822:	75fb      	strb	r3, [r7, #23]
	if(canbus_rx_queue)
 8001824:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <add_can_frame_to_rx_queue_from_isr+0x3c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00c      	beq.n	8001846 <add_can_frame_to_rx_queue_from_isr+0x32>
	{
		success = (xQueueSendFromISR(canbus_rx_queue, &frame, NULL) == pdTRUE);
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <add_can_frame_to_rx_queue_from_isr+0x3c>)
 800182e:	6818      	ldr	r0, [r3, #0]
 8001830:	4639      	mov	r1, r7
 8001832:	2300      	movs	r3, #0
 8001834:	2200      	movs	r2, #0
 8001836:	f006 fb6d 	bl	8007f14 <xQueueGenericSendFromISR>
 800183a:	4603      	mov	r3, r0
 800183c:	2b01      	cmp	r3, #1
 800183e:	bf0c      	ite	eq
 8001840:	2301      	moveq	r3, #1
 8001842:	2300      	movne	r3, #0
 8001844:	75fb      	strb	r3, [r7, #23]
	}
	return success;
 8001846:	7dfb      	ldrb	r3, [r7, #23]
}
 8001848:	4618      	mov	r0, r3
 800184a:	371c      	adds	r7, #28
 800184c:	46bd      	mov	sp, r7
 800184e:	bd90      	pop	{r4, r7, pc}
 8001850:	200000a8 	.word	0x200000a8

08001854 <add_can_frame_to_tx_queue>:
*	\param frame The frame to send
*
*	\return True if added to queue, false otherwise
*/
bool add_can_frame_to_tx_queue(canbus_frame_t frame)
{
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b087      	sub	sp, #28
 8001858:	af00      	add	r7, sp, #0
 800185a:	463c      	mov	r4, r7
 800185c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	bool success = false;
 8001860:	2300      	movs	r3, #0
 8001862:	75fb      	strb	r3, [r7, #23]
	if(canbus_tx_queue)
 8001864:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <add_can_frame_to_tx_queue+0x3c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00c      	beq.n	8001886 <add_can_frame_to_tx_queue+0x32>
	{
		success = (xQueueSend(canbus_tx_queue, &frame, 0) == pdTRUE);
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <add_can_frame_to_tx_queue+0x3c>)
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	4639      	mov	r1, r7
 8001872:	2300      	movs	r3, #0
 8001874:	2200      	movs	r2, #0
 8001876:	f006 fa35 	bl	8007ce4 <xQueueGenericSend>
 800187a:	4603      	mov	r3, r0
 800187c:	2b01      	cmp	r3, #1
 800187e:	bf0c      	ite	eq
 8001880:	2301      	moveq	r3, #1
 8001882:	2300      	movne	r3, #0
 8001884:	75fb      	strb	r3, [r7, #23]
	}
	return success;
 8001886:	7dfb      	ldrb	r3, [r7, #23]
}
 8001888:	4618      	mov	r0, r3
 800188a:	371c      	adds	r7, #28
 800188c:	46bd      	mov	sp, r7
 800188e:	bd90      	pop	{r4, r7, pc}
 8001890:	200000ac 	.word	0x200000ac

08001894 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4a07      	ldr	r2, [pc, #28]	; (80018c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80018a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	4a06      	ldr	r2, [pc, #24]	; (80018c4 <vApplicationGetIdleTaskMemory+0x30>)
 80018aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018b2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	200000dc 	.word	0x200000dc
 80018c4:	20000130 	.word	0x20000130

080018c8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4a07      	ldr	r2, [pc, #28]	; (80018f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80018d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	4a06      	ldr	r2, [pc, #24]	; (80018f8 <vApplicationGetTimerTaskMemory+0x30>)
 80018de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	20000530 	.word	0x20000530
 80018f8:	20000584 	.word	0x20000584

080018fc <enable_motor_task_from_isr>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void enable_motor_task_from_isr(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
	if(motor_taskHandle)
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <enable_motor_task_from_isr+0x40>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d013      	beq.n	8001932 <enable_motor_task_from_isr+0x36>
	{
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
		vTaskNotifyGiveFromISR( motor_taskHandle, &xHigherPriorityTaskWoken);
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <enable_motor_task_from_isr+0x40>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	1d3a      	adds	r2, r7, #4
 8001914:	4611      	mov	r1, r2
 8001916:	4618      	mov	r0, r3
 8001918:	f007 fd74 	bl	8009404 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d007      	beq.n	8001932 <enable_motor_task_from_isr+0x36>
 8001922:	4b07      	ldr	r3, [pc, #28]	; (8001940 <enable_motor_task_from_isr+0x44>)
 8001924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	f3bf 8f4f 	dsb	sy
 800192e:	f3bf 8f6f 	isb	sy
	}
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	2001577c 	.word	0x2001577c
 8001940:	e000ed04 	.word	0xe000ed04

08001944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001946:	b0af      	sub	sp, #188	; 0xbc
 8001948:	af20      	add	r7, sp, #128	; 0x80
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800194a:	f002 fb39 	bl	8003fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800194e:	f000 f865 	bl	8001a1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001952:	f000 fc67 	bl	8002224 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001956:	f000 f8cb 	bl	8001af0 <MX_ADC1_Init>
  MX_CAN1_Init();
 800195a:	f000 f96d 	bl	8001c38 <MX_CAN1_Init>
  MX_SPI2_Init();
 800195e:	f000 f9a1 	bl	8001ca4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001962:	f000 f9d5 	bl	8001d10 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001966:	f000 fa2b 	bl	8001dc0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800196a:	f000 fab5 	bl	8001ed8 <MX_TIM3_Init>
  MX_TIM13_Init();
 800196e:	f000 fbbd 	bl	80020ec <MX_TIM13_Init>
  MX_TIM14_Init();
 8001972:	f000 fc09 	bl	8002188 <MX_TIM14_Init>
  MX_ADC2_Init();
 8001976:	f000 f90d 	bl	8001b94 <MX_ADC2_Init>
  MX_TIM4_Init();
 800197a:	f000 fb01 	bl	8001f80 <MX_TIM4_Init>
  MX_TIM9_Init();
 800197e:	f000 fb73 	bl	8002068 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  adc_interface_init(hadc1, hadc2);
 8001982:	4e20      	ldr	r6, [pc, #128]	; (8001a04 <main+0xc0>)
 8001984:	4a20      	ldr	r2, [pc, #128]	; (8001a08 <main+0xc4>)
 8001986:	ab0e      	add	r3, sp, #56	; 0x38
 8001988:	4611      	mov	r1, r2
 800198a:	2248      	movs	r2, #72	; 0x48
 800198c:	4618      	mov	r0, r3
 800198e:	f00b facd 	bl	800cf2c <memcpy>
 8001992:	466d      	mov	r5, sp
 8001994:	f106 0410 	add.w	r4, r6, #16
 8001998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800199a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800199c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800199e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80019ac:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80019b0:	f008 fdbc 	bl	800a52c <adc_interface_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of canbus_task */
  osThreadDef(canbus_task, start_canbus_task, osPriorityNormal, 0, 1024);
 80019b4:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <main+0xc8>)
 80019b6:	f107 041c 	add.w	r4, r7, #28
 80019ba:	461d      	mov	r5, r3
 80019bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canbus_taskHandle = osThreadCreate(osThread(canbus_task), NULL);
 80019c8:	f107 031c 	add.w	r3, r7, #28
 80019cc:	2100      	movs	r1, #0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f005 ff4b 	bl	800786a <osThreadCreate>
 80019d4:	4602      	mov	r2, r0
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <main+0xcc>)
 80019d8:	601a      	str	r2, [r3, #0]

  /* definition and creation of motor_task */
  osThreadDef(motor_task, start_motor_task, osPriorityHigh, 0, 2048);
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <main+0xd0>)
 80019dc:	463c      	mov	r4, r7
 80019de:	461d      	mov	r5, r3
 80019e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motor_taskHandle = osThreadCreate(osThread(motor_task), NULL);
 80019ec:	463b      	mov	r3, r7
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f005 ff3a 	bl	800786a <osThreadCreate>
 80019f6:	4602      	mov	r2, r0
 80019f8:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <main+0xd4>)
 80019fa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80019fc:	f005 ff2e 	bl	800785c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <main+0xbc>
 8001a02:	bf00      	nop
 8001a04:	200157c4 	.word	0x200157c4
 8001a08:	20015734 	.word	0x20015734
 8001a0c:	0800dc9c 	.word	0x0800dc9c
 8001a10:	200157c0 	.word	0x200157c0
 8001a14:	0800dcc4 	.word	0x0800dcc4
 8001a18:	2001577c 	.word	0x2001577c

08001a1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b094      	sub	sp, #80	; 0x50
 8001a20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a22:	f107 0320 	add.w	r3, r7, #32
 8001a26:	2230      	movs	r2, #48	; 0x30
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f00b fa89 	bl	800cf42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a30:	f107 030c 	add.w	r3, r7, #12
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a40:	2300      	movs	r3, #0
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	4b28      	ldr	r3, [pc, #160]	; (8001ae8 <SystemClock_Config+0xcc>)
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	4a27      	ldr	r2, [pc, #156]	; (8001ae8 <SystemClock_Config+0xcc>)
 8001a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a50:	4b25      	ldr	r3, [pc, #148]	; (8001ae8 <SystemClock_Config+0xcc>)
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	4b22      	ldr	r3, [pc, #136]	; (8001aec <SystemClock_Config+0xd0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a21      	ldr	r2, [pc, #132]	; (8001aec <SystemClock_Config+0xd0>)
 8001a66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	4b1f      	ldr	r3, [pc, #124]	; (8001aec <SystemClock_Config+0xd0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a80:	2310      	movs	r3, #16
 8001a82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a84:	2302      	movs	r3, #2
 8001a86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a8c:	2308      	movs	r3, #8
 8001a8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a90:	23a8      	movs	r3, #168	; 0xa8
 8001a92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a94:	2302      	movs	r3, #2
 8001a96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a98:	2304      	movs	r3, #4
 8001a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a9c:	f107 0320 	add.w	r3, r7, #32
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f004 f91d 	bl	8005ce0 <HAL_RCC_OscConfig>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001aac:	f000 fcaa 	bl	8002404 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ab0:	230f      	movs	r3, #15
 8001ab2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001abc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ac0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ac2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	2105      	movs	r1, #5
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f004 fb76 	bl	80061c0 <HAL_RCC_ClockConfig>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001ada:	f000 fc93 	bl	8002404 <Error_Handler>
  }
}
 8001ade:	bf00      	nop
 8001ae0:	3750      	adds	r7, #80	; 0x50
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40007000 	.word	0x40007000

08001af0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001af6:	463b      	mov	r3, r7
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001b02:	4b21      	ldr	r3, [pc, #132]	; (8001b88 <MX_ADC1_Init+0x98>)
 8001b04:	4a21      	ldr	r2, [pc, #132]	; (8001b8c <MX_ADC1_Init+0x9c>)
 8001b06:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001b08:	4b1f      	ldr	r3, [pc, #124]	; (8001b88 <MX_ADC1_Init+0x98>)
 8001b0a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001b0e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b10:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <MX_ADC1_Init+0x98>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001b16:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <MX_ADC1_Init+0x98>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b1c:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <MX_ADC1_Init+0x98>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b22:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <MX_ADC1_Init+0x98>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b2a:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <MX_ADC1_Init+0x98>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b30:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <MX_ADC1_Init+0x98>)
 8001b32:	4a17      	ldr	r2, [pc, #92]	; (8001b90 <MX_ADC1_Init+0xa0>)
 8001b34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b36:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <MX_ADC1_Init+0x98>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <MX_ADC1_Init+0x98>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b42:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <MX_ADC1_Init+0x98>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001b4a:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <MX_ADC1_Init+0x98>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b50:	480d      	ldr	r0, [pc, #52]	; (8001b88 <MX_ADC1_Init+0x98>)
 8001b52:	f002 fa77 	bl	8004044 <HAL_ADC_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b5c:	f000 fc52 	bl	8002404 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001b60:	2304      	movs	r3, #4
 8001b62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b64:	2301      	movs	r3, #1
 8001b66:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b6c:	463b      	mov	r3, r7
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4805      	ldr	r0, [pc, #20]	; (8001b88 <MX_ADC1_Init+0x98>)
 8001b72:	f002 fd61 	bl	8004638 <HAL_ADC_ConfigChannel>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b7c:	f000 fc42 	bl	8002404 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b80:	bf00      	nop
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	200157c4 	.word	0x200157c4
 8001b8c:	40012000 	.word	0x40012000
 8001b90:	0f000001 	.word	0x0f000001

08001b94 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b9a:	463b      	mov	r3, r7
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8001ba6:	4b21      	ldr	r3, [pc, #132]	; (8001c2c <MX_ADC2_Init+0x98>)
 8001ba8:	4a21      	ldr	r2, [pc, #132]	; (8001c30 <MX_ADC2_Init+0x9c>)
 8001baa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001bac:	4b1f      	ldr	r3, [pc, #124]	; (8001c2c <MX_ADC2_Init+0x98>)
 8001bae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001bb2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001bb4:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <MX_ADC2_Init+0x98>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001bba:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <MX_ADC2_Init+0x98>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001bc0:	4b1a      	ldr	r3, [pc, #104]	; (8001c2c <MX_ADC2_Init+0x98>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001bc6:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <MX_ADC2_Init+0x98>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bce:	4b17      	ldr	r3, [pc, #92]	; (8001c2c <MX_ADC2_Init+0x98>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bd4:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <MX_ADC2_Init+0x98>)
 8001bd6:	4a17      	ldr	r2, [pc, #92]	; (8001c34 <MX_ADC2_Init+0xa0>)
 8001bd8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bda:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <MX_ADC2_Init+0x98>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001be0:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <MX_ADC2_Init+0x98>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001be6:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <MX_ADC2_Init+0x98>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001bee:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <MX_ADC2_Init+0x98>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001bf4:	480d      	ldr	r0, [pc, #52]	; (8001c2c <MX_ADC2_Init+0x98>)
 8001bf6:	f002 fa25 	bl	8004044 <HAL_ADC_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001c00:	f000 fc00 	bl	8002404 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001c04:	2305      	movs	r3, #5
 8001c06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c10:	463b      	mov	r3, r7
 8001c12:	4619      	mov	r1, r3
 8001c14:	4805      	ldr	r0, [pc, #20]	; (8001c2c <MX_ADC2_Init+0x98>)
 8001c16:	f002 fd0f 	bl	8004638 <HAL_ADC_ConfigChannel>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001c20:	f000 fbf0 	bl	8002404 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001c24:	bf00      	nop
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20015734 	.word	0x20015734
 8001c30:	40012100 	.word	0x40012100
 8001c34:	0f000001 	.word	0x0f000001

08001c38 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001c3c:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <MX_CAN1_Init+0x64>)
 8001c3e:	4a18      	ldr	r2, [pc, #96]	; (8001ca0 <MX_CAN1_Init+0x68>)
 8001c40:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8001c42:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <MX_CAN1_Init+0x64>)
 8001c44:	2202      	movs	r2, #2
 8001c46:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001c48:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <MX_CAN1_Init+0x64>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c4e:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <MX_CAN1_Init+0x64>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <MX_CAN1_Init+0x64>)
 8001c56:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8001c5a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_7TQ;
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <MX_CAN1_Init+0x64>)
 8001c5e:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8001c62:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001c64:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <MX_CAN1_Init+0x64>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001c6a:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <MX_CAN1_Init+0x64>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <MX_CAN1_Init+0x64>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <MX_CAN1_Init+0x64>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001c7c:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <MX_CAN1_Init+0x64>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <MX_CAN1_Init+0x64>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001c88:	4804      	ldr	r0, [pc, #16]	; (8001c9c <MX_CAN1_Init+0x64>)
 8001c8a:	f002 fefd 	bl	8004a88 <HAL_CAN_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001c94:	f000 fbb6 	bl	8002404 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	2001590c 	.word	0x2001590c
 8001ca0:	40006400 	.word	0x40006400

08001ca4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ca8:	4b17      	ldr	r3, [pc, #92]	; (8001d08 <MX_SPI2_Init+0x64>)
 8001caa:	4a18      	ldr	r2, [pc, #96]	; (8001d0c <MX_SPI2_Init+0x68>)
 8001cac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001cae:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <MX_SPI2_Init+0x64>)
 8001cb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cb4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001cb6:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <MX_SPI2_Init+0x64>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cbc:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <MX_SPI2_Init+0x64>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cc2:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <MX_SPI2_Init+0x64>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <MX_SPI2_Init+0x64>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001cce:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <MX_SPI2_Init+0x64>)
 8001cd0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001cd4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <MX_SPI2_Init+0x64>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cdc:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <MX_SPI2_Init+0x64>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <MX_SPI2_Init+0x64>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ce8:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <MX_SPI2_Init+0x64>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <MX_SPI2_Init+0x64>)
 8001cf0:	220a      	movs	r2, #10
 8001cf2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001cf4:	4804      	ldr	r0, [pc, #16]	; (8001d08 <MX_SPI2_Init+0x64>)
 8001cf6:	f004 fc4d 	bl	8006594 <HAL_SPI_Init>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001d00:	f000 fb80 	bl	8002404 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	2001569c 	.word	0x2001569c
 8001d0c:	40003800 	.word	0x40003800

08001d10 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08c      	sub	sp, #48	; 0x30
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d16:	f107 030c 	add.w	r3, r7, #12
 8001d1a:	2224      	movs	r2, #36	; 0x24
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f00b f90f 	bl	800cf42 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d2c:	4b22      	ldr	r3, [pc, #136]	; (8001db8 <MX_TIM1_Init+0xa8>)
 8001d2e:	4a23      	ldr	r2, [pc, #140]	; (8001dbc <MX_TIM1_Init+0xac>)
 8001d30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d32:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <MX_TIM1_Init+0xa8>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d38:	4b1f      	ldr	r3, [pc, #124]	; (8001db8 <MX_TIM1_Init+0xa8>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d3e:	4b1e      	ldr	r3, [pc, #120]	; (8001db8 <MX_TIM1_Init+0xa8>)
 8001d40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d46:	4b1c      	ldr	r3, [pc, #112]	; (8001db8 <MX_TIM1_Init+0xa8>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d4c:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <MX_TIM1_Init+0xa8>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d52:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <MX_TIM1_Init+0xa8>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d60:	2301      	movs	r3, #1
 8001d62:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d64:	2300      	movs	r3, #0
 8001d66:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d70:	2301      	movs	r3, #1
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d74:	2300      	movs	r3, #0
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001d7c:	f107 030c 	add.w	r3, r7, #12
 8001d80:	4619      	mov	r1, r3
 8001d82:	480d      	ldr	r0, [pc, #52]	; (8001db8 <MX_TIM1_Init+0xa8>)
 8001d84:	f004 fe37 	bl	80069f6 <HAL_TIM_Encoder_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001d8e:	f000 fb39 	bl	8002404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d92:	2300      	movs	r3, #0
 8001d94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001d96:	2380      	movs	r3, #128	; 0x80
 8001d98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4806      	ldr	r0, [pc, #24]	; (8001db8 <MX_TIM1_Init+0xa8>)
 8001da0:	f005 fcb4 	bl	800770c <HAL_TIMEx_MasterConfigSynchronization>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001daa:	f000 fb2b 	bl	8002404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001dae:	bf00      	nop
 8001db0:	3730      	adds	r7, #48	; 0x30
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	2001584c 	.word	0x2001584c
 8001dbc:	40010000 	.word	0x40010000

08001dc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08e      	sub	sp, #56	; 0x38
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd4:	f107 0320 	add.w	r3, r7, #32
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dde:	1d3b      	adds	r3, r7, #4
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
 8001dec:	615a      	str	r2, [r3, #20]
 8001dee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001df0:	4b38      	ldr	r3, [pc, #224]	; (8001ed4 <MX_TIM2_Init+0x114>)
 8001df2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001df6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001df8:	4b36      	ldr	r3, [pc, #216]	; (8001ed4 <MX_TIM2_Init+0x114>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfe:	4b35      	ldr	r3, [pc, #212]	; (8001ed4 <MX_TIM2_Init+0x114>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001e04:	4b33      	ldr	r3, [pc, #204]	; (8001ed4 <MX_TIM2_Init+0x114>)
 8001e06:	f242 7210 	movw	r2, #10000	; 0x2710
 8001e0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0c:	4b31      	ldr	r3, [pc, #196]	; (8001ed4 <MX_TIM2_Init+0x114>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e12:	4b30      	ldr	r3, [pc, #192]	; (8001ed4 <MX_TIM2_Init+0x114>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e18:	482e      	ldr	r0, [pc, #184]	; (8001ed4 <MX_TIM2_Init+0x114>)
 8001e1a:	f004 fd3d 	bl	8006898 <HAL_TIM_Base_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001e24:	f000 faee 	bl	8002404 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e32:	4619      	mov	r1, r3
 8001e34:	4827      	ldr	r0, [pc, #156]	; (8001ed4 <MX_TIM2_Init+0x114>)
 8001e36:	f005 f89f 	bl	8006f78 <HAL_TIM_ConfigClockSource>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001e40:	f000 fae0 	bl	8002404 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e44:	4823      	ldr	r0, [pc, #140]	; (8001ed4 <MX_TIM2_Init+0x114>)
 8001e46:	f004 fda1 	bl	800698c <HAL_TIM_PWM_Init>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001e50:	f000 fad8 	bl	8002404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e54:	2300      	movs	r3, #0
 8001e56:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e5c:	f107 0320 	add.w	r3, r7, #32
 8001e60:	4619      	mov	r1, r3
 8001e62:	481c      	ldr	r0, [pc, #112]	; (8001ed4 <MX_TIM2_Init+0x114>)
 8001e64:	f005 fc52 	bl	800770c <HAL_TIMEx_MasterConfigSynchronization>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001e6e:	f000 fac9 	bl	8002404 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e72:	2360      	movs	r3, #96	; 0x60
 8001e74:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e82:	1d3b      	adds	r3, r7, #4
 8001e84:	2204      	movs	r2, #4
 8001e86:	4619      	mov	r1, r3
 8001e88:	4812      	ldr	r0, [pc, #72]	; (8001ed4 <MX_TIM2_Init+0x114>)
 8001e8a:	f004 ffaf 	bl	8006dec <HAL_TIM_PWM_ConfigChannel>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001e94:	f000 fab6 	bl	8002404 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e98:	1d3b      	adds	r3, r7, #4
 8001e9a:	2208      	movs	r2, #8
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	480d      	ldr	r0, [pc, #52]	; (8001ed4 <MX_TIM2_Init+0x114>)
 8001ea0:	f004 ffa4 	bl	8006dec <HAL_TIM_PWM_ConfigChannel>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001eaa:	f000 faab 	bl	8002404 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001eae:	1d3b      	adds	r3, r7, #4
 8001eb0:	220c      	movs	r2, #12
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4807      	ldr	r0, [pc, #28]	; (8001ed4 <MX_TIM2_Init+0x114>)
 8001eb6:	f004 ff99 	bl	8006dec <HAL_TIM_PWM_ConfigChannel>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001ec0:	f000 faa0 	bl	8002404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ec4:	4803      	ldr	r0, [pc, #12]	; (8001ed4 <MX_TIM2_Init+0x114>)
 8001ec6:	f001 fee3 	bl	8003c90 <HAL_TIM_MspPostInit>

}
 8001eca:	bf00      	nop
 8001ecc:	3738      	adds	r7, #56	; 0x38
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	200158cc 	.word	0x200158cc

08001ed8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08c      	sub	sp, #48	; 0x30
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ede:	f107 030c 	add.w	r3, r7, #12
 8001ee2:	2224      	movs	r2, #36	; 0x24
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f00b f82b 	bl	800cf42 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eec:	1d3b      	adds	r3, r7, #4
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ef4:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <MX_TIM3_Init+0xa0>)
 8001ef6:	4a21      	ldr	r2, [pc, #132]	; (8001f7c <MX_TIM3_Init+0xa4>)
 8001ef8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001efa:	4b1f      	ldr	r3, [pc, #124]	; (8001f78 <MX_TIM3_Init+0xa0>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f00:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <MX_TIM3_Init+0xa0>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f06:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <MX_TIM3_Init+0xa0>)
 8001f08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f0e:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <MX_TIM3_Init+0xa0>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f14:	4b18      	ldr	r3, [pc, #96]	; (8001f78 <MX_TIM3_Init+0xa0>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f22:	2301      	movs	r3, #1
 8001f24:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f32:	2301      	movs	r3, #1
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f36:	2300      	movs	r3, #0
 8001f38:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001f3e:	f107 030c 	add.w	r3, r7, #12
 8001f42:	4619      	mov	r1, r3
 8001f44:	480c      	ldr	r0, [pc, #48]	; (8001f78 <MX_TIM3_Init+0xa0>)
 8001f46:	f004 fd56 	bl	80069f6 <HAL_TIM_Encoder_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001f50:	f000 fa58 	bl	8002404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f54:	2300      	movs	r3, #0
 8001f56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f5c:	1d3b      	adds	r3, r7, #4
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4805      	ldr	r0, [pc, #20]	; (8001f78 <MX_TIM3_Init+0xa0>)
 8001f62:	f005 fbd3 	bl	800770c <HAL_TIMEx_MasterConfigSynchronization>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001f6c:	f000 fa4a 	bl	8002404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f70:	bf00      	nop
 8001f72:	3730      	adds	r7, #48	; 0x30
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20015780 	.word	0x20015780
 8001f7c:	40000400 	.word	0x40000400

08001f80 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08e      	sub	sp, #56	; 0x38
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	609a      	str	r2, [r3, #8]
 8001f92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f94:	f107 0320 	add.w	r3, r7, #32
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
 8001fac:	615a      	str	r2, [r3, #20]
 8001fae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fb0:	4b2b      	ldr	r3, [pc, #172]	; (8002060 <MX_TIM4_Init+0xe0>)
 8001fb2:	4a2c      	ldr	r2, [pc, #176]	; (8002064 <MX_TIM4_Init+0xe4>)
 8001fb4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42-1;
 8001fb6:	4b2a      	ldr	r3, [pc, #168]	; (8002060 <MX_TIM4_Init+0xe0>)
 8001fb8:	2229      	movs	r2, #41	; 0x29
 8001fba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fbc:	4b28      	ldr	r3, [pc, #160]	; (8002060 <MX_TIM4_Init+0xe0>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500;
 8001fc2:	4b27      	ldr	r3, [pc, #156]	; (8002060 <MX_TIM4_Init+0xe0>)
 8001fc4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001fc8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fca:	4b25      	ldr	r3, [pc, #148]	; (8002060 <MX_TIM4_Init+0xe0>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fd0:	4b23      	ldr	r3, [pc, #140]	; (8002060 <MX_TIM4_Init+0xe0>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001fd6:	4822      	ldr	r0, [pc, #136]	; (8002060 <MX_TIM4_Init+0xe0>)
 8001fd8:	f004 fc5e 	bl	8006898 <HAL_TIM_Base_Init>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001fe2:	f000 fa0f 	bl	8002404 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001fec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	481b      	ldr	r0, [pc, #108]	; (8002060 <MX_TIM4_Init+0xe0>)
 8001ff4:	f004 ffc0 	bl	8006f78 <HAL_TIM_ConfigClockSource>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001ffe:	f000 fa01 	bl	8002404 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8002002:	4817      	ldr	r0, [pc, #92]	; (8002060 <MX_TIM4_Init+0xe0>)
 8002004:	f004 fc97 	bl	8006936 <HAL_TIM_OC_Init>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800200e:	f000 f9f9 	bl	8002404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002012:	2300      	movs	r3, #0
 8002014:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002016:	2300      	movs	r3, #0
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800201a:	f107 0320 	add.w	r3, r7, #32
 800201e:	4619      	mov	r1, r3
 8002020:	480f      	ldr	r0, [pc, #60]	; (8002060 <MX_TIM4_Init+0xe0>)
 8002022:	f005 fb73 	bl	800770c <HAL_TIMEx_MasterConfigSynchronization>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800202c:	f000 f9ea 	bl	8002404 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002030:	2300      	movs	r3, #0
 8002032:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002038:	2300      	movs	r3, #0
 800203a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	2200      	movs	r2, #0
 8002044:	4619      	mov	r1, r3
 8002046:	4806      	ldr	r0, [pc, #24]	; (8002060 <MX_TIM4_Init+0xe0>)
 8002048:	f004 fe70 	bl	8006d2c <HAL_TIM_OC_ConfigChannel>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002052:	f000 f9d7 	bl	8002404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002056:	bf00      	nop
 8002058:	3738      	adds	r7, #56	; 0x38
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	200156f4 	.word	0x200156f4
 8002064:	40000800 	.word	0x40000800

08002068 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800206e:	1d3b      	adds	r3, r7, #4
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
 800207c:	615a      	str	r2, [r3, #20]
 800207e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002080:	4b18      	ldr	r3, [pc, #96]	; (80020e4 <MX_TIM9_Init+0x7c>)
 8002082:	4a19      	ldr	r2, [pc, #100]	; (80020e8 <MX_TIM9_Init+0x80>)
 8002084:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 168-1;
 8002086:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <MX_TIM9_Init+0x7c>)
 8002088:	22a7      	movs	r2, #167	; 0xa7
 800208a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800208c:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <MX_TIM9_Init+0x7c>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 50;
 8002092:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <MX_TIM9_Init+0x7c>)
 8002094:	2232      	movs	r2, #50	; 0x32
 8002096:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002098:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <MX_TIM9_Init+0x7c>)
 800209a:	2200      	movs	r2, #0
 800209c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800209e:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <MX_TIM9_Init+0x7c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 80020a4:	480f      	ldr	r0, [pc, #60]	; (80020e4 <MX_TIM9_Init+0x7c>)
 80020a6:	f004 fc46 	bl	8006936 <HAL_TIM_OC_Init>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_TIM9_Init+0x4c>
  {
    Error_Handler();
 80020b0:	f000 f9a8 	bl	8002404 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80020b4:	2300      	movs	r3, #0
 80020b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020c4:	1d3b      	adds	r3, r7, #4
 80020c6:	2200      	movs	r2, #0
 80020c8:	4619      	mov	r1, r3
 80020ca:	4806      	ldr	r0, [pc, #24]	; (80020e4 <MX_TIM9_Init+0x7c>)
 80020cc:	f004 fe2e 	bl	8006d2c <HAL_TIM_OC_ConfigChannel>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_TIM9_Init+0x72>
  {
    Error_Handler();
 80020d6:	f000 f995 	bl	8002404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80020da:	bf00      	nop
 80020dc:	3720      	adds	r7, #32
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	2001588c 	.word	0x2001588c
 80020e8:	40014000 	.word	0x40014000

080020ec <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
 8002100:	615a      	str	r2, [r3, #20]
 8002102:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002104:	4b1e      	ldr	r3, [pc, #120]	; (8002180 <MX_TIM13_Init+0x94>)
 8002106:	4a1f      	ldr	r2, [pc, #124]	; (8002184 <MX_TIM13_Init+0x98>)
 8002108:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800210a:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <MX_TIM13_Init+0x94>)
 800210c:	2200      	movs	r2, #0
 800210e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002110:	4b1b      	ldr	r3, [pc, #108]	; (8002180 <MX_TIM13_Init+0x94>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10000;
 8002116:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <MX_TIM13_Init+0x94>)
 8002118:	f242 7210 	movw	r2, #10000	; 0x2710
 800211c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800211e:	4b18      	ldr	r3, [pc, #96]	; (8002180 <MX_TIM13_Init+0x94>)
 8002120:	2200      	movs	r2, #0
 8002122:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002124:	4b16      	ldr	r3, [pc, #88]	; (8002180 <MX_TIM13_Init+0x94>)
 8002126:	2200      	movs	r2, #0
 8002128:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800212a:	4815      	ldr	r0, [pc, #84]	; (8002180 <MX_TIM13_Init+0x94>)
 800212c:	f004 fbb4 	bl	8006898 <HAL_TIM_Base_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002136:	f000 f965 	bl	8002404 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800213a:	4811      	ldr	r0, [pc, #68]	; (8002180 <MX_TIM13_Init+0x94>)
 800213c:	f004 fc26 	bl	800698c <HAL_TIM_PWM_Init>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002146:	f000 f95d 	bl	8002404 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800214a:	2360      	movs	r3, #96	; 0x60
 800214c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800215a:	1d3b      	adds	r3, r7, #4
 800215c:	2200      	movs	r2, #0
 800215e:	4619      	mov	r1, r3
 8002160:	4807      	ldr	r0, [pc, #28]	; (8002180 <MX_TIM13_Init+0x94>)
 8002162:	f004 fe43 	bl	8006dec <HAL_TIM_PWM_ConfigChannel>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 800216c:	f000 f94a 	bl	8002404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002170:	4803      	ldr	r0, [pc, #12]	; (8002180 <MX_TIM13_Init+0x94>)
 8002172:	f001 fd8d 	bl	8003c90 <HAL_TIM_MspPostInit>

}
 8002176:	bf00      	nop
 8002178:	3720      	adds	r7, #32
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	2001580c 	.word	0x2001580c
 8002184:	40001c00 	.word	0x40001c00

08002188 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800218e:	1d3b      	adds	r3, r7, #4
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]
 800219c:	615a      	str	r2, [r3, #20]
 800219e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80021a0:	4b1e      	ldr	r3, [pc, #120]	; (800221c <MX_TIM14_Init+0x94>)
 80021a2:	4a1f      	ldr	r2, [pc, #124]	; (8002220 <MX_TIM14_Init+0x98>)
 80021a4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80021a6:	4b1d      	ldr	r3, [pc, #116]	; (800221c <MX_TIM14_Init+0x94>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ac:	4b1b      	ldr	r3, [pc, #108]	; (800221c <MX_TIM14_Init+0x94>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000;
 80021b2:	4b1a      	ldr	r3, [pc, #104]	; (800221c <MX_TIM14_Init+0x94>)
 80021b4:	f242 7210 	movw	r2, #10000	; 0x2710
 80021b8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ba:	4b18      	ldr	r3, [pc, #96]	; (800221c <MX_TIM14_Init+0x94>)
 80021bc:	2200      	movs	r2, #0
 80021be:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c0:	4b16      	ldr	r3, [pc, #88]	; (800221c <MX_TIM14_Init+0x94>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80021c6:	4815      	ldr	r0, [pc, #84]	; (800221c <MX_TIM14_Init+0x94>)
 80021c8:	f004 fb66 	bl	8006898 <HAL_TIM_Base_Init>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80021d2:	f000 f917 	bl	8002404 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80021d6:	4811      	ldr	r0, [pc, #68]	; (800221c <MX_TIM14_Init+0x94>)
 80021d8:	f004 fbd8 	bl	800698c <HAL_TIM_PWM_Init>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80021e2:	f000 f90f 	bl	8002404 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021e6:	2360      	movs	r3, #96	; 0x60
 80021e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021f2:	2300      	movs	r3, #0
 80021f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021f6:	1d3b      	adds	r3, r7, #4
 80021f8:	2200      	movs	r2, #0
 80021fa:	4619      	mov	r1, r3
 80021fc:	4807      	ldr	r0, [pc, #28]	; (800221c <MX_TIM14_Init+0x94>)
 80021fe:	f004 fdf5 	bl	8006dec <HAL_TIM_PWM_ConfigChannel>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8002208:	f000 f8fc 	bl	8002404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 800220c:	4803      	ldr	r0, [pc, #12]	; (800221c <MX_TIM14_Init+0x94>)
 800220e:	f001 fd3f 	bl	8003c90 <HAL_TIM_MspPostInit>

}
 8002212:	bf00      	nop
 8002214:	3720      	adds	r7, #32
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20015934 	.word	0x20015934
 8002220:	40002000 	.word	0x40002000

08002224 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08a      	sub	sp, #40	; 0x28
 8002228:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222a:	f107 0314 	add.w	r3, r7, #20
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	605a      	str	r2, [r3, #4]
 8002234:	609a      	str	r2, [r3, #8]
 8002236:	60da      	str	r2, [r3, #12]
 8002238:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	4b4a      	ldr	r3, [pc, #296]	; (8002368 <MX_GPIO_Init+0x144>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	4a49      	ldr	r2, [pc, #292]	; (8002368 <MX_GPIO_Init+0x144>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6313      	str	r3, [r2, #48]	; 0x30
 800224a:	4b47      	ldr	r3, [pc, #284]	; (8002368 <MX_GPIO_Init+0x144>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	4b43      	ldr	r3, [pc, #268]	; (8002368 <MX_GPIO_Init+0x144>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4a42      	ldr	r2, [pc, #264]	; (8002368 <MX_GPIO_Init+0x144>)
 8002260:	f043 0310 	orr.w	r3, r3, #16
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4b40      	ldr	r3, [pc, #256]	; (8002368 <MX_GPIO_Init+0x144>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f003 0310 	and.w	r3, r3, #16
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	4b3c      	ldr	r3, [pc, #240]	; (8002368 <MX_GPIO_Init+0x144>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4a3b      	ldr	r2, [pc, #236]	; (8002368 <MX_GPIO_Init+0x144>)
 800227c:	f043 0302 	orr.w	r3, r3, #2
 8002280:	6313      	str	r3, [r2, #48]	; 0x30
 8002282:	4b39      	ldr	r3, [pc, #228]	; (8002368 <MX_GPIO_Init+0x144>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	607b      	str	r3, [r7, #4]
 8002292:	4b35      	ldr	r3, [pc, #212]	; (8002368 <MX_GPIO_Init+0x144>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a34      	ldr	r2, [pc, #208]	; (8002368 <MX_GPIO_Init+0x144>)
 8002298:	f043 0308 	orr.w	r3, r3, #8
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b32      	ldr	r3, [pc, #200]	; (8002368 <MX_GPIO_Init+0x144>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	607b      	str	r3, [r7, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	603b      	str	r3, [r7, #0]
 80022ae:	4b2e      	ldr	r3, [pc, #184]	; (8002368 <MX_GPIO_Init+0x144>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a2d      	ldr	r2, [pc, #180]	; (8002368 <MX_GPIO_Init+0x144>)
 80022b4:	f043 0304 	orr.w	r3, r3, #4
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <MX_GPIO_Init+0x144>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	603b      	str	r3, [r7, #0]
 80022c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80022c6:	2200      	movs	r2, #0
 80022c8:	2101      	movs	r1, #1
 80022ca:	4828      	ldr	r0, [pc, #160]	; (800236c <MX_GPIO_Init+0x148>)
 80022cc:	f003 fcee 	bl	8005cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_RS_GPIO_Port, CAN_RS_Pin, GPIO_PIN_RESET);
 80022d0:	2200      	movs	r2, #0
 80022d2:	2104      	movs	r1, #4
 80022d4:	4826      	ldr	r0, [pc, #152]	; (8002370 <MX_GPIO_Init+0x14c>)
 80022d6:	f003 fce9 	bl	8005cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80022da:	2301      	movs	r3, #1
 80022dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022de:	2301      	movs	r3, #1
 80022e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022e6:	2302      	movs	r3, #2
 80022e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80022ea:	f107 0314 	add.w	r3, r7, #20
 80022ee:	4619      	mov	r1, r3
 80022f0:	481e      	ldr	r0, [pc, #120]	; (800236c <MX_GPIO_Init+0x148>)
 80022f2:	f003 fb29 	bl	8005948 <HAL_GPIO_Init>

  /*Configure GPIO pin : FL1_Pin */
  GPIO_InitStruct.Pin = FL1_Pin;
 80022f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002300:	2301      	movs	r3, #1
 8002302:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FL1_GPIO_Port, &GPIO_InitStruct);
 8002304:	f107 0314 	add.w	r3, r7, #20
 8002308:	4619      	mov	r1, r3
 800230a:	481a      	ldr	r0, [pc, #104]	; (8002374 <MX_GPIO_Init+0x150>)
 800230c:	f003 fb1c 	bl	8005948 <HAL_GPIO_Init>

  /*Configure GPIO pin : INDEX3_Pin */
  GPIO_InitStruct.Pin = INDEX3_Pin;
 8002310:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002316:	2300      	movs	r3, #0
 8002318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800231a:	2301      	movs	r3, #1
 800231c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INDEX3_GPIO_Port, &GPIO_InitStruct);
 800231e:	f107 0314 	add.w	r3, r7, #20
 8002322:	4619      	mov	r1, r3
 8002324:	4812      	ldr	r0, [pc, #72]	; (8002370 <MX_GPIO_Init+0x14c>)
 8002326:	f003 fb0f 	bl	8005948 <HAL_GPIO_Init>

  /*Configure GPIO pins : INDEX2_Pin INDEX1_Pin */
  GPIO_InitStruct.Pin = INDEX2_Pin|INDEX1_Pin;
 800232a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800232e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002330:	2300      	movs	r3, #0
 8002332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002334:	2301      	movs	r3, #1
 8002336:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	4619      	mov	r1, r3
 800233e:	480e      	ldr	r0, [pc, #56]	; (8002378 <MX_GPIO_Init+0x154>)
 8002340:	f003 fb02 	bl	8005948 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_RS_Pin */
  GPIO_InitStruct.Pin = CAN_RS_Pin;
 8002344:	2304      	movs	r3, #4
 8002346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002348:	2301      	movs	r3, #1
 800234a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002350:	2300      	movs	r3, #0
 8002352:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_RS_GPIO_Port, &GPIO_InitStruct);
 8002354:	f107 0314 	add.w	r3, r7, #20
 8002358:	4619      	mov	r1, r3
 800235a:	4805      	ldr	r0, [pc, #20]	; (8002370 <MX_GPIO_Init+0x14c>)
 800235c:	f003 faf4 	bl	8005948 <HAL_GPIO_Init>

}
 8002360:	bf00      	nop
 8002362:	3728      	adds	r7, #40	; 0x28
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40023800 	.word	0x40023800
 800236c:	40020000 	.word	0x40020000
 8002370:	40020c00 	.word	0x40020c00
 8002374:	40021000 	.word	0x40021000
 8002378:	40020800 	.word	0x40020800

0800237c <start_canbus_task>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_start_canbus_task */
void start_canbus_task(void const * argument)
{
 800237c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800237e:	b089      	sub	sp, #36	; 0x24
 8002380:	af06      	add	r7, sp, #24
 8002382:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  canbus_task_init(hcan1);
 8002384:	4e08      	ldr	r6, [pc, #32]	; (80023a8 <start_canbus_task+0x2c>)
 8002386:	466d      	mov	r5, sp
 8002388:	f106 0410 	add.w	r4, r6, #16
 800238c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800238e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002390:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002394:	e885 0003 	stmia.w	r5, {r0, r1}
 8002398:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800239c:	f7fe fd98 	bl	8000ed0 <canbus_task_init>
  for(;;)
  {
	  canbus_task();
 80023a0:	f7fe fe3e 	bl	8001020 <canbus_task>
 80023a4:	e7fc      	b.n	80023a0 <start_canbus_task+0x24>
 80023a6:	bf00      	nop
 80023a8:	2001590c 	.word	0x2001590c

080023ac <start_motor_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_motor_task */
void start_motor_task(void const * argument)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_motor_task */
  motor_task_init();
 80023b4:	f000 fcf8 	bl	8002da8 <motor_task_init>
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80023b8:	2201      	movs	r2, #1
 80023ba:	2101      	movs	r1, #1
 80023bc:	4807      	ldr	r0, [pc, #28]	; (80023dc <start_motor_task+0x30>)
 80023be:	f003 fc75 	bl	8005cac <HAL_GPIO_WritePin>
	  motor_task();
 80023c2:	f000 fef7 	bl	80031b4 <motor_task>
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80023c6:	2200      	movs	r2, #0
 80023c8:	2101      	movs	r1, #1
 80023ca:	4804      	ldr	r0, [pc, #16]	; (80023dc <start_motor_task+0x30>)
 80023cc:	f003 fc6e 	bl	8005cac <HAL_GPIO_WritePin>
	  ulTaskNotifyTake( pdTRUE, portMAX_DELAY);
 80023d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023d4:	2001      	movs	r0, #1
 80023d6:	f006 ffcd 	bl	8009374 <ulTaskNotifyTake>
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80023da:	e7ed      	b.n	80023b8 <start_motor_task+0xc>
 80023dc:	40020000 	.word	0x40020000

080023e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a04      	ldr	r2, [pc, #16]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d101      	bne.n	80023f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80023f2:	f001 fe07 	bl	8004004 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40010400 	.word	0x40010400

08002404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
	...

08002414 <drive_motor>:

 static impedance_control_params_t ic_params; // TODO different per motor?
 static leg_ik_t leg;

 static void drive_motor(uint8_t index, float cmd)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	ed87 0a00 	vstr	s0, [r7]
 8002420:	71fb      	strb	r3, [r7, #7]
	 motors[index].duty = (cmd / PWM_PERIOD);
 8002422:	79fa      	ldrb	r2, [r7, #7]
 8002424:	ed97 7a00 	vldr	s14, [r7]
 8002428:	eddf 6a66 	vldr	s13, [pc, #408]	; 80025c4 <drive_motor+0x1b0>
 800242c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002430:	4965      	ldr	r1, [pc, #404]	; (80025c8 <drive_motor+0x1b4>)
 8002432:	4613      	mov	r3, r2
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	4413      	add	r3, r2
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	440b      	add	r3, r1
 800243c:	330c      	adds	r3, #12
 800243e:	edc3 7a00 	vstr	s15, [r3]
	 if(index == 0)
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d15e      	bne.n	8002506 <drive_motor+0xf2>
	 {
		 // IN1 and IN2, TIM2_CH3/4
	 	 if(cmd > 0)
 8002448:	edd7 7a00 	vldr	s15, [r7]
 800244c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002454:	dd29      	ble.n	80024aa <drive_motor+0x96>
	 	 {
	 		if(motors[index].reverse_direction)
 8002456:	79fa      	ldrb	r2, [r7, #7]
 8002458:	495b      	ldr	r1, [pc, #364]	; (80025c8 <drive_motor+0x1b4>)
 800245a:	4613      	mov	r3, r2
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	4413      	add	r3, r2
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	440b      	add	r3, r1
 8002464:	332c      	adds	r3, #44	; 0x2c
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00e      	beq.n	800248c <drive_motor+0x78>
	 		{
	 			TIM2->CCR4 = 0;
 800246e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002472:	2200      	movs	r2, #0
 8002474:	641a      	str	r2, [r3, #64]	; 0x40
	 			TIM2->CCR3 = (uint16_t) cmd;
 8002476:	edd7 7a00 	vldr	s15, [r7]
 800247a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800247e:	ee17 3a90 	vmov	r3, s15
 8002482:	b29a      	uxth	r2, r3
 8002484:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002488:	63da      	str	r2, [r3, #60]	; 0x3c
		 	 	TIM13->CCR1 = (uint16_t) -cmd;
		 	 	TIM14->CCR1 = 0;
		 	 }
		 }
	 }
}
 800248a:	e095      	b.n	80025b8 <drive_motor+0x1a4>
	 			TIM2->CCR4 = (uint16_t) cmd;
 800248c:	edd7 7a00 	vldr	s15, [r7]
 8002490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002494:	ee17 3a90 	vmov	r3, s15
 8002498:	b29a      	uxth	r2, r3
 800249a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800249e:	641a      	str	r2, [r3, #64]	; 0x40
	 			TIM2->CCR3 = 0;
 80024a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024a4:	2200      	movs	r2, #0
 80024a6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80024a8:	e086      	b.n	80025b8 <drive_motor+0x1a4>
	 		 if(motors[index].reverse_direction)
 80024aa:	79fa      	ldrb	r2, [r7, #7]
 80024ac:	4946      	ldr	r1, [pc, #280]	; (80025c8 <drive_motor+0x1b4>)
 80024ae:	4613      	mov	r3, r2
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	4413      	add	r3, r2
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	440b      	add	r3, r1
 80024b8:	332c      	adds	r3, #44	; 0x2c
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d010      	beq.n	80024e4 <drive_motor+0xd0>
	 		 	TIM2->CCR3 = 0;
 80024c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024c6:	2200      	movs	r2, #0
 80024c8:	63da      	str	r2, [r3, #60]	; 0x3c
	 		 	TIM2->CCR4 = (uint16_t) -cmd;
 80024ca:	edd7 7a00 	vldr	s15, [r7]
 80024ce:	eef1 7a67 	vneg.f32	s15, s15
 80024d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024d6:	ee17 3a90 	vmov	r3, s15
 80024da:	b29a      	uxth	r2, r3
 80024dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024e0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80024e2:	e069      	b.n	80025b8 <drive_motor+0x1a4>
	 		 	TIM2->CCR3 = (uint16_t) -cmd;
 80024e4:	edd7 7a00 	vldr	s15, [r7]
 80024e8:	eef1 7a67 	vneg.f32	s15, s15
 80024ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024f0:	ee17 3a90 	vmov	r3, s15
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024fa:	63da      	str	r2, [r3, #60]	; 0x3c
	 		 	TIM2->CCR4 = 0;
 80024fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002500:	2200      	movs	r2, #0
 8002502:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002504:	e058      	b.n	80025b8 <drive_motor+0x1a4>
	 else if(index == 1)
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d155      	bne.n	80025b8 <drive_motor+0x1a4>
		 if(cmd > 0)
 800250c:	edd7 7a00 	vldr	s15, [r7]
 8002510:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002518:	dd25      	ble.n	8002566 <drive_motor+0x152>
			 if(motors[index].reverse_direction)
 800251a:	79fa      	ldrb	r2, [r7, #7]
 800251c:	492a      	ldr	r1, [pc, #168]	; (80025c8 <drive_motor+0x1b4>)
 800251e:	4613      	mov	r3, r2
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	4413      	add	r3, r2
 8002524:	011b      	lsls	r3, r3, #4
 8002526:	440b      	add	r3, r1
 8002528:	332c      	adds	r3, #44	; 0x2c
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00c      	beq.n	800254c <drive_motor+0x138>
		 		TIM14->CCR1 = 0;
 8002532:	4b26      	ldr	r3, [pc, #152]	; (80025cc <drive_motor+0x1b8>)
 8002534:	2200      	movs	r2, #0
 8002536:	635a      	str	r2, [r3, #52]	; 0x34
		 		TIM13->CCR1 = (uint16_t) cmd;
 8002538:	edd7 7a00 	vldr	s15, [r7]
 800253c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002540:	ee17 3a90 	vmov	r3, s15
 8002544:	b29a      	uxth	r2, r3
 8002546:	4b22      	ldr	r3, [pc, #136]	; (80025d0 <drive_motor+0x1bc>)
 8002548:	635a      	str	r2, [r3, #52]	; 0x34
}
 800254a:	e035      	b.n	80025b8 <drive_motor+0x1a4>
		 		TIM14->CCR1 = (uint16_t) cmd;
 800254c:	edd7 7a00 	vldr	s15, [r7]
 8002550:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002554:	ee17 3a90 	vmov	r3, s15
 8002558:	b29a      	uxth	r2, r3
 800255a:	4b1c      	ldr	r3, [pc, #112]	; (80025cc <drive_motor+0x1b8>)
 800255c:	635a      	str	r2, [r3, #52]	; 0x34
		 		TIM13->CCR1 = 0;
 800255e:	4b1c      	ldr	r3, [pc, #112]	; (80025d0 <drive_motor+0x1bc>)
 8002560:	2200      	movs	r2, #0
 8002562:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002564:	e028      	b.n	80025b8 <drive_motor+0x1a4>
		 	 if(motors[index].reverse_direction)
 8002566:	79fa      	ldrb	r2, [r7, #7]
 8002568:	4917      	ldr	r1, [pc, #92]	; (80025c8 <drive_motor+0x1b4>)
 800256a:	4613      	mov	r3, r2
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	4413      	add	r3, r2
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	440b      	add	r3, r1
 8002574:	332c      	adds	r3, #44	; 0x2c
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00e      	beq.n	800259c <drive_motor+0x188>
		 	 	TIM13->CCR1 = 0;
 800257e:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <drive_motor+0x1bc>)
 8002580:	2200      	movs	r2, #0
 8002582:	635a      	str	r2, [r3, #52]	; 0x34
		 	 	TIM14->CCR1 = (uint16_t) -cmd;
 8002584:	edd7 7a00 	vldr	s15, [r7]
 8002588:	eef1 7a67 	vneg.f32	s15, s15
 800258c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002590:	ee17 3a90 	vmov	r3, s15
 8002594:	b29a      	uxth	r2, r3
 8002596:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <drive_motor+0x1b8>)
 8002598:	635a      	str	r2, [r3, #52]	; 0x34
}
 800259a:	e00d      	b.n	80025b8 <drive_motor+0x1a4>
		 	 	TIM13->CCR1 = (uint16_t) -cmd;
 800259c:	edd7 7a00 	vldr	s15, [r7]
 80025a0:	eef1 7a67 	vneg.f32	s15, s15
 80025a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025a8:	ee17 3a90 	vmov	r3, s15
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <drive_motor+0x1bc>)
 80025b0:	635a      	str	r2, [r3, #52]	; 0x34
		 	 	TIM14->CCR1 = 0;
 80025b2:	4b06      	ldr	r3, [pc, #24]	; (80025cc <drive_motor+0x1b8>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	461c4000 	.word	0x461c4000
 80025c8:	20000d8c 	.word	0x20000d8c
 80025cc:	40002000 	.word	0x40002000
 80025d0:	40001c00 	.word	0x40001c00

080025d4 <vMotorTelemetryTimerCallback>:

 static void vMotorTelemetryTimerCallback( TimerHandle_t xTimer )
  {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08c      	sub	sp, #48	; 0x30
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 	 canbus_frame_t frame;
 	 can_message_id_t id_helper;

 	 id_helper.can_msg_type = CAN_MSG_TYPE_INFO;
 80025dc:	2301      	movs	r3, #1
 80025de:	613b      	str	r3, [r7, #16]
 	 id_helper.can_class = CAN_MSG_CLASS_INFO_TELEMETRY;
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
 	 id_helper.can_device = get_device_index();
 80025e4:	f7ff f90a 	bl	80017fc <get_device_index>
 80025e8:	4603      	mov	r3, r0
 80025ea:	61fb      	str	r3, [r7, #28]


 	id_helper.can_index = CAN_MSG_INDEX_INFO_POSITION;
 80025ec:	2300      	movs	r3, #0
 80025ee:	61bb      	str	r3, [r7, #24]
 	pack_can_message(&id_helper);
 80025f0:	f107 030c 	add.w	r3, r7, #12
 80025f4:	4618      	mov	r0, r3
 80025f6:	f008 f8de 	bl	800a7b6 <pack_can_message>

 	frame.id = id_helper.raw_id;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	623b      	str	r3, [r7, #32]
 	frame.length = 8;
 80025fe:	2308      	movs	r3, #8
 8002600:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 	memcpy(&frame.data[0], &motors[0].ticks_count, 4);
 8002604:	4b46      	ldr	r3, [pc, #280]	; (8002720 <vMotorTelemetryTimerCallback+0x14c>)
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	f8c7 3025 	str.w	r3, [r7, #37]	; 0x25
 	memcpy(&frame.data[4], &motors[1].ticks_count, 4);
 800260c:	4b44      	ldr	r3, [pc, #272]	; (8002720 <vMotorTelemetryTimerCallback+0x14c>)
 800260e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002610:	f8c7 3029 	str.w	r3, [r7, #41]	; 0x29
 	add_can_frame_to_tx_queue(frame);
 8002614:	f107 0320 	add.w	r3, r7, #32
 8002618:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800261a:	f7ff f91b 	bl	8001854 <add_can_frame_to_tx_queue>

 	id_helper.can_index = CAN_MSG_INDEX_INFO_CURRENT;
 800261e:	2301      	movs	r3, #1
 8002620:	61bb      	str	r3, [r7, #24]
 	pack_can_message(&id_helper);
 8002622:	f107 030c 	add.w	r3, r7, #12
 8002626:	4618      	mov	r0, r3
 8002628:	f008 f8c5 	bl	800a7b6 <pack_can_message>

 	frame.id = id_helper.raw_id;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	623b      	str	r3, [r7, #32]
 	frame.length = 8;
 8002630:	2308      	movs	r3, #8
 8002632:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 	memcpy(&frame.data[0], &motors[0].current_mA, 4);
 8002636:	4b3a      	ldr	r3, [pc, #232]	; (8002720 <vMotorTelemetryTimerCallback+0x14c>)
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	f8c7 3025 	str.w	r3, [r7, #37]	; 0x25
 	memcpy(&frame.data[4], &motors[1].current_mA, 4);
 800263e:	4b38      	ldr	r3, [pc, #224]	; (8002720 <vMotorTelemetryTimerCallback+0x14c>)
 8002640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002642:	f8c7 3029 	str.w	r3, [r7, #41]	; 0x29
 	add_can_frame_to_tx_queue(frame);
 8002646:	f107 0320 	add.w	r3, r7, #32
 800264a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800264c:	f7ff f902 	bl	8001854 <add_can_frame_to_tx_queue>

 	id_helper.can_index = CAN_MSG_INDEX_INFO_SPEED;
 8002650:	2302      	movs	r3, #2
 8002652:	61bb      	str	r3, [r7, #24]
 	pack_can_message(&id_helper);
 8002654:	f107 030c 	add.w	r3, r7, #12
 8002658:	4618      	mov	r0, r3
 800265a:	f008 f8ac 	bl	800a7b6 <pack_can_message>

 	frame.id = id_helper.raw_id;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	623b      	str	r3, [r7, #32]
 	frame.length = 8;
 8002662:	2308      	movs	r3, #8
 8002664:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 	memcpy(&frame.data[0], &motors[0].speed, 4);
 8002668:	4b2d      	ldr	r3, [pc, #180]	; (8002720 <vMotorTelemetryTimerCallback+0x14c>)
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	f8c7 3025 	str.w	r3, [r7, #37]	; 0x25
 	memcpy(&frame.data[4], &motors[1].speed, 4);
 8002670:	4b2b      	ldr	r3, [pc, #172]	; (8002720 <vMotorTelemetryTimerCallback+0x14c>)
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	f8c7 3029 	str.w	r3, [r7, #41]	; 0x29
 	add_can_frame_to_tx_queue(frame);
 8002678:	f107 0320 	add.w	r3, r7, #32
 800267c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800267e:	f7ff f8e9 	bl	8001854 <add_can_frame_to_tx_queue>

 	id_helper.can_index = CAN_MSG_INDEX_INFO_POSITION_SETPOINT;
 8002682:	2303      	movs	r3, #3
 8002684:	61bb      	str	r3, [r7, #24]
 	pack_can_message(&id_helper);
 8002686:	f107 030c 	add.w	r3, r7, #12
 800268a:	4618      	mov	r0, r3
 800268c:	f008 f893 	bl	800a7b6 <pack_can_message>

 	frame.id = id_helper.raw_id;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	623b      	str	r3, [r7, #32]
 	frame.length = 8;
 8002694:	2308      	movs	r3, #8
 8002696:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 	memcpy(&frame.data[0], &motors[0].ticks_setpoint, 4);
 800269a:	4b21      	ldr	r3, [pc, #132]	; (8002720 <vMotorTelemetryTimerCallback+0x14c>)
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	f8c7 3025 	str.w	r3, [r7, #37]	; 0x25
 	memcpy(&frame.data[4], &motors[1].ticks_setpoint, 4);
 80026a2:	4b1f      	ldr	r3, [pc, #124]	; (8002720 <vMotorTelemetryTimerCallback+0x14c>)
 80026a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a6:	f8c7 3029 	str.w	r3, [r7, #41]	; 0x29
 	add_can_frame_to_tx_queue(frame);
 80026aa:	f107 0320 	add.w	r3, r7, #32
 80026ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026b0:	f7ff f8d0 	bl	8001854 <add_can_frame_to_tx_queue>

 	id_helper.can_index = CAN_MSG_INDEX_INFO_CURRENT_SETPOINT;
 80026b4:	2304      	movs	r3, #4
 80026b6:	61bb      	str	r3, [r7, #24]
 	pack_can_message(&id_helper);
 80026b8:	f107 030c 	add.w	r3, r7, #12
 80026bc:	4618      	mov	r0, r3
 80026be:	f008 f87a 	bl	800a7b6 <pack_can_message>

 	frame.id = id_helper.raw_id;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	623b      	str	r3, [r7, #32]
 	frame.length = 8;
 80026c6:	2308      	movs	r3, #8
 80026c8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 	memcpy(&frame.data[0], &motors[0].current_ma_setpoint, 4);
 80026cc:	4b14      	ldr	r3, [pc, #80]	; (8002720 <vMotorTelemetryTimerCallback+0x14c>)
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	f8c7 3025 	str.w	r3, [r7, #37]	; 0x25
 	memcpy(&frame.data[4], &motors[1].current_ma_setpoint, 4);
 80026d4:	4b12      	ldr	r3, [pc, #72]	; (8002720 <vMotorTelemetryTimerCallback+0x14c>)
 80026d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d8:	f8c7 3029 	str.w	r3, [r7, #41]	; 0x29
 	add_can_frame_to_tx_queue(frame);
 80026dc:	f107 0320 	add.w	r3, r7, #32
 80026e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026e2:	f7ff f8b7 	bl	8001854 <add_can_frame_to_tx_queue>

 	id_helper.can_index = CAN_MSG_INDEX_INFO_DUTY;
 80026e6:	2307      	movs	r3, #7
 80026e8:	61bb      	str	r3, [r7, #24]
 	pack_can_message(&id_helper);
 80026ea:	f107 030c 	add.w	r3, r7, #12
 80026ee:	4618      	mov	r0, r3
 80026f0:	f008 f861 	bl	800a7b6 <pack_can_message>

 	frame.id = id_helper.raw_id;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	623b      	str	r3, [r7, #32]
 	frame.length = 8;
 80026f8:	2308      	movs	r3, #8
 80026fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 	memcpy(&frame.data[0], &motors[0].duty, 4);
 80026fe:	4b08      	ldr	r3, [pc, #32]	; (8002720 <vMotorTelemetryTimerCallback+0x14c>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f8c7 3025 	str.w	r3, [r7, #37]	; 0x25
 	memcpy(&frame.data[4], &motors[1].duty, 4);
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <vMotorTelemetryTimerCallback+0x14c>)
 8002708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270a:	f8c7 3029 	str.w	r3, [r7, #41]	; 0x29
 	add_can_frame_to_tx_queue(frame);
 800270e:	f107 0320 	add.w	r3, r7, #32
 8002712:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002714:	f7ff f89e 	bl	8001854 <add_can_frame_to_tx_queue>

 		// TODO other telemetry
  }
 8002718:	bf00      	nop
 800271a:	3730      	adds	r7, #48	; 0x30
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	20000d8c 	.word	0x20000d8c
 8002724:	00000000 	.word	0x00000000

08002728 <vPrimitivesCalculation>:

 static void vPrimitivesCalculation(void)
  {
 8002728:	b590      	push	{r4, r7, lr}
 800272a:	b097      	sub	sp, #92	; 0x5c
 800272c:	af04      	add	r7, sp, #16
	 static uint32_t prim_count = 0;
	int32_t i;
	// Only calculate if all primitive or current primitive
	for(i=0; i < NUMBER_MOTORS; i++)
 800272e:	2300      	movs	r3, #0
 8002730:	647b      	str	r3, [r7, #68]	; 0x44
 8002732:	e011      	b.n	8002758 <vPrimitivesCalculation+0x30>
	{
		if(control_type[i] != PRIMITIVE && control_type[i] != PROPRIOCEPTIVE_PRIMITIVE)
 8002734:	4aa2      	ldr	r2, [pc, #648]	; (80029c0 <vPrimitivesCalculation+0x298>)
 8002736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002738:	4413      	add	r3, r2
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b04      	cmp	r3, #4
 8002740:	d007      	beq.n	8002752 <vPrimitivesCalculation+0x2a>
 8002742:	4a9f      	ldr	r2, [pc, #636]	; (80029c0 <vPrimitivesCalculation+0x298>)
 8002744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002746:	4413      	add	r3, r2
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b05      	cmp	r3, #5
 800274e:	f040 812b 	bne.w	80029a8 <vPrimitivesCalculation+0x280>
	for(i=0; i < NUMBER_MOTORS; i++)
 8002752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002754:	3301      	adds	r3, #1
 8002756:	647b      	str	r3, [r7, #68]	; 0x44
 8002758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800275a:	2b01      	cmp	r3, #1
 800275c:	ddea      	ble.n	8002734 <vPrimitivesCalculation+0xc>
		}
	}

	pos_cartesian_t cart_pos;
	pos_joint_space_t js_pos;
	KEYFRAME_CONTROL ctrl_method = KEY_DO_NOT_CHANGE;
 800275e:	2300      	movs	r3, #0
 8002760:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if(get_motion_primitive() < NUMBER_LINEAR_PRIMITIVES)
 8002764:	f00a fa6c 	bl	800cc40 <get_motion_primitive>
 8002768:	4603      	mov	r3, r0
 800276a:	2b03      	cmp	r3, #3
 800276c:	d809      	bhi.n	8002782 <vPrimitivesCalculation+0x5a>
	{
		motion_primitive_get_position(&cart_pos.x, &cart_pos.y);
 800276e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002772:	1d1a      	adds	r2, r3, #4
 8002774:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002778:	4611      	mov	r1, r2
 800277a:	4618      	mov	r0, r3
 800277c:	f009 fa9c 	bl	800bcb8 <motion_primitive_get_position>
 8002780:	e02e      	b.n	80027e0 <vPrimitivesCalculation+0xb8>
	}
	else
	{
		motion_primitive_get_position_bezier_quadratic(&cart_pos.x, &cart_pos.y, &ctrl_method);
 8002782:	f107 0233 	add.w	r2, r7, #51	; 0x33
 8002786:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800278a:	1d19      	adds	r1, r3, #4
 800278c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002790:	4618      	mov	r0, r3
 8002792:	f009 fdc1 	bl	800c318 <motion_primitive_get_position_bezier_quadratic>

		if(ctrl_method == KEY_POSITION)
 8002796:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800279a:	2b01      	cmp	r3, #1
 800279c:	d10e      	bne.n	80027bc <vPrimitivesCalculation+0x94>
		{
			for(i=0; i < NUMBER_MOTORS; i++)
 800279e:	2300      	movs	r3, #0
 80027a0:	647b      	str	r3, [r7, #68]	; 0x44
 80027a2:	e007      	b.n	80027b4 <vPrimitivesCalculation+0x8c>
			{
				control_type[i] = PRIMITIVE;
 80027a4:	4a86      	ldr	r2, [pc, #536]	; (80029c0 <vPrimitivesCalculation+0x298>)
 80027a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027a8:	4413      	add	r3, r2
 80027aa:	2204      	movs	r2, #4
 80027ac:	701a      	strb	r2, [r3, #0]
			for(i=0; i < NUMBER_MOTORS; i++)
 80027ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027b0:	3301      	adds	r3, #1
 80027b2:	647b      	str	r3, [r7, #68]	; 0x44
 80027b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	ddf4      	ble.n	80027a4 <vPrimitivesCalculation+0x7c>
 80027ba:	e011      	b.n	80027e0 <vPrimitivesCalculation+0xb8>
			}
		} else if(ctrl_method == KEY_VMC)
 80027bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d10d      	bne.n	80027e0 <vPrimitivesCalculation+0xb8>
		{
			for(i=0; i < NUMBER_MOTORS; i++)
 80027c4:	2300      	movs	r3, #0
 80027c6:	647b      	str	r3, [r7, #68]	; 0x44
 80027c8:	e007      	b.n	80027da <vPrimitivesCalculation+0xb2>
			{
				control_type[i] = PROPRIOCEPTIVE_PRIMITIVE;
 80027ca:	4a7d      	ldr	r2, [pc, #500]	; (80029c0 <vPrimitivesCalculation+0x298>)
 80027cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ce:	4413      	add	r3, r2
 80027d0:	2205      	movs	r2, #5
 80027d2:	701a      	strb	r2, [r3, #0]
			for(i=0; i < NUMBER_MOTORS; i++)
 80027d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027d6:	3301      	adds	r3, #1
 80027d8:	647b      	str	r3, [r7, #68]	; 0x44
 80027da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027dc:	2b01      	cmp	r3, #1
 80027de:	ddf4      	ble.n	80027ca <vPrimitivesCalculation+0xa2>
			}
		}
	}

	prim_count++;
 80027e0:	4b78      	ldr	r3, [pc, #480]	; (80029c4 <vPrimitivesCalculation+0x29c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	3301      	adds	r3, #1
 80027e6:	4a77      	ldr	r2, [pc, #476]	; (80029c4 <vPrimitivesCalculation+0x29c>)
 80027e8:	6013      	str	r3, [r2, #0]

	if(prim_count % 20 == 0)
 80027ea:	4b76      	ldr	r3, [pc, #472]	; (80029c4 <vPrimitivesCalculation+0x29c>)
 80027ec:	6819      	ldr	r1, [r3, #0]
 80027ee:	4b76      	ldr	r3, [pc, #472]	; (80029c8 <vPrimitivesCalculation+0x2a0>)
 80027f0:	fba3 2301 	umull	r2, r3, r3, r1
 80027f4:	091a      	lsrs	r2, r3, #4
 80027f6:	4613      	mov	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	1aca      	subs	r2, r1, r3
 8002800:	2a00      	cmp	r2, #0
 8002802:	d11e      	bne.n	8002842 <vPrimitivesCalculation+0x11a>
	{
		// 200 Hz output
		canbus_frame_t frame;
		can_message_id_t id_helper;

		id_helper.can_msg_type = CAN_MSG_TYPE_INFO;
 8002804:	2301      	movs	r3, #1
 8002806:	613b      	str	r3, [r7, #16]
		id_helper.can_class = CAN_MSG_CLASS_INFO_TELEMETRY;
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]
		id_helper.can_device = get_device_index();
 800280c:	f7fe fff6 	bl	80017fc <get_device_index>
 8002810:	4603      	mov	r3, r0
 8002812:	61fb      	str	r3, [r7, #28]

		id_helper.can_index = CAN_MSG_INDEX_INFO_PRIMITIVE_SETPOINT;
 8002814:	2305      	movs	r3, #5
 8002816:	61bb      	str	r3, [r7, #24]
		pack_can_message(&id_helper);
 8002818:	f107 030c 	add.w	r3, r7, #12
 800281c:	4618      	mov	r0, r3
 800281e:	f007 ffca 	bl	800a7b6 <pack_can_message>

		frame.id = id_helper.raw_id;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	623b      	str	r3, [r7, #32]
		frame.length = 8;
 8002826:	2308      	movs	r3, #8
 8002828:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		memcpy(&frame.data[0], &cart_pos.x, 4);
 800282c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800282e:	f8c7 3025 	str.w	r3, [r7, #37]	; 0x25
		memcpy(&frame.data[4], &cart_pos.y, 4);
 8002832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002834:	f8c7 3029 	str.w	r3, [r7, #41]	; 0x29
		add_can_frame_to_tx_queue(frame);
 8002838:	f107 0320 	add.w	r3, r7, #32
 800283c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800283e:	f7ff f809 	bl	8001854 <add_can_frame_to_tx_queue>
	}

	if(control_type[0] == PRIMITIVE)
 8002842:	4b5f      	ldr	r3, [pc, #380]	; (80029c0 <vPrimitivesCalculation+0x298>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b04      	cmp	r3, #4
 800284a:	d149      	bne.n	80028e0 <vPrimitivesCalculation+0x1b8>
	{
		calculate_ik(&leg, &js_pos, cart_pos);
 800284c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002850:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002854:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002858:	eeb0 0a47 	vmov.f32	s0, s14
 800285c:	eef0 0a67 	vmov.f32	s1, s15
 8002860:	4619      	mov	r1, r3
 8002862:	485a      	ldr	r0, [pc, #360]	; (80029cc <vPrimitivesCalculation+0x2a4>)
 8002864:	f008 fc80 	bl	800b168 <calculate_ik>

		if(motion_primitive_is_inverted())
 8002868:	f00a f986 	bl	800cb78 <motion_primitive_is_inverted>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00b      	beq.n	800288a <vPrimitivesCalculation+0x162>
		{
			js_pos.thigh_angle_rad = -js_pos.thigh_angle_rad;
 8002872:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002876:	eef1 7a67 	vneg.f32	s15, s15
 800287a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			js_pos.knee_angle_rad = -js_pos.knee_angle_rad;
 800287e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002882:	eef1 7a67 	vneg.f32	s15, s15
 8002886:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		}

		set_motor_position(RAD_TO_DEG * js_pos.thigh_angle_rad, 0);
 800288a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800288c:	4618      	mov	r0, r3
 800288e:	f7fd fe03 	bl	8000498 <__aeabi_f2d>
 8002892:	a347      	add	r3, pc, #284	; (adr r3, 80029b0 <vPrimitivesCalculation+0x288>)
 8002894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002898:	f7fd fe56 	bl	8000548 <__aeabi_dmul>
 800289c:	4603      	mov	r3, r0
 800289e:	460c      	mov	r4, r1
 80028a0:	4618      	mov	r0, r3
 80028a2:	4621      	mov	r1, r4
 80028a4:	f7fe f928 	bl	8000af8 <__aeabi_d2f>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2000      	movs	r0, #0
 80028ac:	ee00 3a10 	vmov	s0, r3
 80028b0:	f000 fc9e 	bl	80031f0 <set_motor_position>
		set_motor_position(RAD_TO_DEG * js_pos.knee_angle_rad, 1);
 80028b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fd fdee 	bl	8000498 <__aeabi_f2d>
 80028bc:	a33c      	add	r3, pc, #240	; (adr r3, 80029b0 <vPrimitivesCalculation+0x288>)
 80028be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c2:	f7fd fe41 	bl	8000548 <__aeabi_dmul>
 80028c6:	4603      	mov	r3, r0
 80028c8:	460c      	mov	r4, r1
 80028ca:	4618      	mov	r0, r3
 80028cc:	4621      	mov	r1, r4
 80028ce:	f7fe f913 	bl	8000af8 <__aeabi_d2f>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2001      	movs	r0, #1
 80028d6:	ee00 3a10 	vmov	s0, r3
 80028da:	f000 fc89 	bl	80031f0 <set_motor_position>
 80028de:	e064      	b.n	80029aa <vPrimitivesCalculation+0x282>
	} else if(control_type[0] == PROPRIOCEPTIVE_PRIMITIVE)
 80028e0:	4b37      	ldr	r3, [pc, #220]	; (80029c0 <vPrimitivesCalculation+0x298>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b05      	cmp	r3, #5
 80028e8:	d15f      	bne.n	80029aa <vPrimitivesCalculation+0x282>
	{
		impedance_control_cmds_t ic_cmds;
		js_pos.thigh_angle_rad = DEG_TO_RAD * get_motor_position(0);
 80028ea:	2000      	movs	r0, #0
 80028ec:	f000 fccc 	bl	8003288 <get_motor_position>
 80028f0:	ee10 3a10 	vmov	r3, s0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fd fdcf 	bl	8000498 <__aeabi_f2d>
 80028fa:	a32f      	add	r3, pc, #188	; (adr r3, 80029b8 <vPrimitivesCalculation+0x290>)
 80028fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002900:	f7fd fe22 	bl	8000548 <__aeabi_dmul>
 8002904:	4603      	mov	r3, r0
 8002906:	460c      	mov	r4, r1
 8002908:	4618      	mov	r0, r3
 800290a:	4621      	mov	r1, r4
 800290c:	f7fe f8f4 	bl	8000af8 <__aeabi_d2f>
 8002910:	4603      	mov	r3, r0
 8002912:	637b      	str	r3, [r7, #52]	; 0x34
		js_pos.knee_angle_rad = DEG_TO_RAD * get_motor_position(1);
 8002914:	2001      	movs	r0, #1
 8002916:	f000 fcb7 	bl	8003288 <get_motor_position>
 800291a:	ee10 3a10 	vmov	r3, s0
 800291e:	4618      	mov	r0, r3
 8002920:	f7fd fdba 	bl	8000498 <__aeabi_f2d>
 8002924:	a324      	add	r3, pc, #144	; (adr r3, 80029b8 <vPrimitivesCalculation+0x290>)
 8002926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292a:	f7fd fe0d 	bl	8000548 <__aeabi_dmul>
 800292e:	4603      	mov	r3, r0
 8002930:	460c      	mov	r4, r1
 8002932:	4618      	mov	r0, r3
 8002934:	4621      	mov	r1, r4
 8002936:	f7fe f8df 	bl	8000af8 <__aeabi_d2f>
 800293a:	4603      	mov	r3, r0
 800293c:	63bb      	str	r3, [r7, #56]	; 0x38
		calculate_impedance_control(ic_params, leg, js_pos, cart_pos, &ic_cmds);
 800293e:	ed97 4a0f 	vldr	s8, [r7, #60]	; 0x3c
 8002942:	edd7 4a10 	vldr	s9, [r7, #64]	; 0x40
 8002946:	ed97 5a0d 	vldr	s10, [r7, #52]	; 0x34
 800294a:	edd7 5a0e 	vldr	s11, [r7, #56]	; 0x38
 800294e:	4b1f      	ldr	r3, [pc, #124]	; (80029cc <vPrimitivesCalculation+0x2a4>)
 8002950:	ed93 6a00 	vldr	s12, [r3]
 8002954:	edd3 6a01 	vldr	s13, [r3, #4]
 8002958:	ed93 7a02 	vldr	s14, [r3, #8]
 800295c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002960:	4b1b      	ldr	r3, [pc, #108]	; (80029d0 <vPrimitivesCalculation+0x2a8>)
 8002962:	1d3a      	adds	r2, r7, #4
 8002964:	9202      	str	r2, [sp, #8]
 8002966:	466c      	mov	r4, sp
 8002968:	f103 0210 	add.w	r2, r3, #16
 800296c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002970:	e884 0003 	stmia.w	r4, {r0, r1}
 8002974:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002976:	eeb0 3a44 	vmov.f32	s6, s8
 800297a:	eef0 3a64 	vmov.f32	s7, s9
 800297e:	eeb0 2a45 	vmov.f32	s4, s10
 8002982:	eef0 2a65 	vmov.f32	s5, s11
 8002986:	eeb0 0a46 	vmov.f32	s0, s12
 800298a:	eef0 0a66 	vmov.f32	s1, s13
 800298e:	eeb0 1a47 	vmov.f32	s2, s14
 8002992:	eef0 1a67 	vmov.f32	s3, s15
 8002996:	f008 f95b 	bl	800ac50 <calculate_impedance_control>
		motors[0].current_ma_setpoint = ic_cmds.hip_cmd_ma;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a0d      	ldr	r2, [pc, #52]	; (80029d4 <vPrimitivesCalculation+0x2ac>)
 800299e:	61d3      	str	r3, [r2, #28]
		motors[1].current_ma_setpoint = ic_cmds.knee_cmd_ma;
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	4a0c      	ldr	r2, [pc, #48]	; (80029d4 <vPrimitivesCalculation+0x2ac>)
 80029a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029a6:	e000      	b.n	80029aa <vPrimitivesCalculation+0x282>
			return;
 80029a8:	bf00      	nop
	}
  }
 80029aa:	374c      	adds	r7, #76	; 0x4c
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd90      	pop	{r4, r7, pc}
 80029b0:	c63f1412 	.word	0xc63f1412
 80029b4:	404ca5dc 	.word	0x404ca5dc
 80029b8:	22d4405f 	.word	0x22d4405f
 80029bc:	3f91df47 	.word	0x3f91df47
 80029c0:	20000d88 	.word	0x20000d88
 80029c4:	20000f34 	.word	0x20000f34
 80029c8:	cccccccd 	.word	0xcccccccd
 80029cc:	20000f24 	.word	0x20000f24
 80029d0:	20000f0c 	.word	0x20000f0c
 80029d4:	20000d8c 	.word	0x20000d8c

080029d8 <vControlTimerCallback>:

 static void vControlTimerCallback( void )
 {
 80029d8:	b5b0      	push	{r4, r5, r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af00      	add	r7, sp, #0
	static uint32_t count = 0;
	static int32_t last_ticks_for_speed[NUMBER_MOTORS] = {0};

	int32_t i;
	vPrimitivesCalculation();
 80029de:	f7ff fea3 	bl	8002728 <vPrimitivesCalculation>

	// Update data
	for(i=0; i < NUMBER_MOTORS; i++)
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
 80029e6:	e1c8      	b.n	8002d7a <vControlTimerCallback+0x3a2>
	{
		// Speed is in deg/s
		if(count % 20 == 0)
 80029e8:	4bc3      	ldr	r3, [pc, #780]	; (8002cf8 <vControlTimerCallback+0x320>)
 80029ea:	6819      	ldr	r1, [r3, #0]
 80029ec:	4bc3      	ldr	r3, [pc, #780]	; (8002cfc <vControlTimerCallback+0x324>)
 80029ee:	fba3 2301 	umull	r2, r3, r3, r1
 80029f2:	091a      	lsrs	r2, r3, #4
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	1aca      	subs	r2, r1, r3
 80029fe:	2a00      	cmp	r2, #0
 8002a00:	d172      	bne.n	8002ae8 <vControlTimerCallback+0x110>
		{
			// 25 Hz here
			int32_t ticks_per_40ms = (get_motor_encoder_ticks(i) - last_ticks_for_speed[i]);
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	4618      	mov	r0, r3
 8002a08:	f007 ff04 	bl	800a814 <get_motor_encoder_ticks>
 8002a0c:	4601      	mov	r1, r0
 8002a0e:	4abc      	ldr	r2, [pc, #752]	; (8002d00 <vControlTimerCallback+0x328>)
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a16:	1acb      	subs	r3, r1, r3
 8002a18:	61bb      	str	r3, [r7, #24]
			int32_t deg_p_s = 25 * ticks_per_40ms * (360.0 / motors[i].ticks_per_rev);
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	009a      	lsls	r2, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fd fd24 	bl	8000474 <__aeabi_i2d>
 8002a2c:	4604      	mov	r4, r0
 8002a2e:	460d      	mov	r5, r1
 8002a30:	49b4      	ldr	r1, [pc, #720]	; (8002d04 <vControlTimerCallback+0x32c>)
 8002a32:	69fa      	ldr	r2, [r7, #28]
 8002a34:	4613      	mov	r3, r2
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	4413      	add	r3, r2
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	440b      	add	r3, r1
 8002a3e:	3328      	adds	r3, #40	; 0x28
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fd fd16 	bl	8000474 <__aeabi_i2d>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	f04f 0000 	mov.w	r0, #0
 8002a50:	49ad      	ldr	r1, [pc, #692]	; (8002d08 <vControlTimerCallback+0x330>)
 8002a52:	f7fd fea3 	bl	800079c <__aeabi_ddiv>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4620      	mov	r0, r4
 8002a5c:	4629      	mov	r1, r5
 8002a5e:	f7fd fd73 	bl	8000548 <__aeabi_dmul>
 8002a62:	4603      	mov	r3, r0
 8002a64:	460c      	mov	r4, r1
 8002a66:	4618      	mov	r0, r3
 8002a68:	4621      	mov	r1, r4
 8002a6a:	f7fe f81d 	bl	8000aa8 <__aeabi_d2iz>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	617b      	str	r3, [r7, #20]
			motors[i].speed = (int32_t) (0.7 * motors[i].speed) + (int32_t) (0.3 * deg_p_s); // TODO filter differently?
 8002a72:	49a4      	ldr	r1, [pc, #656]	; (8002d04 <vControlTimerCallback+0x32c>)
 8002a74:	69fa      	ldr	r2, [r7, #28]
 8002a76:	4613      	mov	r3, r2
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	4413      	add	r3, r2
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	440b      	add	r3, r1
 8002a80:	3310      	adds	r3, #16
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fd fcf5 	bl	8000474 <__aeabi_i2d>
 8002a8a:	a397      	add	r3, pc, #604	; (adr r3, 8002ce8 <vControlTimerCallback+0x310>)
 8002a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a90:	f7fd fd5a 	bl	8000548 <__aeabi_dmul>
 8002a94:	4603      	mov	r3, r0
 8002a96:	460c      	mov	r4, r1
 8002a98:	4618      	mov	r0, r3
 8002a9a:	4621      	mov	r1, r4
 8002a9c:	f7fe f804 	bl	8000aa8 <__aeabi_d2iz>
 8002aa0:	4604      	mov	r4, r0
 8002aa2:	6978      	ldr	r0, [r7, #20]
 8002aa4:	f7fd fce6 	bl	8000474 <__aeabi_i2d>
 8002aa8:	a391      	add	r3, pc, #580	; (adr r3, 8002cf0 <vControlTimerCallback+0x318>)
 8002aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aae:	f7fd fd4b 	bl	8000548 <__aeabi_dmul>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4610      	mov	r0, r2
 8002ab8:	4619      	mov	r1, r3
 8002aba:	f7fd fff5 	bl	8000aa8 <__aeabi_d2iz>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	18e1      	adds	r1, r4, r3
 8002ac2:	4890      	ldr	r0, [pc, #576]	; (8002d04 <vControlTimerCallback+0x32c>)
 8002ac4:	69fa      	ldr	r2, [r7, #28]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	4413      	add	r3, r2
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	4403      	add	r3, r0
 8002ad0:	3310      	adds	r3, #16
 8002ad2:	6019      	str	r1, [r3, #0]

			last_ticks_for_speed[i] = get_motor_encoder_ticks(i);
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f007 fe9b 	bl	800a814 <get_motor_encoder_ticks>
 8002ade:	4601      	mov	r1, r0
 8002ae0:	4a87      	ldr	r2, [pc, #540]	; (8002d00 <vControlTimerCallback+0x328>)
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		motors[i].ticks_count = get_motor_encoder_ticks(i);
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	4618      	mov	r0, r3
 8002aee:	f007 fe91 	bl	800a814 <get_motor_encoder_ticks>
 8002af2:	4984      	ldr	r1, [pc, #528]	; (8002d04 <vControlTimerCallback+0x32c>)
 8002af4:	69fa      	ldr	r2, [r7, #28]
 8002af6:	4613      	mov	r3, r2
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	4413      	add	r3, r2
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	440b      	add	r3, r1
 8002b00:	3320      	adds	r3, #32
 8002b02:	6018      	str	r0, [r3, #0]
		motors[i].current_mA = get_motor_current_ma(i);
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f007 fe01 	bl	800a710 <get_motor_current_ma>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	4618      	mov	r0, r3
 8002b12:	497c      	ldr	r1, [pc, #496]	; (8002d04 <vControlTimerCallback+0x32c>)
 8002b14:	69fa      	ldr	r2, [r7, #28]
 8002b16:	4613      	mov	r3, r2
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	4413      	add	r3, r2
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	440b      	add	r3, r1
 8002b20:	3318      	adds	r3, #24
 8002b22:	6018      	str	r0, [r3, #0]

		if(control_type[i] == POSITION || control_type[i] == PRIMITIVE)
 8002b24:	4a79      	ldr	r2, [pc, #484]	; (8002d0c <vControlTimerCallback+0x334>)
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	4413      	add	r3, r2
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d006      	beq.n	8002b40 <vControlTimerCallback+0x168>
 8002b32:	4a76      	ldr	r2, [pc, #472]	; (8002d0c <vControlTimerCallback+0x334>)
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	4413      	add	r3, r2
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d126      	bne.n	8002b8e <vControlTimerCallback+0x1b6>
		{
			float cmd = calculate_pid(&pos_params[i], motors[i].ticks_setpoint, motors[i].ticks_count);
 8002b40:	69fa      	ldr	r2, [r7, #28]
 8002b42:	4613      	mov	r3, r2
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	4413      	add	r3, r2
 8002b48:	011b      	lsls	r3, r3, #4
 8002b4a:	4a71      	ldr	r2, [pc, #452]	; (8002d10 <vControlTimerCallback+0x338>)
 8002b4c:	1898      	adds	r0, r3, r2
 8002b4e:	496d      	ldr	r1, [pc, #436]	; (8002d04 <vControlTimerCallback+0x32c>)
 8002b50:	69fa      	ldr	r2, [r7, #28]
 8002b52:	4613      	mov	r3, r2
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	4413      	add	r3, r2
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	440b      	add	r3, r1
 8002b5c:	3324      	adds	r3, #36	; 0x24
 8002b5e:	681c      	ldr	r4, [r3, #0]
 8002b60:	4968      	ldr	r1, [pc, #416]	; (8002d04 <vControlTimerCallback+0x32c>)
 8002b62:	69fa      	ldr	r2, [r7, #28]
 8002b64:	4613      	mov	r3, r2
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	4413      	add	r3, r2
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	440b      	add	r3, r1
 8002b6e:	3320      	adds	r3, #32
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	4621      	mov	r1, r4
 8002b76:	f00a f86f 	bl	800cc58 <calculate_pid>
 8002b7a:	ed87 0a00 	vstr	s0, [r7]
			drive_motor(i, cmd);
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	ed97 0a00 	vldr	s0, [r7]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff fc44 	bl	8002414 <drive_motor>
		{
 8002b8c:	e0f2      	b.n	8002d74 <vControlTimerCallback+0x39c>
		} else if(control_type[i] == SPEED)
 8002b8e:	4a5f      	ldr	r2, [pc, #380]	; (8002d0c <vControlTimerCallback+0x334>)
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	4413      	add	r3, r2
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d126      	bne.n	8002bea <vControlTimerCallback+0x212>
		{
			float cmd = calculate_pid(&speed_params[i], motors[i].speed_setpoint, motors[i].speed);
 8002b9c:	69fa      	ldr	r2, [r7, #28]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	4413      	add	r3, r2
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	4a5b      	ldr	r2, [pc, #364]	; (8002d14 <vControlTimerCallback+0x33c>)
 8002ba8:	1898      	adds	r0, r3, r2
 8002baa:	4956      	ldr	r1, [pc, #344]	; (8002d04 <vControlTimerCallback+0x32c>)
 8002bac:	69fa      	ldr	r2, [r7, #28]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	4413      	add	r3, r2
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	440b      	add	r3, r1
 8002bb8:	3314      	adds	r3, #20
 8002bba:	681c      	ldr	r4, [r3, #0]
 8002bbc:	4951      	ldr	r1, [pc, #324]	; (8002d04 <vControlTimerCallback+0x32c>)
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	4413      	add	r3, r2
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	440b      	add	r3, r1
 8002bca:	3310      	adds	r3, #16
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	4621      	mov	r1, r4
 8002bd2:	f00a f841 	bl	800cc58 <calculate_pid>
 8002bd6:	ed87 0a01 	vstr	s0, [r7, #4]
			drive_motor(i, cmd);
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	ed97 0a01 	vldr	s0, [r7, #4]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fc16 	bl	8002414 <drive_motor>
 8002be8:	e0c4      	b.n	8002d74 <vControlTimerCallback+0x39c>
		} else if(control_type[i] == CURRENT || control_type[i] == PROPRIOCEPTIVE_PRIMITIVE)
 8002bea:	4a48      	ldr	r2, [pc, #288]	; (8002d0c <vControlTimerCallback+0x334>)
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	4413      	add	r3, r2
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d007      	beq.n	8002c08 <vControlTimerCallback+0x230>
 8002bf8:	4a44      	ldr	r2, [pc, #272]	; (8002d0c <vControlTimerCallback+0x334>)
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b05      	cmp	r3, #5
 8002c04:	f040 8098 	bne.w	8002d38 <vControlTimerCallback+0x360>
		{
			if(motors[i].current_ma_setpoint >= 0)
 8002c08:	493e      	ldr	r1, [pc, #248]	; (8002d04 <vControlTimerCallback+0x32c>)
 8002c0a:	69fa      	ldr	r2, [r7, #28]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	4413      	add	r3, r2
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	440b      	add	r3, r1
 8002c16:	331c      	adds	r3, #28
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	db35      	blt.n	8002c8a <vControlTimerCallback+0x2b2>
			{
				float cmd = calculate_pid(&cur_params[i], motors[i].current_ma_setpoint, motors[i].current_mA);
 8002c1e:	69fa      	ldr	r2, [r7, #28]
 8002c20:	4613      	mov	r3, r2
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4413      	add	r3, r2
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	4a3b      	ldr	r2, [pc, #236]	; (8002d18 <vControlTimerCallback+0x340>)
 8002c2a:	1898      	adds	r0, r3, r2
 8002c2c:	4935      	ldr	r1, [pc, #212]	; (8002d04 <vControlTimerCallback+0x32c>)
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	4613      	mov	r3, r2
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	4413      	add	r3, r2
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	440b      	add	r3, r1
 8002c3a:	331c      	adds	r3, #28
 8002c3c:	681c      	ldr	r4, [r3, #0]
 8002c3e:	4931      	ldr	r1, [pc, #196]	; (8002d04 <vControlTimerCallback+0x32c>)
 8002c40:	69fa      	ldr	r2, [r7, #28]
 8002c42:	4613      	mov	r3, r2
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	4413      	add	r3, r2
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	440b      	add	r3, r1
 8002c4c:	3318      	adds	r3, #24
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	461a      	mov	r2, r3
 8002c52:	4621      	mov	r1, r4
 8002c54:	f00a f800 	bl	800cc58 <calculate_pid>
 8002c58:	ed87 0a02 	vstr	s0, [r7, #8]
				// Only allow forward drive

				if(cmd > 0)
 8002c5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c68:	dd07      	ble.n	8002c7a <vControlTimerCallback+0x2a2>
				{
					drive_motor(i, cmd);
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	ed97 0a02 	vldr	s0, [r7, #8]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff fbce 	bl	8002414 <drive_motor>
			if(motors[i].current_ma_setpoint >= 0)
 8002c78:	e07c      	b.n	8002d74 <vControlTimerCallback+0x39c>
				}
				else
				{
					drive_motor(i, 0);
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8002d1c <vControlTimerCallback+0x344>
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff fbc6 	bl	8002414 <drive_motor>
			if(motors[i].current_ma_setpoint >= 0)
 8002c88:	e074      	b.n	8002d74 <vControlTimerCallback+0x39c>
				}
			}
			else
			{
				// Flip direction of control and direction of setpoint
				float cmd = calculate_pid(&cur_params[i], -motors[i].current_ma_setpoint, motors[i].current_mA);
 8002c8a:	69fa      	ldr	r2, [r7, #28]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	4413      	add	r3, r2
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	4a20      	ldr	r2, [pc, #128]	; (8002d18 <vControlTimerCallback+0x340>)
 8002c96:	1898      	adds	r0, r3, r2
 8002c98:	491a      	ldr	r1, [pc, #104]	; (8002d04 <vControlTimerCallback+0x32c>)
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4413      	add	r3, r2
 8002ca2:	011b      	lsls	r3, r3, #4
 8002ca4:	440b      	add	r3, r1
 8002ca6:	331c      	adds	r3, #28
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	425c      	negs	r4, r3
 8002cac:	4915      	ldr	r1, [pc, #84]	; (8002d04 <vControlTimerCallback+0x32c>)
 8002cae:	69fa      	ldr	r2, [r7, #28]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	4413      	add	r3, r2
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	440b      	add	r3, r1
 8002cba:	3318      	adds	r3, #24
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	4621      	mov	r1, r4
 8002cc2:	f009 ffc9 	bl	800cc58 <calculate_pid>
 8002cc6:	ed87 0a03 	vstr	s0, [r7, #12]
				// Only allow reverse drive
				if(cmd < 0)
 8002cca:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd6:	d523      	bpl.n	8002d20 <vControlTimerCallback+0x348>
				{
					drive_motor(i, 0);
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8002d1c <vControlTimerCallback+0x344>
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff fb97 	bl	8002414 <drive_motor>
			if(motors[i].current_ma_setpoint >= 0)
 8002ce6:	e045      	b.n	8002d74 <vControlTimerCallback+0x39c>
 8002ce8:	66666666 	.word	0x66666666
 8002cec:	3fe66666 	.word	0x3fe66666
 8002cf0:	33333333 	.word	0x33333333
 8002cf4:	3fd33333 	.word	0x3fd33333
 8002cf8:	20000f38 	.word	0x20000f38
 8002cfc:	cccccccd 	.word	0xcccccccd
 8002d00:	20000f3c 	.word	0x20000f3c
 8002d04:	20000d8c 	.word	0x20000d8c
 8002d08:	40768000 	.word	0x40768000
 8002d0c:	20000d88 	.word	0x20000d88
 8002d10:	20000dec 	.word	0x20000dec
 8002d14:	20000e4c 	.word	0x20000e4c
 8002d18:	20000eac 	.word	0x20000eac
 8002d1c:	00000000 	.word	0x00000000
				}
				else
				{
					drive_motor(i, -cmd);
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d28:	eef1 7a67 	vneg.f32	s15, s15
 8002d2c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff fb6f 	bl	8002414 <drive_motor>
			if(motors[i].current_ma_setpoint >= 0)
 8002d36:	e01d      	b.n	8002d74 <vControlTimerCallback+0x39c>
				}
			}
		} else if (control_type[i] == DUTY)
 8002d38:	4a16      	ldr	r2, [pc, #88]	; (8002d94 <vControlTimerCallback+0x3bc>)
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d116      	bne.n	8002d74 <vControlTimerCallback+0x39c>
		{
			float cmd = motors[i].duty * PWM_PERIOD;
 8002d46:	4914      	ldr	r1, [pc, #80]	; (8002d98 <vControlTimerCallback+0x3c0>)
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	4413      	add	r3, r2
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	440b      	add	r3, r1
 8002d54:	330c      	adds	r3, #12
 8002d56:	edd3 7a00 	vldr	s15, [r3]
 8002d5a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002d9c <vControlTimerCallback+0x3c4>
 8002d5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d62:	edc7 7a04 	vstr	s15, [r7, #16]
			drive_motor(i, cmd);
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	ed97 0a04 	vldr	s0, [r7, #16]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff fb50 	bl	8002414 <drive_motor>
	for(i=0; i < NUMBER_MOTORS; i++)
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	3301      	adds	r3, #1
 8002d78:	61fb      	str	r3, [r7, #28]
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	f77f ae33 	ble.w	80029e8 <vControlTimerCallback+0x10>
		}// control type
	} // Loop through motors

	count++;
 8002d82:	4b07      	ldr	r3, [pc, #28]	; (8002da0 <vControlTimerCallback+0x3c8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	3301      	adds	r3, #1
 8002d88:	4a05      	ldr	r2, [pc, #20]	; (8002da0 <vControlTimerCallback+0x3c8>)
 8002d8a:	6013      	str	r3, [r2, #0]

 }
 8002d8c:	bf00      	nop
 8002d8e:	3720      	adds	r7, #32
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bdb0      	pop	{r4, r5, r7, pc}
 8002d94:	20000d88 	.word	0x20000d88
 8002d98:	20000d8c 	.word	0x20000d8c
 8002d9c:	461c4000 	.word	0x461c4000
 8002da0:	20000f38 	.word	0x20000f38
 8002da4:	00000000 	.word	0x00000000

08002da8 <motor_task_init>:

 void motor_task_init(void)
 {
 8002da8:	b5b0      	push	{r4, r5, r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af02      	add	r7, sp, #8
	 motion_primitive_init();
 8002dae:	f008 fae1 	bl	800b374 <motion_primitive_init>
	 precalc_inverse_trig();
 8002db2:	f007 fdff 	bl	800a9b4 <precalc_inverse_trig>

	 control_type[0] = POSITION; // TODO default position
 8002db6:	4b98      	ldr	r3, [pc, #608]	; (8003018 <motor_task_init+0x270>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	701a      	strb	r2, [r3, #0]
	 control_type[1] = POSITION;
 8002dbc:	4b96      	ldr	r3, [pc, #600]	; (8003018 <motor_task_init+0x270>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	705a      	strb	r2, [r3, #1]

	 leg.thigh_length_m = 0.055;
 8002dc2:	4b96      	ldr	r3, [pc, #600]	; (800301c <motor_task_init+0x274>)
 8002dc4:	4a96      	ldr	r2, [pc, #600]	; (8003020 <motor_task_init+0x278>)
 8002dc6:	601a      	str	r2, [r3, #0]
	 leg.calf_length_m = 0.065;
 8002dc8:	4b94      	ldr	r3, [pc, #592]	; (800301c <motor_task_init+0x274>)
 8002dca:	4a96      	ldr	r2, [pc, #600]	; (8003024 <motor_task_init+0x27c>)
 8002dcc:	605a      	str	r2, [r3, #4]
	 init_leg_precalcs(&leg);
 8002dce:	4893      	ldr	r0, [pc, #588]	; (800301c <motor_task_init+0x274>)
 8002dd0:	f008 f97e 	bl	800b0d0 <init_leg_precalcs>

	 ic_params.gain_current_per_torque = 15.0; // 1.5A stall at 0.196Nm torque
 8002dd4:	4b94      	ldr	r3, [pc, #592]	; (8003028 <motor_task_init+0x280>)
 8002dd6:	4a95      	ldr	r2, [pc, #596]	; (800302c <motor_task_init+0x284>)
 8002dd8:	601a      	str	r2, [r3, #0]
	 ic_params.c_eff_x = -120.0;
 8002dda:	4b93      	ldr	r3, [pc, #588]	; (8003028 <motor_task_init+0x280>)
 8002ddc:	4a94      	ldr	r2, [pc, #592]	; (8003030 <motor_task_init+0x288>)
 8002dde:	609a      	str	r2, [r3, #8]
	 ic_params.k_eff_x = 3500.0; // 2 lbs/ 1.5cm = ~600N/m
 8002de0:	4b91      	ldr	r3, [pc, #580]	; (8003028 <motor_task_init+0x280>)
 8002de2:	4a94      	ldr	r2, [pc, #592]	; (8003034 <motor_task_init+0x28c>)
 8002de4:	605a      	str	r2, [r3, #4]
	 ic_params.c_eff_y = -120.0;
 8002de6:	4b90      	ldr	r3, [pc, #576]	; (8003028 <motor_task_init+0x280>)
 8002de8:	4a91      	ldr	r2, [pc, #580]	; (8003030 <motor_task_init+0x288>)
 8002dea:	611a      	str	r2, [r3, #16]
	 ic_params.k_eff_y = 2600.0;
 8002dec:	4b8e      	ldr	r3, [pc, #568]	; (8003028 <motor_task_init+0x280>)
 8002dee:	4a92      	ldr	r2, [pc, #584]	; (8003038 <motor_task_init+0x290>)
 8002df0:	60da      	str	r2, [r3, #12]
	 ic_params.gear_ratio = 150.0;
 8002df2:	4b8d      	ldr	r3, [pc, #564]	; (8003028 <motor_task_init+0x280>)
 8002df4:	4a91      	ldr	r2, [pc, #580]	; (800303c <motor_task_init+0x294>)
 8002df6:	615a      	str	r2, [r3, #20]

	 // position control params
	 pos_params[0].kp = 250.0;
 8002df8:	4b91      	ldr	r3, [pc, #580]	; (8003040 <motor_task_init+0x298>)
 8002dfa:	4a92      	ldr	r2, [pc, #584]	; (8003044 <motor_task_init+0x29c>)
 8002dfc:	625a      	str	r2, [r3, #36]	; 0x24
	 pos_params[0].kd = -5000.0;
 8002dfe:	4b90      	ldr	r3, [pc, #576]	; (8003040 <motor_task_init+0x298>)
 8002e00:	4a91      	ldr	r2, [pc, #580]	; (8003048 <motor_task_init+0x2a0>)
 8002e02:	62da      	str	r2, [r3, #44]	; 0x2c
	 pos_params[0].cmd_max = 10000.0;
 8002e04:	4b8e      	ldr	r3, [pc, #568]	; (8003040 <motor_task_init+0x298>)
 8002e06:	4a91      	ldr	r2, [pc, #580]	; (800304c <motor_task_init+0x2a4>)
 8002e08:	619a      	str	r2, [r3, #24]
	 pos_params[0].cmd_min = -10000.0;
 8002e0a:	4b8d      	ldr	r3, [pc, #564]	; (8003040 <motor_task_init+0x298>)
 8002e0c:	4a90      	ldr	r2, [pc, #576]	; (8003050 <motor_task_init+0x2a8>)
 8002e0e:	61da      	str	r2, [r3, #28]
	 pos_params[0].speed_alpha = 0.98;
 8002e10:	4b8b      	ldr	r3, [pc, #556]	; (8003040 <motor_task_init+0x298>)
 8002e12:	4a90      	ldr	r2, [pc, #576]	; (8003054 <motor_task_init+0x2ac>)
 8002e14:	621a      	str	r2, [r3, #32]
	 pos_params[0].integral_max = 8.0e6; // Accumulates difference of ticks at 4kHz, must be big
 8002e16:	4b8a      	ldr	r3, [pc, #552]	; (8003040 <motor_task_init+0x298>)
 8002e18:	4a8f      	ldr	r2, [pc, #572]	; (8003058 <motor_task_init+0x2b0>)
 8002e1a:	611a      	str	r2, [r3, #16]
	 pos_params[0].integral_min = -8.0e6; // Accumulates difference of ticks at 4kHz, must be big
 8002e1c:	4b88      	ldr	r3, [pc, #544]	; (8003040 <motor_task_init+0x298>)
 8002e1e:	4a8f      	ldr	r2, [pc, #572]	; (800305c <motor_task_init+0x2b4>)
 8002e20:	615a      	str	r2, [r3, #20]
	 pos_params[0].ki = (0.4 * pos_params[0].cmd_max) / pos_params[0].integral_max; // Maximum is 40% of command
 8002e22:	4b87      	ldr	r3, [pc, #540]	; (8003040 <motor_task_init+0x298>)
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fd fb36 	bl	8000498 <__aeabi_f2d>
 8002e2c:	a376      	add	r3, pc, #472	; (adr r3, 8003008 <motor_task_init+0x260>)
 8002e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e32:	f7fd fb89 	bl	8000548 <__aeabi_dmul>
 8002e36:	4603      	mov	r3, r0
 8002e38:	460c      	mov	r4, r1
 8002e3a:	4625      	mov	r5, r4
 8002e3c:	461c      	mov	r4, r3
 8002e3e:	4b80      	ldr	r3, [pc, #512]	; (8003040 <motor_task_init+0x298>)
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fd fb28 	bl	8000498 <__aeabi_f2d>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	4629      	mov	r1, r5
 8002e50:	f7fd fca4 	bl	800079c <__aeabi_ddiv>
 8002e54:	4603      	mov	r3, r0
 8002e56:	460c      	mov	r4, r1
 8002e58:	4618      	mov	r0, r3
 8002e5a:	4621      	mov	r1, r4
 8002e5c:	f7fd fe4c 	bl	8000af8 <__aeabi_d2f>
 8002e60:	4602      	mov	r2, r0
 8002e62:	4b77      	ldr	r3, [pc, #476]	; (8003040 <motor_task_init+0x298>)
 8002e64:	629a      	str	r2, [r3, #40]	; 0x28

	 pos_params[1].kp = 250.0;
 8002e66:	4b76      	ldr	r3, [pc, #472]	; (8003040 <motor_task_init+0x298>)
 8002e68:	4a76      	ldr	r2, [pc, #472]	; (8003044 <motor_task_init+0x29c>)
 8002e6a:	655a      	str	r2, [r3, #84]	; 0x54
	 pos_params[1].kd = -5000.0;
 8002e6c:	4b74      	ldr	r3, [pc, #464]	; (8003040 <motor_task_init+0x298>)
 8002e6e:	4a76      	ldr	r2, [pc, #472]	; (8003048 <motor_task_init+0x2a0>)
 8002e70:	65da      	str	r2, [r3, #92]	; 0x5c
	 pos_params[1].cmd_max = 10000.0;
 8002e72:	4b73      	ldr	r3, [pc, #460]	; (8003040 <motor_task_init+0x298>)
 8002e74:	4a75      	ldr	r2, [pc, #468]	; (800304c <motor_task_init+0x2a4>)
 8002e76:	649a      	str	r2, [r3, #72]	; 0x48
	 pos_params[1].cmd_min = -10000.0;
 8002e78:	4b71      	ldr	r3, [pc, #452]	; (8003040 <motor_task_init+0x298>)
 8002e7a:	4a75      	ldr	r2, [pc, #468]	; (8003050 <motor_task_init+0x2a8>)
 8002e7c:	64da      	str	r2, [r3, #76]	; 0x4c
	 pos_params[1].speed_alpha = 0.98;
 8002e7e:	4b70      	ldr	r3, [pc, #448]	; (8003040 <motor_task_init+0x298>)
 8002e80:	4a74      	ldr	r2, [pc, #464]	; (8003054 <motor_task_init+0x2ac>)
 8002e82:	651a      	str	r2, [r3, #80]	; 0x50
	 pos_params[1].integral_max = 8.0e6; // Accumulates difference of ticks at 4kHz, must be big
 8002e84:	4b6e      	ldr	r3, [pc, #440]	; (8003040 <motor_task_init+0x298>)
 8002e86:	4a74      	ldr	r2, [pc, #464]	; (8003058 <motor_task_init+0x2b0>)
 8002e88:	641a      	str	r2, [r3, #64]	; 0x40
	 pos_params[1].integral_min = -8.0e6; // Accumulates difference of ticks at 4kHz, must be big
 8002e8a:	4b6d      	ldr	r3, [pc, #436]	; (8003040 <motor_task_init+0x298>)
 8002e8c:	4a73      	ldr	r2, [pc, #460]	; (800305c <motor_task_init+0x2b4>)
 8002e8e:	645a      	str	r2, [r3, #68]	; 0x44
	 pos_params[1].ki = (0.4 * pos_params[1].cmd_max) / pos_params[1].integral_max; // Maximum is 40% of command
 8002e90:	4b6b      	ldr	r3, [pc, #428]	; (8003040 <motor_task_init+0x298>)
 8002e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fd faff 	bl	8000498 <__aeabi_f2d>
 8002e9a:	a35b      	add	r3, pc, #364	; (adr r3, 8003008 <motor_task_init+0x260>)
 8002e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea0:	f7fd fb52 	bl	8000548 <__aeabi_dmul>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	460c      	mov	r4, r1
 8002ea8:	4625      	mov	r5, r4
 8002eaa:	461c      	mov	r4, r3
 8002eac:	4b64      	ldr	r3, [pc, #400]	; (8003040 <motor_task_init+0x298>)
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fd faf1 	bl	8000498 <__aeabi_f2d>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4620      	mov	r0, r4
 8002ebc:	4629      	mov	r1, r5
 8002ebe:	f7fd fc6d 	bl	800079c <__aeabi_ddiv>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	460c      	mov	r4, r1
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	4621      	mov	r1, r4
 8002eca:	f7fd fe15 	bl	8000af8 <__aeabi_d2f>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	4b5b      	ldr	r3, [pc, #364]	; (8003040 <motor_task_init+0x298>)
 8002ed2:	659a      	str	r2, [r3, #88]	; 0x58

	 // speed control params
	 speed_params[0].kp = 50.0;
 8002ed4:	4b62      	ldr	r3, [pc, #392]	; (8003060 <motor_task_init+0x2b8>)
 8002ed6:	4a63      	ldr	r2, [pc, #396]	; (8003064 <motor_task_init+0x2bc>)
 8002ed8:	625a      	str	r2, [r3, #36]	; 0x24
	 speed_params[0].kd = -100.0;
 8002eda:	4b61      	ldr	r3, [pc, #388]	; (8003060 <motor_task_init+0x2b8>)
 8002edc:	4a62      	ldr	r2, [pc, #392]	; (8003068 <motor_task_init+0x2c0>)
 8002ede:	62da      	str	r2, [r3, #44]	; 0x2c
	 speed_params[0].cmd_max = 10000.0;
 8002ee0:	4b5f      	ldr	r3, [pc, #380]	; (8003060 <motor_task_init+0x2b8>)
 8002ee2:	4a5a      	ldr	r2, [pc, #360]	; (800304c <motor_task_init+0x2a4>)
 8002ee4:	619a      	str	r2, [r3, #24]
	 speed_params[0].cmd_min = -10000.0;
 8002ee6:	4b5e      	ldr	r3, [pc, #376]	; (8003060 <motor_task_init+0x2b8>)
 8002ee8:	4a59      	ldr	r2, [pc, #356]	; (8003050 <motor_task_init+0x2a8>)
 8002eea:	61da      	str	r2, [r3, #28]
	 speed_params[0].speed_alpha = 0.95;
 8002eec:	4b5c      	ldr	r3, [pc, #368]	; (8003060 <motor_task_init+0x2b8>)
 8002eee:	4a5f      	ldr	r2, [pc, #380]	; (800306c <motor_task_init+0x2c4>)
 8002ef0:	621a      	str	r2, [r3, #32]
	 speed_params[0].integral_max = 8.0e6; // Accumulates difference of ticks at 4kHz, must be big
 8002ef2:	4b5b      	ldr	r3, [pc, #364]	; (8003060 <motor_task_init+0x2b8>)
 8002ef4:	4a58      	ldr	r2, [pc, #352]	; (8003058 <motor_task_init+0x2b0>)
 8002ef6:	611a      	str	r2, [r3, #16]
	 speed_params[0].integral_min = -8.0e6; // Accumulates difference of ticks at 4kHz, must be big
 8002ef8:	4b59      	ldr	r3, [pc, #356]	; (8003060 <motor_task_init+0x2b8>)
 8002efa:	4a58      	ldr	r2, [pc, #352]	; (800305c <motor_task_init+0x2b4>)
 8002efc:	615a      	str	r2, [r3, #20]
	 speed_params[0].ki = 0.0;
 8002efe:	4b58      	ldr	r3, [pc, #352]	; (8003060 <motor_task_init+0x2b8>)
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	629a      	str	r2, [r3, #40]	; 0x28

 	 speed_params[1].kp = 50.0;
 8002f06:	4b56      	ldr	r3, [pc, #344]	; (8003060 <motor_task_init+0x2b8>)
 8002f08:	4a56      	ldr	r2, [pc, #344]	; (8003064 <motor_task_init+0x2bc>)
 8002f0a:	655a      	str	r2, [r3, #84]	; 0x54
	 speed_params[1].kd = -100.0;
 8002f0c:	4b54      	ldr	r3, [pc, #336]	; (8003060 <motor_task_init+0x2b8>)
 8002f0e:	4a56      	ldr	r2, [pc, #344]	; (8003068 <motor_task_init+0x2c0>)
 8002f10:	65da      	str	r2, [r3, #92]	; 0x5c
	 speed_params[1].cmd_max = 10000.0;
 8002f12:	4b53      	ldr	r3, [pc, #332]	; (8003060 <motor_task_init+0x2b8>)
 8002f14:	4a4d      	ldr	r2, [pc, #308]	; (800304c <motor_task_init+0x2a4>)
 8002f16:	649a      	str	r2, [r3, #72]	; 0x48
	 speed_params[1].cmd_min = -10000.0;
 8002f18:	4b51      	ldr	r3, [pc, #324]	; (8003060 <motor_task_init+0x2b8>)
 8002f1a:	4a4d      	ldr	r2, [pc, #308]	; (8003050 <motor_task_init+0x2a8>)
 8002f1c:	64da      	str	r2, [r3, #76]	; 0x4c
	 speed_params[1].speed_alpha = 0.95;
 8002f1e:	4b50      	ldr	r3, [pc, #320]	; (8003060 <motor_task_init+0x2b8>)
 8002f20:	4a52      	ldr	r2, [pc, #328]	; (800306c <motor_task_init+0x2c4>)
 8002f22:	651a      	str	r2, [r3, #80]	; 0x50
	 speed_params[1].integral_max = 8.0e6; // Accumulates difference of ticks at 4kHz, must be big
 8002f24:	4b4e      	ldr	r3, [pc, #312]	; (8003060 <motor_task_init+0x2b8>)
 8002f26:	4a4c      	ldr	r2, [pc, #304]	; (8003058 <motor_task_init+0x2b0>)
 8002f28:	641a      	str	r2, [r3, #64]	; 0x40
	 speed_params[1].integral_min = -8.0e6; // Accumulates difference of ticks at 4kHz, must be big
 8002f2a:	4b4d      	ldr	r3, [pc, #308]	; (8003060 <motor_task_init+0x2b8>)
 8002f2c:	4a4b      	ldr	r2, [pc, #300]	; (800305c <motor_task_init+0x2b4>)
 8002f2e:	645a      	str	r2, [r3, #68]	; 0x44
	 speed_params[1].ki = 0.0;
 8002f30:	4b4b      	ldr	r3, [pc, #300]	; (8003060 <motor_task_init+0x2b8>)
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	659a      	str	r2, [r3, #88]	; 0x58

	 // current control params
	 cur_params[0].kp = 3.0;
 8002f38:	4b4d      	ldr	r3, [pc, #308]	; (8003070 <motor_task_init+0x2c8>)
 8002f3a:	4a4e      	ldr	r2, [pc, #312]	; (8003074 <motor_task_init+0x2cc>)
 8002f3c:	625a      	str	r2, [r3, #36]	; 0x24
	 cur_params[0].kd = 0.0;
 8002f3e:	4b4c      	ldr	r3, [pc, #304]	; (8003070 <motor_task_init+0x2c8>)
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	62da      	str	r2, [r3, #44]	; 0x2c
	 cur_params[0].cmd_max = 10000.0;
 8002f46:	4b4a      	ldr	r3, [pc, #296]	; (8003070 <motor_task_init+0x2c8>)
 8002f48:	4a40      	ldr	r2, [pc, #256]	; (800304c <motor_task_init+0x2a4>)
 8002f4a:	619a      	str	r2, [r3, #24]
	 cur_params[0].cmd_min = -10000.0;
 8002f4c:	4b48      	ldr	r3, [pc, #288]	; (8003070 <motor_task_init+0x2c8>)
 8002f4e:	4a40      	ldr	r2, [pc, #256]	; (8003050 <motor_task_init+0x2a8>)
 8002f50:	61da      	str	r2, [r3, #28]
	 cur_params[0].speed_alpha = 0.98;
 8002f52:	4b47      	ldr	r3, [pc, #284]	; (8003070 <motor_task_init+0x2c8>)
 8002f54:	4a3f      	ldr	r2, [pc, #252]	; (8003054 <motor_task_init+0x2ac>)
 8002f56:	621a      	str	r2, [r3, #32]
	 cur_params[0].integral_max = 10000.0; // Accumulates difference of ticks at 4kHz, must be big
 8002f58:	4b45      	ldr	r3, [pc, #276]	; (8003070 <motor_task_init+0x2c8>)
 8002f5a:	4a3c      	ldr	r2, [pc, #240]	; (800304c <motor_task_init+0x2a4>)
 8002f5c:	611a      	str	r2, [r3, #16]
	 cur_params[0].integral_min = -10000.0; // Accumulates difference of ticks at 4kHz, must be big
 8002f5e:	4b44      	ldr	r3, [pc, #272]	; (8003070 <motor_task_init+0x2c8>)
 8002f60:	4a3b      	ldr	r2, [pc, #236]	; (8003050 <motor_task_init+0x2a8>)
 8002f62:	615a      	str	r2, [r3, #20]
	 cur_params[0].ki = (0.95 * cur_params[0].cmd_max) / cur_params[0].integral_max;
 8002f64:	4b42      	ldr	r3, [pc, #264]	; (8003070 <motor_task_init+0x2c8>)
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fd fa95 	bl	8000498 <__aeabi_f2d>
 8002f6e:	a328      	add	r3, pc, #160	; (adr r3, 8003010 <motor_task_init+0x268>)
 8002f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f74:	f7fd fae8 	bl	8000548 <__aeabi_dmul>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	460c      	mov	r4, r1
 8002f7c:	4625      	mov	r5, r4
 8002f7e:	461c      	mov	r4, r3
 8002f80:	4b3b      	ldr	r3, [pc, #236]	; (8003070 <motor_task_init+0x2c8>)
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fd fa87 	bl	8000498 <__aeabi_f2d>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4620      	mov	r0, r4
 8002f90:	4629      	mov	r1, r5
 8002f92:	f7fd fc03 	bl	800079c <__aeabi_ddiv>
 8002f96:	4603      	mov	r3, r0
 8002f98:	460c      	mov	r4, r1
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	4621      	mov	r1, r4
 8002f9e:	f7fd fdab 	bl	8000af8 <__aeabi_d2f>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	4b32      	ldr	r3, [pc, #200]	; (8003070 <motor_task_init+0x2c8>)
 8002fa6:	629a      	str	r2, [r3, #40]	; 0x28

	 cur_params[1].kp = cur_params[0].kp;
 8002fa8:	4b31      	ldr	r3, [pc, #196]	; (8003070 <motor_task_init+0x2c8>)
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	4a30      	ldr	r2, [pc, #192]	; (8003070 <motor_task_init+0x2c8>)
 8002fae:	6553      	str	r3, [r2, #84]	; 0x54
	 cur_params[1].kd = cur_params[0].kd;
 8002fb0:	4b2f      	ldr	r3, [pc, #188]	; (8003070 <motor_task_init+0x2c8>)
 8002fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb4:	4a2e      	ldr	r2, [pc, #184]	; (8003070 <motor_task_init+0x2c8>)
 8002fb6:	65d3      	str	r3, [r2, #92]	; 0x5c
	 cur_params[1].cmd_max = cur_params[0].cmd_max;
 8002fb8:	4b2d      	ldr	r3, [pc, #180]	; (8003070 <motor_task_init+0x2c8>)
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	4a2c      	ldr	r2, [pc, #176]	; (8003070 <motor_task_init+0x2c8>)
 8002fbe:	6493      	str	r3, [r2, #72]	; 0x48
	 cur_params[1].cmd_min = cur_params[0].cmd_min;
 8002fc0:	4b2b      	ldr	r3, [pc, #172]	; (8003070 <motor_task_init+0x2c8>)
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	4a2a      	ldr	r2, [pc, #168]	; (8003070 <motor_task_init+0x2c8>)
 8002fc6:	64d3      	str	r3, [r2, #76]	; 0x4c
	 cur_params[1].speed_alpha = cur_params[0].speed_alpha;
 8002fc8:	4b29      	ldr	r3, [pc, #164]	; (8003070 <motor_task_init+0x2c8>)
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	4a28      	ldr	r2, [pc, #160]	; (8003070 <motor_task_init+0x2c8>)
 8002fce:	6513      	str	r3, [r2, #80]	; 0x50
	 cur_params[1].integral_max = cur_params[0].integral_max;
 8002fd0:	4b27      	ldr	r3, [pc, #156]	; (8003070 <motor_task_init+0x2c8>)
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	4a26      	ldr	r2, [pc, #152]	; (8003070 <motor_task_init+0x2c8>)
 8002fd6:	6413      	str	r3, [r2, #64]	; 0x40
	 cur_params[1].integral_min = cur_params[0].integral_min;
 8002fd8:	4b25      	ldr	r3, [pc, #148]	; (8003070 <motor_task_init+0x2c8>)
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	4a24      	ldr	r2, [pc, #144]	; (8003070 <motor_task_init+0x2c8>)
 8002fde:	6453      	str	r3, [r2, #68]	; 0x44
	 cur_params[1].ki = cur_params[0].ki;
 8002fe0:	4b23      	ldr	r3, [pc, #140]	; (8003070 <motor_task_init+0x2c8>)
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe4:	4a22      	ldr	r2, [pc, #136]	; (8003070 <motor_task_init+0x2c8>)
 8002fe6:	6593      	str	r3, [r2, #88]	; 0x58

	 motors[0].reverse_direction = true;
 8002fe8:	4b23      	ldr	r3, [pc, #140]	; (8003078 <motor_task_init+0x2d0>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	 motors[0].duty = 0.0;
 8002ff0:	4b21      	ldr	r3, [pc, #132]	; (8003078 <motor_task_init+0x2d0>)
 8002ff2:	f04f 0200 	mov.w	r2, #0
 8002ff6:	60da      	str	r2, [r3, #12]
	 motors[0].ticks_per_rev = TICKS_PER_REVOLUTION_DEFAULT;
 8002ff8:	4b1f      	ldr	r3, [pc, #124]	; (8003078 <motor_task_init+0x2d0>)
 8002ffa:	f241 0268 	movw	r2, #4200	; 0x1068
 8002ffe:	629a      	str	r2, [r3, #40]	; 0x28
 8003000:	e03c      	b.n	800307c <motor_task_init+0x2d4>
 8003002:	bf00      	nop
 8003004:	f3af 8000 	nop.w
 8003008:	9999999a 	.word	0x9999999a
 800300c:	3fd99999 	.word	0x3fd99999
 8003010:	66666666 	.word	0x66666666
 8003014:	3fee6666 	.word	0x3fee6666
 8003018:	20000d88 	.word	0x20000d88
 800301c:	20000f24 	.word	0x20000f24
 8003020:	3d6147ae 	.word	0x3d6147ae
 8003024:	3d851eb8 	.word	0x3d851eb8
 8003028:	20000f0c 	.word	0x20000f0c
 800302c:	41700000 	.word	0x41700000
 8003030:	c2f00000 	.word	0xc2f00000
 8003034:	455ac000 	.word	0x455ac000
 8003038:	45228000 	.word	0x45228000
 800303c:	43160000 	.word	0x43160000
 8003040:	20000dec 	.word	0x20000dec
 8003044:	437a0000 	.word	0x437a0000
 8003048:	c59c4000 	.word	0xc59c4000
 800304c:	461c4000 	.word	0x461c4000
 8003050:	c61c4000 	.word	0xc61c4000
 8003054:	3f7ae148 	.word	0x3f7ae148
 8003058:	4af42400 	.word	0x4af42400
 800305c:	caf42400 	.word	0xcaf42400
 8003060:	20000e4c 	.word	0x20000e4c
 8003064:	42480000 	.word	0x42480000
 8003068:	c2c80000 	.word	0xc2c80000
 800306c:	3f733333 	.word	0x3f733333
 8003070:	20000eac 	.word	0x20000eac
 8003074:	40400000 	.word	0x40400000
 8003078:	20000d8c 	.word	0x20000d8c
	 motors[1].reverse_direction = false;
 800307c:	4b43      	ldr	r3, [pc, #268]	; (800318c <motor_task_init+0x3e4>)
 800307e:	2200      	movs	r2, #0
 8003080:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	 motors[1].duty = 0.0;
 8003084:	4b41      	ldr	r3, [pc, #260]	; (800318c <motor_task_init+0x3e4>)
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	63da      	str	r2, [r3, #60]	; 0x3c
	 motors[1].ticks_per_rev = TICKS_PER_REVOLUTION_DEFAULT;
 800308c:	4b3f      	ldr	r3, [pc, #252]	; (800318c <motor_task_init+0x3e4>)
 800308e:	f241 0268 	movw	r2, #4200	; 0x1068
 8003092:	659a      	str	r2, [r3, #88]	; 0x58

	 motor_tele_timer_handle = xTimerCreate(
 8003094:	4b3e      	ldr	r3, [pc, #248]	; (8003190 <motor_task_init+0x3e8>)
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	2300      	movs	r3, #0
 800309a:	2201      	movs	r2, #1
 800309c:	2114      	movs	r1, #20
 800309e:	483d      	ldr	r0, [pc, #244]	; (8003194 <motor_task_init+0x3ec>)
 80030a0:	f006 faec 	bl	800967c <xTimerCreate>
 80030a4:	4602      	mov	r2, r0
 80030a6:	4b3c      	ldr	r3, [pc, #240]	; (8003198 <motor_task_init+0x3f0>)
 80030a8:	601a      	str	r2, [r3, #0]
	 		 pdMS_TO_TICKS(20),
	 		 pdTRUE,
	 		 NULL,
	 		 vMotorTelemetryTimerCallback);

	 if(motor_tele_timer_handle)
 80030aa:	4b3b      	ldr	r3, [pc, #236]	; (8003198 <motor_task_init+0x3f0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00b      	beq.n	80030ca <motor_task_init+0x322>
	 {
	 	 xTimerStart(motor_tele_timer_handle, 10);
 80030b2:	4b39      	ldr	r3, [pc, #228]	; (8003198 <motor_task_init+0x3f0>)
 80030b4:	681c      	ldr	r4, [r3, #0]
 80030b6:	f005 fd95 	bl	8008be4 <xTaskGetTickCount>
 80030ba:	4602      	mov	r2, r0
 80030bc:	230a      	movs	r3, #10
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	2300      	movs	r3, #0
 80030c2:	2101      	movs	r1, #1
 80030c4:	4620      	mov	r0, r4
 80030c6:	f006 fb35 	bl	8009734 <xTimerGenericCommand>
	 }

	 // Enable PWM channels for lights and motor driving
	 TIM2->CR1 |= TIM_CR1_CEN;
 80030ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	6013      	str	r3, [r2, #0]
	 TIM13->CR1 |= TIM_CR1_CEN;
 80030da:	4b30      	ldr	r3, [pc, #192]	; (800319c <motor_task_init+0x3f4>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a2f      	ldr	r2, [pc, #188]	; (800319c <motor_task_init+0x3f4>)
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	6013      	str	r3, [r2, #0]
	 TIM14->CR1 |= TIM_CR1_CEN;
 80030e6:	4b2e      	ldr	r3, [pc, #184]	; (80031a0 <motor_task_init+0x3f8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a2d      	ldr	r2, [pc, #180]	; (80031a0 <motor_task_init+0x3f8>)
 80030ec:	f043 0301 	orr.w	r3, r3, #1
 80030f0:	6013      	str	r3, [r2, #0]
	 TIM4->CR1 |= TIM_CR1_CEN; // Control loop timer
 80030f2:	4b2c      	ldr	r3, [pc, #176]	; (80031a4 <motor_task_init+0x3fc>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a2b      	ldr	r2, [pc, #172]	; (80031a4 <motor_task_init+0x3fc>)
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	6013      	str	r3, [r2, #0]
	 TIM9->CR1 |= TIM_CR1_CEN; // ADC sample loop timer
 80030fe:	4b2a      	ldr	r3, [pc, #168]	; (80031a8 <motor_task_init+0x400>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a29      	ldr	r2, [pc, #164]	; (80031a8 <motor_task_init+0x400>)
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	6013      	str	r3, [r2, #0]

	 TIM2->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E);
 800310a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003114:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8003118:	f043 0311 	orr.w	r3, r3, #17
 800311c:	6213      	str	r3, [r2, #32]
	 TIM13->CCER |= (TIM_CCER_CC1E);
 800311e:	4b1f      	ldr	r3, [pc, #124]	; (800319c <motor_task_init+0x3f4>)
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	4a1e      	ldr	r2, [pc, #120]	; (800319c <motor_task_init+0x3f4>)
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	6213      	str	r3, [r2, #32]
	 TIM14->CCER |= (TIM_CCER_CC1E);
 800312a:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <motor_task_init+0x3f8>)
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	4a1c      	ldr	r2, [pc, #112]	; (80031a0 <motor_task_init+0x3f8>)
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	6213      	str	r3, [r2, #32]
	 TIM4->CCER |= (TIM_CCER_CC1E);
 8003136:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <motor_task_init+0x3fc>)
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	4a1a      	ldr	r2, [pc, #104]	; (80031a4 <motor_task_init+0x3fc>)
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	6213      	str	r3, [r2, #32]
	 TIM9->CCER |= (TIM_CCER_CC1E);
 8003142:	4b19      	ldr	r3, [pc, #100]	; (80031a8 <motor_task_init+0x400>)
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	4a18      	ldr	r2, [pc, #96]	; (80031a8 <motor_task_init+0x400>)
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	6213      	str	r3, [r2, #32]

	 TIM4->DIER |= (TIM_DIER_CC1IE);
 800314e:	4b15      	ldr	r3, [pc, #84]	; (80031a4 <motor_task_init+0x3fc>)
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	4a14      	ldr	r2, [pc, #80]	; (80031a4 <motor_task_init+0x3fc>)
 8003154:	f043 0302 	orr.w	r3, r3, #2
 8003158:	60d3      	str	r3, [r2, #12]
	 TIM9->DIER |= (TIM_DIER_CC1IE);
 800315a:	4b13      	ldr	r3, [pc, #76]	; (80031a8 <motor_task_init+0x400>)
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	4a12      	ldr	r2, [pc, #72]	; (80031a8 <motor_task_init+0x400>)
 8003160:	f043 0302 	orr.w	r3, r3, #2
 8003164:	60d3      	str	r3, [r2, #12]

	 // Enable encoder timers
	 TIM1->CR1 |= TIM_CR1_CEN;
 8003166:	4b11      	ldr	r3, [pc, #68]	; (80031ac <motor_task_init+0x404>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a10      	ldr	r2, [pc, #64]	; (80031ac <motor_task_init+0x404>)
 800316c:	f043 0301 	orr.w	r3, r3, #1
 8003170:	6013      	str	r3, [r2, #0]
	 TIM3->CR1 |= TIM_CR1_CEN;
 8003172:	4b0f      	ldr	r3, [pc, #60]	; (80031b0 <motor_task_init+0x408>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a0e      	ldr	r2, [pc, #56]	; (80031b0 <motor_task_init+0x408>)
 8003178:	f043 0301 	orr.w	r3, r3, #1
 800317c:	6013      	str	r3, [r2, #0]

	  vTaskDelay(pdMS_TO_TICKS(2500));
 800317e:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8003182:	f005 fbed 	bl	8008960 <vTaskDelay>
 }
 8003186:	bf00      	nop
 8003188:	46bd      	mov	sp, r7
 800318a:	bdb0      	pop	{r4, r5, r7, pc}
 800318c:	20000d8c 	.word	0x20000d8c
 8003190:	080025d5 	.word	0x080025d5
 8003194:	0800dce0 	.word	0x0800dce0
 8003198:	20000d84 	.word	0x20000d84
 800319c:	40001c00 	.word	0x40001c00
 80031a0:	40002000 	.word	0x40002000
 80031a4:	40000800 	.word	0x40000800
 80031a8:	40014000 	.word	0x40014000
 80031ac:	40010000 	.word	0x40010000
 80031b0:	40000400 	.word	0x40000400

080031b4 <motor_task>:

 void motor_task(void)
 {
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
	 vControlTimerCallback();
 80031b8:	f7ff fc0e 	bl	80029d8 <vControlTimerCallback>
 }
 80031bc:	bf00      	nop
 80031be:	bd80      	pop	{r7, pc}

080031c0 <set_control_mode>:
 *
 *	\param mode The controller mode
 *	\param index The motor index
 */
 void set_control_mode(CONTROL_TYPE mode, uint8_t index)
 {
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	4603      	mov	r3, r0
 80031c8:	460a      	mov	r2, r1
 80031ca:	71fb      	strb	r3, [r7, #7]
 80031cc:	4613      	mov	r3, r2
 80031ce:	71bb      	strb	r3, [r7, #6]
	if(index >= NUMBER_MOTORS)
 80031d0:	79bb      	ldrb	r3, [r7, #6]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d804      	bhi.n	80031e0 <set_control_mode+0x20>
	{
		return;
	}
	control_type[index] = mode;
 80031d6:	79bb      	ldrb	r3, [r7, #6]
 80031d8:	4904      	ldr	r1, [pc, #16]	; (80031ec <set_control_mode+0x2c>)
 80031da:	79fa      	ldrb	r2, [r7, #7]
 80031dc:	54ca      	strb	r2, [r1, r3]
 80031de:	e000      	b.n	80031e2 <set_control_mode+0x22>
		return;
 80031e0:	bf00      	nop
 }
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	20000d88 	.word	0x20000d88

080031f0 <set_motor_position>:
 *
 *	\param rotations_deg The desired position
 *	\param index The motor index
 */
 void set_motor_position(float rotations_deg, uint8_t index)
 {
 80031f0:	b5b0      	push	{r4, r5, r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80031fa:	4603      	mov	r3, r0
 80031fc:	70fb      	strb	r3, [r7, #3]
	if(index >= NUMBER_MOTORS)
 80031fe:	78fb      	ldrb	r3, [r7, #3]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d838      	bhi.n	8003276 <set_motor_position+0x86>
	{
		return;
	}
	motors[index].desired_position_deg = rotations_deg;
 8003204:	78fa      	ldrb	r2, [r7, #3]
 8003206:	491e      	ldr	r1, [pc, #120]	; (8003280 <set_motor_position+0x90>)
 8003208:	4613      	mov	r3, r2
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	4413      	add	r3, r2
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	440b      	add	r3, r1
 8003212:	3304      	adds	r3, #4
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	601a      	str	r2, [r3, #0]
	motors[index].ticks_setpoint = (int32_t) (motors[index].ticks_per_rev) * (rotations_deg / 360.0);
 8003218:	78fa      	ldrb	r2, [r7, #3]
 800321a:	4919      	ldr	r1, [pc, #100]	; (8003280 <set_motor_position+0x90>)
 800321c:	4613      	mov	r3, r2
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	4413      	add	r3, r2
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	440b      	add	r3, r1
 8003226:	3328      	adds	r3, #40	; 0x28
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f7fd f922 	bl	8000474 <__aeabi_i2d>
 8003230:	4604      	mov	r4, r0
 8003232:	460d      	mov	r5, r1
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7fd f92f 	bl	8000498 <__aeabi_f2d>
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	4b11      	ldr	r3, [pc, #68]	; (8003284 <set_motor_position+0x94>)
 8003240:	f7fd faac 	bl	800079c <__aeabi_ddiv>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4620      	mov	r0, r4
 800324a:	4629      	mov	r1, r5
 800324c:	f7fd f97c 	bl	8000548 <__aeabi_dmul>
 8003250:	4603      	mov	r3, r0
 8003252:	460c      	mov	r4, r1
 8003254:	461a      	mov	r2, r3
 8003256:	4623      	mov	r3, r4
 8003258:	78fc      	ldrb	r4, [r7, #3]
 800325a:	4610      	mov	r0, r2
 800325c:	4619      	mov	r1, r3
 800325e:	f7fd fc23 	bl	8000aa8 <__aeabi_d2iz>
 8003262:	4601      	mov	r1, r0
 8003264:	4a06      	ldr	r2, [pc, #24]	; (8003280 <set_motor_position+0x90>)
 8003266:	4623      	mov	r3, r4
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	4423      	add	r3, r4
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	4413      	add	r3, r2
 8003270:	3324      	adds	r3, #36	; 0x24
 8003272:	6019      	str	r1, [r3, #0]
 8003274:	e000      	b.n	8003278 <set_motor_position+0x88>
		return;
 8003276:	bf00      	nop
 }
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bdb0      	pop	{r4, r5, r7, pc}
 800327e:	bf00      	nop
 8003280:	20000d8c 	.word	0x20000d8c
 8003284:	40768000 	.word	0x40768000

08003288 <get_motor_position>:
 *	\brief Gets the motor current position
 *
 *	\param index The motor index
 */
 float get_motor_position(uint8_t index)
 {
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	71fb      	strb	r3, [r7, #7]
	if(index >= NUMBER_MOTORS)
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d902      	bls.n	800329e <get_motor_position+0x16>
	{
		return 0.0;
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	e030      	b.n	8003300 <get_motor_position+0x78>
	}
	motors[index].current_position_deg = ((float) motors[index].ticks_count / (float) motors[index].ticks_per_rev) * 360.0;
 800329e:	79fa      	ldrb	r2, [r7, #7]
 80032a0:	491c      	ldr	r1, [pc, #112]	; (8003314 <get_motor_position+0x8c>)
 80032a2:	4613      	mov	r3, r2
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	4413      	add	r3, r2
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	440b      	add	r3, r1
 80032ac:	3320      	adds	r3, #32
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	ee07 3a90 	vmov	s15, r3
 80032b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80032b8:	79fa      	ldrb	r2, [r7, #7]
 80032ba:	4916      	ldr	r1, [pc, #88]	; (8003314 <get_motor_position+0x8c>)
 80032bc:	4613      	mov	r3, r2
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	4413      	add	r3, r2
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	440b      	add	r3, r1
 80032c6:	3328      	adds	r3, #40	; 0x28
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	ee07 3a90 	vmov	s15, r3
 80032ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032d6:	79fa      	ldrb	r2, [r7, #7]
 80032d8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003318 <get_motor_position+0x90>
 80032dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032e0:	490c      	ldr	r1, [pc, #48]	; (8003314 <get_motor_position+0x8c>)
 80032e2:	4613      	mov	r3, r2
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	4413      	add	r3, r2
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	440b      	add	r3, r1
 80032ec:	edc3 7a00 	vstr	s15, [r3]
	return motors[index].current_position_deg;
 80032f0:	79fa      	ldrb	r2, [r7, #7]
 80032f2:	4908      	ldr	r1, [pc, #32]	; (8003314 <get_motor_position+0x8c>)
 80032f4:	4613      	mov	r3, r2
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	4413      	add	r3, r2
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	440b      	add	r3, r1
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	ee07 3a90 	vmov	s15, r3
 }
 8003304:	eeb0 0a67 	vmov.f32	s0, s15
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	20000d8c 	.word	0x20000d8c
 8003318:	43b40000 	.word	0x43b40000

0800331c <set_motor_speed>:
 *
 *	\param speed The desired speed TODO units?
 *	\param index The motor index
 */
 void set_motor_speed(int32_t speed, uint8_t index)
 {
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	70fb      	strb	r3, [r7, #3]
	if(index >= NUMBER_MOTORS)
 8003328:	78fb      	ldrb	r3, [r7, #3]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d80a      	bhi.n	8003344 <set_motor_speed+0x28>
	{
		return;
	}
	motors[index].speed_setpoint = speed;
 800332e:	78fa      	ldrb	r2, [r7, #3]
 8003330:	4907      	ldr	r1, [pc, #28]	; (8003350 <set_motor_speed+0x34>)
 8003332:	4613      	mov	r3, r2
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	4413      	add	r3, r2
 8003338:	011b      	lsls	r3, r3, #4
 800333a:	440b      	add	r3, r1
 800333c:	3314      	adds	r3, #20
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	e000      	b.n	8003346 <set_motor_speed+0x2a>
		return;
 8003344:	bf00      	nop
 }
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	20000d8c 	.word	0x20000d8c

08003354 <set_motor_duty>:
 *
 *	\param speed The duty [-1,1]
 *	\param index The motor index
 */
 void set_motor_duty(float duty, uint8_t index)
 {
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	ed87 0a01 	vstr	s0, [r7, #4]
 800335e:	4603      	mov	r3, r0
 8003360:	70fb      	strb	r3, [r7, #3]
	if(index >= NUMBER_MOTORS)
 8003362:	78fb      	ldrb	r3, [r7, #3]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d821      	bhi.n	80033ac <set_motor_duty+0x58>
	{
		return;
	}
	if(duty > 1.0){duty = 1.0;}
 8003368:	edd7 7a01 	vldr	s15, [r7, #4]
 800336c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003378:	dd02      	ble.n	8003380 <set_motor_duty+0x2c>
 800337a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800337e:	607b      	str	r3, [r7, #4]
	if(duty < -1.0){duty = -1.0;}
 8003380:	edd7 7a01 	vldr	s15, [r7, #4]
 8003384:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003388:	eef4 7ac7 	vcmpe.f32	s15, s14
 800338c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003390:	d501      	bpl.n	8003396 <set_motor_duty+0x42>
 8003392:	4b09      	ldr	r3, [pc, #36]	; (80033b8 <set_motor_duty+0x64>)
 8003394:	607b      	str	r3, [r7, #4]

	motors[index].duty = duty;
 8003396:	78fa      	ldrb	r2, [r7, #3]
 8003398:	4908      	ldr	r1, [pc, #32]	; (80033bc <set_motor_duty+0x68>)
 800339a:	4613      	mov	r3, r2
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	4413      	add	r3, r2
 80033a0:	011b      	lsls	r3, r3, #4
 80033a2:	440b      	add	r3, r1
 80033a4:	330c      	adds	r3, #12
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	e000      	b.n	80033ae <set_motor_duty+0x5a>
		return;
 80033ac:	bf00      	nop
 }
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	bf800000 	.word	0xbf800000
 80033bc:	20000d8c 	.word	0x20000d8c

080033c0 <set_control_params_kp_min_max>:
 *  \param alpha The speed filter parameter
 *  \param cmd_min The minimum command scaled to [0-1] of pwm period
 *  \param cmd_max The maximum command scaled to [0-1] of pwm period
 */
 void set_control_params_kp_min_max(uint8_t index, uint8_t ctrl_index, float kp, float kd, float alpha, float cmd_min, float cmd_max)
 {
 80033c0:	b480      	push	{r7}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	460a      	mov	r2, r1
 80033ca:	ed87 0a04 	vstr	s0, [r7, #16]
 80033ce:	edc7 0a03 	vstr	s1, [r7, #12]
 80033d2:	ed87 1a02 	vstr	s2, [r7, #8]
 80033d6:	edc7 1a01 	vstr	s3, [r7, #4]
 80033da:	ed87 2a00 	vstr	s4, [r7]
 80033de:	75fb      	strb	r3, [r7, #23]
 80033e0:	4613      	mov	r3, r2
 80033e2:	75bb      	strb	r3, [r7, #22]
	if(index >= NUMBER_MOTORS)
 80033e4:	7dfb      	ldrb	r3, [r7, #23]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	f200 80d0 	bhi.w	800358c <set_control_params_kp_min_max+0x1cc>
	{
		return;
	}
	if(ctrl_index > 2)
 80033ec:	7dbb      	ldrb	r3, [r7, #22]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	f200 80ce 	bhi.w	8003590 <set_control_params_kp_min_max+0x1d0>
	{
		return;
	}

	if(ctrl_index == 0)
 80033f4:	7dbb      	ldrb	r3, [r7, #22]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d140      	bne.n	800347c <set_control_params_kp_min_max+0xbc>
	{
		pos_params[index].kp = kp;
 80033fa:	7dfa      	ldrb	r2, [r7, #23]
 80033fc:	4967      	ldr	r1, [pc, #412]	; (800359c <set_control_params_kp_min_max+0x1dc>)
 80033fe:	4613      	mov	r3, r2
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	4413      	add	r3, r2
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	440b      	add	r3, r1
 8003408:	3324      	adds	r3, #36	; 0x24
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	601a      	str	r2, [r3, #0]
		pos_params[index].kd = kd;
 800340e:	7dfa      	ldrb	r2, [r7, #23]
 8003410:	4962      	ldr	r1, [pc, #392]	; (800359c <set_control_params_kp_min_max+0x1dc>)
 8003412:	4613      	mov	r3, r2
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	4413      	add	r3, r2
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	440b      	add	r3, r1
 800341c:	332c      	adds	r3, #44	; 0x2c
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	601a      	str	r2, [r3, #0]
		pos_params[index].cmd_max = cmd_max * PWM_PERIOD;
 8003422:	7dfa      	ldrb	r2, [r7, #23]
 8003424:	edd7 7a00 	vldr	s15, [r7]
 8003428:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80035a0 <set_control_params_kp_min_max+0x1e0>
 800342c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003430:	495a      	ldr	r1, [pc, #360]	; (800359c <set_control_params_kp_min_max+0x1dc>)
 8003432:	4613      	mov	r3, r2
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	4413      	add	r3, r2
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	440b      	add	r3, r1
 800343c:	3318      	adds	r3, #24
 800343e:	edc3 7a00 	vstr	s15, [r3]
		pos_params[index].cmd_min = -cmd_min * PWM_PERIOD;
 8003442:	edd7 7a01 	vldr	s15, [r7, #4]
 8003446:	eef1 7a67 	vneg.f32	s15, s15
 800344a:	7dfa      	ldrb	r2, [r7, #23]
 800344c:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80035a0 <set_control_params_kp_min_max+0x1e0>
 8003450:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003454:	4951      	ldr	r1, [pc, #324]	; (800359c <set_control_params_kp_min_max+0x1dc>)
 8003456:	4613      	mov	r3, r2
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	4413      	add	r3, r2
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	440b      	add	r3, r1
 8003460:	331c      	adds	r3, #28
 8003462:	edc3 7a00 	vstr	s15, [r3]
		pos_params[index].speed_alpha = alpha;
 8003466:	7dfa      	ldrb	r2, [r7, #23]
 8003468:	494c      	ldr	r1, [pc, #304]	; (800359c <set_control_params_kp_min_max+0x1dc>)
 800346a:	4613      	mov	r3, r2
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	4413      	add	r3, r2
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	440b      	add	r3, r1
 8003474:	3320      	adds	r3, #32
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	e08a      	b.n	8003592 <set_control_params_kp_min_max+0x1d2>
	} else if(ctrl_index == 1)
 800347c:	7dbb      	ldrb	r3, [r7, #22]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d140      	bne.n	8003504 <set_control_params_kp_min_max+0x144>
	{
		speed_params[index].kp = kp;
 8003482:	7dfa      	ldrb	r2, [r7, #23]
 8003484:	4947      	ldr	r1, [pc, #284]	; (80035a4 <set_control_params_kp_min_max+0x1e4>)
 8003486:	4613      	mov	r3, r2
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	4413      	add	r3, r2
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	440b      	add	r3, r1
 8003490:	3324      	adds	r3, #36	; 0x24
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	601a      	str	r2, [r3, #0]
		speed_params[index].kd = kd;
 8003496:	7dfa      	ldrb	r2, [r7, #23]
 8003498:	4942      	ldr	r1, [pc, #264]	; (80035a4 <set_control_params_kp_min_max+0x1e4>)
 800349a:	4613      	mov	r3, r2
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	4413      	add	r3, r2
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	440b      	add	r3, r1
 80034a4:	332c      	adds	r3, #44	; 0x2c
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	601a      	str	r2, [r3, #0]
		speed_params[index].cmd_max = cmd_max * PWM_PERIOD;
 80034aa:	7dfa      	ldrb	r2, [r7, #23]
 80034ac:	edd7 7a00 	vldr	s15, [r7]
 80034b0:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80035a0 <set_control_params_kp_min_max+0x1e0>
 80034b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034b8:	493a      	ldr	r1, [pc, #232]	; (80035a4 <set_control_params_kp_min_max+0x1e4>)
 80034ba:	4613      	mov	r3, r2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	4413      	add	r3, r2
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	440b      	add	r3, r1
 80034c4:	3318      	adds	r3, #24
 80034c6:	edc3 7a00 	vstr	s15, [r3]
		speed_params[index].cmd_min = -cmd_min * PWM_PERIOD;
 80034ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80034ce:	eef1 7a67 	vneg.f32	s15, s15
 80034d2:	7dfa      	ldrb	r2, [r7, #23]
 80034d4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80035a0 <set_control_params_kp_min_max+0x1e0>
 80034d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034dc:	4931      	ldr	r1, [pc, #196]	; (80035a4 <set_control_params_kp_min_max+0x1e4>)
 80034de:	4613      	mov	r3, r2
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	4413      	add	r3, r2
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	440b      	add	r3, r1
 80034e8:	331c      	adds	r3, #28
 80034ea:	edc3 7a00 	vstr	s15, [r3]
		speed_params[index].speed_alpha = alpha;
 80034ee:	7dfa      	ldrb	r2, [r7, #23]
 80034f0:	492c      	ldr	r1, [pc, #176]	; (80035a4 <set_control_params_kp_min_max+0x1e4>)
 80034f2:	4613      	mov	r3, r2
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	4413      	add	r3, r2
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	440b      	add	r3, r1
 80034fc:	3320      	adds	r3, #32
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	e046      	b.n	8003592 <set_control_params_kp_min_max+0x1d2>
	} else if(ctrl_index == 2)
 8003504:	7dbb      	ldrb	r3, [r7, #22]
 8003506:	2b02      	cmp	r3, #2
 8003508:	d143      	bne.n	8003592 <set_control_params_kp_min_max+0x1d2>
	{
		cur_params[index].kp = kp;
 800350a:	7dfa      	ldrb	r2, [r7, #23]
 800350c:	4926      	ldr	r1, [pc, #152]	; (80035a8 <set_control_params_kp_min_max+0x1e8>)
 800350e:	4613      	mov	r3, r2
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	4413      	add	r3, r2
 8003514:	011b      	lsls	r3, r3, #4
 8003516:	440b      	add	r3, r1
 8003518:	3324      	adds	r3, #36	; 0x24
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	601a      	str	r2, [r3, #0]
		cur_params[index].kd = kd;
 800351e:	7dfa      	ldrb	r2, [r7, #23]
 8003520:	4921      	ldr	r1, [pc, #132]	; (80035a8 <set_control_params_kp_min_max+0x1e8>)
 8003522:	4613      	mov	r3, r2
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	4413      	add	r3, r2
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	440b      	add	r3, r1
 800352c:	332c      	adds	r3, #44	; 0x2c
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	601a      	str	r2, [r3, #0]
		cur_params[index].cmd_max = cmd_max * PWM_PERIOD;
 8003532:	7dfa      	ldrb	r2, [r7, #23]
 8003534:	edd7 7a00 	vldr	s15, [r7]
 8003538:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80035a0 <set_control_params_kp_min_max+0x1e0>
 800353c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003540:	4919      	ldr	r1, [pc, #100]	; (80035a8 <set_control_params_kp_min_max+0x1e8>)
 8003542:	4613      	mov	r3, r2
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	4413      	add	r3, r2
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	440b      	add	r3, r1
 800354c:	3318      	adds	r3, #24
 800354e:	edc3 7a00 	vstr	s15, [r3]
		cur_params[index].cmd_min = -cmd_min * PWM_PERIOD;
 8003552:	edd7 7a01 	vldr	s15, [r7, #4]
 8003556:	eef1 7a67 	vneg.f32	s15, s15
 800355a:	7dfa      	ldrb	r2, [r7, #23]
 800355c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80035a0 <set_control_params_kp_min_max+0x1e0>
 8003560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003564:	4910      	ldr	r1, [pc, #64]	; (80035a8 <set_control_params_kp_min_max+0x1e8>)
 8003566:	4613      	mov	r3, r2
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	4413      	add	r3, r2
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	440b      	add	r3, r1
 8003570:	331c      	adds	r3, #28
 8003572:	edc3 7a00 	vstr	s15, [r3]
		cur_params[index].speed_alpha = alpha;
 8003576:	7dfa      	ldrb	r2, [r7, #23]
 8003578:	490b      	ldr	r1, [pc, #44]	; (80035a8 <set_control_params_kp_min_max+0x1e8>)
 800357a:	4613      	mov	r3, r2
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	4413      	add	r3, r2
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	440b      	add	r3, r1
 8003584:	3320      	adds	r3, #32
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	e002      	b.n	8003592 <set_control_params_kp_min_max+0x1d2>
		return;
 800358c:	bf00      	nop
 800358e:	e000      	b.n	8003592 <set_control_params_kp_min_max+0x1d2>
		return;
 8003590:	bf00      	nop
	}
 }
 8003592:	371c      	adds	r7, #28
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	20000dec 	.word	0x20000dec
 80035a0:	461c4000 	.word	0x461c4000
 80035a4:	20000e4c 	.word	0x20000e4c
 80035a8:	20000eac 	.word	0x20000eac

080035ac <set_control_params_ki>:
 *	\param index The motor index
 *  \param ctrl_index Which controller to set, 0-position, 1-speed, 2-current
 *  \param ki The integral gain
 */
 void set_control_params_ki(uint8_t index, uint8_t ctrl_index, float ki)
 {
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	460a      	mov	r2, r1
 80035b6:	ed87 0a00 	vstr	s0, [r7]
 80035ba:	71fb      	strb	r3, [r7, #7]
 80035bc:	4613      	mov	r3, r2
 80035be:	71bb      	strb	r3, [r7, #6]
	if(index >= NUMBER_MOTORS)
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d82c      	bhi.n	8003620 <set_control_params_ki+0x74>
	{
		return;
	}
	if(ctrl_index > 2)
 80035c6:	79bb      	ldrb	r3, [r7, #6]
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d82b      	bhi.n	8003624 <set_control_params_ki+0x78>
	{
		return;
	}

	if(ctrl_index == 0)
 80035cc:	79bb      	ldrb	r3, [r7, #6]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10a      	bne.n	80035e8 <set_control_params_ki+0x3c>
	{
		pos_params[index].ki = ki;
 80035d2:	79fa      	ldrb	r2, [r7, #7]
 80035d4:	4916      	ldr	r1, [pc, #88]	; (8003630 <set_control_params_ki+0x84>)
 80035d6:	4613      	mov	r3, r2
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	4413      	add	r3, r2
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	440b      	add	r3, r1
 80035e0:	3328      	adds	r3, #40	; 0x28
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	e01e      	b.n	8003626 <set_control_params_ki+0x7a>
	} else if(ctrl_index == 1)
 80035e8:	79bb      	ldrb	r3, [r7, #6]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d10a      	bne.n	8003604 <set_control_params_ki+0x58>
	{
		speed_params[index].ki = ki;
 80035ee:	79fa      	ldrb	r2, [r7, #7]
 80035f0:	4910      	ldr	r1, [pc, #64]	; (8003634 <set_control_params_ki+0x88>)
 80035f2:	4613      	mov	r3, r2
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	4413      	add	r3, r2
 80035f8:	011b      	lsls	r3, r3, #4
 80035fa:	440b      	add	r3, r1
 80035fc:	3328      	adds	r3, #40	; 0x28
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	e010      	b.n	8003626 <set_control_params_ki+0x7a>
	} else if(ctrl_index == 2)
 8003604:	79bb      	ldrb	r3, [r7, #6]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d10d      	bne.n	8003626 <set_control_params_ki+0x7a>
	{
		cur_params[index].ki = ki;
 800360a:	79fa      	ldrb	r2, [r7, #7]
 800360c:	490a      	ldr	r1, [pc, #40]	; (8003638 <set_control_params_ki+0x8c>)
 800360e:	4613      	mov	r3, r2
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	4413      	add	r3, r2
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	440b      	add	r3, r1
 8003618:	3328      	adds	r3, #40	; 0x28
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	e002      	b.n	8003626 <set_control_params_ki+0x7a>
		return;
 8003620:	bf00      	nop
 8003622:	e000      	b.n	8003626 <set_control_params_ki+0x7a>
		return;
 8003624:	bf00      	nop
	}
 }
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	20000dec 	.word	0x20000dec
 8003634:	20000e4c 	.word	0x20000e4c
 8003638:	20000eac 	.word	0x20000eac

0800363c <set_control_params_int_max>:
 *	\param index The motor index
 *  \param ctrl_index Which controller to set, 0-position, 1-speed, 2-current
 *  \param int_max The maximum integral windup
 */
 void set_control_params_int_max(uint8_t index, uint8_t ctrl_index, float int_max)
 {
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	460a      	mov	r2, r1
 8003646:	ed87 0a00 	vstr	s0, [r7]
 800364a:	71fb      	strb	r3, [r7, #7]
 800364c:	4613      	mov	r3, r2
 800364e:	71bb      	strb	r3, [r7, #6]
	if(index >= NUMBER_MOTORS)
 8003650:	79fb      	ldrb	r3, [r7, #7]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d82c      	bhi.n	80036b0 <set_control_params_int_max+0x74>
	{
		return;
	}
	if(ctrl_index > 2)
 8003656:	79bb      	ldrb	r3, [r7, #6]
 8003658:	2b02      	cmp	r3, #2
 800365a:	d82b      	bhi.n	80036b4 <set_control_params_int_max+0x78>
	{
		return;
	}

	if(ctrl_index == 0)
 800365c:	79bb      	ldrb	r3, [r7, #6]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10a      	bne.n	8003678 <set_control_params_int_max+0x3c>
	{
		pos_params[index].integral_max = int_max;
 8003662:	79fa      	ldrb	r2, [r7, #7]
 8003664:	4916      	ldr	r1, [pc, #88]	; (80036c0 <set_control_params_int_max+0x84>)
 8003666:	4613      	mov	r3, r2
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	4413      	add	r3, r2
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	440b      	add	r3, r1
 8003670:	3310      	adds	r3, #16
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	e01e      	b.n	80036b6 <set_control_params_int_max+0x7a>
	} else if(ctrl_index == 1)
 8003678:	79bb      	ldrb	r3, [r7, #6]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d10a      	bne.n	8003694 <set_control_params_int_max+0x58>
	{
		speed_params[index].integral_max = int_max;
 800367e:	79fa      	ldrb	r2, [r7, #7]
 8003680:	4910      	ldr	r1, [pc, #64]	; (80036c4 <set_control_params_int_max+0x88>)
 8003682:	4613      	mov	r3, r2
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	4413      	add	r3, r2
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	440b      	add	r3, r1
 800368c:	3310      	adds	r3, #16
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	e010      	b.n	80036b6 <set_control_params_int_max+0x7a>
	} else if(ctrl_index == 2)
 8003694:	79bb      	ldrb	r3, [r7, #6]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d10d      	bne.n	80036b6 <set_control_params_int_max+0x7a>
	{
		cur_params[index].integral_max = int_max;
 800369a:	79fa      	ldrb	r2, [r7, #7]
 800369c:	490a      	ldr	r1, [pc, #40]	; (80036c8 <set_control_params_int_max+0x8c>)
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	440b      	add	r3, r1
 80036a8:	3310      	adds	r3, #16
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	e002      	b.n	80036b6 <set_control_params_int_max+0x7a>
		return;
 80036b0:	bf00      	nop
 80036b2:	e000      	b.n	80036b6 <set_control_params_int_max+0x7a>
		return;
 80036b4:	bf00      	nop
	}
 }
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	20000dec 	.word	0x20000dec
 80036c4:	20000e4c 	.word	0x20000e4c
 80036c8:	20000eac 	.word	0x20000eac

080036cc <set_control_params_int_min>:
 *	\param index The motor index
 *  \param ctrl_index Which controller to set, 0-position, 1-speed, 2-current
 *  \param int_min The minimum integral windup
 */
 void set_control_params_int_min(uint8_t index, uint8_t ctrl_index, float int_min)
 {
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	460a      	mov	r2, r1
 80036d6:	ed87 0a00 	vstr	s0, [r7]
 80036da:	71fb      	strb	r3, [r7, #7]
 80036dc:	4613      	mov	r3, r2
 80036de:	71bb      	strb	r3, [r7, #6]
	if(index >= NUMBER_MOTORS)
 80036e0:	79fb      	ldrb	r3, [r7, #7]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d82c      	bhi.n	8003740 <set_control_params_int_min+0x74>
	{
		return;
	}
	if(ctrl_index > 2)
 80036e6:	79bb      	ldrb	r3, [r7, #6]
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d82b      	bhi.n	8003744 <set_control_params_int_min+0x78>
	{
		return;
	}

	if(ctrl_index == 0)
 80036ec:	79bb      	ldrb	r3, [r7, #6]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10a      	bne.n	8003708 <set_control_params_int_min+0x3c>
	{
		pos_params[index].integral_min = int_min;
 80036f2:	79fa      	ldrb	r2, [r7, #7]
 80036f4:	4916      	ldr	r1, [pc, #88]	; (8003750 <set_control_params_int_min+0x84>)
 80036f6:	4613      	mov	r3, r2
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	4413      	add	r3, r2
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	440b      	add	r3, r1
 8003700:	3314      	adds	r3, #20
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	e01e      	b.n	8003746 <set_control_params_int_min+0x7a>
	} else if(ctrl_index == 1)
 8003708:	79bb      	ldrb	r3, [r7, #6]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d10a      	bne.n	8003724 <set_control_params_int_min+0x58>
	{
		speed_params[index].integral_min = int_min;
 800370e:	79fa      	ldrb	r2, [r7, #7]
 8003710:	4910      	ldr	r1, [pc, #64]	; (8003754 <set_control_params_int_min+0x88>)
 8003712:	4613      	mov	r3, r2
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	4413      	add	r3, r2
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	440b      	add	r3, r1
 800371c:	3314      	adds	r3, #20
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	e010      	b.n	8003746 <set_control_params_int_min+0x7a>
	} else if(ctrl_index == 2)
 8003724:	79bb      	ldrb	r3, [r7, #6]
 8003726:	2b02      	cmp	r3, #2
 8003728:	d10d      	bne.n	8003746 <set_control_params_int_min+0x7a>
	{
		cur_params[index].integral_min = int_min;
 800372a:	79fa      	ldrb	r2, [r7, #7]
 800372c:	490a      	ldr	r1, [pc, #40]	; (8003758 <set_control_params_int_min+0x8c>)
 800372e:	4613      	mov	r3, r2
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	4413      	add	r3, r2
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	440b      	add	r3, r1
 8003738:	3314      	adds	r3, #20
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	e002      	b.n	8003746 <set_control_params_int_min+0x7a>
		return;
 8003740:	bf00      	nop
 8003742:	e000      	b.n	8003746 <set_control_params_int_min+0x7a>
		return;
 8003744:	bf00      	nop
	}
 }
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	20000dec 	.word	0x20000dec
 8003754:	20000e4c 	.word	0x20000e4c
 8003758:	20000eac 	.word	0x20000eac

0800375c <set_motor_ticks_per_rev>:
 *
 *	\param ticks_per_rev The number of quadrature counts per output shaft rotation
  *	\param index The motor index
 */
 void set_motor_ticks_per_rev(int32_t ticks_per_rev, uint8_t index)
 {
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	70fb      	strb	r3, [r7, #3]
	if(index >= NUMBER_MOTORS)
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d80a      	bhi.n	8003784 <set_motor_ticks_per_rev+0x28>
	{
		return;
	}
	motors[index].ticks_per_rev = ticks_per_rev;
 800376e:	78fa      	ldrb	r2, [r7, #3]
 8003770:	4907      	ldr	r1, [pc, #28]	; (8003790 <set_motor_ticks_per_rev+0x34>)
 8003772:	4613      	mov	r3, r2
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	4413      	add	r3, r2
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	440b      	add	r3, r1
 800377c:	3328      	adds	r3, #40	; 0x28
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	e000      	b.n	8003786 <set_motor_ticks_per_rev+0x2a>
		return;
 8003784:	bf00      	nop
 }
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	20000d8c 	.word	0x20000d8c

08003794 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800379a:	2300      	movs	r3, #0
 800379c:	607b      	str	r3, [r7, #4]
 800379e:	4b12      	ldr	r3, [pc, #72]	; (80037e8 <HAL_MspInit+0x54>)
 80037a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a2:	4a11      	ldr	r2, [pc, #68]	; (80037e8 <HAL_MspInit+0x54>)
 80037a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037a8:	6453      	str	r3, [r2, #68]	; 0x44
 80037aa:	4b0f      	ldr	r3, [pc, #60]	; (80037e8 <HAL_MspInit+0x54>)
 80037ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037b2:	607b      	str	r3, [r7, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037b6:	2300      	movs	r3, #0
 80037b8:	603b      	str	r3, [r7, #0]
 80037ba:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <HAL_MspInit+0x54>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	4a0a      	ldr	r2, [pc, #40]	; (80037e8 <HAL_MspInit+0x54>)
 80037c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c4:	6413      	str	r3, [r2, #64]	; 0x40
 80037c6:	4b08      	ldr	r3, [pc, #32]	; (80037e8 <HAL_MspInit+0x54>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ce:	603b      	str	r3, [r7, #0]
 80037d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80037d2:	2200      	movs	r2, #0
 80037d4:	210f      	movs	r1, #15
 80037d6:	f06f 0001 	mvn.w	r0, #1
 80037da:	f002 f869 	bl	80058b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40023800 	.word	0x40023800

080037ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08c      	sub	sp, #48	; 0x30
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f4:	f107 031c 	add.w	r3, r7, #28
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	605a      	str	r2, [r3, #4]
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	60da      	str	r2, [r3, #12]
 8003802:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a36      	ldr	r2, [pc, #216]	; (80038e4 <HAL_ADC_MspInit+0xf8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d130      	bne.n	8003870 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	61bb      	str	r3, [r7, #24]
 8003812:	4b35      	ldr	r3, [pc, #212]	; (80038e8 <HAL_ADC_MspInit+0xfc>)
 8003814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003816:	4a34      	ldr	r2, [pc, #208]	; (80038e8 <HAL_ADC_MspInit+0xfc>)
 8003818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800381c:	6453      	str	r3, [r2, #68]	; 0x44
 800381e:	4b32      	ldr	r3, [pc, #200]	; (80038e8 <HAL_ADC_MspInit+0xfc>)
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003826:	61bb      	str	r3, [r7, #24]
 8003828:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]
 800382e:	4b2e      	ldr	r3, [pc, #184]	; (80038e8 <HAL_ADC_MspInit+0xfc>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	4a2d      	ldr	r2, [pc, #180]	; (80038e8 <HAL_ADC_MspInit+0xfc>)
 8003834:	f043 0301 	orr.w	r3, r3, #1
 8003838:	6313      	str	r3, [r2, #48]	; 0x30
 800383a:	4b2b      	ldr	r3, [pc, #172]	; (80038e8 <HAL_ADC_MspInit+0xfc>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = SNS1_Pin;
 8003846:	2310      	movs	r3, #16
 8003848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800384a:	2303      	movs	r3, #3
 800384c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384e:	2300      	movs	r3, #0
 8003850:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SNS1_GPIO_Port, &GPIO_InitStruct);
 8003852:	f107 031c 	add.w	r3, r7, #28
 8003856:	4619      	mov	r1, r3
 8003858:	4824      	ldr	r0, [pc, #144]	; (80038ec <HAL_ADC_MspInit+0x100>)
 800385a:	f002 f875 	bl	8005948 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800385e:	2200      	movs	r2, #0
 8003860:	2105      	movs	r1, #5
 8003862:	2012      	movs	r0, #18
 8003864:	f002 f824 	bl	80058b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003868:	2012      	movs	r0, #18
 800386a:	f002 f83d 	bl	80058e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800386e:	e034      	b.n	80038da <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a1e      	ldr	r2, [pc, #120]	; (80038f0 <HAL_ADC_MspInit+0x104>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d12f      	bne.n	80038da <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800387a:	2300      	movs	r3, #0
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	4b1a      	ldr	r3, [pc, #104]	; (80038e8 <HAL_ADC_MspInit+0xfc>)
 8003880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003882:	4a19      	ldr	r2, [pc, #100]	; (80038e8 <HAL_ADC_MspInit+0xfc>)
 8003884:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003888:	6453      	str	r3, [r2, #68]	; 0x44
 800388a:	4b17      	ldr	r3, [pc, #92]	; (80038e8 <HAL_ADC_MspInit+0xfc>)
 800388c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003892:	613b      	str	r3, [r7, #16]
 8003894:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003896:	2300      	movs	r3, #0
 8003898:	60fb      	str	r3, [r7, #12]
 800389a:	4b13      	ldr	r3, [pc, #76]	; (80038e8 <HAL_ADC_MspInit+0xfc>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	4a12      	ldr	r2, [pc, #72]	; (80038e8 <HAL_ADC_MspInit+0xfc>)
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	6313      	str	r3, [r2, #48]	; 0x30
 80038a6:	4b10      	ldr	r3, [pc, #64]	; (80038e8 <HAL_ADC_MspInit+0xfc>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SNS2_Pin;
 80038b2:	2320      	movs	r3, #32
 80038b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038b6:	2303      	movs	r3, #3
 80038b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ba:	2300      	movs	r3, #0
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SNS2_GPIO_Port, &GPIO_InitStruct);
 80038be:	f107 031c 	add.w	r3, r7, #28
 80038c2:	4619      	mov	r1, r3
 80038c4:	4809      	ldr	r0, [pc, #36]	; (80038ec <HAL_ADC_MspInit+0x100>)
 80038c6:	f002 f83f 	bl	8005948 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80038ca:	2200      	movs	r2, #0
 80038cc:	2105      	movs	r1, #5
 80038ce:	2012      	movs	r0, #18
 80038d0:	f001 ffee 	bl	80058b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80038d4:	2012      	movs	r0, #18
 80038d6:	f002 f807 	bl	80058e8 <HAL_NVIC_EnableIRQ>
}
 80038da:	bf00      	nop
 80038dc:	3730      	adds	r7, #48	; 0x30
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40012000 	.word	0x40012000
 80038e8:	40023800 	.word	0x40023800
 80038ec:	40020000 	.word	0x40020000
 80038f0:	40012100 	.word	0x40012100

080038f4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b08a      	sub	sp, #40	; 0x28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038fc:	f107 0314 	add.w	r3, r7, #20
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	605a      	str	r2, [r3, #4]
 8003906:	609a      	str	r2, [r3, #8]
 8003908:	60da      	str	r2, [r3, #12]
 800390a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a25      	ldr	r2, [pc, #148]	; (80039a8 <HAL_CAN_MspInit+0xb4>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d143      	bne.n	800399e <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003916:	2300      	movs	r3, #0
 8003918:	613b      	str	r3, [r7, #16]
 800391a:	4b24      	ldr	r3, [pc, #144]	; (80039ac <HAL_CAN_MspInit+0xb8>)
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	4a23      	ldr	r2, [pc, #140]	; (80039ac <HAL_CAN_MspInit+0xb8>)
 8003920:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003924:	6413      	str	r3, [r2, #64]	; 0x40
 8003926:	4b21      	ldr	r3, [pc, #132]	; (80039ac <HAL_CAN_MspInit+0xb8>)
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392e:	613b      	str	r3, [r7, #16]
 8003930:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003932:	2300      	movs	r3, #0
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	4b1d      	ldr	r3, [pc, #116]	; (80039ac <HAL_CAN_MspInit+0xb8>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	4a1c      	ldr	r2, [pc, #112]	; (80039ac <HAL_CAN_MspInit+0xb8>)
 800393c:	f043 0308 	orr.w	r3, r3, #8
 8003940:	6313      	str	r3, [r2, #48]	; 0x30
 8003942:	4b1a      	ldr	r3, [pc, #104]	; (80039ac <HAL_CAN_MspInit+0xb8>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 800394e:	2303      	movs	r3, #3
 8003950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003952:	2302      	movs	r3, #2
 8003954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003956:	2300      	movs	r3, #0
 8003958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800395a:	2303      	movs	r3, #3
 800395c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800395e:	2309      	movs	r3, #9
 8003960:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003962:	f107 0314 	add.w	r3, r7, #20
 8003966:	4619      	mov	r1, r3
 8003968:	4811      	ldr	r0, [pc, #68]	; (80039b0 <HAL_CAN_MspInit+0xbc>)
 800396a:	f001 ffed 	bl	8005948 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 800396e:	2200      	movs	r2, #0
 8003970:	2105      	movs	r1, #5
 8003972:	2013      	movs	r0, #19
 8003974:	f001 ff9c 	bl	80058b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8003978:	2013      	movs	r0, #19
 800397a:	f001 ffb5 	bl	80058e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800397e:	2200      	movs	r2, #0
 8003980:	2105      	movs	r1, #5
 8003982:	2014      	movs	r0, #20
 8003984:	f001 ff94 	bl	80058b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003988:	2014      	movs	r0, #20
 800398a:	f001 ffad 	bl	80058e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800398e:	2200      	movs	r2, #0
 8003990:	2105      	movs	r1, #5
 8003992:	2015      	movs	r0, #21
 8003994:	f001 ff8c 	bl	80058b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003998:	2015      	movs	r0, #21
 800399a:	f001 ffa5 	bl	80058e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800399e:	bf00      	nop
 80039a0:	3728      	adds	r7, #40	; 0x28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40006400 	.word	0x40006400
 80039ac:	40023800 	.word	0x40023800
 80039b0:	40020c00 	.word	0x40020c00

080039b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b08a      	sub	sp, #40	; 0x28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039bc:	f107 0314 	add.w	r3, r7, #20
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	605a      	str	r2, [r3, #4]
 80039c6:	609a      	str	r2, [r3, #8]
 80039c8:	60da      	str	r2, [r3, #12]
 80039ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a1d      	ldr	r2, [pc, #116]	; (8003a48 <HAL_SPI_MspInit+0x94>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d134      	bne.n	8003a40 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80039d6:	2300      	movs	r3, #0
 80039d8:	613b      	str	r3, [r7, #16]
 80039da:	4b1c      	ldr	r3, [pc, #112]	; (8003a4c <HAL_SPI_MspInit+0x98>)
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	4a1b      	ldr	r2, [pc, #108]	; (8003a4c <HAL_SPI_MspInit+0x98>)
 80039e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039e4:	6413      	str	r3, [r2, #64]	; 0x40
 80039e6:	4b19      	ldr	r3, [pc, #100]	; (8003a4c <HAL_SPI_MspInit+0x98>)
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ee:	613b      	str	r3, [r7, #16]
 80039f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039f2:	2300      	movs	r3, #0
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	4b15      	ldr	r3, [pc, #84]	; (8003a4c <HAL_SPI_MspInit+0x98>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	4a14      	ldr	r2, [pc, #80]	; (8003a4c <HAL_SPI_MspInit+0x98>)
 80039fc:	f043 0302 	orr.w	r3, r3, #2
 8003a00:	6313      	str	r3, [r2, #48]	; 0x30
 8003a02:	4b12      	ldr	r3, [pc, #72]	; (8003a4c <HAL_SPI_MspInit+0x98>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = FRAM_CS_Pin|SCK_Pin|MISO_Pin|MOSI_Pin;
 8003a0e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a14:	2302      	movs	r3, #2
 8003a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003a20:	2305      	movs	r3, #5
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a24:	f107 0314 	add.w	r3, r7, #20
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4809      	ldr	r0, [pc, #36]	; (8003a50 <HAL_SPI_MspInit+0x9c>)
 8003a2c:	f001 ff8c 	bl	8005948 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8003a30:	2200      	movs	r2, #0
 8003a32:	2105      	movs	r1, #5
 8003a34:	2024      	movs	r0, #36	; 0x24
 8003a36:	f001 ff3b 	bl	80058b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003a3a:	2024      	movs	r0, #36	; 0x24
 8003a3c:	f001 ff54 	bl	80058e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003a40:	bf00      	nop
 8003a42:	3728      	adds	r7, #40	; 0x28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40003800 	.word	0x40003800
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	40020400 	.word	0x40020400

08003a54 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08c      	sub	sp, #48	; 0x30
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a5c:	f107 031c 	add.w	r3, r7, #28
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	605a      	str	r2, [r3, #4]
 8003a66:	609a      	str	r2, [r3, #8]
 8003a68:	60da      	str	r2, [r3, #12]
 8003a6a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a36      	ldr	r2, [pc, #216]	; (8003b4c <HAL_TIM_Encoder_MspInit+0xf8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d135      	bne.n	8003ae2 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a76:	2300      	movs	r3, #0
 8003a78:	61bb      	str	r3, [r7, #24]
 8003a7a:	4b35      	ldr	r3, [pc, #212]	; (8003b50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7e:	4a34      	ldr	r2, [pc, #208]	; (8003b50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	6453      	str	r3, [r2, #68]	; 0x44
 8003a86:	4b32      	ldr	r3, [pc, #200]	; (8003b50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	61bb      	str	r3, [r7, #24]
 8003a90:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	4b2e      	ldr	r3, [pc, #184]	; (8003b50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	4a2d      	ldr	r2, [pc, #180]	; (8003b50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003a9c:	f043 0301 	orr.w	r3, r3, #1
 8003aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8003aa2:	4b2b      	ldr	r3, [pc, #172]	; (8003b50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = M2IN1_Pin|M2IN2_Pin;
 8003aae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ab4:	2312      	movs	r3, #18
 8003ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003abc:	2300      	movs	r3, #0
 8003abe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac4:	f107 031c 	add.w	r3, r7, #28
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4822      	ldr	r0, [pc, #136]	; (8003b54 <HAL_TIM_Encoder_MspInit+0x100>)
 8003acc:	f001 ff3c 	bl	8005948 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2105      	movs	r1, #5
 8003ad4:	2018      	movs	r0, #24
 8003ad6:	f001 feeb 	bl	80058b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003ada:	2018      	movs	r0, #24
 8003adc:	f001 ff04 	bl	80058e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003ae0:	e030      	b.n	8003b44 <HAL_TIM_Encoder_MspInit+0xf0>
  else if(htim_encoder->Instance==TIM3)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a1c      	ldr	r2, [pc, #112]	; (8003b58 <HAL_TIM_Encoder_MspInit+0x104>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d12b      	bne.n	8003b44 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003aec:	2300      	movs	r3, #0
 8003aee:	613b      	str	r3, [r7, #16]
 8003af0:	4b17      	ldr	r3, [pc, #92]	; (8003b50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	4a16      	ldr	r2, [pc, #88]	; (8003b50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003af6:	f043 0302 	orr.w	r3, r3, #2
 8003afa:	6413      	str	r3, [r2, #64]	; 0x40
 8003afc:	4b14      	ldr	r3, [pc, #80]	; (8003b50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	613b      	str	r3, [r7, #16]
 8003b06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	4b10      	ldr	r3, [pc, #64]	; (8003b50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b10:	4a0f      	ldr	r2, [pc, #60]	; (8003b50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003b12:	f043 0304 	orr.w	r3, r3, #4
 8003b16:	6313      	str	r3, [r2, #48]	; 0x30
 8003b18:	4b0d      	ldr	r3, [pc, #52]	; (8003b50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1IN1_Pin|M1IN2_Pin;
 8003b24:	23c0      	movs	r3, #192	; 0xc0
 8003b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b28:	2312      	movs	r3, #18
 8003b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b30:	2300      	movs	r3, #0
 8003b32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b34:	2302      	movs	r3, #2
 8003b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b38:	f107 031c 	add.w	r3, r7, #28
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	4807      	ldr	r0, [pc, #28]	; (8003b5c <HAL_TIM_Encoder_MspInit+0x108>)
 8003b40:	f001 ff02 	bl	8005948 <HAL_GPIO_Init>
}
 8003b44:	bf00      	nop
 8003b46:	3730      	adds	r7, #48	; 0x30
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40010000 	.word	0x40010000
 8003b50:	40023800 	.word	0x40023800
 8003b54:	40020000 	.word	0x40020000
 8003b58:	40000400 	.word	0x40000400
 8003b5c:	40020800 	.word	0x40020800

08003b60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b70:	d10e      	bne.n	8003b90 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
 8003b76:	4b2e      	ldr	r3, [pc, #184]	; (8003c30 <HAL_TIM_Base_MspInit+0xd0>)
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	4a2d      	ldr	r2, [pc, #180]	; (8003c30 <HAL_TIM_Base_MspInit+0xd0>)
 8003b7c:	f043 0301 	orr.w	r3, r3, #1
 8003b80:	6413      	str	r3, [r2, #64]	; 0x40
 8003b82:	4b2b      	ldr	r3, [pc, #172]	; (8003c30 <HAL_TIM_Base_MspInit+0xd0>)
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	617b      	str	r3, [r7, #20]
 8003b8c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8003b8e:	e04a      	b.n	8003c26 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a27      	ldr	r2, [pc, #156]	; (8003c34 <HAL_TIM_Base_MspInit+0xd4>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d116      	bne.n	8003bc8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	4b24      	ldr	r3, [pc, #144]	; (8003c30 <HAL_TIM_Base_MspInit+0xd0>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	4a23      	ldr	r2, [pc, #140]	; (8003c30 <HAL_TIM_Base_MspInit+0xd0>)
 8003ba4:	f043 0304 	orr.w	r3, r3, #4
 8003ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8003baa:	4b21      	ldr	r3, [pc, #132]	; (8003c30 <HAL_TIM_Base_MspInit+0xd0>)
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	613b      	str	r3, [r7, #16]
 8003bb4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	2105      	movs	r1, #5
 8003bba:	201e      	movs	r0, #30
 8003bbc:	f001 fe78 	bl	80058b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003bc0:	201e      	movs	r0, #30
 8003bc2:	f001 fe91 	bl	80058e8 <HAL_NVIC_EnableIRQ>
}
 8003bc6:	e02e      	b.n	8003c26 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM13)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a1a      	ldr	r2, [pc, #104]	; (8003c38 <HAL_TIM_Base_MspInit+0xd8>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d116      	bne.n	8003c00 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	4b16      	ldr	r3, [pc, #88]	; (8003c30 <HAL_TIM_Base_MspInit+0xd0>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	4a15      	ldr	r2, [pc, #84]	; (8003c30 <HAL_TIM_Base_MspInit+0xd0>)
 8003bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003be0:	6413      	str	r3, [r2, #64]	; 0x40
 8003be2:	4b13      	ldr	r3, [pc, #76]	; (8003c30 <HAL_TIM_Base_MspInit+0xd0>)
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003bee:	2200      	movs	r2, #0
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	202c      	movs	r0, #44	; 0x2c
 8003bf4:	f001 fe5c 	bl	80058b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003bf8:	202c      	movs	r0, #44	; 0x2c
 8003bfa:	f001 fe75 	bl	80058e8 <HAL_NVIC_EnableIRQ>
}
 8003bfe:	e012      	b.n	8003c26 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM14)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a0d      	ldr	r2, [pc, #52]	; (8003c3c <HAL_TIM_Base_MspInit+0xdc>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d10d      	bne.n	8003c26 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60bb      	str	r3, [r7, #8]
 8003c0e:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <HAL_TIM_Base_MspInit+0xd0>)
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	4a07      	ldr	r2, [pc, #28]	; (8003c30 <HAL_TIM_Base_MspInit+0xd0>)
 8003c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c18:	6413      	str	r3, [r2, #64]	; 0x40
 8003c1a:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <HAL_TIM_Base_MspInit+0xd0>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c22:	60bb      	str	r3, [r7, #8]
 8003c24:	68bb      	ldr	r3, [r7, #8]
}
 8003c26:	bf00      	nop
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	40023800 	.word	0x40023800
 8003c34:	40000800 	.word	0x40000800
 8003c38:	40001c00 	.word	0x40001c00
 8003c3c:	40002000 	.word	0x40002000

08003c40 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM9)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a0e      	ldr	r2, [pc, #56]	; (8003c88 <HAL_TIM_OC_MspInit+0x48>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d115      	bne.n	8003c7e <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003c52:	2300      	movs	r3, #0
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	4b0d      	ldr	r3, [pc, #52]	; (8003c8c <HAL_TIM_OC_MspInit+0x4c>)
 8003c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5a:	4a0c      	ldr	r2, [pc, #48]	; (8003c8c <HAL_TIM_OC_MspInit+0x4c>)
 8003c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c60:	6453      	str	r3, [r2, #68]	; 0x44
 8003c62:	4b0a      	ldr	r3, [pc, #40]	; (8003c8c <HAL_TIM_OC_MspInit+0x4c>)
 8003c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8003c6e:	2200      	movs	r2, #0
 8003c70:	2105      	movs	r1, #5
 8003c72:	2018      	movs	r0, #24
 8003c74:	f001 fe1c 	bl	80058b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003c78:	2018      	movs	r0, #24
 8003c7a:	f001 fe35 	bl	80058e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8003c7e:	bf00      	nop
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	40014000 	.word	0x40014000
 8003c8c:	40023800 	.word	0x40023800

08003c90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08a      	sub	sp, #40	; 0x28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c98:	f107 0314 	add.w	r3, r7, #20
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	605a      	str	r2, [r3, #4]
 8003ca2:	609a      	str	r2, [r3, #8]
 8003ca4:	60da      	str	r2, [r3, #12]
 8003ca6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb0:	d11e      	bne.n	8003cf0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	613b      	str	r3, [r7, #16]
 8003cb6:	4b34      	ldr	r3, [pc, #208]	; (8003d88 <HAL_TIM_MspPostInit+0xf8>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	4a33      	ldr	r2, [pc, #204]	; (8003d88 <HAL_TIM_MspPostInit+0xf8>)
 8003cbc:	f043 0301 	orr.w	r3, r3, #1
 8003cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc2:	4b31      	ldr	r3, [pc, #196]	; (8003d88 <HAL_TIM_MspPostInit+0xf8>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	613b      	str	r3, [r7, #16]
 8003ccc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = LED2_Pin|IN1_Pin|IN2_Pin;
 8003cce:	230e      	movs	r3, #14
 8003cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ce2:	f107 0314 	add.w	r3, r7, #20
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4828      	ldr	r0, [pc, #160]	; (8003d8c <HAL_TIM_MspPostInit+0xfc>)
 8003cea:	f001 fe2d 	bl	8005948 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8003cee:	e046      	b.n	8003d7e <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM13)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a26      	ldr	r2, [pc, #152]	; (8003d90 <HAL_TIM_MspPostInit+0x100>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d11e      	bne.n	8003d38 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	4b22      	ldr	r3, [pc, #136]	; (8003d88 <HAL_TIM_MspPostInit+0xf8>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	4a21      	ldr	r2, [pc, #132]	; (8003d88 <HAL_TIM_MspPostInit+0xf8>)
 8003d04:	f043 0301 	orr.w	r3, r3, #1
 8003d08:	6313      	str	r3, [r2, #48]	; 0x30
 8003d0a:	4b1f      	ldr	r3, [pc, #124]	; (8003d88 <HAL_TIM_MspPostInit+0xf8>)
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IN3_Pin;
 8003d16:	2340      	movs	r3, #64	; 0x40
 8003d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d22:	2300      	movs	r3, #0
 8003d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003d26:	2309      	movs	r3, #9
 8003d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IN3_GPIO_Port, &GPIO_InitStruct);
 8003d2a:	f107 0314 	add.w	r3, r7, #20
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4816      	ldr	r0, [pc, #88]	; (8003d8c <HAL_TIM_MspPostInit+0xfc>)
 8003d32:	f001 fe09 	bl	8005948 <HAL_GPIO_Init>
}
 8003d36:	e022      	b.n	8003d7e <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM14)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a15      	ldr	r2, [pc, #84]	; (8003d94 <HAL_TIM_MspPostInit+0x104>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d11d      	bne.n	8003d7e <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d42:	2300      	movs	r3, #0
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	4b10      	ldr	r3, [pc, #64]	; (8003d88 <HAL_TIM_MspPostInit+0xf8>)
 8003d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4a:	4a0f      	ldr	r2, [pc, #60]	; (8003d88 <HAL_TIM_MspPostInit+0xf8>)
 8003d4c:	f043 0301 	orr.w	r3, r3, #1
 8003d50:	6313      	str	r3, [r2, #48]	; 0x30
 8003d52:	4b0d      	ldr	r3, [pc, #52]	; (8003d88 <HAL_TIM_MspPostInit+0xf8>)
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	60bb      	str	r3, [r7, #8]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IN4_Pin;
 8003d5e:	2380      	movs	r3, #128	; 0x80
 8003d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d62:	2302      	movs	r3, #2
 8003d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d66:	2300      	movs	r3, #0
 8003d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8003d6e:	2309      	movs	r3, #9
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IN4_GPIO_Port, &GPIO_InitStruct);
 8003d72:	f107 0314 	add.w	r3, r7, #20
 8003d76:	4619      	mov	r1, r3
 8003d78:	4804      	ldr	r0, [pc, #16]	; (8003d8c <HAL_TIM_MspPostInit+0xfc>)
 8003d7a:	f001 fde5 	bl	8005948 <HAL_GPIO_Init>
}
 8003d7e:	bf00      	nop
 8003d80:	3728      	adds	r7, #40	; 0x28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	40020000 	.word	0x40020000
 8003d90:	40001c00 	.word	0x40001c00
 8003d94:	40002000 	.word	0x40002000

08003d98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b08c      	sub	sp, #48	; 0x30
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003da0:	2300      	movs	r3, #0
 8003da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003da4:	2300      	movs	r3, #0
 8003da6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM8 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0); 
 8003da8:	2200      	movs	r2, #0
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	202c      	movs	r0, #44	; 0x2c
 8003dae:	f001 fd7f 	bl	80058b0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM8 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn); 
 8003db2:	202c      	movs	r0, #44	; 0x2c
 8003db4:	f001 fd98 	bl	80058e8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 8003db8:	2300      	movs	r3, #0
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	4b1f      	ldr	r3, [pc, #124]	; (8003e3c <HAL_InitTick+0xa4>)
 8003dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc0:	4a1e      	ldr	r2, [pc, #120]	; (8003e3c <HAL_InitTick+0xa4>)
 8003dc2:	f043 0302 	orr.w	r3, r3, #2
 8003dc6:	6453      	str	r3, [r2, #68]	; 0x44
 8003dc8:	4b1c      	ldr	r3, [pc, #112]	; (8003e3c <HAL_InitTick+0xa4>)
 8003dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003dd4:	f107 0210 	add.w	r2, r7, #16
 8003dd8:	f107 0314 	add.w	r3, r7, #20
 8003ddc:	4611      	mov	r1, r2
 8003dde:	4618      	mov	r0, r3
 8003de0:	f002 fba6 	bl	8006530 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM8 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003de4:	f002 fb90 	bl	8006508 <HAL_RCC_GetPCLK2Freq>
 8003de8:	4603      	mov	r3, r0
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df0:	4a13      	ldr	r2, [pc, #76]	; (8003e40 <HAL_InitTick+0xa8>)
 8003df2:	fba2 2303 	umull	r2, r3, r2, r3
 8003df6:	0c9b      	lsrs	r3, r3, #18
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 8003dfc:	4b11      	ldr	r3, [pc, #68]	; (8003e44 <HAL_InitTick+0xac>)
 8003dfe:	4a12      	ldr	r2, [pc, #72]	; (8003e48 <HAL_InitTick+0xb0>)
 8003e00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000 / 1000) - 1;
 8003e02:	4b10      	ldr	r3, [pc, #64]	; (8003e44 <HAL_InitTick+0xac>)
 8003e04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003e08:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 8003e0a:	4a0e      	ldr	r2, [pc, #56]	; (8003e44 <HAL_InitTick+0xac>)
 8003e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0e:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 8003e10:	4b0c      	ldr	r3, [pc, #48]	; (8003e44 <HAL_InitTick+0xac>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e16:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <HAL_InitTick+0xac>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim8) == HAL_OK)
 8003e1c:	4809      	ldr	r0, [pc, #36]	; (8003e44 <HAL_InitTick+0xac>)
 8003e1e:	f002 fd3b 	bl	8006898 <HAL_TIM_Base_Init>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d104      	bne.n	8003e32 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim8);
 8003e28:	4806      	ldr	r0, [pc, #24]	; (8003e44 <HAL_InitTick+0xac>)
 8003e2a:	f002 fd60 	bl	80068ee <HAL_TIM_Base_Start_IT>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	e000      	b.n	8003e34 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3730      	adds	r7, #48	; 0x30
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	431bde83 	.word	0x431bde83
 8003e44:	20015974 	.word	0x20015974
 8003e48:	40010400 	.word	0x40010400

08003e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003e50:	bf00      	nop
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e5e:	e7fe      	b.n	8003e5e <HardFault_Handler+0x4>

08003e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e64:	e7fe      	b.n	8003e64 <MemManage_Handler+0x4>

08003e66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e66:	b480      	push	{r7}
 8003e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e6a:	e7fe      	b.n	8003e6a <BusFault_Handler+0x4>

08003e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e70:	e7fe      	b.n	8003e70 <UsageFault_Handler+0x4>

08003e72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e72:	b480      	push	{r7}
 8003e74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e76:	bf00      	nop
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003e84:	4803      	ldr	r0, [pc, #12]	; (8003e94 <ADC_IRQHandler+0x14>)
 8003e86:	f000 fa6b 	bl	8004360 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003e8a:	4803      	ldr	r0, [pc, #12]	; (8003e98 <ADC_IRQHandler+0x18>)
 8003e8c:	f000 fa68 	bl	8004360 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003e90:	bf00      	nop
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	200157c4 	.word	0x200157c4
 8003e98:	20015734 	.word	0x20015734

08003e9c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003ea0:	4802      	ldr	r0, [pc, #8]	; (8003eac <CAN1_TX_IRQHandler+0x10>)
 8003ea2:	f001 fa24 	bl	80052ee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003ea6:	bf00      	nop
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	2001590c 	.word	0x2001590c

08003eb0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003eb4:	4802      	ldr	r0, [pc, #8]	; (8003ec0 <CAN1_RX0_IRQHandler+0x10>)
 8003eb6:	f001 fa1a 	bl	80052ee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003eba:	bf00      	nop
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	2001590c 	.word	0x2001590c

08003ec4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003ec8:	4802      	ldr	r0, [pc, #8]	; (8003ed4 <CAN1_RX1_IRQHandler+0x10>)
 8003eca:	f001 fa10 	bl	80052ee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003ece:	bf00      	nop
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	2001590c 	.word	0x2001590c

08003ed8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
  sample_filter_adc();
 8003edc:	f006 fb50 	bl	800a580 <sample_filter_adc>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003ee0:	4803      	ldr	r0, [pc, #12]	; (8003ef0 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8003ee2:	f002 fe1a 	bl	8006b1a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8003ee6:	4803      	ldr	r0, [pc, #12]	; (8003ef4 <TIM1_BRK_TIM9_IRQHandler+0x1c>)
 8003ee8:	f002 fe17 	bl	8006b1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003eec:	bf00      	nop
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	2001584c 	.word	0x2001584c
 8003ef4:	2001588c 	.word	0x2001588c

08003ef8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	enable_motor_task_from_isr();
 8003efc:	f7fd fcfe 	bl	80018fc <enable_motor_task_from_isr>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003f00:	4802      	ldr	r0, [pc, #8]	; (8003f0c <TIM4_IRQHandler+0x14>)
 8003f02:	f002 fe0a 	bl	8006b1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003f06:	bf00      	nop
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	200156f4 	.word	0x200156f4

08003f10 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003f14:	4802      	ldr	r0, [pc, #8]	; (8003f20 <SPI2_IRQHandler+0x10>)
 8003f16:	f002 fba1 	bl	800665c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003f1a:	bf00      	nop
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	2001569c 	.word	0x2001569c

08003f24 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003f28:	4803      	ldr	r0, [pc, #12]	; (8003f38 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8003f2a:	f002 fdf6 	bl	8006b1a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8003f2e:	4803      	ldr	r0, [pc, #12]	; (8003f3c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8003f30:	f002 fdf3 	bl	8006b1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003f34:	bf00      	nop
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	20015974 	.word	0x20015974
 8003f3c:	2001580c 	.word	0x2001580c

08003f40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f44:	4b08      	ldr	r3, [pc, #32]	; (8003f68 <SystemInit+0x28>)
 8003f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4a:	4a07      	ldr	r2, [pc, #28]	; (8003f68 <SystemInit+0x28>)
 8003f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f54:	4b04      	ldr	r3, [pc, #16]	; (8003f68 <SystemInit+0x28>)
 8003f56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f5a:	609a      	str	r2, [r3, #8]
#endif
}
 8003f5c:	bf00      	nop
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	e000ed00 	.word	0xe000ed00

08003f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003f6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003fa4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003f70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003f72:	e003      	b.n	8003f7c <LoopCopyDataInit>

08003f74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003f74:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003f76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003f78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003f7a:	3104      	adds	r1, #4

08003f7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003f7c:	480b      	ldr	r0, [pc, #44]	; (8003fac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003f7e:	4b0c      	ldr	r3, [pc, #48]	; (8003fb0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003f80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003f82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003f84:	d3f6      	bcc.n	8003f74 <CopyDataInit>
  ldr  r2, =_sbss
 8003f86:	4a0b      	ldr	r2, [pc, #44]	; (8003fb4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003f88:	e002      	b.n	8003f90 <LoopFillZerobss>

08003f8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003f8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003f8c:	f842 3b04 	str.w	r3, [r2], #4

08003f90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003f90:	4b09      	ldr	r3, [pc, #36]	; (8003fb8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003f92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003f94:	d3f9      	bcc.n	8003f8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003f96:	f7ff ffd3 	bl	8003f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f9a:	f008 ffa3 	bl	800cee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f9e:	f7fd fcd1 	bl	8001944 <main>
  bx  lr    
 8003fa2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003fa4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003fa8:	0800e590 	.word	0x0800e590
  ldr  r0, =_sdata
 8003fac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003fb0:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 8003fb4:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 8003fb8:	200159f8 	.word	0x200159f8

08003fbc <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fbc:	e7fe      	b.n	8003fbc <CAN1_SCE_IRQHandler>
	...

08003fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003fc4:	4b0e      	ldr	r3, [pc, #56]	; (8004000 <HAL_Init+0x40>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a0d      	ldr	r2, [pc, #52]	; (8004000 <HAL_Init+0x40>)
 8003fca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <HAL_Init+0x40>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a0a      	ldr	r2, [pc, #40]	; (8004000 <HAL_Init+0x40>)
 8003fd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003fdc:	4b08      	ldr	r3, [pc, #32]	; (8004000 <HAL_Init+0x40>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a07      	ldr	r2, [pc, #28]	; (8004000 <HAL_Init+0x40>)
 8003fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fe8:	2003      	movs	r0, #3
 8003fea:	f001 fc56 	bl	800589a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fee:	2000      	movs	r0, #0
 8003ff0:	f7ff fed2 	bl	8003d98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ff4:	f7ff fbce 	bl	8003794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40023c00 	.word	0x40023c00

08004004 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004008:	4b06      	ldr	r3, [pc, #24]	; (8004024 <HAL_IncTick+0x20>)
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	461a      	mov	r2, r3
 800400e:	4b06      	ldr	r3, [pc, #24]	; (8004028 <HAL_IncTick+0x24>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4413      	add	r3, r2
 8004014:	4a04      	ldr	r2, [pc, #16]	; (8004028 <HAL_IncTick+0x24>)
 8004016:	6013      	str	r3, [r2, #0]
}
 8004018:	bf00      	nop
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	2000000c 	.word	0x2000000c
 8004028:	200159b4 	.word	0x200159b4

0800402c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  return uwTick;
 8004030:	4b03      	ldr	r3, [pc, #12]	; (8004040 <HAL_GetTick+0x14>)
 8004032:	681b      	ldr	r3, [r3, #0]
}
 8004034:	4618      	mov	r0, r3
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	200159b4 	.word	0x200159b4

08004044 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800404c:	2300      	movs	r3, #0
 800404e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e033      	b.n	80040c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	2b00      	cmp	r3, #0
 8004060:	d109      	bne.n	8004076 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff fbc2 	bl	80037ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	f003 0310 	and.w	r3, r3, #16
 800407e:	2b00      	cmp	r3, #0
 8004080:	d118      	bne.n	80040b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800408a:	f023 0302 	bic.w	r3, r3, #2
 800408e:	f043 0202 	orr.w	r2, r3, #2
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 fbf0 	bl	800487c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	f023 0303 	bic.w	r3, r3, #3
 80040aa:	f043 0201 	orr.w	r2, r3, #1
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	641a      	str	r2, [r3, #64]	; 0x40
 80040b2:	e001      	b.n	80040b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
	...

080040cc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d101      	bne.n	80040e6 <HAL_ADC_Start+0x1a>
 80040e2:	2302      	movs	r3, #2
 80040e4:	e0a5      	b.n	8004232 <HAL_ADC_Start+0x166>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d018      	beq.n	800412e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689a      	ldr	r2, [r3, #8]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800410c:	4b4c      	ldr	r3, [pc, #304]	; (8004240 <HAL_ADC_Start+0x174>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a4c      	ldr	r2, [pc, #304]	; (8004244 <HAL_ADC_Start+0x178>)
 8004112:	fba2 2303 	umull	r2, r3, r2, r3
 8004116:	0c9a      	lsrs	r2, r3, #18
 8004118:	4613      	mov	r3, r2
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	4413      	add	r3, r2
 800411e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004120:	e002      	b.n	8004128 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	3b01      	subs	r3, #1
 8004126:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1f9      	bne.n	8004122 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b01      	cmp	r3, #1
 800413a:	d179      	bne.n	8004230 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004144:	f023 0301 	bic.w	r3, r3, #1
 8004148:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800415a:	2b00      	cmp	r3, #0
 800415c:	d007      	beq.n	800416e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004166:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800417a:	d106      	bne.n	800418a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004180:	f023 0206 	bic.w	r2, r3, #6
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	645a      	str	r2, [r3, #68]	; 0x44
 8004188:	e002      	b.n	8004190 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004198:	4b2b      	ldr	r3, [pc, #172]	; (8004248 <HAL_ADC_Start+0x17c>)
 800419a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80041a4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f003 031f 	and.w	r3, r3, #31
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d12a      	bne.n	8004208 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a25      	ldr	r2, [pc, #148]	; (800424c <HAL_ADC_Start+0x180>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d015      	beq.n	80041e8 <HAL_ADC_Start+0x11c>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a23      	ldr	r2, [pc, #140]	; (8004250 <HAL_ADC_Start+0x184>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d105      	bne.n	80041d2 <HAL_ADC_Start+0x106>
 80041c6:	4b20      	ldr	r3, [pc, #128]	; (8004248 <HAL_ADC_Start+0x17c>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f003 031f 	and.w	r3, r3, #31
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a1f      	ldr	r2, [pc, #124]	; (8004254 <HAL_ADC_Start+0x188>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d129      	bne.n	8004230 <HAL_ADC_Start+0x164>
 80041dc:	4b1a      	ldr	r3, [pc, #104]	; (8004248 <HAL_ADC_Start+0x17c>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f003 031f 	and.w	r3, r3, #31
 80041e4:	2b0f      	cmp	r3, #15
 80041e6:	d823      	bhi.n	8004230 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d11c      	bne.n	8004230 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004204:	609a      	str	r2, [r3, #8]
 8004206:	e013      	b.n	8004230 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a0f      	ldr	r2, [pc, #60]	; (800424c <HAL_ADC_Start+0x180>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d10e      	bne.n	8004230 <HAL_ADC_Start+0x164>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d107      	bne.n	8004230 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689a      	ldr	r2, [r3, #8]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800422e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	20000004 	.word	0x20000004
 8004244:	431bde83 	.word	0x431bde83
 8004248:	40012300 	.word	0x40012300
 800424c:	40012000 	.word	0x40012000
 8004250:	40012100 	.word	0x40012100
 8004254:	40012200 	.word	0x40012200

08004258 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004262:	2300      	movs	r3, #0
 8004264:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004274:	d113      	bne.n	800429e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004284:	d10b      	bne.n	800429e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	f043 0220 	orr.w	r2, r3, #32
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e05c      	b.n	8004358 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800429e:	f7ff fec5 	bl	800402c <HAL_GetTick>
 80042a2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80042a4:	e01a      	b.n	80042dc <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042ac:	d016      	beq.n	80042dc <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d007      	beq.n	80042c4 <HAL_ADC_PollForConversion+0x6c>
 80042b4:	f7ff feba 	bl	800402c <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d20b      	bcs.n	80042dc <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c8:	f043 0204 	orr.w	r2, r3, #4
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e03d      	b.n	8004358 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d1dd      	bne.n	80042a6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f06f 0212 	mvn.w	r2, #18
 80042f2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d123      	bne.n	8004356 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004312:	2b00      	cmp	r3, #0
 8004314:	d11f      	bne.n	8004356 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004320:	2b00      	cmp	r3, #0
 8004322:	d006      	beq.n	8004332 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800432e:	2b00      	cmp	r3, #0
 8004330:	d111      	bne.n	8004356 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d105      	bne.n	8004356 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	f043 0201 	orr.w	r2, r3, #1
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	2300      	movs	r3, #0
 800436e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b02      	cmp	r3, #2
 800437c:	bf0c      	ite	eq
 800437e:	2301      	moveq	r3, #1
 8004380:	2300      	movne	r3, #0
 8004382:	b2db      	uxtb	r3, r3
 8004384:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f003 0320 	and.w	r3, r3, #32
 8004390:	2b20      	cmp	r3, #32
 8004392:	bf0c      	ite	eq
 8004394:	2301      	moveq	r3, #1
 8004396:	2300      	movne	r3, #0
 8004398:	b2db      	uxtb	r3, r3
 800439a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d049      	beq.n	8004436 <HAL_ADC_IRQHandler+0xd6>
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d046      	beq.n	8004436 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ac:	f003 0310 	and.w	r3, r3, #16
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d105      	bne.n	80043c0 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d12b      	bne.n	8004426 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d127      	bne.n	8004426 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043dc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d006      	beq.n	80043f2 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d119      	bne.n	8004426 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0220 	bic.w	r2, r2, #32
 8004400:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d105      	bne.n	8004426 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	f043 0201 	orr.w	r2, r3, #1
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f8e8 	bl	80045fc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f06f 0212 	mvn.w	r2, #18
 8004434:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b04      	cmp	r3, #4
 8004442:	bf0c      	ite	eq
 8004444:	2301      	moveq	r3, #1
 8004446:	2300      	movne	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004456:	2b80      	cmp	r3, #128	; 0x80
 8004458:	bf0c      	ite	eq
 800445a:	2301      	moveq	r3, #1
 800445c:	2300      	movne	r3, #0
 800445e:	b2db      	uxtb	r3, r3
 8004460:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d057      	beq.n	8004518 <HAL_ADC_IRQHandler+0x1b8>
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d054      	beq.n	8004518 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	f003 0310 	and.w	r3, r3, #16
 8004476:	2b00      	cmp	r3, #0
 8004478:	d105      	bne.n	8004486 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d139      	bne.n	8004508 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d006      	beq.n	80044b0 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d12b      	bne.n	8004508 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d124      	bne.n	8004508 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d11d      	bne.n	8004508 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d119      	bne.n	8004508 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044e2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d105      	bne.n	8004508 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	f043 0201 	orr.w	r2, r3, #1
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 fab3 	bl	8004a74 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f06f 020c 	mvn.w	r2, #12
 8004516:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b01      	cmp	r3, #1
 8004524:	bf0c      	ite	eq
 8004526:	2301      	moveq	r3, #1
 8004528:	2300      	movne	r3, #0
 800452a:	b2db      	uxtb	r3, r3
 800452c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004538:	2b40      	cmp	r3, #64	; 0x40
 800453a:	bf0c      	ite	eq
 800453c:	2301      	moveq	r3, #1
 800453e:	2300      	movne	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d017      	beq.n	800457a <HAL_ADC_IRQHandler+0x21a>
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d014      	beq.n	800457a <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b01      	cmp	r3, #1
 800455c:	d10d      	bne.n	800457a <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f850 	bl	8004610 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f06f 0201 	mvn.w	r2, #1
 8004578:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0320 	and.w	r3, r3, #32
 8004584:	2b20      	cmp	r3, #32
 8004586:	bf0c      	ite	eq
 8004588:	2301      	moveq	r3, #1
 800458a:	2300      	movne	r3, #0
 800458c:	b2db      	uxtb	r3, r3
 800458e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800459a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800459e:	bf0c      	ite	eq
 80045a0:	2301      	moveq	r3, #1
 80045a2:	2300      	movne	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d015      	beq.n	80045da <HAL_ADC_IRQHandler+0x27a>
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d012      	beq.n	80045da <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b8:	f043 0202 	orr.w	r2, r3, #2
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f06f 0220 	mvn.w	r2, #32
 80045c8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f82a 	bl	8004624 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f06f 0220 	mvn.w	r2, #32
 80045d8:	601a      	str	r2, [r3, #0]
  }
}
 80045da:	bf00      	nop
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <HAL_ADC_ConfigChannel+0x1c>
 8004650:	2302      	movs	r3, #2
 8004652:	e105      	b.n	8004860 <HAL_ADC_ConfigChannel+0x228>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b09      	cmp	r3, #9
 8004662:	d925      	bls.n	80046b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68d9      	ldr	r1, [r3, #12]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	b29b      	uxth	r3, r3
 8004670:	461a      	mov	r2, r3
 8004672:	4613      	mov	r3, r2
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	4413      	add	r3, r2
 8004678:	3b1e      	subs	r3, #30
 800467a:	2207      	movs	r2, #7
 800467c:	fa02 f303 	lsl.w	r3, r2, r3
 8004680:	43da      	mvns	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	400a      	ands	r2, r1
 8004688:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68d9      	ldr	r1, [r3, #12]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	689a      	ldr	r2, [r3, #8]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	b29b      	uxth	r3, r3
 800469a:	4618      	mov	r0, r3
 800469c:	4603      	mov	r3, r0
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	4403      	add	r3, r0
 80046a2:	3b1e      	subs	r3, #30
 80046a4:	409a      	lsls	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	60da      	str	r2, [r3, #12]
 80046ae:	e022      	b.n	80046f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6919      	ldr	r1, [r3, #16]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	461a      	mov	r2, r3
 80046be:	4613      	mov	r3, r2
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	4413      	add	r3, r2
 80046c4:	2207      	movs	r2, #7
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	43da      	mvns	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	400a      	ands	r2, r1
 80046d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6919      	ldr	r1, [r3, #16]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	689a      	ldr	r2, [r3, #8]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	4618      	mov	r0, r3
 80046e6:	4603      	mov	r3, r0
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	4403      	add	r3, r0
 80046ec:	409a      	lsls	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b06      	cmp	r3, #6
 80046fc:	d824      	bhi.n	8004748 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	4613      	mov	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	3b05      	subs	r3, #5
 8004710:	221f      	movs	r2, #31
 8004712:	fa02 f303 	lsl.w	r3, r2, r3
 8004716:	43da      	mvns	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	400a      	ands	r2, r1
 800471e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	b29b      	uxth	r3, r3
 800472c:	4618      	mov	r0, r3
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	4613      	mov	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	3b05      	subs	r3, #5
 800473a:	fa00 f203 	lsl.w	r2, r0, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	635a      	str	r2, [r3, #52]	; 0x34
 8004746:	e04c      	b.n	80047e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2b0c      	cmp	r3, #12
 800474e:	d824      	bhi.n	800479a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	4613      	mov	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	3b23      	subs	r3, #35	; 0x23
 8004762:	221f      	movs	r2, #31
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	43da      	mvns	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	400a      	ands	r2, r1
 8004770:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	b29b      	uxth	r3, r3
 800477e:	4618      	mov	r0, r3
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	4613      	mov	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	3b23      	subs	r3, #35	; 0x23
 800478c:	fa00 f203 	lsl.w	r2, r0, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	631a      	str	r2, [r3, #48]	; 0x30
 8004798:	e023      	b.n	80047e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	4613      	mov	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	3b41      	subs	r3, #65	; 0x41
 80047ac:	221f      	movs	r2, #31
 80047ae:	fa02 f303 	lsl.w	r3, r2, r3
 80047b2:	43da      	mvns	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	400a      	ands	r2, r1
 80047ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	4618      	mov	r0, r3
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	4613      	mov	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	3b41      	subs	r3, #65	; 0x41
 80047d6:	fa00 f203 	lsl.w	r2, r0, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047e2:	4b22      	ldr	r3, [pc, #136]	; (800486c <HAL_ADC_ConfigChannel+0x234>)
 80047e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a21      	ldr	r2, [pc, #132]	; (8004870 <HAL_ADC_ConfigChannel+0x238>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d109      	bne.n	8004804 <HAL_ADC_ConfigChannel+0x1cc>
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b12      	cmp	r3, #18
 80047f6:	d105      	bne.n	8004804 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a19      	ldr	r2, [pc, #100]	; (8004870 <HAL_ADC_ConfigChannel+0x238>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d123      	bne.n	8004856 <HAL_ADC_ConfigChannel+0x21e>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b10      	cmp	r3, #16
 8004814:	d003      	beq.n	800481e <HAL_ADC_ConfigChannel+0x1e6>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2b11      	cmp	r3, #17
 800481c:	d11b      	bne.n	8004856 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b10      	cmp	r3, #16
 8004830:	d111      	bne.n	8004856 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004832:	4b10      	ldr	r3, [pc, #64]	; (8004874 <HAL_ADC_ConfigChannel+0x23c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a10      	ldr	r2, [pc, #64]	; (8004878 <HAL_ADC_ConfigChannel+0x240>)
 8004838:	fba2 2303 	umull	r2, r3, r2, r3
 800483c:	0c9a      	lsrs	r2, r3, #18
 800483e:	4613      	mov	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4413      	add	r3, r2
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004848:	e002      	b.n	8004850 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	3b01      	subs	r3, #1
 800484e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1f9      	bne.n	800484a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	40012300 	.word	0x40012300
 8004870:	40012000 	.word	0x40012000
 8004874:	20000004 	.word	0x20000004
 8004878:	431bde83 	.word	0x431bde83

0800487c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004884:	4b79      	ldr	r3, [pc, #484]	; (8004a6c <ADC_Init+0x1f0>)
 8004886:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	431a      	orrs	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6859      	ldr	r1, [r3, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	021a      	lsls	r2, r3, #8
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80048d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6859      	ldr	r1, [r3, #4]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689a      	ldr	r2, [r3, #8]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6899      	ldr	r1, [r3, #8]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490e:	4a58      	ldr	r2, [pc, #352]	; (8004a70 <ADC_Init+0x1f4>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d022      	beq.n	800495a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004922:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6899      	ldr	r1, [r3, #8]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004944:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6899      	ldr	r1, [r3, #8]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	609a      	str	r2, [r3, #8]
 8004958:	e00f      	b.n	800497a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004968:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004978:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0202 	bic.w	r2, r2, #2
 8004988:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6899      	ldr	r1, [r3, #8]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	7e1b      	ldrb	r3, [r3, #24]
 8004994:	005a      	lsls	r2, r3, #1
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d01b      	beq.n	80049e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80049c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6859      	ldr	r1, [r3, #4]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	3b01      	subs	r3, #1
 80049d4:	035a      	lsls	r2, r3, #13
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	605a      	str	r2, [r3, #4]
 80049de:	e007      	b.n	80049f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80049fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	051a      	lsls	r2, r3, #20
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004a24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6899      	ldr	r1, [r3, #8]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a32:	025a      	lsls	r2, r3, #9
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689a      	ldr	r2, [r3, #8]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6899      	ldr	r1, [r3, #8]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	029a      	lsls	r2, r3, #10
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	609a      	str	r2, [r3, #8]
}
 8004a60:	bf00      	nop
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	40012300 	.word	0x40012300
 8004a70:	0f000001 	.word	0x0f000001

08004a74 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e0ed      	b.n	8004c76 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d102      	bne.n	8004aac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7fe ff24 	bl	80038f4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0202 	bic.w	r2, r2, #2
 8004aba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004abc:	f7ff fab6 	bl	800402c <HAL_GetTick>
 8004ac0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004ac2:	e012      	b.n	8004aea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004ac4:	f7ff fab2 	bl	800402c <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b0a      	cmp	r3, #10
 8004ad0:	d90b      	bls.n	8004aea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2205      	movs	r2, #5
 8004ae2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e0c5      	b.n	8004c76 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1e5      	bne.n	8004ac4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b08:	f7ff fa90 	bl	800402c <HAL_GetTick>
 8004b0c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004b0e:	e012      	b.n	8004b36 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b10:	f7ff fa8c 	bl	800402c <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b0a      	cmp	r3, #10
 8004b1c:	d90b      	bls.n	8004b36 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2205      	movs	r2, #5
 8004b2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e09f      	b.n	8004c76 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0e5      	beq.n	8004b10 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	7e1b      	ldrb	r3, [r3, #24]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d108      	bne.n	8004b5e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	e007      	b.n	8004b6e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	7e5b      	ldrb	r3, [r3, #25]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d108      	bne.n	8004b88 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	e007      	b.n	8004b98 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b96:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	7e9b      	ldrb	r3, [r3, #26]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d108      	bne.n	8004bb2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 0220 	orr.w	r2, r2, #32
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	e007      	b.n	8004bc2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0220 	bic.w	r2, r2, #32
 8004bc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	7edb      	ldrb	r3, [r3, #27]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d108      	bne.n	8004bdc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 0210 	bic.w	r2, r2, #16
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	e007      	b.n	8004bec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 0210 	orr.w	r2, r2, #16
 8004bea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	7f1b      	ldrb	r3, [r3, #28]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d108      	bne.n	8004c06 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0208 	orr.w	r2, r2, #8
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	e007      	b.n	8004c16 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0208 	bic.w	r2, r2, #8
 8004c14:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	7f5b      	ldrb	r3, [r3, #29]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d108      	bne.n	8004c30 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f042 0204 	orr.w	r2, r2, #4
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	e007      	b.n	8004c40 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 0204 	bic.w	r2, r2, #4
 8004c3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	ea42 0103 	orr.w	r1, r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	1e5a      	subs	r2, r3, #1
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
	...

08004c80 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c96:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004c98:	7cfb      	ldrb	r3, [r7, #19]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d003      	beq.n	8004ca6 <HAL_CAN_ConfigFilter+0x26>
 8004c9e:	7cfb      	ldrb	r3, [r7, #19]
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	f040 80be 	bne.w	8004e22 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004ca6:	4b65      	ldr	r3, [pc, #404]	; (8004e3c <HAL_CAN_ConfigFilter+0x1bc>)
 8004ca8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004cb0:	f043 0201 	orr.w	r2, r3, #1
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004cc0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd4:	021b      	lsls	r3, r3, #8
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	f003 031f 	and.w	r3, r3, #31
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cec:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	43db      	mvns	r3, r3
 8004cf8:	401a      	ands	r2, r3
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d123      	bne.n	8004d50 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	43db      	mvns	r3, r3
 8004d12:	401a      	ands	r2, r3
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004d2a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	3248      	adds	r2, #72	; 0x48
 8004d30:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004d44:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d46:	6979      	ldr	r1, [r7, #20]
 8004d48:	3348      	adds	r3, #72	; 0x48
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	440b      	add	r3, r1
 8004d4e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d122      	bne.n	8004d9e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	431a      	orrs	r2, r3
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004d78:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	3248      	adds	r2, #72	; 0x48
 8004d7e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004d92:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d94:	6979      	ldr	r1, [r7, #20]
 8004d96:	3348      	adds	r3, #72	; 0x48
 8004d98:	00db      	lsls	r3, r3, #3
 8004d9a:	440b      	add	r3, r1
 8004d9c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d109      	bne.n	8004dba <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	43db      	mvns	r3, r3
 8004db0:	401a      	ands	r2, r3
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004db8:	e007      	b.n	8004dca <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d109      	bne.n	8004de6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	43db      	mvns	r3, r3
 8004ddc:	401a      	ands	r2, r3
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004de4:	e007      	b.n	8004df6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	431a      	orrs	r2, r3
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d107      	bne.n	8004e0e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	431a      	orrs	r2, r3
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e14:	f023 0201 	bic.w	r2, r3, #1
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	e006      	b.n	8004e30 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
  }
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	371c      	adds	r7, #28
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	40006400 	.word	0x40006400

08004e40 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d12e      	bne.n	8004eb2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 0201 	bic.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e6c:	f7ff f8de 	bl	800402c <HAL_GetTick>
 8004e70:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004e72:	e012      	b.n	8004e9a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004e74:	f7ff f8da 	bl	800402c <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b0a      	cmp	r3, #10
 8004e80:	d90b      	bls.n	8004e9a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2205      	movs	r2, #5
 8004e92:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e012      	b.n	8004ec0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1e5      	bne.n	8004e74 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	e006      	b.n	8004ec0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
  }
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b089      	sub	sp, #36	; 0x24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
 8004ed4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004edc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004ee6:	7ffb      	ldrb	r3, [r7, #31]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d003      	beq.n	8004ef4 <HAL_CAN_AddTxMessage+0x2c>
 8004eec:	7ffb      	ldrb	r3, [r7, #31]
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	f040 80b8 	bne.w	8005064 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10a      	bne.n	8004f14 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d105      	bne.n	8004f14 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f000 80a0 	beq.w	8005054 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	0e1b      	lsrs	r3, r3, #24
 8004f18:	f003 0303 	and.w	r3, r3, #3
 8004f1c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d907      	bls.n	8004f34 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e09e      	b.n	8005072 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004f34:	2201      	movs	r2, #1
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	409a      	lsls	r2, r3
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10d      	bne.n	8004f62 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004f50:	68f9      	ldr	r1, [r7, #12]
 8004f52:	6809      	ldr	r1, [r1, #0]
 8004f54:	431a      	orrs	r2, r3
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	3318      	adds	r3, #24
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	440b      	add	r3, r1
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	e00f      	b.n	8004f82 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004f6c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004f72:	68f9      	ldr	r1, [r7, #12]
 8004f74:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004f76:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	3318      	adds	r3, #24
 8004f7c:	011b      	lsls	r3, r3, #4
 8004f7e:	440b      	add	r3, r1
 8004f80:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6819      	ldr	r1, [r3, #0]
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	691a      	ldr	r2, [r3, #16]
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	3318      	adds	r3, #24
 8004f8e:	011b      	lsls	r3, r3, #4
 8004f90:	440b      	add	r3, r1
 8004f92:	3304      	adds	r3, #4
 8004f94:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	7d1b      	ldrb	r3, [r3, #20]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d111      	bne.n	8004fc2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	3318      	adds	r3, #24
 8004fa6:	011b      	lsls	r3, r3, #4
 8004fa8:	4413      	add	r3, r2
 8004faa:	3304      	adds	r3, #4
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	6811      	ldr	r1, [r2, #0]
 8004fb2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	3318      	adds	r3, #24
 8004fba:	011b      	lsls	r3, r3, #4
 8004fbc:	440b      	add	r3, r1
 8004fbe:	3304      	adds	r3, #4
 8004fc0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	3307      	adds	r3, #7
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	061a      	lsls	r2, r3, #24
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	3306      	adds	r3, #6
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	041b      	lsls	r3, r3, #16
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3305      	adds	r3, #5
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	021b      	lsls	r3, r3, #8
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	3204      	adds	r2, #4
 8004fe2:	7812      	ldrb	r2, [r2, #0]
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	6811      	ldr	r1, [r2, #0]
 8004fea:	ea43 0200 	orr.w	r2, r3, r0
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	440b      	add	r3, r1
 8004ff4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004ff8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3303      	adds	r3, #3
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	061a      	lsls	r2, r3, #24
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	3302      	adds	r3, #2
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	041b      	lsls	r3, r3, #16
 800500a:	431a      	orrs	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	3301      	adds	r3, #1
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	021b      	lsls	r3, r3, #8
 8005014:	4313      	orrs	r3, r2
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	7812      	ldrb	r2, [r2, #0]
 800501a:	4610      	mov	r0, r2
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	6811      	ldr	r1, [r2, #0]
 8005020:	ea43 0200 	orr.w	r2, r3, r0
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	440b      	add	r3, r1
 800502a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800502e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	3318      	adds	r3, #24
 8005038:	011b      	lsls	r3, r3, #4
 800503a:	4413      	add	r3, r2
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	6811      	ldr	r1, [r2, #0]
 8005042:	f043 0201 	orr.w	r2, r3, #1
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	3318      	adds	r3, #24
 800504a:	011b      	lsls	r3, r3, #4
 800504c:	440b      	add	r3, r1
 800504e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005050:	2300      	movs	r3, #0
 8005052:	e00e      	b.n	8005072 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e006      	b.n	8005072 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
  }
}
 8005072:	4618      	mov	r0, r3
 8005074:	3724      	adds	r7, #36	; 0x24
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800507e:	b480      	push	{r7}
 8005080:	b087      	sub	sp, #28
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	607a      	str	r2, [r7, #4]
 800508a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005092:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005094:	7dfb      	ldrb	r3, [r7, #23]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d003      	beq.n	80050a2 <HAL_CAN_GetRxMessage+0x24>
 800509a:	7dfb      	ldrb	r3, [r7, #23]
 800509c:	2b02      	cmp	r3, #2
 800509e:	f040 80f3 	bne.w	8005288 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10e      	bne.n	80050c6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d116      	bne.n	80050e4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e0e7      	b.n	8005296 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	f003 0303 	and.w	r3, r3, #3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d107      	bne.n	80050e4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e0d8      	b.n	8005296 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	331b      	adds	r3, #27
 80050ec:	011b      	lsls	r3, r3, #4
 80050ee:	4413      	add	r3, r2
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0204 	and.w	r2, r3, #4
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10c      	bne.n	800511c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	331b      	adds	r3, #27
 800510a:	011b      	lsls	r3, r3, #4
 800510c:	4413      	add	r3, r2
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	0d5b      	lsrs	r3, r3, #21
 8005112:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	601a      	str	r2, [r3, #0]
 800511a:	e00b      	b.n	8005134 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	331b      	adds	r3, #27
 8005124:	011b      	lsls	r3, r3, #4
 8005126:	4413      	add	r3, r2
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	08db      	lsrs	r3, r3, #3
 800512c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	331b      	adds	r3, #27
 800513c:	011b      	lsls	r3, r3, #4
 800513e:	4413      	add	r3, r2
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0202 	and.w	r2, r3, #2
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	331b      	adds	r3, #27
 8005152:	011b      	lsls	r3, r3, #4
 8005154:	4413      	add	r3, r2
 8005156:	3304      	adds	r3, #4
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 020f 	and.w	r2, r3, #15
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	331b      	adds	r3, #27
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	4413      	add	r3, r2
 800516e:	3304      	adds	r3, #4
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	0a1b      	lsrs	r3, r3, #8
 8005174:	b2da      	uxtb	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	331b      	adds	r3, #27
 8005182:	011b      	lsls	r3, r3, #4
 8005184:	4413      	add	r3, r2
 8005186:	3304      	adds	r3, #4
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	0c1b      	lsrs	r3, r3, #16
 800518c:	b29a      	uxth	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	4413      	add	r3, r2
 800519c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	b2da      	uxtb	r2, r3
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	0a1a      	lsrs	r2, r3, #8
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	3301      	adds	r3, #1
 80051be:	b2d2      	uxtb	r2, r2
 80051c0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	011b      	lsls	r3, r3, #4
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	0c1a      	lsrs	r2, r3, #16
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	3302      	adds	r3, #2
 80051d8:	b2d2      	uxtb	r2, r2
 80051da:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	0e1a      	lsrs	r2, r3, #24
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	3303      	adds	r3, #3
 80051f2:	b2d2      	uxtb	r2, r2
 80051f4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	011b      	lsls	r3, r3, #4
 80051fe:	4413      	add	r3, r2
 8005200:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	3304      	adds	r3, #4
 800520a:	b2d2      	uxtb	r2, r2
 800520c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	011b      	lsls	r3, r3, #4
 8005216:	4413      	add	r3, r2
 8005218:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	0a1a      	lsrs	r2, r3, #8
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	3305      	adds	r3, #5
 8005224:	b2d2      	uxtb	r2, r2
 8005226:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	4413      	add	r3, r2
 8005232:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	0c1a      	lsrs	r2, r3, #16
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	3306      	adds	r3, #6
 800523e:	b2d2      	uxtb	r2, r2
 8005240:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	011b      	lsls	r3, r3, #4
 800524a:	4413      	add	r3, r2
 800524c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	0e1a      	lsrs	r2, r3, #24
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	3307      	adds	r3, #7
 8005258:	b2d2      	uxtb	r2, r2
 800525a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d108      	bne.n	8005274 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68da      	ldr	r2, [r3, #12]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f042 0220 	orr.w	r2, r2, #32
 8005270:	60da      	str	r2, [r3, #12]
 8005272:	e007      	b.n	8005284 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	691a      	ldr	r2, [r3, #16]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0220 	orr.w	r2, r2, #32
 8005282:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005284:	2300      	movs	r3, #0
 8005286:	e006      	b.n	8005296 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
  }
}
 8005296:	4618      	mov	r0, r3
 8005298:	371c      	adds	r7, #28
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b085      	sub	sp, #20
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
 80052aa:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052b2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80052b4:	7bfb      	ldrb	r3, [r7, #15]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d002      	beq.n	80052c0 <HAL_CAN_ActivateNotification+0x1e>
 80052ba:	7bfb      	ldrb	r3, [r7, #15]
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d109      	bne.n	80052d4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6959      	ldr	r1, [r3, #20]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80052d0:	2300      	movs	r3, #0
 80052d2:	e006      	b.n	80052e2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
  }
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b08a      	sub	sp, #40	; 0x28
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80052f6:	2300      	movs	r3, #0
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	d07c      	beq.n	800542e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d023      	beq.n	8005386 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2201      	movs	r2, #1
 8005344:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f97d 	bl	8005650 <HAL_CAN_TxMailbox0CompleteCallback>
 8005356:	e016      	b.n	8005386 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	f003 0304 	and.w	r3, r3, #4
 800535e:	2b00      	cmp	r3, #0
 8005360:	d004      	beq.n	800536c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005368:	627b      	str	r3, [r7, #36]	; 0x24
 800536a:	e00c      	b.n	8005386 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	f003 0308 	and.w	r3, r3, #8
 8005372:	2b00      	cmp	r3, #0
 8005374:	d004      	beq.n	8005380 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800537c:	627b      	str	r3, [r7, #36]	; 0x24
 800537e:	e002      	b.n	8005386 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f983 	bl	800568c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800538c:	2b00      	cmp	r3, #0
 800538e:	d024      	beq.n	80053da <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005398:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d003      	beq.n	80053ac <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f95d 	bl	8005664 <HAL_CAN_TxMailbox1CompleteCallback>
 80053aa:	e016      	b.n	80053da <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d004      	beq.n	80053c0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80053bc:	627b      	str	r3, [r7, #36]	; 0x24
 80053be:	e00c      	b.n	80053da <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d004      	beq.n	80053d4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053d0:	627b      	str	r3, [r7, #36]	; 0x24
 80053d2:	e002      	b.n	80053da <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 f963 	bl	80056a0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d024      	beq.n	800542e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80053ec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d003      	beq.n	8005400 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f93d 	bl	8005678 <HAL_CAN_TxMailbox2CompleteCallback>
 80053fe:	e016      	b.n	800542e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d004      	beq.n	8005414 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005410:	627b      	str	r3, [r7, #36]	; 0x24
 8005412:	e00c      	b.n	800542e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d004      	beq.n	8005428 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800541e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005424:	627b      	str	r3, [r7, #36]	; 0x24
 8005426:	e002      	b.n	800542e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f943 	bl	80056b4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800542e:	6a3b      	ldr	r3, [r7, #32]
 8005430:	f003 0308 	and.w	r3, r3, #8
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00c      	beq.n	8005452 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f003 0310 	and.w	r3, r3, #16
 800543e:	2b00      	cmp	r3, #0
 8005440:	d007      	beq.n	8005452 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005448:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2210      	movs	r2, #16
 8005450:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	f003 0304 	and.w	r3, r3, #4
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00b      	beq.n	8005474 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f003 0308 	and.w	r3, r3, #8
 8005462:	2b00      	cmp	r3, #0
 8005464:	d006      	beq.n	8005474 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2208      	movs	r2, #8
 800546c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f92a 	bl	80056c8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d009      	beq.n	8005492 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	f003 0303 	and.w	r3, r3, #3
 8005488:	2b00      	cmp	r3, #0
 800548a:	d002      	beq.n	8005492 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f7fb fd03 	bl	8000e98 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005492:	6a3b      	ldr	r3, [r7, #32]
 8005494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00c      	beq.n	80054b6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	f003 0310 	and.w	r3, r3, #16
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d007      	beq.n	80054b6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2210      	movs	r2, #16
 80054b4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	f003 0320 	and.w	r3, r3, #32
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00b      	beq.n	80054d8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f003 0308 	and.w	r3, r3, #8
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d006      	beq.n	80054d8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2208      	movs	r2, #8
 80054d0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f90c 	bl	80056f0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	f003 0310 	and.w	r3, r3, #16
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d009      	beq.n	80054f6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	f003 0303 	and.w	r3, r3, #3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d002      	beq.n	80054f6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 f8f3 	bl	80056dc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00b      	beq.n	8005518 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	f003 0310 	and.w	r3, r3, #16
 8005506:	2b00      	cmp	r3, #0
 8005508:	d006      	beq.n	8005518 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2210      	movs	r2, #16
 8005510:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f8f6 	bl	8005704 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00b      	beq.n	800553a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	f003 0308 	and.w	r3, r3, #8
 8005528:	2b00      	cmp	r3, #0
 800552a:	d006      	beq.n	800553a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2208      	movs	r2, #8
 8005532:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 f8ef 	bl	8005718 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d075      	beq.n	8005630 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	f003 0304 	and.w	r3, r3, #4
 800554a:	2b00      	cmp	r3, #0
 800554c:	d06c      	beq.n	8005628 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005554:	2b00      	cmp	r3, #0
 8005556:	d008      	beq.n	800556a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	f043 0301 	orr.w	r3, r3, #1
 8005568:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005570:	2b00      	cmp	r3, #0
 8005572:	d008      	beq.n	8005586 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800557a:	2b00      	cmp	r3, #0
 800557c:	d003      	beq.n	8005586 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	f043 0302 	orr.w	r3, r3, #2
 8005584:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800558c:	2b00      	cmp	r3, #0
 800558e:	d008      	beq.n	80055a2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	f043 0304 	orr.w	r3, r3, #4
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d03d      	beq.n	8005628 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d038      	beq.n	8005628 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055bc:	2b30      	cmp	r3, #48	; 0x30
 80055be:	d017      	beq.n	80055f0 <HAL_CAN_IRQHandler+0x302>
 80055c0:	2b30      	cmp	r3, #48	; 0x30
 80055c2:	d804      	bhi.n	80055ce <HAL_CAN_IRQHandler+0x2e0>
 80055c4:	2b10      	cmp	r3, #16
 80055c6:	d009      	beq.n	80055dc <HAL_CAN_IRQHandler+0x2ee>
 80055c8:	2b20      	cmp	r3, #32
 80055ca:	d00c      	beq.n	80055e6 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80055cc:	e024      	b.n	8005618 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80055ce:	2b50      	cmp	r3, #80	; 0x50
 80055d0:	d018      	beq.n	8005604 <HAL_CAN_IRQHandler+0x316>
 80055d2:	2b60      	cmp	r3, #96	; 0x60
 80055d4:	d01b      	beq.n	800560e <HAL_CAN_IRQHandler+0x320>
 80055d6:	2b40      	cmp	r3, #64	; 0x40
 80055d8:	d00f      	beq.n	80055fa <HAL_CAN_IRQHandler+0x30c>
            break;
 80055da:	e01d      	b.n	8005618 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	f043 0308 	orr.w	r3, r3, #8
 80055e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80055e4:	e018      	b.n	8005618 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	f043 0310 	orr.w	r3, r3, #16
 80055ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80055ee:	e013      	b.n	8005618 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	f043 0320 	orr.w	r3, r3, #32
 80055f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80055f8:	e00e      	b.n	8005618 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005600:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005602:	e009      	b.n	8005618 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800560a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800560c:	e004      	b.n	8005618 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005614:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005616:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699a      	ldr	r2, [r3, #24]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005626:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2204      	movs	r2, #4
 800562e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	2b00      	cmp	r3, #0
 8005634:	d008      	beq.n	8005648 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	431a      	orrs	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f872 	bl	800572c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005648:	bf00      	nop
 800564a:	3728      	adds	r7, #40	; 0x28
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f003 0307 	and.w	r3, r3, #7
 800574e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005750:	4b0c      	ldr	r3, [pc, #48]	; (8005784 <__NVIC_SetPriorityGrouping+0x44>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800575c:	4013      	ands	r3, r2
 800575e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800576c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005772:	4a04      	ldr	r2, [pc, #16]	; (8005784 <__NVIC_SetPriorityGrouping+0x44>)
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	60d3      	str	r3, [r2, #12]
}
 8005778:	bf00      	nop
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr
 8005784:	e000ed00 	.word	0xe000ed00

08005788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005788:	b480      	push	{r7}
 800578a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800578c:	4b04      	ldr	r3, [pc, #16]	; (80057a0 <__NVIC_GetPriorityGrouping+0x18>)
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	0a1b      	lsrs	r3, r3, #8
 8005792:	f003 0307 	and.w	r3, r3, #7
}
 8005796:	4618      	mov	r0, r3
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	e000ed00 	.word	0xe000ed00

080057a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	4603      	mov	r3, r0
 80057ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	db0b      	blt.n	80057ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057b6:	79fb      	ldrb	r3, [r7, #7]
 80057b8:	f003 021f 	and.w	r2, r3, #31
 80057bc:	4907      	ldr	r1, [pc, #28]	; (80057dc <__NVIC_EnableIRQ+0x38>)
 80057be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057c2:	095b      	lsrs	r3, r3, #5
 80057c4:	2001      	movs	r0, #1
 80057c6:	fa00 f202 	lsl.w	r2, r0, r2
 80057ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80057ce:	bf00      	nop
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	e000e100 	.word	0xe000e100

080057e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	4603      	mov	r3, r0
 80057e8:	6039      	str	r1, [r7, #0]
 80057ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	db0a      	blt.n	800580a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	490c      	ldr	r1, [pc, #48]	; (800582c <__NVIC_SetPriority+0x4c>)
 80057fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057fe:	0112      	lsls	r2, r2, #4
 8005800:	b2d2      	uxtb	r2, r2
 8005802:	440b      	add	r3, r1
 8005804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005808:	e00a      	b.n	8005820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	b2da      	uxtb	r2, r3
 800580e:	4908      	ldr	r1, [pc, #32]	; (8005830 <__NVIC_SetPriority+0x50>)
 8005810:	79fb      	ldrb	r3, [r7, #7]
 8005812:	f003 030f 	and.w	r3, r3, #15
 8005816:	3b04      	subs	r3, #4
 8005818:	0112      	lsls	r2, r2, #4
 800581a:	b2d2      	uxtb	r2, r2
 800581c:	440b      	add	r3, r1
 800581e:	761a      	strb	r2, [r3, #24]
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	e000e100 	.word	0xe000e100
 8005830:	e000ed00 	.word	0xe000ed00

08005834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005834:	b480      	push	{r7}
 8005836:	b089      	sub	sp, #36	; 0x24
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	f1c3 0307 	rsb	r3, r3, #7
 800584e:	2b04      	cmp	r3, #4
 8005850:	bf28      	it	cs
 8005852:	2304      	movcs	r3, #4
 8005854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	3304      	adds	r3, #4
 800585a:	2b06      	cmp	r3, #6
 800585c:	d902      	bls.n	8005864 <NVIC_EncodePriority+0x30>
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	3b03      	subs	r3, #3
 8005862:	e000      	b.n	8005866 <NVIC_EncodePriority+0x32>
 8005864:	2300      	movs	r3, #0
 8005866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005868:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	fa02 f303 	lsl.w	r3, r2, r3
 8005872:	43da      	mvns	r2, r3
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	401a      	ands	r2, r3
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800587c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	fa01 f303 	lsl.w	r3, r1, r3
 8005886:	43d9      	mvns	r1, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800588c:	4313      	orrs	r3, r2
         );
}
 800588e:	4618      	mov	r0, r3
 8005890:	3724      	adds	r7, #36	; 0x24
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b082      	sub	sp, #8
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7ff ff4c 	bl	8005740 <__NVIC_SetPriorityGrouping>
}
 80058a8:	bf00      	nop
 80058aa:	3708      	adds	r7, #8
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	4603      	mov	r3, r0
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
 80058bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80058be:	2300      	movs	r3, #0
 80058c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80058c2:	f7ff ff61 	bl	8005788 <__NVIC_GetPriorityGrouping>
 80058c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	68b9      	ldr	r1, [r7, #8]
 80058cc:	6978      	ldr	r0, [r7, #20]
 80058ce:	f7ff ffb1 	bl	8005834 <NVIC_EncodePriority>
 80058d2:	4602      	mov	r2, r0
 80058d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058d8:	4611      	mov	r1, r2
 80058da:	4618      	mov	r0, r3
 80058dc:	f7ff ff80 	bl	80057e0 <__NVIC_SetPriority>
}
 80058e0:	bf00      	nop
 80058e2:	3718      	adds	r7, #24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	4603      	mov	r3, r0
 80058f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80058f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7ff ff54 	bl	80057a4 <__NVIC_EnableIRQ>
}
 80058fc:	bf00      	nop
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b02      	cmp	r3, #2
 8005916:	d004      	beq.n	8005922 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2280      	movs	r2, #128	; 0x80
 800591c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e00c      	b.n	800593c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2205      	movs	r2, #5
 8005926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 0201 	bic.w	r2, r2, #1
 8005938:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005948:	b480      	push	{r7}
 800594a:	b089      	sub	sp, #36	; 0x24
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005952:	2300      	movs	r3, #0
 8005954:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005956:	2300      	movs	r3, #0
 8005958:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800595a:	2300      	movs	r3, #0
 800595c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800595e:	2300      	movs	r3, #0
 8005960:	61fb      	str	r3, [r7, #28]
 8005962:	e16b      	b.n	8005c3c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005964:	2201      	movs	r2, #1
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	fa02 f303 	lsl.w	r3, r2, r3
 800596c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	4013      	ands	r3, r2
 8005976:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	429a      	cmp	r2, r3
 800597e:	f040 815a 	bne.w	8005c36 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d00b      	beq.n	80059a2 <HAL_GPIO_Init+0x5a>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	2b02      	cmp	r3, #2
 8005990:	d007      	beq.n	80059a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005996:	2b11      	cmp	r3, #17
 8005998:	d003      	beq.n	80059a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	2b12      	cmp	r3, #18
 80059a0:	d130      	bne.n	8005a04 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	005b      	lsls	r3, r3, #1
 80059ac:	2203      	movs	r2, #3
 80059ae:	fa02 f303 	lsl.w	r3, r2, r3
 80059b2:	43db      	mvns	r3, r3
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	4013      	ands	r3, r2
 80059b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	68da      	ldr	r2, [r3, #12]
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	fa02 f303 	lsl.w	r3, r2, r3
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80059d8:	2201      	movs	r2, #1
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	fa02 f303 	lsl.w	r3, r2, r3
 80059e0:	43db      	mvns	r3, r3
 80059e2:	69ba      	ldr	r2, [r7, #24]
 80059e4:	4013      	ands	r3, r2
 80059e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	091b      	lsrs	r3, r3, #4
 80059ee:	f003 0201 	and.w	r2, r3, #1
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	fa02 f303 	lsl.w	r3, r2, r3
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	2203      	movs	r2, #3
 8005a10:	fa02 f303 	lsl.w	r3, r2, r3
 8005a14:	43db      	mvns	r3, r3
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	4013      	ands	r3, r2
 8005a1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	fa02 f303 	lsl.w	r3, r2, r3
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d003      	beq.n	8005a44 <HAL_GPIO_Init+0xfc>
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	2b12      	cmp	r3, #18
 8005a42:	d123      	bne.n	8005a8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	08da      	lsrs	r2, r3, #3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3208      	adds	r2, #8
 8005a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	f003 0307 	and.w	r3, r3, #7
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	220f      	movs	r2, #15
 8005a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a60:	43db      	mvns	r3, r3
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	4013      	ands	r3, r2
 8005a66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	691a      	ldr	r2, [r3, #16]
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	f003 0307 	and.w	r3, r3, #7
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	fa02 f303 	lsl.w	r3, r2, r3
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	08da      	lsrs	r2, r3, #3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	3208      	adds	r2, #8
 8005a86:	69b9      	ldr	r1, [r7, #24]
 8005a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	2203      	movs	r2, #3
 8005a98:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9c:	43db      	mvns	r3, r3
 8005a9e:	69ba      	ldr	r2, [r7, #24]
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f003 0203 	and.w	r2, r3, #3
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	005b      	lsls	r3, r3, #1
 8005ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 80b4 	beq.w	8005c36 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ace:	2300      	movs	r3, #0
 8005ad0:	60fb      	str	r3, [r7, #12]
 8005ad2:	4b5f      	ldr	r3, [pc, #380]	; (8005c50 <HAL_GPIO_Init+0x308>)
 8005ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad6:	4a5e      	ldr	r2, [pc, #376]	; (8005c50 <HAL_GPIO_Init+0x308>)
 8005ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005adc:	6453      	str	r3, [r2, #68]	; 0x44
 8005ade:	4b5c      	ldr	r3, [pc, #368]	; (8005c50 <HAL_GPIO_Init+0x308>)
 8005ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ae6:	60fb      	str	r3, [r7, #12]
 8005ae8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005aea:	4a5a      	ldr	r2, [pc, #360]	; (8005c54 <HAL_GPIO_Init+0x30c>)
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	089b      	lsrs	r3, r3, #2
 8005af0:	3302      	adds	r3, #2
 8005af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	f003 0303 	and.w	r3, r3, #3
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	220f      	movs	r2, #15
 8005b02:	fa02 f303 	lsl.w	r3, r2, r3
 8005b06:	43db      	mvns	r3, r3
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a51      	ldr	r2, [pc, #324]	; (8005c58 <HAL_GPIO_Init+0x310>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d02b      	beq.n	8005b6e <HAL_GPIO_Init+0x226>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a50      	ldr	r2, [pc, #320]	; (8005c5c <HAL_GPIO_Init+0x314>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d025      	beq.n	8005b6a <HAL_GPIO_Init+0x222>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a4f      	ldr	r2, [pc, #316]	; (8005c60 <HAL_GPIO_Init+0x318>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d01f      	beq.n	8005b66 <HAL_GPIO_Init+0x21e>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a4e      	ldr	r2, [pc, #312]	; (8005c64 <HAL_GPIO_Init+0x31c>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d019      	beq.n	8005b62 <HAL_GPIO_Init+0x21a>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a4d      	ldr	r2, [pc, #308]	; (8005c68 <HAL_GPIO_Init+0x320>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d013      	beq.n	8005b5e <HAL_GPIO_Init+0x216>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a4c      	ldr	r2, [pc, #304]	; (8005c6c <HAL_GPIO_Init+0x324>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d00d      	beq.n	8005b5a <HAL_GPIO_Init+0x212>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a4b      	ldr	r2, [pc, #300]	; (8005c70 <HAL_GPIO_Init+0x328>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d007      	beq.n	8005b56 <HAL_GPIO_Init+0x20e>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a4a      	ldr	r2, [pc, #296]	; (8005c74 <HAL_GPIO_Init+0x32c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d101      	bne.n	8005b52 <HAL_GPIO_Init+0x20a>
 8005b4e:	2307      	movs	r3, #7
 8005b50:	e00e      	b.n	8005b70 <HAL_GPIO_Init+0x228>
 8005b52:	2308      	movs	r3, #8
 8005b54:	e00c      	b.n	8005b70 <HAL_GPIO_Init+0x228>
 8005b56:	2306      	movs	r3, #6
 8005b58:	e00a      	b.n	8005b70 <HAL_GPIO_Init+0x228>
 8005b5a:	2305      	movs	r3, #5
 8005b5c:	e008      	b.n	8005b70 <HAL_GPIO_Init+0x228>
 8005b5e:	2304      	movs	r3, #4
 8005b60:	e006      	b.n	8005b70 <HAL_GPIO_Init+0x228>
 8005b62:	2303      	movs	r3, #3
 8005b64:	e004      	b.n	8005b70 <HAL_GPIO_Init+0x228>
 8005b66:	2302      	movs	r3, #2
 8005b68:	e002      	b.n	8005b70 <HAL_GPIO_Init+0x228>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e000      	b.n	8005b70 <HAL_GPIO_Init+0x228>
 8005b6e:	2300      	movs	r3, #0
 8005b70:	69fa      	ldr	r2, [r7, #28]
 8005b72:	f002 0203 	and.w	r2, r2, #3
 8005b76:	0092      	lsls	r2, r2, #2
 8005b78:	4093      	lsls	r3, r2
 8005b7a:	69ba      	ldr	r2, [r7, #24]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b80:	4934      	ldr	r1, [pc, #208]	; (8005c54 <HAL_GPIO_Init+0x30c>)
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	089b      	lsrs	r3, r3, #2
 8005b86:	3302      	adds	r3, #2
 8005b88:	69ba      	ldr	r2, [r7, #24]
 8005b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b8e:	4b3a      	ldr	r3, [pc, #232]	; (8005c78 <HAL_GPIO_Init+0x330>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	43db      	mvns	r3, r3
 8005b98:	69ba      	ldr	r2, [r7, #24]
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005baa:	69ba      	ldr	r2, [r7, #24]
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005bb2:	4a31      	ldr	r2, [pc, #196]	; (8005c78 <HAL_GPIO_Init+0x330>)
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005bb8:	4b2f      	ldr	r3, [pc, #188]	; (8005c78 <HAL_GPIO_Init+0x330>)
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	43db      	mvns	r3, r3
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d003      	beq.n	8005bdc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005bdc:	4a26      	ldr	r2, [pc, #152]	; (8005c78 <HAL_GPIO_Init+0x330>)
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005be2:	4b25      	ldr	r3, [pc, #148]	; (8005c78 <HAL_GPIO_Init+0x330>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	43db      	mvns	r3, r3
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	4013      	ands	r3, r2
 8005bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d003      	beq.n	8005c06 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005bfe:	69ba      	ldr	r2, [r7, #24]
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c06:	4a1c      	ldr	r2, [pc, #112]	; (8005c78 <HAL_GPIO_Init+0x330>)
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c0c:	4b1a      	ldr	r3, [pc, #104]	; (8005c78 <HAL_GPIO_Init+0x330>)
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	43db      	mvns	r3, r3
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	4013      	ands	r3, r2
 8005c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c30:	4a11      	ldr	r2, [pc, #68]	; (8005c78 <HAL_GPIO_Init+0x330>)
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	61fb      	str	r3, [r7, #28]
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	2b0f      	cmp	r3, #15
 8005c40:	f67f ae90 	bls.w	8005964 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005c44:	bf00      	nop
 8005c46:	3724      	adds	r7, #36	; 0x24
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	40023800 	.word	0x40023800
 8005c54:	40013800 	.word	0x40013800
 8005c58:	40020000 	.word	0x40020000
 8005c5c:	40020400 	.word	0x40020400
 8005c60:	40020800 	.word	0x40020800
 8005c64:	40020c00 	.word	0x40020c00
 8005c68:	40021000 	.word	0x40021000
 8005c6c:	40021400 	.word	0x40021400
 8005c70:	40021800 	.word	0x40021800
 8005c74:	40021c00 	.word	0x40021c00
 8005c78:	40013c00 	.word	0x40013c00

08005c7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	460b      	mov	r3, r1
 8005c86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	691a      	ldr	r2, [r3, #16]
 8005c8c:	887b      	ldrh	r3, [r7, #2]
 8005c8e:	4013      	ands	r3, r2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d002      	beq.n	8005c9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005c94:	2301      	movs	r3, #1
 8005c96:	73fb      	strb	r3, [r7, #15]
 8005c98:	e001      	b.n	8005c9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	807b      	strh	r3, [r7, #2]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005cbc:	787b      	ldrb	r3, [r7, #1]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cc2:	887a      	ldrh	r2, [r7, #2]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005cc8:	e003      	b.n	8005cd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005cca:	887b      	ldrh	r3, [r7, #2]
 8005ccc:	041a      	lsls	r2, r3, #16
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	619a      	str	r2, [r3, #24]
}
 8005cd2:	bf00      	nop
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
	...

08005ce0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e25b      	b.n	80061aa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d075      	beq.n	8005dea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cfe:	4ba3      	ldr	r3, [pc, #652]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f003 030c 	and.w	r3, r3, #12
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	d00c      	beq.n	8005d24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d0a:	4ba0      	ldr	r3, [pc, #640]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d12:	2b08      	cmp	r3, #8
 8005d14:	d112      	bne.n	8005d3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d16:	4b9d      	ldr	r3, [pc, #628]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d22:	d10b      	bne.n	8005d3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d24:	4b99      	ldr	r3, [pc, #612]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d05b      	beq.n	8005de8 <HAL_RCC_OscConfig+0x108>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d157      	bne.n	8005de8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e236      	b.n	80061aa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d44:	d106      	bne.n	8005d54 <HAL_RCC_OscConfig+0x74>
 8005d46:	4b91      	ldr	r3, [pc, #580]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a90      	ldr	r2, [pc, #576]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d50:	6013      	str	r3, [r2, #0]
 8005d52:	e01d      	b.n	8005d90 <HAL_RCC_OscConfig+0xb0>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d5c:	d10c      	bne.n	8005d78 <HAL_RCC_OscConfig+0x98>
 8005d5e:	4b8b      	ldr	r3, [pc, #556]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a8a      	ldr	r2, [pc, #552]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	4b88      	ldr	r3, [pc, #544]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a87      	ldr	r2, [pc, #540]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d74:	6013      	str	r3, [r2, #0]
 8005d76:	e00b      	b.n	8005d90 <HAL_RCC_OscConfig+0xb0>
 8005d78:	4b84      	ldr	r3, [pc, #528]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a83      	ldr	r2, [pc, #524]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d82:	6013      	str	r3, [r2, #0]
 8005d84:	4b81      	ldr	r3, [pc, #516]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a80      	ldr	r2, [pc, #512]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d013      	beq.n	8005dc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d98:	f7fe f948 	bl	800402c <HAL_GetTick>
 8005d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d9e:	e008      	b.n	8005db2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005da0:	f7fe f944 	bl	800402c <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b64      	cmp	r3, #100	; 0x64
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e1fb      	b.n	80061aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005db2:	4b76      	ldr	r3, [pc, #472]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d0f0      	beq.n	8005da0 <HAL_RCC_OscConfig+0xc0>
 8005dbe:	e014      	b.n	8005dea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc0:	f7fe f934 	bl	800402c <HAL_GetTick>
 8005dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dc6:	e008      	b.n	8005dda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005dc8:	f7fe f930 	bl	800402c <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b64      	cmp	r3, #100	; 0x64
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e1e7      	b.n	80061aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dda:	4b6c      	ldr	r3, [pc, #432]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1f0      	bne.n	8005dc8 <HAL_RCC_OscConfig+0xe8>
 8005de6:	e000      	b.n	8005dea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d063      	beq.n	8005ebe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005df6:	4b65      	ldr	r3, [pc, #404]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f003 030c 	and.w	r3, r3, #12
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00b      	beq.n	8005e1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e02:	4b62      	ldr	r3, [pc, #392]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e0a:	2b08      	cmp	r3, #8
 8005e0c:	d11c      	bne.n	8005e48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e0e:	4b5f      	ldr	r3, [pc, #380]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d116      	bne.n	8005e48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e1a:	4b5c      	ldr	r3, [pc, #368]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d005      	beq.n	8005e32 <HAL_RCC_OscConfig+0x152>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d001      	beq.n	8005e32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e1bb      	b.n	80061aa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e32:	4b56      	ldr	r3, [pc, #344]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	4952      	ldr	r1, [pc, #328]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e46:	e03a      	b.n	8005ebe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d020      	beq.n	8005e92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e50:	4b4f      	ldr	r3, [pc, #316]	; (8005f90 <HAL_RCC_OscConfig+0x2b0>)
 8005e52:	2201      	movs	r2, #1
 8005e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e56:	f7fe f8e9 	bl	800402c <HAL_GetTick>
 8005e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e5c:	e008      	b.n	8005e70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e5e:	f7fe f8e5 	bl	800402c <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d901      	bls.n	8005e70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e19c      	b.n	80061aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e70:	4b46      	ldr	r3, [pc, #280]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0302 	and.w	r3, r3, #2
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d0f0      	beq.n	8005e5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e7c:	4b43      	ldr	r3, [pc, #268]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	00db      	lsls	r3, r3, #3
 8005e8a:	4940      	ldr	r1, [pc, #256]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	600b      	str	r3, [r1, #0]
 8005e90:	e015      	b.n	8005ebe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e92:	4b3f      	ldr	r3, [pc, #252]	; (8005f90 <HAL_RCC_OscConfig+0x2b0>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e98:	f7fe f8c8 	bl	800402c <HAL_GetTick>
 8005e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ea0:	f7fe f8c4 	bl	800402c <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e17b      	b.n	80061aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eb2:	4b36      	ldr	r3, [pc, #216]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1f0      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0308 	and.w	r3, r3, #8
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d030      	beq.n	8005f2c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d016      	beq.n	8005f00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ed2:	4b30      	ldr	r3, [pc, #192]	; (8005f94 <HAL_RCC_OscConfig+0x2b4>)
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ed8:	f7fe f8a8 	bl	800402c <HAL_GetTick>
 8005edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ede:	e008      	b.n	8005ef2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ee0:	f7fe f8a4 	bl	800402c <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e15b      	b.n	80061aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ef2:	4b26      	ldr	r3, [pc, #152]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d0f0      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x200>
 8005efe:	e015      	b.n	8005f2c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f00:	4b24      	ldr	r3, [pc, #144]	; (8005f94 <HAL_RCC_OscConfig+0x2b4>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f06:	f7fe f891 	bl	800402c <HAL_GetTick>
 8005f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f0c:	e008      	b.n	8005f20 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f0e:	f7fe f88d 	bl	800402c <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d901      	bls.n	8005f20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e144      	b.n	80061aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f20:	4b1a      	ldr	r3, [pc, #104]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1f0      	bne.n	8005f0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0304 	and.w	r3, r3, #4
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 80a0 	beq.w	800607a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f3e:	4b13      	ldr	r3, [pc, #76]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10f      	bne.n	8005f6a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	60bb      	str	r3, [r7, #8]
 8005f4e:	4b0f      	ldr	r3, [pc, #60]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f52:	4a0e      	ldr	r2, [pc, #56]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f58:	6413      	str	r3, [r2, #64]	; 0x40
 8005f5a:	4b0c      	ldr	r3, [pc, #48]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f62:	60bb      	str	r3, [r7, #8]
 8005f64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f66:	2301      	movs	r3, #1
 8005f68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f6a:	4b0b      	ldr	r3, [pc, #44]	; (8005f98 <HAL_RCC_OscConfig+0x2b8>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d121      	bne.n	8005fba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f76:	4b08      	ldr	r3, [pc, #32]	; (8005f98 <HAL_RCC_OscConfig+0x2b8>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a07      	ldr	r2, [pc, #28]	; (8005f98 <HAL_RCC_OscConfig+0x2b8>)
 8005f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f82:	f7fe f853 	bl	800402c <HAL_GetTick>
 8005f86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f88:	e011      	b.n	8005fae <HAL_RCC_OscConfig+0x2ce>
 8005f8a:	bf00      	nop
 8005f8c:	40023800 	.word	0x40023800
 8005f90:	42470000 	.word	0x42470000
 8005f94:	42470e80 	.word	0x42470e80
 8005f98:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f9c:	f7fe f846 	bl	800402c <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d901      	bls.n	8005fae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e0fd      	b.n	80061aa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fae:	4b81      	ldr	r3, [pc, #516]	; (80061b4 <HAL_RCC_OscConfig+0x4d4>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d0f0      	beq.n	8005f9c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d106      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x2f0>
 8005fc2:	4b7d      	ldr	r3, [pc, #500]	; (80061b8 <HAL_RCC_OscConfig+0x4d8>)
 8005fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc6:	4a7c      	ldr	r2, [pc, #496]	; (80061b8 <HAL_RCC_OscConfig+0x4d8>)
 8005fc8:	f043 0301 	orr.w	r3, r3, #1
 8005fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8005fce:	e01c      	b.n	800600a <HAL_RCC_OscConfig+0x32a>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	2b05      	cmp	r3, #5
 8005fd6:	d10c      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x312>
 8005fd8:	4b77      	ldr	r3, [pc, #476]	; (80061b8 <HAL_RCC_OscConfig+0x4d8>)
 8005fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fdc:	4a76      	ldr	r2, [pc, #472]	; (80061b8 <HAL_RCC_OscConfig+0x4d8>)
 8005fde:	f043 0304 	orr.w	r3, r3, #4
 8005fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8005fe4:	4b74      	ldr	r3, [pc, #464]	; (80061b8 <HAL_RCC_OscConfig+0x4d8>)
 8005fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe8:	4a73      	ldr	r2, [pc, #460]	; (80061b8 <HAL_RCC_OscConfig+0x4d8>)
 8005fea:	f043 0301 	orr.w	r3, r3, #1
 8005fee:	6713      	str	r3, [r2, #112]	; 0x70
 8005ff0:	e00b      	b.n	800600a <HAL_RCC_OscConfig+0x32a>
 8005ff2:	4b71      	ldr	r3, [pc, #452]	; (80061b8 <HAL_RCC_OscConfig+0x4d8>)
 8005ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff6:	4a70      	ldr	r2, [pc, #448]	; (80061b8 <HAL_RCC_OscConfig+0x4d8>)
 8005ff8:	f023 0301 	bic.w	r3, r3, #1
 8005ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8005ffe:	4b6e      	ldr	r3, [pc, #440]	; (80061b8 <HAL_RCC_OscConfig+0x4d8>)
 8006000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006002:	4a6d      	ldr	r2, [pc, #436]	; (80061b8 <HAL_RCC_OscConfig+0x4d8>)
 8006004:	f023 0304 	bic.w	r3, r3, #4
 8006008:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d015      	beq.n	800603e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006012:	f7fe f80b 	bl	800402c <HAL_GetTick>
 8006016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006018:	e00a      	b.n	8006030 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800601a:	f7fe f807 	bl	800402c <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	f241 3288 	movw	r2, #5000	; 0x1388
 8006028:	4293      	cmp	r3, r2
 800602a:	d901      	bls.n	8006030 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e0bc      	b.n	80061aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006030:	4b61      	ldr	r3, [pc, #388]	; (80061b8 <HAL_RCC_OscConfig+0x4d8>)
 8006032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006034:	f003 0302 	and.w	r3, r3, #2
 8006038:	2b00      	cmp	r3, #0
 800603a:	d0ee      	beq.n	800601a <HAL_RCC_OscConfig+0x33a>
 800603c:	e014      	b.n	8006068 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800603e:	f7fd fff5 	bl	800402c <HAL_GetTick>
 8006042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006044:	e00a      	b.n	800605c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006046:	f7fd fff1 	bl	800402c <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	f241 3288 	movw	r2, #5000	; 0x1388
 8006054:	4293      	cmp	r3, r2
 8006056:	d901      	bls.n	800605c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e0a6      	b.n	80061aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800605c:	4b56      	ldr	r3, [pc, #344]	; (80061b8 <HAL_RCC_OscConfig+0x4d8>)
 800605e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006060:	f003 0302 	and.w	r3, r3, #2
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1ee      	bne.n	8006046 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006068:	7dfb      	ldrb	r3, [r7, #23]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d105      	bne.n	800607a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800606e:	4b52      	ldr	r3, [pc, #328]	; (80061b8 <HAL_RCC_OscConfig+0x4d8>)
 8006070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006072:	4a51      	ldr	r2, [pc, #324]	; (80061b8 <HAL_RCC_OscConfig+0x4d8>)
 8006074:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006078:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	2b00      	cmp	r3, #0
 8006080:	f000 8092 	beq.w	80061a8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006084:	4b4c      	ldr	r3, [pc, #304]	; (80061b8 <HAL_RCC_OscConfig+0x4d8>)
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f003 030c 	and.w	r3, r3, #12
 800608c:	2b08      	cmp	r3, #8
 800608e:	d05c      	beq.n	800614a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	2b02      	cmp	r3, #2
 8006096:	d141      	bne.n	800611c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006098:	4b48      	ldr	r3, [pc, #288]	; (80061bc <HAL_RCC_OscConfig+0x4dc>)
 800609a:	2200      	movs	r2, #0
 800609c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800609e:	f7fd ffc5 	bl	800402c <HAL_GetTick>
 80060a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060a4:	e008      	b.n	80060b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060a6:	f7fd ffc1 	bl	800402c <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d901      	bls.n	80060b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e078      	b.n	80061aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060b8:	4b3f      	ldr	r3, [pc, #252]	; (80061b8 <HAL_RCC_OscConfig+0x4d8>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1f0      	bne.n	80060a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	69da      	ldr	r2, [r3, #28]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	431a      	orrs	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d2:	019b      	lsls	r3, r3, #6
 80060d4:	431a      	orrs	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060da:	085b      	lsrs	r3, r3, #1
 80060dc:	3b01      	subs	r3, #1
 80060de:	041b      	lsls	r3, r3, #16
 80060e0:	431a      	orrs	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e6:	061b      	lsls	r3, r3, #24
 80060e8:	4933      	ldr	r1, [pc, #204]	; (80061b8 <HAL_RCC_OscConfig+0x4d8>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060ee:	4b33      	ldr	r3, [pc, #204]	; (80061bc <HAL_RCC_OscConfig+0x4dc>)
 80060f0:	2201      	movs	r2, #1
 80060f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f4:	f7fd ff9a 	bl	800402c <HAL_GetTick>
 80060f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060fa:	e008      	b.n	800610e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060fc:	f7fd ff96 	bl	800402c <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b02      	cmp	r3, #2
 8006108:	d901      	bls.n	800610e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e04d      	b.n	80061aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800610e:	4b2a      	ldr	r3, [pc, #168]	; (80061b8 <HAL_RCC_OscConfig+0x4d8>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d0f0      	beq.n	80060fc <HAL_RCC_OscConfig+0x41c>
 800611a:	e045      	b.n	80061a8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800611c:	4b27      	ldr	r3, [pc, #156]	; (80061bc <HAL_RCC_OscConfig+0x4dc>)
 800611e:	2200      	movs	r2, #0
 8006120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006122:	f7fd ff83 	bl	800402c <HAL_GetTick>
 8006126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006128:	e008      	b.n	800613c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800612a:	f7fd ff7f 	bl	800402c <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	2b02      	cmp	r3, #2
 8006136:	d901      	bls.n	800613c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e036      	b.n	80061aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800613c:	4b1e      	ldr	r3, [pc, #120]	; (80061b8 <HAL_RCC_OscConfig+0x4d8>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1f0      	bne.n	800612a <HAL_RCC_OscConfig+0x44a>
 8006148:	e02e      	b.n	80061a8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d101      	bne.n	8006156 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e029      	b.n	80061aa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006156:	4b18      	ldr	r3, [pc, #96]	; (80061b8 <HAL_RCC_OscConfig+0x4d8>)
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	429a      	cmp	r2, r3
 8006168:	d11c      	bne.n	80061a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006174:	429a      	cmp	r2, r3
 8006176:	d115      	bne.n	80061a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800617e:	4013      	ands	r3, r2
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006184:	4293      	cmp	r3, r2
 8006186:	d10d      	bne.n	80061a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006192:	429a      	cmp	r2, r3
 8006194:	d106      	bne.n	80061a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d001      	beq.n	80061a8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e000      	b.n	80061aa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3718      	adds	r7, #24
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	40007000 	.word	0x40007000
 80061b8:	40023800 	.word	0x40023800
 80061bc:	42470060 	.word	0x42470060

080061c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d101      	bne.n	80061d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e0cc      	b.n	800636e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061d4:	4b68      	ldr	r3, [pc, #416]	; (8006378 <HAL_RCC_ClockConfig+0x1b8>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 030f 	and.w	r3, r3, #15
 80061dc:	683a      	ldr	r2, [r7, #0]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d90c      	bls.n	80061fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061e2:	4b65      	ldr	r3, [pc, #404]	; (8006378 <HAL_RCC_ClockConfig+0x1b8>)
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	b2d2      	uxtb	r2, r2
 80061e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ea:	4b63      	ldr	r3, [pc, #396]	; (8006378 <HAL_RCC_ClockConfig+0x1b8>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 030f 	and.w	r3, r3, #15
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d001      	beq.n	80061fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e0b8      	b.n	800636e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0302 	and.w	r3, r3, #2
 8006204:	2b00      	cmp	r3, #0
 8006206:	d020      	beq.n	800624a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0304 	and.w	r3, r3, #4
 8006210:	2b00      	cmp	r3, #0
 8006212:	d005      	beq.n	8006220 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006214:	4b59      	ldr	r3, [pc, #356]	; (800637c <HAL_RCC_ClockConfig+0x1bc>)
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	4a58      	ldr	r2, [pc, #352]	; (800637c <HAL_RCC_ClockConfig+0x1bc>)
 800621a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800621e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0308 	and.w	r3, r3, #8
 8006228:	2b00      	cmp	r3, #0
 800622a:	d005      	beq.n	8006238 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800622c:	4b53      	ldr	r3, [pc, #332]	; (800637c <HAL_RCC_ClockConfig+0x1bc>)
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	4a52      	ldr	r2, [pc, #328]	; (800637c <HAL_RCC_ClockConfig+0x1bc>)
 8006232:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006236:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006238:	4b50      	ldr	r3, [pc, #320]	; (800637c <HAL_RCC_ClockConfig+0x1bc>)
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	494d      	ldr	r1, [pc, #308]	; (800637c <HAL_RCC_ClockConfig+0x1bc>)
 8006246:	4313      	orrs	r3, r2
 8006248:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	2b00      	cmp	r3, #0
 8006254:	d044      	beq.n	80062e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d107      	bne.n	800626e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800625e:	4b47      	ldr	r3, [pc, #284]	; (800637c <HAL_RCC_ClockConfig+0x1bc>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d119      	bne.n	800629e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e07f      	b.n	800636e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	2b02      	cmp	r3, #2
 8006274:	d003      	beq.n	800627e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800627a:	2b03      	cmp	r3, #3
 800627c:	d107      	bne.n	800628e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800627e:	4b3f      	ldr	r3, [pc, #252]	; (800637c <HAL_RCC_ClockConfig+0x1bc>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d109      	bne.n	800629e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e06f      	b.n	800636e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800628e:	4b3b      	ldr	r3, [pc, #236]	; (800637c <HAL_RCC_ClockConfig+0x1bc>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e067      	b.n	800636e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800629e:	4b37      	ldr	r3, [pc, #220]	; (800637c <HAL_RCC_ClockConfig+0x1bc>)
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f023 0203 	bic.w	r2, r3, #3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	4934      	ldr	r1, [pc, #208]	; (800637c <HAL_RCC_ClockConfig+0x1bc>)
 80062ac:	4313      	orrs	r3, r2
 80062ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062b0:	f7fd febc 	bl	800402c <HAL_GetTick>
 80062b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062b6:	e00a      	b.n	80062ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062b8:	f7fd feb8 	bl	800402c <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d901      	bls.n	80062ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e04f      	b.n	800636e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ce:	4b2b      	ldr	r3, [pc, #172]	; (800637c <HAL_RCC_ClockConfig+0x1bc>)
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f003 020c 	and.w	r2, r3, #12
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	429a      	cmp	r2, r3
 80062de:	d1eb      	bne.n	80062b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062e0:	4b25      	ldr	r3, [pc, #148]	; (8006378 <HAL_RCC_ClockConfig+0x1b8>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 030f 	and.w	r3, r3, #15
 80062e8:	683a      	ldr	r2, [r7, #0]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d20c      	bcs.n	8006308 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ee:	4b22      	ldr	r3, [pc, #136]	; (8006378 <HAL_RCC_ClockConfig+0x1b8>)
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	b2d2      	uxtb	r2, r2
 80062f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062f6:	4b20      	ldr	r3, [pc, #128]	; (8006378 <HAL_RCC_ClockConfig+0x1b8>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 030f 	and.w	r3, r3, #15
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	429a      	cmp	r2, r3
 8006302:	d001      	beq.n	8006308 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e032      	b.n	800636e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0304 	and.w	r3, r3, #4
 8006310:	2b00      	cmp	r3, #0
 8006312:	d008      	beq.n	8006326 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006314:	4b19      	ldr	r3, [pc, #100]	; (800637c <HAL_RCC_ClockConfig+0x1bc>)
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	4916      	ldr	r1, [pc, #88]	; (800637c <HAL_RCC_ClockConfig+0x1bc>)
 8006322:	4313      	orrs	r3, r2
 8006324:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0308 	and.w	r3, r3, #8
 800632e:	2b00      	cmp	r3, #0
 8006330:	d009      	beq.n	8006346 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006332:	4b12      	ldr	r3, [pc, #72]	; (800637c <HAL_RCC_ClockConfig+0x1bc>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	00db      	lsls	r3, r3, #3
 8006340:	490e      	ldr	r1, [pc, #56]	; (800637c <HAL_RCC_ClockConfig+0x1bc>)
 8006342:	4313      	orrs	r3, r2
 8006344:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006346:	f000 f821 	bl	800638c <HAL_RCC_GetSysClockFreq>
 800634a:	4601      	mov	r1, r0
 800634c:	4b0b      	ldr	r3, [pc, #44]	; (800637c <HAL_RCC_ClockConfig+0x1bc>)
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	091b      	lsrs	r3, r3, #4
 8006352:	f003 030f 	and.w	r3, r3, #15
 8006356:	4a0a      	ldr	r2, [pc, #40]	; (8006380 <HAL_RCC_ClockConfig+0x1c0>)
 8006358:	5cd3      	ldrb	r3, [r2, r3]
 800635a:	fa21 f303 	lsr.w	r3, r1, r3
 800635e:	4a09      	ldr	r2, [pc, #36]	; (8006384 <HAL_RCC_ClockConfig+0x1c4>)
 8006360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006362:	4b09      	ldr	r3, [pc, #36]	; (8006388 <HAL_RCC_ClockConfig+0x1c8>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4618      	mov	r0, r3
 8006368:	f7fd fd16 	bl	8003d98 <HAL_InitTick>

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	40023c00 	.word	0x40023c00
 800637c:	40023800 	.word	0x40023800
 8006380:	0800dd00 	.word	0x0800dd00
 8006384:	20000004 	.word	0x20000004
 8006388:	20000008 	.word	0x20000008

0800638c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800638c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006392:	2300      	movs	r3, #0
 8006394:	607b      	str	r3, [r7, #4]
 8006396:	2300      	movs	r3, #0
 8006398:	60fb      	str	r3, [r7, #12]
 800639a:	2300      	movs	r3, #0
 800639c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800639e:	2300      	movs	r3, #0
 80063a0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063a2:	4b50      	ldr	r3, [pc, #320]	; (80064e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 030c 	and.w	r3, r3, #12
 80063aa:	2b04      	cmp	r3, #4
 80063ac:	d007      	beq.n	80063be <HAL_RCC_GetSysClockFreq+0x32>
 80063ae:	2b08      	cmp	r3, #8
 80063b0:	d008      	beq.n	80063c4 <HAL_RCC_GetSysClockFreq+0x38>
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f040 808d 	bne.w	80064d2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063b8:	4b4b      	ldr	r3, [pc, #300]	; (80064e8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80063ba:	60bb      	str	r3, [r7, #8]
       break;
 80063bc:	e08c      	b.n	80064d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063be:	4b4b      	ldr	r3, [pc, #300]	; (80064ec <HAL_RCC_GetSysClockFreq+0x160>)
 80063c0:	60bb      	str	r3, [r7, #8]
      break;
 80063c2:	e089      	b.n	80064d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063c4:	4b47      	ldr	r3, [pc, #284]	; (80064e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063ce:	4b45      	ldr	r3, [pc, #276]	; (80064e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d023      	beq.n	8006422 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063da:	4b42      	ldr	r3, [pc, #264]	; (80064e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	099b      	lsrs	r3, r3, #6
 80063e0:	f04f 0400 	mov.w	r4, #0
 80063e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80063e8:	f04f 0200 	mov.w	r2, #0
 80063ec:	ea03 0501 	and.w	r5, r3, r1
 80063f0:	ea04 0602 	and.w	r6, r4, r2
 80063f4:	4a3d      	ldr	r2, [pc, #244]	; (80064ec <HAL_RCC_GetSysClockFreq+0x160>)
 80063f6:	fb02 f106 	mul.w	r1, r2, r6
 80063fa:	2200      	movs	r2, #0
 80063fc:	fb02 f205 	mul.w	r2, r2, r5
 8006400:	440a      	add	r2, r1
 8006402:	493a      	ldr	r1, [pc, #232]	; (80064ec <HAL_RCC_GetSysClockFreq+0x160>)
 8006404:	fba5 0101 	umull	r0, r1, r5, r1
 8006408:	1853      	adds	r3, r2, r1
 800640a:	4619      	mov	r1, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f04f 0400 	mov.w	r4, #0
 8006412:	461a      	mov	r2, r3
 8006414:	4623      	mov	r3, r4
 8006416:	f7fa fbbf 	bl	8000b98 <__aeabi_uldivmod>
 800641a:	4603      	mov	r3, r0
 800641c:	460c      	mov	r4, r1
 800641e:	60fb      	str	r3, [r7, #12]
 8006420:	e049      	b.n	80064b6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006422:	4b30      	ldr	r3, [pc, #192]	; (80064e4 <HAL_RCC_GetSysClockFreq+0x158>)
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	099b      	lsrs	r3, r3, #6
 8006428:	f04f 0400 	mov.w	r4, #0
 800642c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006430:	f04f 0200 	mov.w	r2, #0
 8006434:	ea03 0501 	and.w	r5, r3, r1
 8006438:	ea04 0602 	and.w	r6, r4, r2
 800643c:	4629      	mov	r1, r5
 800643e:	4632      	mov	r2, r6
 8006440:	f04f 0300 	mov.w	r3, #0
 8006444:	f04f 0400 	mov.w	r4, #0
 8006448:	0154      	lsls	r4, r2, #5
 800644a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800644e:	014b      	lsls	r3, r1, #5
 8006450:	4619      	mov	r1, r3
 8006452:	4622      	mov	r2, r4
 8006454:	1b49      	subs	r1, r1, r5
 8006456:	eb62 0206 	sbc.w	r2, r2, r6
 800645a:	f04f 0300 	mov.w	r3, #0
 800645e:	f04f 0400 	mov.w	r4, #0
 8006462:	0194      	lsls	r4, r2, #6
 8006464:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006468:	018b      	lsls	r3, r1, #6
 800646a:	1a5b      	subs	r3, r3, r1
 800646c:	eb64 0402 	sbc.w	r4, r4, r2
 8006470:	f04f 0100 	mov.w	r1, #0
 8006474:	f04f 0200 	mov.w	r2, #0
 8006478:	00e2      	lsls	r2, r4, #3
 800647a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800647e:	00d9      	lsls	r1, r3, #3
 8006480:	460b      	mov	r3, r1
 8006482:	4614      	mov	r4, r2
 8006484:	195b      	adds	r3, r3, r5
 8006486:	eb44 0406 	adc.w	r4, r4, r6
 800648a:	f04f 0100 	mov.w	r1, #0
 800648e:	f04f 0200 	mov.w	r2, #0
 8006492:	02a2      	lsls	r2, r4, #10
 8006494:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006498:	0299      	lsls	r1, r3, #10
 800649a:	460b      	mov	r3, r1
 800649c:	4614      	mov	r4, r2
 800649e:	4618      	mov	r0, r3
 80064a0:	4621      	mov	r1, r4
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f04f 0400 	mov.w	r4, #0
 80064a8:	461a      	mov	r2, r3
 80064aa:	4623      	mov	r3, r4
 80064ac:	f7fa fb74 	bl	8000b98 <__aeabi_uldivmod>
 80064b0:	4603      	mov	r3, r0
 80064b2:	460c      	mov	r4, r1
 80064b4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80064b6:	4b0b      	ldr	r3, [pc, #44]	; (80064e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	0c1b      	lsrs	r3, r3, #16
 80064bc:	f003 0303 	and.w	r3, r3, #3
 80064c0:	3301      	adds	r3, #1
 80064c2:	005b      	lsls	r3, r3, #1
 80064c4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ce:	60bb      	str	r3, [r7, #8]
      break;
 80064d0:	e002      	b.n	80064d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064d2:	4b05      	ldr	r3, [pc, #20]	; (80064e8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80064d4:	60bb      	str	r3, [r7, #8]
      break;
 80064d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064d8:	68bb      	ldr	r3, [r7, #8]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064e2:	bf00      	nop
 80064e4:	40023800 	.word	0x40023800
 80064e8:	00f42400 	.word	0x00f42400
 80064ec:	017d7840 	.word	0x017d7840

080064f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064f0:	b480      	push	{r7}
 80064f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064f4:	4b03      	ldr	r3, [pc, #12]	; (8006504 <HAL_RCC_GetHCLKFreq+0x14>)
 80064f6:	681b      	ldr	r3, [r3, #0]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	20000004 	.word	0x20000004

08006508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800650c:	f7ff fff0 	bl	80064f0 <HAL_RCC_GetHCLKFreq>
 8006510:	4601      	mov	r1, r0
 8006512:	4b05      	ldr	r3, [pc, #20]	; (8006528 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	0b5b      	lsrs	r3, r3, #13
 8006518:	f003 0307 	and.w	r3, r3, #7
 800651c:	4a03      	ldr	r2, [pc, #12]	; (800652c <HAL_RCC_GetPCLK2Freq+0x24>)
 800651e:	5cd3      	ldrb	r3, [r2, r3]
 8006520:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006524:	4618      	mov	r0, r3
 8006526:	bd80      	pop	{r7, pc}
 8006528:	40023800 	.word	0x40023800
 800652c:	0800dd10 	.word	0x0800dd10

08006530 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	220f      	movs	r2, #15
 800653e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006540:	4b12      	ldr	r3, [pc, #72]	; (800658c <HAL_RCC_GetClockConfig+0x5c>)
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f003 0203 	and.w	r2, r3, #3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800654c:	4b0f      	ldr	r3, [pc, #60]	; (800658c <HAL_RCC_GetClockConfig+0x5c>)
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006558:	4b0c      	ldr	r3, [pc, #48]	; (800658c <HAL_RCC_GetClockConfig+0x5c>)
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006564:	4b09      	ldr	r3, [pc, #36]	; (800658c <HAL_RCC_GetClockConfig+0x5c>)
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	08db      	lsrs	r3, r3, #3
 800656a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006572:	4b07      	ldr	r3, [pc, #28]	; (8006590 <HAL_RCC_GetClockConfig+0x60>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 020f 	and.w	r2, r3, #15
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	601a      	str	r2, [r3, #0]
}
 800657e:	bf00      	nop
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	40023800 	.word	0x40023800
 8006590:	40023c00 	.word	0x40023c00

08006594 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e056      	b.n	8006654 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d106      	bne.n	80065c6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f7fd f9f7 	bl	80039b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2202      	movs	r2, #2
 80065ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065dc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	431a      	orrs	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	431a      	orrs	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	431a      	orrs	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	431a      	orrs	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006602:	431a      	orrs	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	69db      	ldr	r3, [r3, #28]
 8006608:	431a      	orrs	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	ea42 0103 	orr.w	r1, r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	0c1b      	lsrs	r3, r3, #16
 8006624:	f003 0104 	and.w	r1, r3, #4
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	430a      	orrs	r2, r1
 8006632:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	69da      	ldr	r2, [r3, #28]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006642:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b088      	sub	sp, #32
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	099b      	lsrs	r3, r3, #6
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10f      	bne.n	80066a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00a      	beq.n	80066a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	099b      	lsrs	r3, r3, #6
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b00      	cmp	r3, #0
 8006694:	d004      	beq.n	80066a0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	4798      	blx	r3
    return;
 800669e:	e0d8      	b.n	8006852 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	085b      	lsrs	r3, r3, #1
 80066a4:	f003 0301 	and.w	r3, r3, #1
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00a      	beq.n	80066c2 <HAL_SPI_IRQHandler+0x66>
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	09db      	lsrs	r3, r3, #7
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d004      	beq.n	80066c2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	4798      	blx	r3
    return;
 80066c0:	e0c7      	b.n	8006852 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	095b      	lsrs	r3, r3, #5
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10c      	bne.n	80066e8 <HAL_SPI_IRQHandler+0x8c>
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	099b      	lsrs	r3, r3, #6
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d106      	bne.n	80066e8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	0a1b      	lsrs	r3, r3, #8
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f000 80b5 	beq.w	8006852 <HAL_SPI_IRQHandler+0x1f6>
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	095b      	lsrs	r3, r3, #5
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f000 80ae 	beq.w	8006852 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	099b      	lsrs	r3, r3, #6
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d023      	beq.n	800674a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b03      	cmp	r3, #3
 800670c:	d011      	beq.n	8006732 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006712:	f043 0204 	orr.w	r2, r3, #4
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800671a:	2300      	movs	r3, #0
 800671c:	617b      	str	r3, [r7, #20]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	617b      	str	r3, [r7, #20]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	617b      	str	r3, [r7, #20]
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	e00b      	b.n	800674a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006732:	2300      	movs	r3, #0
 8006734:	613b      	str	r3, [r7, #16]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	613b      	str	r3, [r7, #16]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	613b      	str	r3, [r7, #16]
 8006746:	693b      	ldr	r3, [r7, #16]
        return;
 8006748:	e083      	b.n	8006852 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	095b      	lsrs	r3, r3, #5
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b00      	cmp	r3, #0
 8006754:	d014      	beq.n	8006780 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800675a:	f043 0201 	orr.w	r2, r3, #1
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006762:	2300      	movs	r3, #0
 8006764:	60fb      	str	r3, [r7, #12]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	60fb      	str	r3, [r7, #12]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800677c:	601a      	str	r2, [r3, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	0a1b      	lsrs	r3, r3, #8
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00c      	beq.n	80067a6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006790:	f043 0208 	orr.w	r2, r3, #8
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006798:	2300      	movs	r3, #0
 800679a:	60bb      	str	r3, [r7, #8]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	60bb      	str	r3, [r7, #8]
 80067a4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d050      	beq.n	8006850 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	685a      	ldr	r2, [r3, #4]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80067bc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d104      	bne.n	80067da <HAL_SPI_IRQHandler+0x17e>
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d034      	beq.n	8006844 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 0203 	bic.w	r2, r2, #3
 80067e8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d011      	beq.n	8006816 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067f6:	4a18      	ldr	r2, [pc, #96]	; (8006858 <HAL_SPI_IRQHandler+0x1fc>)
 80067f8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067fe:	4618      	mov	r0, r3
 8006800:	f7ff f880 	bl	8005904 <HAL_DMA_Abort_IT>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d005      	beq.n	8006816 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800680e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800681a:	2b00      	cmp	r3, #0
 800681c:	d016      	beq.n	800684c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006822:	4a0d      	ldr	r2, [pc, #52]	; (8006858 <HAL_SPI_IRQHandler+0x1fc>)
 8006824:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800682a:	4618      	mov	r0, r3
 800682c:	f7ff f86a 	bl	8005904 <HAL_DMA_Abort_IT>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00a      	beq.n	800684c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800683a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006842:	e003      	b.n	800684c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 f809 	bl	800685c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800684a:	e000      	b.n	800684e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800684c:	bf00      	nop
    return;
 800684e:	bf00      	nop
 8006850:	bf00      	nop
  }
}
 8006852:	3720      	adds	r7, #32
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	08006871 	.word	0x08006871

0800685c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f7ff ffe6 	bl	800685c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006890:	bf00      	nop
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e01d      	b.n	80068e6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d106      	bne.n	80068c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7fd f94e 	bl	8003b60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2202      	movs	r2, #2
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	3304      	adds	r3, #4
 80068d4:	4619      	mov	r1, r3
 80068d6:	4610      	mov	r0, r2
 80068d8:	f000 fc2e 	bl	8007138 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b085      	sub	sp, #20
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f042 0201 	orr.w	r2, r2, #1
 8006904:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	f003 0307 	and.w	r3, r3, #7
 8006910:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2b06      	cmp	r3, #6
 8006916:	d007      	beq.n	8006928 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f042 0201 	orr.w	r2, r2, #1
 8006926:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3714      	adds	r7, #20
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b082      	sub	sp, #8
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d101      	bne.n	8006948 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e01d      	b.n	8006984 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b00      	cmp	r3, #0
 8006952:	d106      	bne.n	8006962 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f7fd f96f 	bl	8003c40 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2202      	movs	r2, #2
 8006966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	3304      	adds	r3, #4
 8006972:	4619      	mov	r1, r3
 8006974:	4610      	mov	r0, r2
 8006976:	f000 fbdf 	bl	8007138 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3708      	adds	r7, #8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d101      	bne.n	800699e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e01d      	b.n	80069da <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d106      	bne.n	80069b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f815 	bl	80069e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2202      	movs	r2, #2
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	3304      	adds	r3, #4
 80069c8:	4619      	mov	r1, r3
 80069ca:	4610      	mov	r0, r2
 80069cc:	f000 fbb4 	bl	8007138 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80069e2:	b480      	push	{r7}
 80069e4:	b083      	sub	sp, #12
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80069ea:	bf00      	nop
 80069ec:	370c      	adds	r7, #12
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b086      	sub	sp, #24
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e083      	b.n	8006b12 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d106      	bne.n	8006a24 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7fd f818 	bl	8003a54 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2202      	movs	r2, #2
 8006a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	6812      	ldr	r2, [r2, #0]
 8006a36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a3a:	f023 0307 	bic.w	r3, r3, #7
 8006a3e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	3304      	adds	r3, #4
 8006a48:	4619      	mov	r1, r3
 8006a4a:	4610      	mov	r0, r2
 8006a4c:	f000 fb74 	bl	8007138 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a78:	f023 0303 	bic.w	r3, r3, #3
 8006a7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	689a      	ldr	r2, [r3, #8]
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	021b      	lsls	r3, r3, #8
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	693a      	ldr	r2, [r7, #16]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006a96:	f023 030c 	bic.w	r3, r3, #12
 8006a9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006aa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006aa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	68da      	ldr	r2, [r3, #12]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	69db      	ldr	r3, [r3, #28]
 8006ab0:	021b      	lsls	r3, r3, #8
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	011a      	lsls	r2, r3, #4
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	6a1b      	ldr	r3, [r3, #32]
 8006ac4:	031b      	lsls	r3, r3, #12
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	693a      	ldr	r2, [r7, #16]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006ad4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006adc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	011b      	lsls	r3, r3, #4
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3718      	adds	r7, #24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b082      	sub	sp, #8
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	f003 0302 	and.w	r3, r3, #2
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d122      	bne.n	8006b76 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	f003 0302 	and.w	r3, r3, #2
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d11b      	bne.n	8006b76 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f06f 0202 	mvn.w	r2, #2
 8006b46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	f003 0303 	and.w	r3, r3, #3
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d003      	beq.n	8006b64 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 facc 	bl	80070fa <HAL_TIM_IC_CaptureCallback>
 8006b62:	e005      	b.n	8006b70 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fabe 	bl	80070e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 facf 	bl	800710e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	f003 0304 	and.w	r3, r3, #4
 8006b80:	2b04      	cmp	r3, #4
 8006b82:	d122      	bne.n	8006bca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	f003 0304 	and.w	r3, r3, #4
 8006b8e:	2b04      	cmp	r3, #4
 8006b90:	d11b      	bne.n	8006bca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f06f 0204 	mvn.w	r2, #4
 8006b9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d003      	beq.n	8006bb8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 faa2 	bl	80070fa <HAL_TIM_IC_CaptureCallback>
 8006bb6:	e005      	b.n	8006bc4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 fa94 	bl	80070e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 faa5 	bl	800710e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	f003 0308 	and.w	r3, r3, #8
 8006bd4:	2b08      	cmp	r3, #8
 8006bd6:	d122      	bne.n	8006c1e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f003 0308 	and.w	r3, r3, #8
 8006be2:	2b08      	cmp	r3, #8
 8006be4:	d11b      	bne.n	8006c1e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f06f 0208 	mvn.w	r2, #8
 8006bee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2204      	movs	r2, #4
 8006bf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	69db      	ldr	r3, [r3, #28]
 8006bfc:	f003 0303 	and.w	r3, r3, #3
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d003      	beq.n	8006c0c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fa78 	bl	80070fa <HAL_TIM_IC_CaptureCallback>
 8006c0a:	e005      	b.n	8006c18 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 fa6a 	bl	80070e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 fa7b 	bl	800710e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	f003 0310 	and.w	r3, r3, #16
 8006c28:	2b10      	cmp	r3, #16
 8006c2a:	d122      	bne.n	8006c72 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	f003 0310 	and.w	r3, r3, #16
 8006c36:	2b10      	cmp	r3, #16
 8006c38:	d11b      	bne.n	8006c72 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f06f 0210 	mvn.w	r2, #16
 8006c42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2208      	movs	r2, #8
 8006c48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	69db      	ldr	r3, [r3, #28]
 8006c50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d003      	beq.n	8006c60 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 fa4e 	bl	80070fa <HAL_TIM_IC_CaptureCallback>
 8006c5e:	e005      	b.n	8006c6c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 fa40 	bl	80070e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 fa51 	bl	800710e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	f003 0301 	and.w	r3, r3, #1
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d10e      	bne.n	8006c9e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d107      	bne.n	8006c9e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f06f 0201 	mvn.w	r2, #1
 8006c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f7fb fba1 	bl	80023e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca8:	2b80      	cmp	r3, #128	; 0x80
 8006caa:	d10e      	bne.n	8006cca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb6:	2b80      	cmp	r3, #128	; 0x80
 8006cb8:	d107      	bne.n	8006cca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 fda7 	bl	8007818 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd4:	2b40      	cmp	r3, #64	; 0x40
 8006cd6:	d10e      	bne.n	8006cf6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce2:	2b40      	cmp	r3, #64	; 0x40
 8006ce4:	d107      	bne.n	8006cf6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fa16 	bl	8007122 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	f003 0320 	and.w	r3, r3, #32
 8006d00:	2b20      	cmp	r3, #32
 8006d02:	d10e      	bne.n	8006d22 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	f003 0320 	and.w	r3, r3, #32
 8006d0e:	2b20      	cmp	r3, #32
 8006d10:	d107      	bne.n	8006d22 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f06f 0220 	mvn.w	r2, #32
 8006d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 fd71 	bl	8007804 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d22:	bf00      	nop
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
	...

08006d2c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d101      	bne.n	8006d46 <HAL_TIM_OC_ConfigChannel+0x1a>
 8006d42:	2302      	movs	r3, #2
 8006d44:	e04e      	b.n	8006de4 <HAL_TIM_OC_ConfigChannel+0xb8>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2202      	movs	r2, #2
 8006d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b0c      	cmp	r3, #12
 8006d5a:	d839      	bhi.n	8006dd0 <HAL_TIM_OC_ConfigChannel+0xa4>
 8006d5c:	a201      	add	r2, pc, #4	; (adr r2, 8006d64 <HAL_TIM_OC_ConfigChannel+0x38>)
 8006d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d62:	bf00      	nop
 8006d64:	08006d99 	.word	0x08006d99
 8006d68:	08006dd1 	.word	0x08006dd1
 8006d6c:	08006dd1 	.word	0x08006dd1
 8006d70:	08006dd1 	.word	0x08006dd1
 8006d74:	08006da7 	.word	0x08006da7
 8006d78:	08006dd1 	.word	0x08006dd1
 8006d7c:	08006dd1 	.word	0x08006dd1
 8006d80:	08006dd1 	.word	0x08006dd1
 8006d84:	08006db5 	.word	0x08006db5
 8006d88:	08006dd1 	.word	0x08006dd1
 8006d8c:	08006dd1 	.word	0x08006dd1
 8006d90:	08006dd1 	.word	0x08006dd1
 8006d94:	08006dc3 	.word	0x08006dc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68b9      	ldr	r1, [r7, #8]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f000 fa6a 	bl	8007278 <TIM_OC1_SetConfig>
      break;
 8006da4:	e015      	b.n	8006dd2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68b9      	ldr	r1, [r7, #8]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f000 fad3 	bl	8007358 <TIM_OC2_SetConfig>
      break;
 8006db2:	e00e      	b.n	8006dd2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68b9      	ldr	r1, [r7, #8]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 fb42 	bl	8007444 <TIM_OC3_SetConfig>
      break;
 8006dc0:	e007      	b.n	8006dd2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68b9      	ldr	r1, [r7, #8]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f000 fbaf 	bl	800752c <TIM_OC4_SetConfig>
      break;
 8006dce:	e000      	b.n	8006dd2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8006dd0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d101      	bne.n	8006e06 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006e02:	2302      	movs	r3, #2
 8006e04:	e0b4      	b.n	8006f70 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2202      	movs	r2, #2
 8006e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b0c      	cmp	r3, #12
 8006e1a:	f200 809f 	bhi.w	8006f5c <HAL_TIM_PWM_ConfigChannel+0x170>
 8006e1e:	a201      	add	r2, pc, #4	; (adr r2, 8006e24 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e24:	08006e59 	.word	0x08006e59
 8006e28:	08006f5d 	.word	0x08006f5d
 8006e2c:	08006f5d 	.word	0x08006f5d
 8006e30:	08006f5d 	.word	0x08006f5d
 8006e34:	08006e99 	.word	0x08006e99
 8006e38:	08006f5d 	.word	0x08006f5d
 8006e3c:	08006f5d 	.word	0x08006f5d
 8006e40:	08006f5d 	.word	0x08006f5d
 8006e44:	08006edb 	.word	0x08006edb
 8006e48:	08006f5d 	.word	0x08006f5d
 8006e4c:	08006f5d 	.word	0x08006f5d
 8006e50:	08006f5d 	.word	0x08006f5d
 8006e54:	08006f1b 	.word	0x08006f1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68b9      	ldr	r1, [r7, #8]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 fa0a 	bl	8007278 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	699a      	ldr	r2, [r3, #24]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f042 0208 	orr.w	r2, r2, #8
 8006e72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	699a      	ldr	r2, [r3, #24]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f022 0204 	bic.w	r2, r2, #4
 8006e82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	6999      	ldr	r1, [r3, #24]
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	691a      	ldr	r2, [r3, #16]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	430a      	orrs	r2, r1
 8006e94:	619a      	str	r2, [r3, #24]
      break;
 8006e96:	e062      	b.n	8006f5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68b9      	ldr	r1, [r7, #8]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f000 fa5a 	bl	8007358 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	699a      	ldr	r2, [r3, #24]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006eb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	699a      	ldr	r2, [r3, #24]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ec2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6999      	ldr	r1, [r3, #24]
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	021a      	lsls	r2, r3, #8
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	430a      	orrs	r2, r1
 8006ed6:	619a      	str	r2, [r3, #24]
      break;
 8006ed8:	e041      	b.n	8006f5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68b9      	ldr	r1, [r7, #8]
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f000 faaf 	bl	8007444 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	69da      	ldr	r2, [r3, #28]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f042 0208 	orr.w	r2, r2, #8
 8006ef4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	69da      	ldr	r2, [r3, #28]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f022 0204 	bic.w	r2, r2, #4
 8006f04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	69d9      	ldr	r1, [r3, #28]
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	691a      	ldr	r2, [r3, #16]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	430a      	orrs	r2, r1
 8006f16:	61da      	str	r2, [r3, #28]
      break;
 8006f18:	e021      	b.n	8006f5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68b9      	ldr	r1, [r7, #8]
 8006f20:	4618      	mov	r0, r3
 8006f22:	f000 fb03 	bl	800752c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	69da      	ldr	r2, [r3, #28]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	69da      	ldr	r2, [r3, #28]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	69d9      	ldr	r1, [r3, #28]
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	021a      	lsls	r2, r3, #8
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	430a      	orrs	r2, r1
 8006f58:	61da      	str	r2, [r3, #28]
      break;
 8006f5a:	e000      	b.n	8006f5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006f5c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d101      	bne.n	8006f90 <HAL_TIM_ConfigClockSource+0x18>
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	e0a6      	b.n	80070de <HAL_TIM_ConfigClockSource+0x166>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006fae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fb6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2b40      	cmp	r3, #64	; 0x40
 8006fc6:	d067      	beq.n	8007098 <HAL_TIM_ConfigClockSource+0x120>
 8006fc8:	2b40      	cmp	r3, #64	; 0x40
 8006fca:	d80b      	bhi.n	8006fe4 <HAL_TIM_ConfigClockSource+0x6c>
 8006fcc:	2b10      	cmp	r3, #16
 8006fce:	d073      	beq.n	80070b8 <HAL_TIM_ConfigClockSource+0x140>
 8006fd0:	2b10      	cmp	r3, #16
 8006fd2:	d802      	bhi.n	8006fda <HAL_TIM_ConfigClockSource+0x62>
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d06f      	beq.n	80070b8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006fd8:	e078      	b.n	80070cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006fda:	2b20      	cmp	r3, #32
 8006fdc:	d06c      	beq.n	80070b8 <HAL_TIM_ConfigClockSource+0x140>
 8006fde:	2b30      	cmp	r3, #48	; 0x30
 8006fe0:	d06a      	beq.n	80070b8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006fe2:	e073      	b.n	80070cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006fe4:	2b70      	cmp	r3, #112	; 0x70
 8006fe6:	d00d      	beq.n	8007004 <HAL_TIM_ConfigClockSource+0x8c>
 8006fe8:	2b70      	cmp	r3, #112	; 0x70
 8006fea:	d804      	bhi.n	8006ff6 <HAL_TIM_ConfigClockSource+0x7e>
 8006fec:	2b50      	cmp	r3, #80	; 0x50
 8006fee:	d033      	beq.n	8007058 <HAL_TIM_ConfigClockSource+0xe0>
 8006ff0:	2b60      	cmp	r3, #96	; 0x60
 8006ff2:	d041      	beq.n	8007078 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006ff4:	e06a      	b.n	80070cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ffa:	d066      	beq.n	80070ca <HAL_TIM_ConfigClockSource+0x152>
 8006ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007000:	d017      	beq.n	8007032 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007002:	e063      	b.n	80070cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6818      	ldr	r0, [r3, #0]
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	6899      	ldr	r1, [r3, #8]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	685a      	ldr	r2, [r3, #4]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	f000 fb5a 	bl	80076cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007026:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	609a      	str	r2, [r3, #8]
      break;
 8007030:	e04c      	b.n	80070cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6818      	ldr	r0, [r3, #0]
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	6899      	ldr	r1, [r3, #8]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	685a      	ldr	r2, [r3, #4]
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	f000 fb43 	bl	80076cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	689a      	ldr	r2, [r3, #8]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007054:	609a      	str	r2, [r3, #8]
      break;
 8007056:	e039      	b.n	80070cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6818      	ldr	r0, [r3, #0]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	6859      	ldr	r1, [r3, #4]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	461a      	mov	r2, r3
 8007066:	f000 fab7 	bl	80075d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2150      	movs	r1, #80	; 0x50
 8007070:	4618      	mov	r0, r3
 8007072:	f000 fb10 	bl	8007696 <TIM_ITRx_SetConfig>
      break;
 8007076:	e029      	b.n	80070cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6818      	ldr	r0, [r3, #0]
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	6859      	ldr	r1, [r3, #4]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	461a      	mov	r2, r3
 8007086:	f000 fad6 	bl	8007636 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2160      	movs	r1, #96	; 0x60
 8007090:	4618      	mov	r0, r3
 8007092:	f000 fb00 	bl	8007696 <TIM_ITRx_SetConfig>
      break;
 8007096:	e019      	b.n	80070cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6818      	ldr	r0, [r3, #0]
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	6859      	ldr	r1, [r3, #4]
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	461a      	mov	r2, r3
 80070a6:	f000 fa97 	bl	80075d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2140      	movs	r1, #64	; 0x40
 80070b0:	4618      	mov	r0, r3
 80070b2:	f000 faf0 	bl	8007696 <TIM_ITRx_SetConfig>
      break;
 80070b6:	e009      	b.n	80070cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4619      	mov	r1, r3
 80070c2:	4610      	mov	r0, r2
 80070c4:	f000 fae7 	bl	8007696 <TIM_ITRx_SetConfig>
      break;
 80070c8:	e000      	b.n	80070cc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80070ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b083      	sub	sp, #12
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070ee:	bf00      	nop
 80070f0:	370c      	adds	r7, #12
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070fa:	b480      	push	{r7}
 80070fc:	b083      	sub	sp, #12
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007102:	bf00      	nop
 8007104:	370c      	adds	r7, #12
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800710e:	b480      	push	{r7}
 8007110:	b083      	sub	sp, #12
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007116:	bf00      	nop
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007122:	b480      	push	{r7}
 8007124:	b083      	sub	sp, #12
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800712a:	bf00      	nop
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
	...

08007138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a40      	ldr	r2, [pc, #256]	; (800724c <TIM_Base_SetConfig+0x114>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d013      	beq.n	8007178 <TIM_Base_SetConfig+0x40>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007156:	d00f      	beq.n	8007178 <TIM_Base_SetConfig+0x40>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a3d      	ldr	r2, [pc, #244]	; (8007250 <TIM_Base_SetConfig+0x118>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d00b      	beq.n	8007178 <TIM_Base_SetConfig+0x40>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a3c      	ldr	r2, [pc, #240]	; (8007254 <TIM_Base_SetConfig+0x11c>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d007      	beq.n	8007178 <TIM_Base_SetConfig+0x40>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a3b      	ldr	r2, [pc, #236]	; (8007258 <TIM_Base_SetConfig+0x120>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d003      	beq.n	8007178 <TIM_Base_SetConfig+0x40>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a3a      	ldr	r2, [pc, #232]	; (800725c <TIM_Base_SetConfig+0x124>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d108      	bne.n	800718a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800717e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	4313      	orrs	r3, r2
 8007188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a2f      	ldr	r2, [pc, #188]	; (800724c <TIM_Base_SetConfig+0x114>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d02b      	beq.n	80071ea <TIM_Base_SetConfig+0xb2>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007198:	d027      	beq.n	80071ea <TIM_Base_SetConfig+0xb2>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a2c      	ldr	r2, [pc, #176]	; (8007250 <TIM_Base_SetConfig+0x118>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d023      	beq.n	80071ea <TIM_Base_SetConfig+0xb2>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a2b      	ldr	r2, [pc, #172]	; (8007254 <TIM_Base_SetConfig+0x11c>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d01f      	beq.n	80071ea <TIM_Base_SetConfig+0xb2>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a2a      	ldr	r2, [pc, #168]	; (8007258 <TIM_Base_SetConfig+0x120>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d01b      	beq.n	80071ea <TIM_Base_SetConfig+0xb2>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a29      	ldr	r2, [pc, #164]	; (800725c <TIM_Base_SetConfig+0x124>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d017      	beq.n	80071ea <TIM_Base_SetConfig+0xb2>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a28      	ldr	r2, [pc, #160]	; (8007260 <TIM_Base_SetConfig+0x128>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d013      	beq.n	80071ea <TIM_Base_SetConfig+0xb2>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a27      	ldr	r2, [pc, #156]	; (8007264 <TIM_Base_SetConfig+0x12c>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d00f      	beq.n	80071ea <TIM_Base_SetConfig+0xb2>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a26      	ldr	r2, [pc, #152]	; (8007268 <TIM_Base_SetConfig+0x130>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d00b      	beq.n	80071ea <TIM_Base_SetConfig+0xb2>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a25      	ldr	r2, [pc, #148]	; (800726c <TIM_Base_SetConfig+0x134>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d007      	beq.n	80071ea <TIM_Base_SetConfig+0xb2>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a24      	ldr	r2, [pc, #144]	; (8007270 <TIM_Base_SetConfig+0x138>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d003      	beq.n	80071ea <TIM_Base_SetConfig+0xb2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a23      	ldr	r2, [pc, #140]	; (8007274 <TIM_Base_SetConfig+0x13c>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d108      	bne.n	80071fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	4313      	orrs	r3, r2
 8007208:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	689a      	ldr	r2, [r3, #8]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a0a      	ldr	r2, [pc, #40]	; (800724c <TIM_Base_SetConfig+0x114>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d003      	beq.n	8007230 <TIM_Base_SetConfig+0xf8>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a0c      	ldr	r2, [pc, #48]	; (800725c <TIM_Base_SetConfig+0x124>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d103      	bne.n	8007238 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	691a      	ldr	r2, [r3, #16]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	615a      	str	r2, [r3, #20]
}
 800723e:	bf00      	nop
 8007240:	3714      	adds	r7, #20
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	40010000 	.word	0x40010000
 8007250:	40000400 	.word	0x40000400
 8007254:	40000800 	.word	0x40000800
 8007258:	40000c00 	.word	0x40000c00
 800725c:	40010400 	.word	0x40010400
 8007260:	40014000 	.word	0x40014000
 8007264:	40014400 	.word	0x40014400
 8007268:	40014800 	.word	0x40014800
 800726c:	40001800 	.word	0x40001800
 8007270:	40001c00 	.word	0x40001c00
 8007274:	40002000 	.word	0x40002000

08007278 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007278:	b480      	push	{r7}
 800727a:	b087      	sub	sp, #28
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	f023 0201 	bic.w	r2, r3, #1
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f023 0303 	bic.w	r3, r3, #3
 80072ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	f023 0302 	bic.w	r3, r3, #2
 80072c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a20      	ldr	r2, [pc, #128]	; (8007350 <TIM_OC1_SetConfig+0xd8>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d003      	beq.n	80072dc <TIM_OC1_SetConfig+0x64>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a1f      	ldr	r2, [pc, #124]	; (8007354 <TIM_OC1_SetConfig+0xdc>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d10c      	bne.n	80072f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	f023 0308 	bic.w	r3, r3, #8
 80072e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f023 0304 	bic.w	r3, r3, #4
 80072f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a15      	ldr	r2, [pc, #84]	; (8007350 <TIM_OC1_SetConfig+0xd8>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d003      	beq.n	8007306 <TIM_OC1_SetConfig+0x8e>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a14      	ldr	r2, [pc, #80]	; (8007354 <TIM_OC1_SetConfig+0xdc>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d111      	bne.n	800732a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800730c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	693a      	ldr	r2, [r7, #16]
 800731c:	4313      	orrs	r3, r2
 800731e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	693a      	ldr	r2, [r7, #16]
 8007326:	4313      	orrs	r3, r2
 8007328:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	685a      	ldr	r2, [r3, #4]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	697a      	ldr	r2, [r7, #20]
 8007342:	621a      	str	r2, [r3, #32]
}
 8007344:	bf00      	nop
 8007346:	371c      	adds	r7, #28
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	40010000 	.word	0x40010000
 8007354:	40010400 	.word	0x40010400

08007358 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007358:	b480      	push	{r7}
 800735a:	b087      	sub	sp, #28
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	f023 0210 	bic.w	r2, r3, #16
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800738e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	021b      	lsls	r3, r3, #8
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	4313      	orrs	r3, r2
 800739a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	f023 0320 	bic.w	r3, r3, #32
 80073a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	011b      	lsls	r3, r3, #4
 80073aa:	697a      	ldr	r2, [r7, #20]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a22      	ldr	r2, [pc, #136]	; (800743c <TIM_OC2_SetConfig+0xe4>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d003      	beq.n	80073c0 <TIM_OC2_SetConfig+0x68>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a21      	ldr	r2, [pc, #132]	; (8007440 <TIM_OC2_SetConfig+0xe8>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d10d      	bne.n	80073dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	011b      	lsls	r3, r3, #4
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a17      	ldr	r2, [pc, #92]	; (800743c <TIM_OC2_SetConfig+0xe4>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d003      	beq.n	80073ec <TIM_OC2_SetConfig+0x94>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a16      	ldr	r2, [pc, #88]	; (8007440 <TIM_OC2_SetConfig+0xe8>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d113      	bne.n	8007414 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	695b      	ldr	r3, [r3, #20]
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	693a      	ldr	r2, [r7, #16]
 8007404:	4313      	orrs	r3, r2
 8007406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	693a      	ldr	r2, [r7, #16]
 8007410:	4313      	orrs	r3, r2
 8007412:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	693a      	ldr	r2, [r7, #16]
 8007418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	685a      	ldr	r2, [r3, #4]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	697a      	ldr	r2, [r7, #20]
 800742c:	621a      	str	r2, [r3, #32]
}
 800742e:	bf00      	nop
 8007430:	371c      	adds	r7, #28
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	40010000 	.word	0x40010000
 8007440:	40010400 	.word	0x40010400

08007444 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007444:	b480      	push	{r7}
 8007446:	b087      	sub	sp, #28
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	69db      	ldr	r3, [r3, #28]
 800746a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f023 0303 	bic.w	r3, r3, #3
 800747a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	4313      	orrs	r3, r2
 8007484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800748c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	021b      	lsls	r3, r3, #8
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	4313      	orrs	r3, r2
 8007498:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a21      	ldr	r2, [pc, #132]	; (8007524 <TIM_OC3_SetConfig+0xe0>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d003      	beq.n	80074aa <TIM_OC3_SetConfig+0x66>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a20      	ldr	r2, [pc, #128]	; (8007528 <TIM_OC3_SetConfig+0xe4>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d10d      	bne.n	80074c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	021b      	lsls	r3, r3, #8
 80074b8:	697a      	ldr	r2, [r7, #20]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a16      	ldr	r2, [pc, #88]	; (8007524 <TIM_OC3_SetConfig+0xe0>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d003      	beq.n	80074d6 <TIM_OC3_SetConfig+0x92>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a15      	ldr	r2, [pc, #84]	; (8007528 <TIM_OC3_SetConfig+0xe4>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d113      	bne.n	80074fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	695b      	ldr	r3, [r3, #20]
 80074ea:	011b      	lsls	r3, r3, #4
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	699b      	ldr	r3, [r3, #24]
 80074f6:	011b      	lsls	r3, r3, #4
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	621a      	str	r2, [r3, #32]
}
 8007518:	bf00      	nop
 800751a:	371c      	adds	r7, #28
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr
 8007524:	40010000 	.word	0x40010000
 8007528:	40010400 	.word	0x40010400

0800752c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800752c:	b480      	push	{r7}
 800752e:	b087      	sub	sp, #28
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a1b      	ldr	r3, [r3, #32]
 800753a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a1b      	ldr	r3, [r3, #32]
 8007546:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	69db      	ldr	r3, [r3, #28]
 8007552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800755a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007562:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	021b      	lsls	r3, r3, #8
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	4313      	orrs	r3, r2
 800756e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007576:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	031b      	lsls	r3, r3, #12
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	4313      	orrs	r3, r2
 8007582:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a12      	ldr	r2, [pc, #72]	; (80075d0 <TIM_OC4_SetConfig+0xa4>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d003      	beq.n	8007594 <TIM_OC4_SetConfig+0x68>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a11      	ldr	r2, [pc, #68]	; (80075d4 <TIM_OC4_SetConfig+0xa8>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d109      	bne.n	80075a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800759a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	695b      	ldr	r3, [r3, #20]
 80075a0:	019b      	lsls	r3, r3, #6
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	685a      	ldr	r2, [r3, #4]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	693a      	ldr	r2, [r7, #16]
 80075c0:	621a      	str	r2, [r3, #32]
}
 80075c2:	bf00      	nop
 80075c4:	371c      	adds	r7, #28
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	40010000 	.word	0x40010000
 80075d4:	40010400 	.word	0x40010400

080075d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075d8:	b480      	push	{r7}
 80075da:	b087      	sub	sp, #28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6a1b      	ldr	r3, [r3, #32]
 80075e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6a1b      	ldr	r3, [r3, #32]
 80075ee:	f023 0201 	bic.w	r2, r3, #1
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	699b      	ldr	r3, [r3, #24]
 80075fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007602:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	011b      	lsls	r3, r3, #4
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	4313      	orrs	r3, r2
 800760c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	f023 030a 	bic.w	r3, r3, #10
 8007614:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	4313      	orrs	r3, r2
 800761c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	697a      	ldr	r2, [r7, #20]
 8007628:	621a      	str	r2, [r3, #32]
}
 800762a:	bf00      	nop
 800762c:	371c      	adds	r7, #28
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr

08007636 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007636:	b480      	push	{r7}
 8007638:	b087      	sub	sp, #28
 800763a:	af00      	add	r7, sp, #0
 800763c:	60f8      	str	r0, [r7, #12]
 800763e:	60b9      	str	r1, [r7, #8]
 8007640:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	f023 0210 	bic.w	r2, r3, #16
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6a1b      	ldr	r3, [r3, #32]
 8007658:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007660:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	031b      	lsls	r3, r3, #12
 8007666:	697a      	ldr	r2, [r7, #20]
 8007668:	4313      	orrs	r3, r2
 800766a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007672:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	011b      	lsls	r3, r3, #4
 8007678:	693a      	ldr	r2, [r7, #16]
 800767a:	4313      	orrs	r3, r2
 800767c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	693a      	ldr	r2, [r7, #16]
 8007688:	621a      	str	r2, [r3, #32]
}
 800768a:	bf00      	nop
 800768c:	371c      	adds	r7, #28
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr

08007696 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007696:	b480      	push	{r7}
 8007698:	b085      	sub	sp, #20
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076ae:	683a      	ldr	r2, [r7, #0]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	f043 0307 	orr.w	r3, r3, #7
 80076b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	609a      	str	r2, [r3, #8]
}
 80076c0:	bf00      	nop
 80076c2:	3714      	adds	r7, #20
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b087      	sub	sp, #28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
 80076d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	021a      	lsls	r2, r3, #8
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	431a      	orrs	r2, r3
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	609a      	str	r2, [r3, #8]
}
 8007700:	bf00      	nop
 8007702:	371c      	adds	r7, #28
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800771c:	2b01      	cmp	r3, #1
 800771e:	d101      	bne.n	8007724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007720:	2302      	movs	r3, #2
 8007722:	e05a      	b.n	80077da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2202      	movs	r2, #2
 8007730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800774a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	4313      	orrs	r3, r2
 8007754:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a21      	ldr	r2, [pc, #132]	; (80077e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d022      	beq.n	80077ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007770:	d01d      	beq.n	80077ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a1d      	ldr	r2, [pc, #116]	; (80077ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d018      	beq.n	80077ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a1b      	ldr	r2, [pc, #108]	; (80077f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d013      	beq.n	80077ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a1a      	ldr	r2, [pc, #104]	; (80077f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d00e      	beq.n	80077ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a18      	ldr	r2, [pc, #96]	; (80077f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d009      	beq.n	80077ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a17      	ldr	r2, [pc, #92]	; (80077fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d004      	beq.n	80077ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a15      	ldr	r2, [pc, #84]	; (8007800 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d10c      	bne.n	80077c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	68ba      	ldr	r2, [r7, #8]
 80077bc:	4313      	orrs	r3, r2
 80077be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	40010000 	.word	0x40010000
 80077ec:	40000400 	.word	0x40000400
 80077f0:	40000800 	.word	0x40000800
 80077f4:	40000c00 	.word	0x40000c00
 80077f8:	40010400 	.word	0x40010400
 80077fc:	40014000 	.word	0x40014000
 8007800:	40001800 	.word	0x40001800

08007804 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800780c:	bf00      	nop
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	4603      	mov	r3, r0
 8007834:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007836:	2300      	movs	r3, #0
 8007838:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800783a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800783e:	2b84      	cmp	r3, #132	; 0x84
 8007840:	d005      	beq.n	800784e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007842:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	4413      	add	r3, r2
 800784a:	3303      	adds	r3, #3
 800784c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800784e:	68fb      	ldr	r3, [r7, #12]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3714      	adds	r7, #20
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007860:	f001 f8b2 	bl	80089c8 <vTaskStartScheduler>
  
  return osOK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	bd80      	pop	{r7, pc}

0800786a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800786a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800786c:	b089      	sub	sp, #36	; 0x24
 800786e:	af04      	add	r7, sp, #16
 8007870:	6078      	str	r0, [r7, #4]
 8007872:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	695b      	ldr	r3, [r3, #20]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d020      	beq.n	80078be <osThreadCreate+0x54>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	699b      	ldr	r3, [r3, #24]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d01c      	beq.n	80078be <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685c      	ldr	r4, [r3, #4]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681d      	ldr	r5, [r3, #0]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	691e      	ldr	r6, [r3, #16]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007896:	4618      	mov	r0, r3
 8007898:	f7ff ffc8 	bl	800782c <makeFreeRtosPriority>
 800789c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	695b      	ldr	r3, [r3, #20]
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078a6:	9202      	str	r2, [sp, #8]
 80078a8:	9301      	str	r3, [sp, #4]
 80078aa:	9100      	str	r1, [sp, #0]
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	4632      	mov	r2, r6
 80078b0:	4629      	mov	r1, r5
 80078b2:	4620      	mov	r0, r4
 80078b4:	f000 fec5 	bl	8008642 <xTaskCreateStatic>
 80078b8:	4603      	mov	r3, r0
 80078ba:	60fb      	str	r3, [r7, #12]
 80078bc:	e01c      	b.n	80078f8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	685c      	ldr	r4, [r3, #4]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078ca:	b29e      	uxth	r6, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7ff ffaa 	bl	800782c <makeFreeRtosPriority>
 80078d8:	4602      	mov	r2, r0
 80078da:	f107 030c 	add.w	r3, r7, #12
 80078de:	9301      	str	r3, [sp, #4]
 80078e0:	9200      	str	r2, [sp, #0]
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	4632      	mov	r2, r6
 80078e6:	4629      	mov	r1, r5
 80078e8:	4620      	mov	r0, r4
 80078ea:	f000 ff04 	bl	80086f6 <xTaskCreate>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d001      	beq.n	80078f8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80078f4:	2300      	movs	r3, #0
 80078f6:	e000      	b.n	80078fa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80078f8:	68fb      	ldr	r3, [r7, #12]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3714      	adds	r7, #20
 80078fe:	46bd      	mov	sp, r7
 8007900:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007902 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007902:	b480      	push	{r7}
 8007904:	b083      	sub	sp, #12
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f103 0208 	add.w	r2, r3, #8
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800791a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f103 0208 	add.w	r2, r3, #8
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f103 0208 	add.w	r2, r3, #8
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007936:	bf00      	nop
 8007938:	370c      	adds	r7, #12
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr

08007942 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007942:	b480      	push	{r7}
 8007944:	b083      	sub	sp, #12
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007950:	bf00      	nop
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	689a      	ldr	r2, [r3, #8]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	683a      	ldr	r2, [r7, #0]
 8007986:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	1c5a      	adds	r2, r3, #1
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	601a      	str	r2, [r3, #0]
}
 8007998:	bf00      	nop
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079ba:	d103      	bne.n	80079c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	60fb      	str	r3, [r7, #12]
 80079c2:	e00c      	b.n	80079de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	3308      	adds	r3, #8
 80079c8:	60fb      	str	r3, [r7, #12]
 80079ca:	e002      	b.n	80079d2 <vListInsert+0x2e>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	60fb      	str	r3, [r7, #12]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	68ba      	ldr	r2, [r7, #8]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d2f6      	bcs.n	80079cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	685a      	ldr	r2, [r3, #4]
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	683a      	ldr	r2, [r7, #0]
 80079ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	683a      	ldr	r2, [r7, #0]
 80079f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	1c5a      	adds	r2, r3, #1
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	601a      	str	r2, [r3, #0]
}
 8007a0a:	bf00      	nop
 8007a0c:	3714      	adds	r7, #20
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a16:	b480      	push	{r7}
 8007a18:	b085      	sub	sp, #20
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	6892      	ldr	r2, [r2, #8]
 8007a2c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	6852      	ldr	r2, [r2, #4]
 8007a36:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d103      	bne.n	8007a4a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	689a      	ldr	r2, [r3, #8]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	1e5a      	subs	r2, r3, #1
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3714      	adds	r7, #20
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
	...

08007a6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d109      	bne.n	8007a94 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a84:	f383 8811 	msr	BASEPRI, r3
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	60bb      	str	r3, [r7, #8]
 8007a92:	e7fe      	b.n	8007a92 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007a94:	f002 fa5a 	bl	8009f4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa0:	68f9      	ldr	r1, [r7, #12]
 8007aa2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007aa4:	fb01 f303 	mul.w	r3, r1, r3
 8007aa8:	441a      	add	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	68f9      	ldr	r1, [r7, #12]
 8007ac8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007aca:	fb01 f303 	mul.w	r3, r1, r3
 8007ace:	441a      	add	r2, r3
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	22ff      	movs	r2, #255	; 0xff
 8007ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	22ff      	movs	r2, #255	; 0xff
 8007ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d114      	bne.n	8007b14 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d01a      	beq.n	8007b28 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	3310      	adds	r3, #16
 8007af6:	4618      	mov	r0, r3
 8007af8:	f001 f9e4 	bl	8008ec4 <xTaskRemoveFromEventList>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d012      	beq.n	8007b28 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007b02:	4b0d      	ldr	r3, [pc, #52]	; (8007b38 <xQueueGenericReset+0xcc>)
 8007b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b08:	601a      	str	r2, [r3, #0]
 8007b0a:	f3bf 8f4f 	dsb	sy
 8007b0e:	f3bf 8f6f 	isb	sy
 8007b12:	e009      	b.n	8007b28 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	3310      	adds	r3, #16
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7ff fef2 	bl	8007902 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	3324      	adds	r3, #36	; 0x24
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7ff feed 	bl	8007902 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007b28:	f002 fa3e 	bl	8009fa8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007b2c:	2301      	movs	r3, #1
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	e000ed04 	.word	0xe000ed04

08007b3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b08e      	sub	sp, #56	; 0x38
 8007b40:	af02      	add	r7, sp, #8
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
 8007b48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d109      	bne.n	8007b64 <xQueueGenericCreateStatic+0x28>
 8007b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b54:	f383 8811 	msr	BASEPRI, r3
 8007b58:	f3bf 8f6f 	isb	sy
 8007b5c:	f3bf 8f4f 	dsb	sy
 8007b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b62:	e7fe      	b.n	8007b62 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d109      	bne.n	8007b7e <xQueueGenericCreateStatic+0x42>
 8007b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6e:	f383 8811 	msr	BASEPRI, r3
 8007b72:	f3bf 8f6f 	isb	sy
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8007b7c:	e7fe      	b.n	8007b7c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d002      	beq.n	8007b8a <xQueueGenericCreateStatic+0x4e>
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d001      	beq.n	8007b8e <xQueueGenericCreateStatic+0x52>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e000      	b.n	8007b90 <xQueueGenericCreateStatic+0x54>
 8007b8e:	2300      	movs	r3, #0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d109      	bne.n	8007ba8 <xQueueGenericCreateStatic+0x6c>
 8007b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b98:	f383 8811 	msr	BASEPRI, r3
 8007b9c:	f3bf 8f6f 	isb	sy
 8007ba0:	f3bf 8f4f 	dsb	sy
 8007ba4:	623b      	str	r3, [r7, #32]
 8007ba6:	e7fe      	b.n	8007ba6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d102      	bne.n	8007bb4 <xQueueGenericCreateStatic+0x78>
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d101      	bne.n	8007bb8 <xQueueGenericCreateStatic+0x7c>
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e000      	b.n	8007bba <xQueueGenericCreateStatic+0x7e>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d109      	bne.n	8007bd2 <xQueueGenericCreateStatic+0x96>
 8007bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc2:	f383 8811 	msr	BASEPRI, r3
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	61fb      	str	r3, [r7, #28]
 8007bd0:	e7fe      	b.n	8007bd0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007bd2:	234c      	movs	r3, #76	; 0x4c
 8007bd4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	2b4c      	cmp	r3, #76	; 0x4c
 8007bda:	d009      	beq.n	8007bf0 <xQueueGenericCreateStatic+0xb4>
 8007bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be0:	f383 8811 	msr	BASEPRI, r3
 8007be4:	f3bf 8f6f 	isb	sy
 8007be8:	f3bf 8f4f 	dsb	sy
 8007bec:	61bb      	str	r3, [r7, #24]
 8007bee:	e7fe      	b.n	8007bee <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007bf0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00d      	beq.n	8007c18 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c04:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	68b9      	ldr	r1, [r7, #8]
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f000 f844 	bl	8007ca0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3730      	adds	r7, #48	; 0x30
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b08a      	sub	sp, #40	; 0x28
 8007c26:	af02      	add	r7, sp, #8
 8007c28:	60f8      	str	r0, [r7, #12]
 8007c2a:	60b9      	str	r1, [r7, #8]
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d109      	bne.n	8007c4a <xQueueGenericCreate+0x28>
 8007c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3a:	f383 8811 	msr	BASEPRI, r3
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f3bf 8f4f 	dsb	sy
 8007c46:	613b      	str	r3, [r7, #16]
 8007c48:	e7fe      	b.n	8007c48 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d102      	bne.n	8007c56 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007c50:	2300      	movs	r3, #0
 8007c52:	61fb      	str	r3, [r7, #28]
 8007c54:	e004      	b.n	8007c60 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	fb02 f303 	mul.w	r3, r2, r3
 8007c5e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	334c      	adds	r3, #76	; 0x4c
 8007c64:	4618      	mov	r0, r3
 8007c66:	f002 fa8b 	bl	800a180 <pvPortMalloc>
 8007c6a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d011      	beq.n	8007c96 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	334c      	adds	r3, #76	; 0x4c
 8007c7a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c84:	79fa      	ldrb	r2, [r7, #7]
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	697a      	ldr	r2, [r7, #20]
 8007c8e:	68b9      	ldr	r1, [r7, #8]
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f000 f805 	bl	8007ca0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c96:	69bb      	ldr	r3, [r7, #24]
	}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3720      	adds	r7, #32
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	607a      	str	r2, [r7, #4]
 8007cac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d103      	bne.n	8007cbc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	69ba      	ldr	r2, [r7, #24]
 8007cb8:	601a      	str	r2, [r3, #0]
 8007cba:	e002      	b.n	8007cc2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007cce:	2101      	movs	r1, #1
 8007cd0:	69b8      	ldr	r0, [r7, #24]
 8007cd2:	f7ff fecb 	bl	8007a6c <xQueueGenericReset>
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007cdc:	bf00      	nop
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b08e      	sub	sp, #56	; 0x38
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	607a      	str	r2, [r7, #4]
 8007cf0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d109      	bne.n	8007d14 <xQueueGenericSend+0x30>
 8007d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	627b      	str	r3, [r7, #36]	; 0x24
 8007d12:	e7fe      	b.n	8007d12 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d103      	bne.n	8007d22 <xQueueGenericSend+0x3e>
 8007d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d101      	bne.n	8007d26 <xQueueGenericSend+0x42>
 8007d22:	2301      	movs	r3, #1
 8007d24:	e000      	b.n	8007d28 <xQueueGenericSend+0x44>
 8007d26:	2300      	movs	r3, #0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d109      	bne.n	8007d40 <xQueueGenericSend+0x5c>
 8007d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d30:	f383 8811 	msr	BASEPRI, r3
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	f3bf 8f4f 	dsb	sy
 8007d3c:	623b      	str	r3, [r7, #32]
 8007d3e:	e7fe      	b.n	8007d3e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d103      	bne.n	8007d4e <xQueueGenericSend+0x6a>
 8007d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d101      	bne.n	8007d52 <xQueueGenericSend+0x6e>
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e000      	b.n	8007d54 <xQueueGenericSend+0x70>
 8007d52:	2300      	movs	r3, #0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d109      	bne.n	8007d6c <xQueueGenericSend+0x88>
 8007d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5c:	f383 8811 	msr	BASEPRI, r3
 8007d60:	f3bf 8f6f 	isb	sy
 8007d64:	f3bf 8f4f 	dsb	sy
 8007d68:	61fb      	str	r3, [r7, #28]
 8007d6a:	e7fe      	b.n	8007d6a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d6c:	f001 fa60 	bl	8009230 <xTaskGetSchedulerState>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d102      	bne.n	8007d7c <xQueueGenericSend+0x98>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d101      	bne.n	8007d80 <xQueueGenericSend+0x9c>
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e000      	b.n	8007d82 <xQueueGenericSend+0x9e>
 8007d80:	2300      	movs	r3, #0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d109      	bne.n	8007d9a <xQueueGenericSend+0xb6>
 8007d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8a:	f383 8811 	msr	BASEPRI, r3
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f3bf 8f4f 	dsb	sy
 8007d96:	61bb      	str	r3, [r7, #24]
 8007d98:	e7fe      	b.n	8007d98 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d9a:	f002 f8d7 	bl	8009f4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d302      	bcc.n	8007db0 <xQueueGenericSend+0xcc>
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d146      	bne.n	8007e3e <xQueueGenericSend+0x15a>
			{
				traceQUEUE_SEND( pxQueue );

				#if ( configUSE_QUEUE_SETS == 1 )
				{
				UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db4:	62fb      	str	r3, [r7, #44]	; 0x2c

					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007db6:	683a      	ldr	r2, [r7, #0]
 8007db8:	68b9      	ldr	r1, [r7, #8]
 8007dba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dbc:	f000 fa2c 	bl	8008218 <prvCopyDataToQueue>
 8007dc0:	62b8      	str	r0, [r7, #40]	; 0x28

					if( pxQueue->pxQueueSetContainer != NULL )
 8007dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d015      	beq.n	8007df6 <xQueueGenericSend+0x112>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d102      	bne.n	8007dd6 <xQueueGenericSend+0xf2>
 8007dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d12f      	bne.n	8007e36 <xQueueGenericSend+0x152>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8007dd6:	6839      	ldr	r1, [r7, #0]
 8007dd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dda:	f000 fbda 	bl	8008592 <prvNotifyQueueSetContainer>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d028      	beq.n	8007e36 <xQueueGenericSend+0x152>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 8007de4:	4b4a      	ldr	r3, [pc, #296]	; (8007f10 <xQueueGenericSend+0x22c>)
 8007de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dea:	601a      	str	r2, [r3, #0]
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	f3bf 8f6f 	isb	sy
 8007df4:	e01f      	b.n	8007e36 <xQueueGenericSend+0x152>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d010      	beq.n	8007e20 <xQueueGenericSend+0x13c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e00:	3324      	adds	r3, #36	; 0x24
 8007e02:	4618      	mov	r0, r3
 8007e04:	f001 f85e 	bl	8008ec4 <xTaskRemoveFromEventList>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d013      	beq.n	8007e36 <xQueueGenericSend+0x152>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8007e0e:	4b40      	ldr	r3, [pc, #256]	; (8007f10 <xQueueGenericSend+0x22c>)
 8007e10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e14:	601a      	str	r2, [r3, #0]
 8007e16:	f3bf 8f4f 	dsb	sy
 8007e1a:	f3bf 8f6f 	isb	sy
 8007e1e:	e00a      	b.n	8007e36 <xQueueGenericSend+0x152>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8007e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d007      	beq.n	8007e36 <xQueueGenericSend+0x152>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 8007e26:	4b3a      	ldr	r3, [pc, #232]	; (8007f10 <xQueueGenericSend+0x22c>)
 8007e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e2c:	601a      	str	r2, [r3, #0]
 8007e2e:	f3bf 8f4f 	dsb	sy
 8007e32:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007e36:	f002 f8b7 	bl	8009fa8 <vPortExitCritical>
				return pdPASS;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e063      	b.n	8007f06 <xQueueGenericSend+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d103      	bne.n	8007e4c <xQueueGenericSend+0x168>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e44:	f002 f8b0 	bl	8009fa8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	e05c      	b.n	8007f06 <xQueueGenericSend+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d106      	bne.n	8007e60 <xQueueGenericSend+0x17c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e52:	f107 0310 	add.w	r3, r7, #16
 8007e56:	4618      	mov	r0, r3
 8007e58:	f001 f896 	bl	8008f88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e60:	f002 f8a2 	bl	8009fa8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e64:	f000 fe14 	bl	8008a90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e68:	f002 f870 	bl	8009f4c <vPortEnterCritical>
 8007e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e72:	b25b      	sxtb	r3, r3
 8007e74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e78:	d103      	bne.n	8007e82 <xQueueGenericSend+0x19e>
 8007e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e88:	b25b      	sxtb	r3, r3
 8007e8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e8e:	d103      	bne.n	8007e98 <xQueueGenericSend+0x1b4>
 8007e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e98:	f002 f886 	bl	8009fa8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e9c:	1d3a      	adds	r2, r7, #4
 8007e9e:	f107 0310 	add.w	r3, r7, #16
 8007ea2:	4611      	mov	r1, r2
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f001 f885 	bl	8008fb4 <xTaskCheckForTimeOut>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d124      	bne.n	8007efa <xQueueGenericSend+0x216>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007eb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007eb2:	f000 fab7 	bl	8008424 <prvIsQueueFull>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d018      	beq.n	8007eee <xQueueGenericSend+0x20a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebe:	3310      	adds	r3, #16
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	4611      	mov	r1, r2
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f000 ffaf 	bl	8008e28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007eca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ecc:	f000 fa34 	bl	8008338 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007ed0:	f000 fdec 	bl	8008aac <xTaskResumeAll>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f47f af5f 	bne.w	8007d9a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007edc:	4b0c      	ldr	r3, [pc, #48]	; (8007f10 <xQueueGenericSend+0x22c>)
 8007ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ee2:	601a      	str	r2, [r3, #0]
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	e755      	b.n	8007d9a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007eee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ef0:	f000 fa22 	bl	8008338 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ef4:	f000 fdda 	bl	8008aac <xTaskResumeAll>
 8007ef8:	e74f      	b.n	8007d9a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007efa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007efc:	f000 fa1c 	bl	8008338 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f00:	f000 fdd4 	bl	8008aac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007f04:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3738      	adds	r7, #56	; 0x38
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	e000ed04 	.word	0xe000ed04

08007f14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b08e      	sub	sp, #56	; 0x38
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	607a      	str	r2, [r7, #4]
 8007f20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d109      	bne.n	8007f40 <xQueueGenericSendFromISR+0x2c>
 8007f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f30:	f383 8811 	msr	BASEPRI, r3
 8007f34:	f3bf 8f6f 	isb	sy
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f3e:	e7fe      	b.n	8007f3e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d103      	bne.n	8007f4e <xQueueGenericSendFromISR+0x3a>
 8007f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d101      	bne.n	8007f52 <xQueueGenericSendFromISR+0x3e>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e000      	b.n	8007f54 <xQueueGenericSendFromISR+0x40>
 8007f52:	2300      	movs	r3, #0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d109      	bne.n	8007f6c <xQueueGenericSendFromISR+0x58>
 8007f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5c:	f383 8811 	msr	BASEPRI, r3
 8007f60:	f3bf 8f6f 	isb	sy
 8007f64:	f3bf 8f4f 	dsb	sy
 8007f68:	623b      	str	r3, [r7, #32]
 8007f6a:	e7fe      	b.n	8007f6a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d103      	bne.n	8007f7a <xQueueGenericSendFromISR+0x66>
 8007f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d101      	bne.n	8007f7e <xQueueGenericSendFromISR+0x6a>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e000      	b.n	8007f80 <xQueueGenericSendFromISR+0x6c>
 8007f7e:	2300      	movs	r3, #0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d109      	bne.n	8007f98 <xQueueGenericSendFromISR+0x84>
 8007f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f88:	f383 8811 	msr	BASEPRI, r3
 8007f8c:	f3bf 8f6f 	isb	sy
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	61fb      	str	r3, [r7, #28]
 8007f96:	e7fe      	b.n	8007f96 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f98:	f002 f8b4 	bl	800a104 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f9c:	f3ef 8211 	mrs	r2, BASEPRI
 8007fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa4:	f383 8811 	msr	BASEPRI, r3
 8007fa8:	f3bf 8f6f 	isb	sy
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	61ba      	str	r2, [r7, #24]
 8007fb2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007fb4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d302      	bcc.n	8007fca <xQueueGenericSendFromISR+0xb6>
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d13e      	bne.n	8008048 <xQueueGenericSendFromISR+0x134>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fd4:	683a      	ldr	r2, [r7, #0]
 8007fd6:	68b9      	ldr	r1, [r7, #8]
 8007fd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fda:	f000 f91d 	bl	8008218 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007fde:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007fe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fe6:	d124      	bne.n	8008032 <xQueueGenericSendFromISR+0x11e>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8007fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00d      	beq.n	800800c <xQueueGenericSendFromISR+0xf8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8007ff0:	6839      	ldr	r1, [r7, #0]
 8007ff2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ff4:	f000 facd 	bl	8008592 <prvNotifyQueueSetContainer>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d021      	beq.n	8008042 <xQueueGenericSendFromISR+0x12e>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d01e      	beq.n	8008042 <xQueueGenericSendFromISR+0x12e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	601a      	str	r2, [r3, #0]
 800800a:	e01a      	b.n	8008042 <xQueueGenericSendFromISR+0x12e>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800800c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008010:	2b00      	cmp	r3, #0
 8008012:	d016      	beq.n	8008042 <xQueueGenericSendFromISR+0x12e>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008016:	3324      	adds	r3, #36	; 0x24
 8008018:	4618      	mov	r0, r3
 800801a:	f000 ff53 	bl	8008ec4 <xTaskRemoveFromEventList>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00e      	beq.n	8008042 <xQueueGenericSendFromISR+0x12e>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00b      	beq.n	8008042 <xQueueGenericSendFromISR+0x12e>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	601a      	str	r2, [r3, #0]
 8008030:	e007      	b.n	8008042 <xQueueGenericSendFromISR+0x12e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008032:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008036:	3301      	adds	r3, #1
 8008038:	b2db      	uxtb	r3, r3
 800803a:	b25a      	sxtb	r2, r3
 800803c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008042:	2301      	movs	r3, #1
 8008044:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008046:	e001      	b.n	800804c <xQueueGenericSendFromISR+0x138>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008048:	2300      	movs	r3, #0
 800804a:	637b      	str	r3, [r7, #52]	; 0x34
 800804c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008058:	4618      	mov	r0, r3
 800805a:	3738      	adds	r7, #56	; 0x38
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b08c      	sub	sp, #48	; 0x30
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800806c:	2300      	movs	r3, #0
 800806e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008076:	2b00      	cmp	r3, #0
 8008078:	d109      	bne.n	800808e <xQueueReceive+0x2e>
	__asm volatile
 800807a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807e:	f383 8811 	msr	BASEPRI, r3
 8008082:	f3bf 8f6f 	isb	sy
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	623b      	str	r3, [r7, #32]
 800808c:	e7fe      	b.n	800808c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d103      	bne.n	800809c <xQueueReceive+0x3c>
 8008094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008098:	2b00      	cmp	r3, #0
 800809a:	d101      	bne.n	80080a0 <xQueueReceive+0x40>
 800809c:	2301      	movs	r3, #1
 800809e:	e000      	b.n	80080a2 <xQueueReceive+0x42>
 80080a0:	2300      	movs	r3, #0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d109      	bne.n	80080ba <xQueueReceive+0x5a>
 80080a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080aa:	f383 8811 	msr	BASEPRI, r3
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	f3bf 8f4f 	dsb	sy
 80080b6:	61fb      	str	r3, [r7, #28]
 80080b8:	e7fe      	b.n	80080b8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080ba:	f001 f8b9 	bl	8009230 <xTaskGetSchedulerState>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d102      	bne.n	80080ca <xQueueReceive+0x6a>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d101      	bne.n	80080ce <xQueueReceive+0x6e>
 80080ca:	2301      	movs	r3, #1
 80080cc:	e000      	b.n	80080d0 <xQueueReceive+0x70>
 80080ce:	2300      	movs	r3, #0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d109      	bne.n	80080e8 <xQueueReceive+0x88>
 80080d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d8:	f383 8811 	msr	BASEPRI, r3
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	f3bf 8f4f 	dsb	sy
 80080e4:	61bb      	str	r3, [r7, #24]
 80080e6:	e7fe      	b.n	80080e6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080e8:	f001 ff30 	bl	8009f4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d01f      	beq.n	8008138 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80080f8:	68b9      	ldr	r1, [r7, #8]
 80080fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080fc:	f000 f8f6 	bl	80082ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008102:	1e5a      	subs	r2, r3, #1
 8008104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008106:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00f      	beq.n	8008130 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008112:	3310      	adds	r3, #16
 8008114:	4618      	mov	r0, r3
 8008116:	f000 fed5 	bl	8008ec4 <xTaskRemoveFromEventList>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d007      	beq.n	8008130 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008120:	4b3c      	ldr	r3, [pc, #240]	; (8008214 <xQueueReceive+0x1b4>)
 8008122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008126:	601a      	str	r2, [r3, #0]
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008130:	f001 ff3a 	bl	8009fa8 <vPortExitCritical>
				return pdPASS;
 8008134:	2301      	movs	r3, #1
 8008136:	e069      	b.n	800820c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d103      	bne.n	8008146 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800813e:	f001 ff33 	bl	8009fa8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008142:	2300      	movs	r3, #0
 8008144:	e062      	b.n	800820c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008148:	2b00      	cmp	r3, #0
 800814a:	d106      	bne.n	800815a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800814c:	f107 0310 	add.w	r3, r7, #16
 8008150:	4618      	mov	r0, r3
 8008152:	f000 ff19 	bl	8008f88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008156:	2301      	movs	r3, #1
 8008158:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800815a:	f001 ff25 	bl	8009fa8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800815e:	f000 fc97 	bl	8008a90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008162:	f001 fef3 	bl	8009f4c <vPortEnterCritical>
 8008166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008168:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800816c:	b25b      	sxtb	r3, r3
 800816e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008172:	d103      	bne.n	800817c <xQueueReceive+0x11c>
 8008174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008176:	2200      	movs	r2, #0
 8008178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800817c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008182:	b25b      	sxtb	r3, r3
 8008184:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008188:	d103      	bne.n	8008192 <xQueueReceive+0x132>
 800818a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818c:	2200      	movs	r2, #0
 800818e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008192:	f001 ff09 	bl	8009fa8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008196:	1d3a      	adds	r2, r7, #4
 8008198:	f107 0310 	add.w	r3, r7, #16
 800819c:	4611      	mov	r1, r2
 800819e:	4618      	mov	r0, r3
 80081a0:	f000 ff08 	bl	8008fb4 <xTaskCheckForTimeOut>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d123      	bne.n	80081f2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081ac:	f000 f924 	bl	80083f8 <prvIsQueueEmpty>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d017      	beq.n	80081e6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80081b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b8:	3324      	adds	r3, #36	; 0x24
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	4611      	mov	r1, r2
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 fe32 	bl	8008e28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80081c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081c6:	f000 f8b7 	bl	8008338 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80081ca:	f000 fc6f 	bl	8008aac <xTaskResumeAll>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d189      	bne.n	80080e8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80081d4:	4b0f      	ldr	r3, [pc, #60]	; (8008214 <xQueueReceive+0x1b4>)
 80081d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081da:	601a      	str	r2, [r3, #0]
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	f3bf 8f6f 	isb	sy
 80081e4:	e780      	b.n	80080e8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80081e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081e8:	f000 f8a6 	bl	8008338 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081ec:	f000 fc5e 	bl	8008aac <xTaskResumeAll>
 80081f0:	e77a      	b.n	80080e8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80081f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081f4:	f000 f8a0 	bl	8008338 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081f8:	f000 fc58 	bl	8008aac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081fe:	f000 f8fb 	bl	80083f8 <prvIsQueueEmpty>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	f43f af6f 	beq.w	80080e8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800820a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800820c:	4618      	mov	r0, r3
 800820e:	3730      	adds	r7, #48	; 0x30
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	e000ed04 	.word	0xe000ed04

08008218 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b086      	sub	sp, #24
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008224:	2300      	movs	r3, #0
 8008226:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008232:	2b00      	cmp	r3, #0
 8008234:	d10d      	bne.n	8008252 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d14d      	bne.n	80082da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	4618      	mov	r0, r3
 8008244:	f001 f812 	bl	800926c <xTaskPriorityDisinherit>
 8008248:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2200      	movs	r2, #0
 800824e:	609a      	str	r2, [r3, #8]
 8008250:	e043      	b.n	80082da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d119      	bne.n	800828c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6858      	ldr	r0, [r3, #4]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008260:	461a      	mov	r2, r3
 8008262:	68b9      	ldr	r1, [r7, #8]
 8008264:	f004 fe62 	bl	800cf2c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	685a      	ldr	r2, [r3, #4]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008270:	441a      	add	r2, r3
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	685a      	ldr	r2, [r3, #4]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	429a      	cmp	r2, r3
 8008280:	d32b      	bcc.n	80082da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	605a      	str	r2, [r3, #4]
 800828a:	e026      	b.n	80082da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	68d8      	ldr	r0, [r3, #12]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008294:	461a      	mov	r2, r3
 8008296:	68b9      	ldr	r1, [r7, #8]
 8008298:	f004 fe48 	bl	800cf2c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	68da      	ldr	r2, [r3, #12]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a4:	425b      	negs	r3, r3
 80082a6:	441a      	add	r2, r3
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	68da      	ldr	r2, [r3, #12]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d207      	bcs.n	80082c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	689a      	ldr	r2, [r3, #8]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c0:	425b      	negs	r3, r3
 80082c2:	441a      	add	r2, r3
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d105      	bne.n	80082da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d002      	beq.n	80082da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	3b01      	subs	r3, #1
 80082d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	1c5a      	adds	r2, r3, #1
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80082e2:	697b      	ldr	r3, [r7, #20]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3718      	adds	r7, #24
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d018      	beq.n	8008330 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	68da      	ldr	r2, [r3, #12]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008306:	441a      	add	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	68da      	ldr	r2, [r3, #12]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	429a      	cmp	r2, r3
 8008316:	d303      	bcc.n	8008320 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	68d9      	ldr	r1, [r3, #12]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008328:	461a      	mov	r2, r3
 800832a:	6838      	ldr	r0, [r7, #0]
 800832c:	f004 fdfe 	bl	800cf2c <memcpy>
	}
}
 8008330:	bf00      	nop
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008340:	f001 fe04 	bl	8009f4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800834a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800834c:	e01f      	b.n	800838e <prvUnlockQueue+0x56>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008352:	2b00      	cmp	r3, #0
 8008354:	d009      	beq.n	800836a <prvUnlockQueue+0x32>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
 8008356:	2100      	movs	r1, #0
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 f91a 	bl	8008592 <prvNotifyQueueSetContainer>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d010      	beq.n	8008386 <prvUnlockQueue+0x4e>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 8008364:	f000 fe86 	bl	8009074 <vTaskMissedYield>
 8008368:	e00d      	b.n	8008386 <prvUnlockQueue+0x4e>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836e:	2b00      	cmp	r3, #0
 8008370:	d012      	beq.n	8008398 <prvUnlockQueue+0x60>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	3324      	adds	r3, #36	; 0x24
 8008376:	4618      	mov	r0, r3
 8008378:	f000 fda4 	bl	8008ec4 <xTaskRemoveFromEventList>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d001      	beq.n	8008386 <prvUnlockQueue+0x4e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 8008382:	f000 fe77 	bl	8009074 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008386:	7bfb      	ldrb	r3, [r7, #15]
 8008388:	3b01      	subs	r3, #1
 800838a:	b2db      	uxtb	r3, r3
 800838c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800838e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008392:	2b00      	cmp	r3, #0
 8008394:	dcdb      	bgt.n	800834e <prvUnlockQueue+0x16>
 8008396:	e000      	b.n	800839a <prvUnlockQueue+0x62>
						break;
 8008398:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	22ff      	movs	r2, #255	; 0xff
 800839e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80083a2:	f001 fe01 	bl	8009fa8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80083a6:	f001 fdd1 	bl	8009f4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80083b2:	e011      	b.n	80083d8 <prvUnlockQueue+0xa0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d012      	beq.n	80083e2 <prvUnlockQueue+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	3310      	adds	r3, #16
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 fd7f 	bl	8008ec4 <xTaskRemoveFromEventList>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d001      	beq.n	80083d0 <prvUnlockQueue+0x98>
				{
					vTaskMissedYield();
 80083cc:	f000 fe52 	bl	8009074 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80083d0:	7bbb      	ldrb	r3, [r7, #14]
 80083d2:	3b01      	subs	r3, #1
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80083d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	dce9      	bgt.n	80083b4 <prvUnlockQueue+0x7c>
 80083e0:	e000      	b.n	80083e4 <prvUnlockQueue+0xac>
			}
			else
			{
				break;
 80083e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	22ff      	movs	r2, #255	; 0xff
 80083e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80083ec:	f001 fddc 	bl	8009fa8 <vPortExitCritical>
}
 80083f0:	bf00      	nop
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008400:	f001 fda4 	bl	8009f4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008408:	2b00      	cmp	r3, #0
 800840a:	d102      	bne.n	8008412 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800840c:	2301      	movs	r3, #1
 800840e:	60fb      	str	r3, [r7, #12]
 8008410:	e001      	b.n	8008416 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008412:	2300      	movs	r3, #0
 8008414:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008416:	f001 fdc7 	bl	8009fa8 <vPortExitCritical>

	return xReturn;
 800841a:	68fb      	ldr	r3, [r7, #12]
}
 800841c:	4618      	mov	r0, r3
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800842c:	f001 fd8e 	bl	8009f4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008438:	429a      	cmp	r2, r3
 800843a:	d102      	bne.n	8008442 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800843c:	2301      	movs	r3, #1
 800843e:	60fb      	str	r3, [r7, #12]
 8008440:	e001      	b.n	8008446 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008442:	2300      	movs	r3, #0
 8008444:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008446:	f001 fdaf 	bl	8009fa8 <vPortExitCritical>

	return xReturn;
 800844a:	68fb      	ldr	r3, [r7, #12]
}
 800844c:	4618      	mov	r0, r3
 800844e:	3710      	adds	r7, #16
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800845e:	2300      	movs	r3, #0
 8008460:	60fb      	str	r3, [r7, #12]
 8008462:	e014      	b.n	800848e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008464:	4a0e      	ldr	r2, [pc, #56]	; (80084a0 <vQueueAddToRegistry+0x4c>)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d10b      	bne.n	8008488 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008470:	490b      	ldr	r1, [pc, #44]	; (80084a0 <vQueueAddToRegistry+0x4c>)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	683a      	ldr	r2, [r7, #0]
 8008476:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800847a:	4a09      	ldr	r2, [pc, #36]	; (80084a0 <vQueueAddToRegistry+0x4c>)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	00db      	lsls	r3, r3, #3
 8008480:	4413      	add	r3, r2
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008486:	e005      	b.n	8008494 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	3301      	adds	r3, #1
 800848c:	60fb      	str	r3, [r7, #12]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2b07      	cmp	r3, #7
 8008492:	d9e7      	bls.n	8008464 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008494:	bf00      	nop
 8008496:	3714      	adds	r7, #20
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr
 80084a0:	200159b8 	.word	0x200159b8

080084a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80084b4:	f001 fd4a 	bl	8009f4c <vPortEnterCritical>
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084be:	b25b      	sxtb	r3, r3
 80084c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084c4:	d103      	bne.n	80084ce <vQueueWaitForMessageRestricted+0x2a>
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084d4:	b25b      	sxtb	r3, r3
 80084d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084da:	d103      	bne.n	80084e4 <vQueueWaitForMessageRestricted+0x40>
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	2200      	movs	r2, #0
 80084e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084e4:	f001 fd60 	bl	8009fa8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d106      	bne.n	80084fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	3324      	adds	r3, #36	; 0x24
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	68b9      	ldr	r1, [r7, #8]
 80084f8:	4618      	mov	r0, r3
 80084fa:	f000 fcb9 	bl	8008e70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80084fe:	6978      	ldr	r0, [r7, #20]
 8008500:	f7ff ff1a 	bl	8008338 <prvUnlockQueue>
	}
 8008504:	bf00      	nop
 8008506:	3718      	adds	r7, #24
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <xQueueCreateSet>:
/*-----------------------------------------------------------*/

#if( ( configUSE_QUEUE_SETS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )
	{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
	QueueSetHandle_t pxQueue;

		pxQueue = xQueueGenericCreate( uxEventQueueLength, ( UBaseType_t ) sizeof( Queue_t * ), queueQUEUE_TYPE_SET );
 8008514:	2200      	movs	r2, #0
 8008516:	2104      	movs	r1, #4
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f7ff fb82 	bl	8007c22 <xQueueGenericCreate>
 800851e:	60f8      	str	r0, [r7, #12]

		return pxQueue;
 8008520:	68fb      	ldr	r3, [r7, #12]
	}
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <xQueueAddToSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet )
	{
 800852a:	b580      	push	{r7, lr}
 800852c:	b084      	sub	sp, #16
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
 8008532:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8008534:	f001 fd0a 	bl	8009f4c <vPortEnterCritical>
		{
			if( ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer != NULL )
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800853c:	2b00      	cmp	r3, #0
 800853e:	d002      	beq.n	8008546 <xQueueAddToSet+0x1c>
			{
				/* Cannot add a queue/semaphore to more than one queue set. */
				xReturn = pdFAIL;
 8008540:	2300      	movs	r3, #0
 8008542:	60fb      	str	r3, [r7, #12]
 8008544:	e00b      	b.n	800855e <xQueueAddToSet+0x34>
			}
			else if( ( ( Queue_t * ) xQueueOrSemaphore )->uxMessagesWaiting != ( UBaseType_t ) 0 )
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854a:	2b00      	cmp	r3, #0
 800854c:	d002      	beq.n	8008554 <xQueueAddToSet+0x2a>
			{
				/* Cannot add a queue/semaphore to a queue set if there are already
				items in the queue/semaphore. */
				xReturn = pdFAIL;
 800854e:	2300      	movs	r3, #0
 8008550:	60fb      	str	r3, [r7, #12]
 8008552:	e004      	b.n	800855e <xQueueAddToSet+0x34>
			}
			else
			{
				( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer = xQueueSet;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	649a      	str	r2, [r3, #72]	; 0x48
				xReturn = pdPASS;
 800855a:	2301      	movs	r3, #1
 800855c:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800855e:	f001 fd23 	bl	8009fa8 <vPortExitCritical>

		return xReturn;
 8008562:	68fb      	ldr	r3, [r7, #12]
	}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <xQueueSelectFromSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet, TickType_t const xTicksToWait )
	{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
	QueueSetMemberHandle_t xReturn = NULL;
 8008576:	2300      	movs	r3, #0
 8008578:	60fb      	str	r3, [r7, #12]

		( void ) xQueueReceive( ( QueueHandle_t ) xQueueSet, &xReturn, xTicksToWait ); /*lint !e961 Casting from one typedef to another is not redundant. */
 800857a:	f107 030c 	add.w	r3, r7, #12
 800857e:	683a      	ldr	r2, [r7, #0]
 8008580:	4619      	mov	r1, r3
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f7ff fd6c 	bl	8008060 <xQueueReceive>
		return xReturn;
 8008588:	68fb      	ldr	r3, [r7, #12]
	}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
 8008592:	b580      	push	{r7, lr}
 8008594:	b088      	sub	sp, #32
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
 800859a:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085a0:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 80085a2:	2300      	movs	r3, #0
 80085a4:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d109      	bne.n	80085c0 <prvNotifyQueueSetContainer+0x2e>
 80085ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b0:	f383 8811 	msr	BASEPRI, r3
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	613b      	str	r3, [r7, #16]
 80085be:	e7fe      	b.n	80085be <prvNotifyQueueSetContainer+0x2c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d309      	bcc.n	80085e0 <prvNotifyQueueSetContainer+0x4e>
 80085cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d0:	f383 8811 	msr	BASEPRI, r3
 80085d4:	f3bf 8f6f 	isb	sy
 80085d8:	f3bf 8f4f 	dsb	sy
 80085dc:	60fb      	str	r3, [r7, #12]
 80085de:	e7fe      	b.n	80085de <prvNotifyQueueSetContainer+0x4c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 80085e0:	69bb      	ldr	r3, [r7, #24]
 80085e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085e4:	69bb      	ldr	r3, [r7, #24]
 80085e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d225      	bcs.n	8008638 <prvNotifyQueueSetContainer+0xa6>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085f2:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 80085f4:	1d3b      	adds	r3, r7, #4
 80085f6:	683a      	ldr	r2, [r7, #0]
 80085f8:	4619      	mov	r1, r3
 80085fa:	69b8      	ldr	r0, [r7, #24]
 80085fc:	f7ff fe0c 	bl	8008218 <prvCopyDataToQueue>
 8008600:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 8008602:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008606:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800860a:	d10e      	bne.n	800862a <prvNotifyQueueSetContainer+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008610:	2b00      	cmp	r3, #0
 8008612:	d011      	beq.n	8008638 <prvNotifyQueueSetContainer+0xa6>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	3324      	adds	r3, #36	; 0x24
 8008618:	4618      	mov	r0, r3
 800861a:	f000 fc53 	bl	8008ec4 <xTaskRemoveFromEventList>
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d009      	beq.n	8008638 <prvNotifyQueueSetContainer+0xa6>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 8008624:	2301      	movs	r3, #1
 8008626:	61fb      	str	r3, [r7, #28]
 8008628:	e006      	b.n	8008638 <prvNotifyQueueSetContainer+0xa6>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800862a:	7dfb      	ldrb	r3, [r7, #23]
 800862c:	3301      	adds	r3, #1
 800862e:	b2db      	uxtb	r3, r3
 8008630:	b25a      	sxtb	r2, r3
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008638:	69fb      	ldr	r3, [r7, #28]
	}
 800863a:	4618      	mov	r0, r3
 800863c:	3720      	adds	r7, #32
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008642:	b580      	push	{r7, lr}
 8008644:	b08e      	sub	sp, #56	; 0x38
 8008646:	af04      	add	r7, sp, #16
 8008648:	60f8      	str	r0, [r7, #12]
 800864a:	60b9      	str	r1, [r7, #8]
 800864c:	607a      	str	r2, [r7, #4]
 800864e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008652:	2b00      	cmp	r3, #0
 8008654:	d109      	bne.n	800866a <xTaskCreateStatic+0x28>
 8008656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865a:	f383 8811 	msr	BASEPRI, r3
 800865e:	f3bf 8f6f 	isb	sy
 8008662:	f3bf 8f4f 	dsb	sy
 8008666:	623b      	str	r3, [r7, #32]
 8008668:	e7fe      	b.n	8008668 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800866a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866c:	2b00      	cmp	r3, #0
 800866e:	d109      	bne.n	8008684 <xTaskCreateStatic+0x42>
 8008670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008674:	f383 8811 	msr	BASEPRI, r3
 8008678:	f3bf 8f6f 	isb	sy
 800867c:	f3bf 8f4f 	dsb	sy
 8008680:	61fb      	str	r3, [r7, #28]
 8008682:	e7fe      	b.n	8008682 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008684:	2354      	movs	r3, #84	; 0x54
 8008686:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	2b54      	cmp	r3, #84	; 0x54
 800868c:	d009      	beq.n	80086a2 <xTaskCreateStatic+0x60>
 800868e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008692:	f383 8811 	msr	BASEPRI, r3
 8008696:	f3bf 8f6f 	isb	sy
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	61bb      	str	r3, [r7, #24]
 80086a0:	e7fe      	b.n	80086a0 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80086a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80086a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d01e      	beq.n	80086e8 <xTaskCreateStatic+0xa6>
 80086aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d01b      	beq.n	80086e8 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80086b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80086ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086bc:	2202      	movs	r2, #2
 80086be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80086c2:	2300      	movs	r3, #0
 80086c4:	9303      	str	r3, [sp, #12]
 80086c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c8:	9302      	str	r3, [sp, #8]
 80086ca:	f107 0314 	add.w	r3, r7, #20
 80086ce:	9301      	str	r3, [sp, #4]
 80086d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d2:	9300      	str	r3, [sp, #0]
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	68b9      	ldr	r1, [r7, #8]
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	f000 f850 	bl	8008780 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80086e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086e2:	f000 f8d3 	bl	800888c <prvAddNewTaskToReadyList>
 80086e6:	e001      	b.n	80086ec <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80086e8:	2300      	movs	r3, #0
 80086ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80086ec:	697b      	ldr	r3, [r7, #20]
	}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3728      	adds	r7, #40	; 0x28
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}

080086f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80086f6:	b580      	push	{r7, lr}
 80086f8:	b08c      	sub	sp, #48	; 0x30
 80086fa:	af04      	add	r7, sp, #16
 80086fc:	60f8      	str	r0, [r7, #12]
 80086fe:	60b9      	str	r1, [r7, #8]
 8008700:	603b      	str	r3, [r7, #0]
 8008702:	4613      	mov	r3, r2
 8008704:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008706:	88fb      	ldrh	r3, [r7, #6]
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4618      	mov	r0, r3
 800870c:	f001 fd38 	bl	800a180 <pvPortMalloc>
 8008710:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d00e      	beq.n	8008736 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008718:	2054      	movs	r0, #84	; 0x54
 800871a:	f001 fd31 	bl	800a180 <pvPortMalloc>
 800871e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d003      	beq.n	800872e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	697a      	ldr	r2, [r7, #20]
 800872a:	631a      	str	r2, [r3, #48]	; 0x30
 800872c:	e005      	b.n	800873a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800872e:	6978      	ldr	r0, [r7, #20]
 8008730:	f001 fde8 	bl	800a304 <vPortFree>
 8008734:	e001      	b.n	800873a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008736:	2300      	movs	r3, #0
 8008738:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d017      	beq.n	8008770 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	2200      	movs	r2, #0
 8008744:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008748:	88fa      	ldrh	r2, [r7, #6]
 800874a:	2300      	movs	r3, #0
 800874c:	9303      	str	r3, [sp, #12]
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	9302      	str	r3, [sp, #8]
 8008752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008754:	9301      	str	r3, [sp, #4]
 8008756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008758:	9300      	str	r3, [sp, #0]
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	68b9      	ldr	r1, [r7, #8]
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f000 f80e 	bl	8008780 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008764:	69f8      	ldr	r0, [r7, #28]
 8008766:	f000 f891 	bl	800888c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800876a:	2301      	movs	r3, #1
 800876c:	61bb      	str	r3, [r7, #24]
 800876e:	e002      	b.n	8008776 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008770:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008774:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008776:	69bb      	ldr	r3, [r7, #24]
	}
 8008778:	4618      	mov	r0, r3
 800877a:	3720      	adds	r7, #32
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b088      	sub	sp, #32
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
 800878c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800878e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008798:	3b01      	subs	r3, #1
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	4413      	add	r3, r2
 800879e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	f023 0307 	bic.w	r3, r3, #7
 80087a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	f003 0307 	and.w	r3, r3, #7
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d009      	beq.n	80087c6 <prvInitialiseNewTask+0x46>
 80087b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b6:	f383 8811 	msr	BASEPRI, r3
 80087ba:	f3bf 8f6f 	isb	sy
 80087be:	f3bf 8f4f 	dsb	sy
 80087c2:	617b      	str	r3, [r7, #20]
 80087c4:	e7fe      	b.n	80087c4 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d01f      	beq.n	800880c <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087cc:	2300      	movs	r3, #0
 80087ce:	61fb      	str	r3, [r7, #28]
 80087d0:	e012      	b.n	80087f8 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	4413      	add	r3, r2
 80087d8:	7819      	ldrb	r1, [r3, #0]
 80087da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	4413      	add	r3, r2
 80087e0:	3334      	adds	r3, #52	; 0x34
 80087e2:	460a      	mov	r2, r1
 80087e4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80087e6:	68ba      	ldr	r2, [r7, #8]
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	4413      	add	r3, r2
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d006      	beq.n	8008800 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	3301      	adds	r3, #1
 80087f6:	61fb      	str	r3, [r7, #28]
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	2b0f      	cmp	r3, #15
 80087fc:	d9e9      	bls.n	80087d2 <prvInitialiseNewTask+0x52>
 80087fe:	e000      	b.n	8008802 <prvInitialiseNewTask+0x82>
			{
				break;
 8008800:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008804:	2200      	movs	r2, #0
 8008806:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800880a:	e003      	b.n	8008814 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800880c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880e:	2200      	movs	r2, #0
 8008810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008816:	2b06      	cmp	r3, #6
 8008818:	d901      	bls.n	800881e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800881a:	2306      	movs	r3, #6
 800881c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800881e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008822:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008828:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800882a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882c:	2200      	movs	r2, #0
 800882e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008832:	3304      	adds	r3, #4
 8008834:	4618      	mov	r0, r3
 8008836:	f7ff f884 	bl	8007942 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800883a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883c:	3318      	adds	r3, #24
 800883e:	4618      	mov	r0, r3
 8008840:	f7ff f87f 	bl	8007942 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008846:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008848:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800884a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884c:	f1c3 0207 	rsb	r2, r3, #7
 8008850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008852:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008858:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800885a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885c:	2200      	movs	r2, #0
 800885e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008862:	2200      	movs	r2, #0
 8008864:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008868:	683a      	ldr	r2, [r7, #0]
 800886a:	68f9      	ldr	r1, [r7, #12]
 800886c:	69b8      	ldr	r0, [r7, #24]
 800886e:	f001 fa47 	bl	8009d00 <pxPortInitialiseStack>
 8008872:	4602      	mov	r2, r0
 8008874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008876:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887a:	2b00      	cmp	r3, #0
 800887c:	d002      	beq.n	8008884 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800887e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008882:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008884:	bf00      	nop
 8008886:	3720      	adds	r7, #32
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008894:	f001 fb5a 	bl	8009f4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008898:	4b2a      	ldr	r3, [pc, #168]	; (8008944 <prvAddNewTaskToReadyList+0xb8>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	3301      	adds	r3, #1
 800889e:	4a29      	ldr	r2, [pc, #164]	; (8008944 <prvAddNewTaskToReadyList+0xb8>)
 80088a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80088a2:	4b29      	ldr	r3, [pc, #164]	; (8008948 <prvAddNewTaskToReadyList+0xbc>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d109      	bne.n	80088be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80088aa:	4a27      	ldr	r2, [pc, #156]	; (8008948 <prvAddNewTaskToReadyList+0xbc>)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80088b0:	4b24      	ldr	r3, [pc, #144]	; (8008944 <prvAddNewTaskToReadyList+0xb8>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d110      	bne.n	80088da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80088b8:	f000 fc00 	bl	80090bc <prvInitialiseTaskLists>
 80088bc:	e00d      	b.n	80088da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80088be:	4b23      	ldr	r3, [pc, #140]	; (800894c <prvAddNewTaskToReadyList+0xc0>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d109      	bne.n	80088da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80088c6:	4b20      	ldr	r3, [pc, #128]	; (8008948 <prvAddNewTaskToReadyList+0xbc>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d802      	bhi.n	80088da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80088d4:	4a1c      	ldr	r2, [pc, #112]	; (8008948 <prvAddNewTaskToReadyList+0xbc>)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80088da:	4b1d      	ldr	r3, [pc, #116]	; (8008950 <prvAddNewTaskToReadyList+0xc4>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	3301      	adds	r3, #1
 80088e0:	4a1b      	ldr	r2, [pc, #108]	; (8008950 <prvAddNewTaskToReadyList+0xc4>)
 80088e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e8:	2201      	movs	r2, #1
 80088ea:	409a      	lsls	r2, r3
 80088ec:	4b19      	ldr	r3, [pc, #100]	; (8008954 <prvAddNewTaskToReadyList+0xc8>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	4a18      	ldr	r2, [pc, #96]	; (8008954 <prvAddNewTaskToReadyList+0xc8>)
 80088f4:	6013      	str	r3, [r2, #0]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088fa:	4613      	mov	r3, r2
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	4413      	add	r3, r2
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	4a15      	ldr	r2, [pc, #84]	; (8008958 <prvAddNewTaskToReadyList+0xcc>)
 8008904:	441a      	add	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	3304      	adds	r3, #4
 800890a:	4619      	mov	r1, r3
 800890c:	4610      	mov	r0, r2
 800890e:	f7ff f825 	bl	800795c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008912:	f001 fb49 	bl	8009fa8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008916:	4b0d      	ldr	r3, [pc, #52]	; (800894c <prvAddNewTaskToReadyList+0xc0>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00e      	beq.n	800893c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800891e:	4b0a      	ldr	r3, [pc, #40]	; (8008948 <prvAddNewTaskToReadyList+0xbc>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008928:	429a      	cmp	r2, r3
 800892a:	d207      	bcs.n	800893c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800892c:	4b0b      	ldr	r3, [pc, #44]	; (800895c <prvAddNewTaskToReadyList+0xd0>)
 800892e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008932:	601a      	str	r2, [r3, #0]
 8008934:	f3bf 8f4f 	dsb	sy
 8008938:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800893c:	bf00      	nop
 800893e:	3708      	adds	r7, #8
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	20001044 	.word	0x20001044
 8008948:	20000f44 	.word	0x20000f44
 800894c:	20001050 	.word	0x20001050
 8008950:	20001060 	.word	0x20001060
 8008954:	2000104c 	.word	0x2000104c
 8008958:	20000f48 	.word	0x20000f48
 800895c:	e000ed04 	.word	0xe000ed04

08008960 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008968:	2300      	movs	r3, #0
 800896a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d016      	beq.n	80089a0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008972:	4b13      	ldr	r3, [pc, #76]	; (80089c0 <vTaskDelay+0x60>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d009      	beq.n	800898e <vTaskDelay+0x2e>
 800897a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897e:	f383 8811 	msr	BASEPRI, r3
 8008982:	f3bf 8f6f 	isb	sy
 8008986:	f3bf 8f4f 	dsb	sy
 800898a:	60bb      	str	r3, [r7, #8]
 800898c:	e7fe      	b.n	800898c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800898e:	f000 f87f 	bl	8008a90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008992:	2100      	movs	r1, #0
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 fdc3 	bl	8009520 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800899a:	f000 f887 	bl	8008aac <xTaskResumeAll>
 800899e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d107      	bne.n	80089b6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80089a6:	4b07      	ldr	r3, [pc, #28]	; (80089c4 <vTaskDelay+0x64>)
 80089a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089ac:	601a      	str	r2, [r3, #0]
 80089ae:	f3bf 8f4f 	dsb	sy
 80089b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80089b6:	bf00      	nop
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	2000106c 	.word	0x2000106c
 80089c4:	e000ed04 	.word	0xe000ed04

080089c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b08a      	sub	sp, #40	; 0x28
 80089cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80089ce:	2300      	movs	r3, #0
 80089d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80089d2:	2300      	movs	r3, #0
 80089d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80089d6:	463a      	mov	r2, r7
 80089d8:	1d39      	adds	r1, r7, #4
 80089da:	f107 0308 	add.w	r3, r7, #8
 80089de:	4618      	mov	r0, r3
 80089e0:	f7f8 ff58 	bl	8001894 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80089e4:	6839      	ldr	r1, [r7, #0]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	68ba      	ldr	r2, [r7, #8]
 80089ea:	9202      	str	r2, [sp, #8]
 80089ec:	9301      	str	r3, [sp, #4]
 80089ee:	2300      	movs	r3, #0
 80089f0:	9300      	str	r3, [sp, #0]
 80089f2:	2300      	movs	r3, #0
 80089f4:	460a      	mov	r2, r1
 80089f6:	4920      	ldr	r1, [pc, #128]	; (8008a78 <vTaskStartScheduler+0xb0>)
 80089f8:	4820      	ldr	r0, [pc, #128]	; (8008a7c <vTaskStartScheduler+0xb4>)
 80089fa:	f7ff fe22 	bl	8008642 <xTaskCreateStatic>
 80089fe:	4602      	mov	r2, r0
 8008a00:	4b1f      	ldr	r3, [pc, #124]	; (8008a80 <vTaskStartScheduler+0xb8>)
 8008a02:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a04:	4b1e      	ldr	r3, [pc, #120]	; (8008a80 <vTaskStartScheduler+0xb8>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d002      	beq.n	8008a12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	617b      	str	r3, [r7, #20]
 8008a10:	e001      	b.n	8008a16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a12:	2300      	movs	r3, #0
 8008a14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d102      	bne.n	8008a22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008a1c:	f000 fde6 	bl	80095ec <xTimerCreateTimerTask>
 8008a20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d115      	bne.n	8008a54 <vTaskStartScheduler+0x8c>
 8008a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2c:	f383 8811 	msr	BASEPRI, r3
 8008a30:	f3bf 8f6f 	isb	sy
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008a3a:	4b12      	ldr	r3, [pc, #72]	; (8008a84 <vTaskStartScheduler+0xbc>)
 8008a3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008a42:	4b11      	ldr	r3, [pc, #68]	; (8008a88 <vTaskStartScheduler+0xc0>)
 8008a44:	2201      	movs	r2, #1
 8008a46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008a48:	4b10      	ldr	r3, [pc, #64]	; (8008a8c <vTaskStartScheduler+0xc4>)
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008a4e:	f001 f9df 	bl	8009e10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008a52:	e00d      	b.n	8008a70 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a5a:	d109      	bne.n	8008a70 <vTaskStartScheduler+0xa8>
 8008a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a60:	f383 8811 	msr	BASEPRI, r3
 8008a64:	f3bf 8f6f 	isb	sy
 8008a68:	f3bf 8f4f 	dsb	sy
 8008a6c:	60fb      	str	r3, [r7, #12]
 8008a6e:	e7fe      	b.n	8008a6e <vTaskStartScheduler+0xa6>
}
 8008a70:	bf00      	nop
 8008a72:	3718      	adds	r7, #24
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	0800dce8 	.word	0x0800dce8
 8008a7c:	0800908d 	.word	0x0800908d
 8008a80:	20001068 	.word	0x20001068
 8008a84:	20001064 	.word	0x20001064
 8008a88:	20001050 	.word	0x20001050
 8008a8c:	20001048 	.word	0x20001048

08008a90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008a90:	b480      	push	{r7}
 8008a92:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008a94:	4b04      	ldr	r3, [pc, #16]	; (8008aa8 <vTaskSuspendAll+0x18>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	4a03      	ldr	r2, [pc, #12]	; (8008aa8 <vTaskSuspendAll+0x18>)
 8008a9c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008a9e:	bf00      	nop
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr
 8008aa8:	2000106c 	.word	0x2000106c

08008aac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008aba:	4b41      	ldr	r3, [pc, #260]	; (8008bc0 <xTaskResumeAll+0x114>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d109      	bne.n	8008ad6 <xTaskResumeAll+0x2a>
 8008ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac6:	f383 8811 	msr	BASEPRI, r3
 8008aca:	f3bf 8f6f 	isb	sy
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	603b      	str	r3, [r7, #0]
 8008ad4:	e7fe      	b.n	8008ad4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008ad6:	f001 fa39 	bl	8009f4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008ada:	4b39      	ldr	r3, [pc, #228]	; (8008bc0 <xTaskResumeAll+0x114>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	4a37      	ldr	r2, [pc, #220]	; (8008bc0 <xTaskResumeAll+0x114>)
 8008ae2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ae4:	4b36      	ldr	r3, [pc, #216]	; (8008bc0 <xTaskResumeAll+0x114>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d161      	bne.n	8008bb0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008aec:	4b35      	ldr	r3, [pc, #212]	; (8008bc4 <xTaskResumeAll+0x118>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d05d      	beq.n	8008bb0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008af4:	e02e      	b.n	8008b54 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008af6:	4b34      	ldr	r3, [pc, #208]	; (8008bc8 <xTaskResumeAll+0x11c>)
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	3318      	adds	r3, #24
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7fe ff87 	bl	8007a16 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	3304      	adds	r3, #4
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7fe ff82 	bl	8007a16 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b16:	2201      	movs	r2, #1
 8008b18:	409a      	lsls	r2, r3
 8008b1a:	4b2c      	ldr	r3, [pc, #176]	; (8008bcc <xTaskResumeAll+0x120>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	4a2a      	ldr	r2, [pc, #168]	; (8008bcc <xTaskResumeAll+0x120>)
 8008b22:	6013      	str	r3, [r2, #0]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b28:	4613      	mov	r3, r2
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	4413      	add	r3, r2
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	4a27      	ldr	r2, [pc, #156]	; (8008bd0 <xTaskResumeAll+0x124>)
 8008b32:	441a      	add	r2, r3
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	3304      	adds	r3, #4
 8008b38:	4619      	mov	r1, r3
 8008b3a:	4610      	mov	r0, r2
 8008b3c:	f7fe ff0e 	bl	800795c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b44:	4b23      	ldr	r3, [pc, #140]	; (8008bd4 <xTaskResumeAll+0x128>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d302      	bcc.n	8008b54 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8008b4e:	4b22      	ldr	r3, [pc, #136]	; (8008bd8 <xTaskResumeAll+0x12c>)
 8008b50:	2201      	movs	r2, #1
 8008b52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b54:	4b1c      	ldr	r3, [pc, #112]	; (8008bc8 <xTaskResumeAll+0x11c>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1cc      	bne.n	8008af6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d001      	beq.n	8008b66 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008b62:	f000 fb45 	bl	80091f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008b66:	4b1d      	ldr	r3, [pc, #116]	; (8008bdc <xTaskResumeAll+0x130>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d010      	beq.n	8008b94 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008b72:	f000 f847 	bl	8008c04 <xTaskIncrementTick>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d002      	beq.n	8008b82 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008b7c:	4b16      	ldr	r3, [pc, #88]	; (8008bd8 <xTaskResumeAll+0x12c>)
 8008b7e:	2201      	movs	r2, #1
 8008b80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	3b01      	subs	r3, #1
 8008b86:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d1f1      	bne.n	8008b72 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8008b8e:	4b13      	ldr	r3, [pc, #76]	; (8008bdc <xTaskResumeAll+0x130>)
 8008b90:	2200      	movs	r2, #0
 8008b92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008b94:	4b10      	ldr	r3, [pc, #64]	; (8008bd8 <xTaskResumeAll+0x12c>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d009      	beq.n	8008bb0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008ba0:	4b0f      	ldr	r3, [pc, #60]	; (8008be0 <xTaskResumeAll+0x134>)
 8008ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ba6:	601a      	str	r2, [r3, #0]
 8008ba8:	f3bf 8f4f 	dsb	sy
 8008bac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008bb0:	f001 f9fa 	bl	8009fa8 <vPortExitCritical>

	return xAlreadyYielded;
 8008bb4:	68bb      	ldr	r3, [r7, #8]
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	2000106c 	.word	0x2000106c
 8008bc4:	20001044 	.word	0x20001044
 8008bc8:	20001004 	.word	0x20001004
 8008bcc:	2000104c 	.word	0x2000104c
 8008bd0:	20000f48 	.word	0x20000f48
 8008bd4:	20000f44 	.word	0x20000f44
 8008bd8:	20001058 	.word	0x20001058
 8008bdc:	20001054 	.word	0x20001054
 8008be0:	e000ed04 	.word	0xe000ed04

08008be4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008bea:	4b05      	ldr	r3, [pc, #20]	; (8008c00 <xTaskGetTickCount+0x1c>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008bf0:	687b      	ldr	r3, [r7, #4]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	370c      	adds	r7, #12
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	20001048 	.word	0x20001048

08008c04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b086      	sub	sp, #24
 8008c08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c0e:	4b4e      	ldr	r3, [pc, #312]	; (8008d48 <xTaskIncrementTick+0x144>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	f040 8087 	bne.w	8008d26 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008c18:	4b4c      	ldr	r3, [pc, #304]	; (8008d4c <xTaskIncrementTick+0x148>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008c20:	4a4a      	ldr	r2, [pc, #296]	; (8008d4c <xTaskIncrementTick+0x148>)
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d11f      	bne.n	8008c6c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008c2c:	4b48      	ldr	r3, [pc, #288]	; (8008d50 <xTaskIncrementTick+0x14c>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d009      	beq.n	8008c4a <xTaskIncrementTick+0x46>
 8008c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3a:	f383 8811 	msr	BASEPRI, r3
 8008c3e:	f3bf 8f6f 	isb	sy
 8008c42:	f3bf 8f4f 	dsb	sy
 8008c46:	603b      	str	r3, [r7, #0]
 8008c48:	e7fe      	b.n	8008c48 <xTaskIncrementTick+0x44>
 8008c4a:	4b41      	ldr	r3, [pc, #260]	; (8008d50 <xTaskIncrementTick+0x14c>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	60fb      	str	r3, [r7, #12]
 8008c50:	4b40      	ldr	r3, [pc, #256]	; (8008d54 <xTaskIncrementTick+0x150>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a3e      	ldr	r2, [pc, #248]	; (8008d50 <xTaskIncrementTick+0x14c>)
 8008c56:	6013      	str	r3, [r2, #0]
 8008c58:	4a3e      	ldr	r2, [pc, #248]	; (8008d54 <xTaskIncrementTick+0x150>)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6013      	str	r3, [r2, #0]
 8008c5e:	4b3e      	ldr	r3, [pc, #248]	; (8008d58 <xTaskIncrementTick+0x154>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	3301      	adds	r3, #1
 8008c64:	4a3c      	ldr	r2, [pc, #240]	; (8008d58 <xTaskIncrementTick+0x154>)
 8008c66:	6013      	str	r3, [r2, #0]
 8008c68:	f000 fac2 	bl	80091f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c6c:	4b3b      	ldr	r3, [pc, #236]	; (8008d5c <xTaskIncrementTick+0x158>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	693a      	ldr	r2, [r7, #16]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d348      	bcc.n	8008d08 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c76:	4b36      	ldr	r3, [pc, #216]	; (8008d50 <xTaskIncrementTick+0x14c>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d104      	bne.n	8008c8a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c80:	4b36      	ldr	r3, [pc, #216]	; (8008d5c <xTaskIncrementTick+0x158>)
 8008c82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c86:	601a      	str	r2, [r3, #0]
					break;
 8008c88:	e03e      	b.n	8008d08 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c8a:	4b31      	ldr	r3, [pc, #196]	; (8008d50 <xTaskIncrementTick+0x14c>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008c9a:	693a      	ldr	r2, [r7, #16]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d203      	bcs.n	8008caa <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008ca2:	4a2e      	ldr	r2, [pc, #184]	; (8008d5c <xTaskIncrementTick+0x158>)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008ca8:	e02e      	b.n	8008d08 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	3304      	adds	r3, #4
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fe feb1 	bl	8007a16 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d004      	beq.n	8008cc6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	3318      	adds	r3, #24
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fe fea8 	bl	8007a16 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cca:	2201      	movs	r2, #1
 8008ccc:	409a      	lsls	r2, r3
 8008cce:	4b24      	ldr	r3, [pc, #144]	; (8008d60 <xTaskIncrementTick+0x15c>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	4a22      	ldr	r2, [pc, #136]	; (8008d60 <xTaskIncrementTick+0x15c>)
 8008cd6:	6013      	str	r3, [r2, #0]
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cdc:	4613      	mov	r3, r2
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	4413      	add	r3, r2
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	4a1f      	ldr	r2, [pc, #124]	; (8008d64 <xTaskIncrementTick+0x160>)
 8008ce6:	441a      	add	r2, r3
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	3304      	adds	r3, #4
 8008cec:	4619      	mov	r1, r3
 8008cee:	4610      	mov	r0, r2
 8008cf0:	f7fe fe34 	bl	800795c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf8:	4b1b      	ldr	r3, [pc, #108]	; (8008d68 <xTaskIncrementTick+0x164>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d3b9      	bcc.n	8008c76 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008d02:	2301      	movs	r3, #1
 8008d04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d06:	e7b6      	b.n	8008c76 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008d08:	4b17      	ldr	r3, [pc, #92]	; (8008d68 <xTaskIncrementTick+0x164>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d0e:	4915      	ldr	r1, [pc, #84]	; (8008d64 <xTaskIncrementTick+0x160>)
 8008d10:	4613      	mov	r3, r2
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	4413      	add	r3, r2
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	440b      	add	r3, r1
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d907      	bls.n	8008d30 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8008d20:	2301      	movs	r3, #1
 8008d22:	617b      	str	r3, [r7, #20]
 8008d24:	e004      	b.n	8008d30 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008d26:	4b11      	ldr	r3, [pc, #68]	; (8008d6c <xTaskIncrementTick+0x168>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	4a0f      	ldr	r2, [pc, #60]	; (8008d6c <xTaskIncrementTick+0x168>)
 8008d2e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008d30:	4b0f      	ldr	r3, [pc, #60]	; (8008d70 <xTaskIncrementTick+0x16c>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d001      	beq.n	8008d3c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008d3c:	697b      	ldr	r3, [r7, #20]
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3718      	adds	r7, #24
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	2000106c 	.word	0x2000106c
 8008d4c:	20001048 	.word	0x20001048
 8008d50:	20000ffc 	.word	0x20000ffc
 8008d54:	20001000 	.word	0x20001000
 8008d58:	2000105c 	.word	0x2000105c
 8008d5c:	20001064 	.word	0x20001064
 8008d60:	2000104c 	.word	0x2000104c
 8008d64:	20000f48 	.word	0x20000f48
 8008d68:	20000f44 	.word	0x20000f44
 8008d6c:	20001054 	.word	0x20001054
 8008d70:	20001058 	.word	0x20001058

08008d74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008d74:	b480      	push	{r7}
 8008d76:	b087      	sub	sp, #28
 8008d78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008d7a:	4b26      	ldr	r3, [pc, #152]	; (8008e14 <vTaskSwitchContext+0xa0>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d003      	beq.n	8008d8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008d82:	4b25      	ldr	r3, [pc, #148]	; (8008e18 <vTaskSwitchContext+0xa4>)
 8008d84:	2201      	movs	r2, #1
 8008d86:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008d88:	e03e      	b.n	8008e08 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8008d8a:	4b23      	ldr	r3, [pc, #140]	; (8008e18 <vTaskSwitchContext+0xa4>)
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d90:	4b22      	ldr	r3, [pc, #136]	; (8008e1c <vTaskSwitchContext+0xa8>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	fab3 f383 	clz	r3, r3
 8008d9c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008d9e:	7afb      	ldrb	r3, [r7, #11]
 8008da0:	f1c3 031f 	rsb	r3, r3, #31
 8008da4:	617b      	str	r3, [r7, #20]
 8008da6:	491e      	ldr	r1, [pc, #120]	; (8008e20 <vTaskSwitchContext+0xac>)
 8008da8:	697a      	ldr	r2, [r7, #20]
 8008daa:	4613      	mov	r3, r2
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	4413      	add	r3, r2
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	440b      	add	r3, r1
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d109      	bne.n	8008dce <vTaskSwitchContext+0x5a>
	__asm volatile
 8008dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbe:	f383 8811 	msr	BASEPRI, r3
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	607b      	str	r3, [r7, #4]
 8008dcc:	e7fe      	b.n	8008dcc <vTaskSwitchContext+0x58>
 8008dce:	697a      	ldr	r2, [r7, #20]
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	4413      	add	r3, r2
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	4a11      	ldr	r2, [pc, #68]	; (8008e20 <vTaskSwitchContext+0xac>)
 8008dda:	4413      	add	r3, r2
 8008ddc:	613b      	str	r3, [r7, #16]
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	685a      	ldr	r2, [r3, #4]
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	605a      	str	r2, [r3, #4]
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	685a      	ldr	r2, [r3, #4]
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	3308      	adds	r3, #8
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d104      	bne.n	8008dfe <vTaskSwitchContext+0x8a>
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	685a      	ldr	r2, [r3, #4]
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	605a      	str	r2, [r3, #4]
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	4a07      	ldr	r2, [pc, #28]	; (8008e24 <vTaskSwitchContext+0xb0>)
 8008e06:	6013      	str	r3, [r2, #0]
}
 8008e08:	bf00      	nop
 8008e0a:	371c      	adds	r7, #28
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr
 8008e14:	2000106c 	.word	0x2000106c
 8008e18:	20001058 	.word	0x20001058
 8008e1c:	2000104c 	.word	0x2000104c
 8008e20:	20000f48 	.word	0x20000f48
 8008e24:	20000f44 	.word	0x20000f44

08008e28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d109      	bne.n	8008e4c <vTaskPlaceOnEventList+0x24>
 8008e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3c:	f383 8811 	msr	BASEPRI, r3
 8008e40:	f3bf 8f6f 	isb	sy
 8008e44:	f3bf 8f4f 	dsb	sy
 8008e48:	60fb      	str	r3, [r7, #12]
 8008e4a:	e7fe      	b.n	8008e4a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e4c:	4b07      	ldr	r3, [pc, #28]	; (8008e6c <vTaskPlaceOnEventList+0x44>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	3318      	adds	r3, #24
 8008e52:	4619      	mov	r1, r3
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f7fe fda5 	bl	80079a4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e5a:	2101      	movs	r1, #1
 8008e5c:	6838      	ldr	r0, [r7, #0]
 8008e5e:	f000 fb5f 	bl	8009520 <prvAddCurrentTaskToDelayedList>
}
 8008e62:	bf00      	nop
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	20000f44 	.word	0x20000f44

08008e70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b086      	sub	sp, #24
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d109      	bne.n	8008e96 <vTaskPlaceOnEventListRestricted+0x26>
 8008e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e86:	f383 8811 	msr	BASEPRI, r3
 8008e8a:	f3bf 8f6f 	isb	sy
 8008e8e:	f3bf 8f4f 	dsb	sy
 8008e92:	617b      	str	r3, [r7, #20]
 8008e94:	e7fe      	b.n	8008e94 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e96:	4b0a      	ldr	r3, [pc, #40]	; (8008ec0 <vTaskPlaceOnEventListRestricted+0x50>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	3318      	adds	r3, #24
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	68f8      	ldr	r0, [r7, #12]
 8008ea0:	f7fe fd5c 	bl	800795c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d002      	beq.n	8008eb0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8008eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008eae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008eb0:	6879      	ldr	r1, [r7, #4]
 8008eb2:	68b8      	ldr	r0, [r7, #8]
 8008eb4:	f000 fb34 	bl	8009520 <prvAddCurrentTaskToDelayedList>
	}
 8008eb8:	bf00      	nop
 8008eba:	3718      	adds	r7, #24
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	20000f44 	.word	0x20000f44

08008ec4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b086      	sub	sp, #24
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d109      	bne.n	8008eee <xTaskRemoveFromEventList+0x2a>
 8008eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ede:	f383 8811 	msr	BASEPRI, r3
 8008ee2:	f3bf 8f6f 	isb	sy
 8008ee6:	f3bf 8f4f 	dsb	sy
 8008eea:	60fb      	str	r3, [r7, #12]
 8008eec:	e7fe      	b.n	8008eec <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	3318      	adds	r3, #24
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7fe fd8f 	bl	8007a16 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ef8:	4b1d      	ldr	r3, [pc, #116]	; (8008f70 <xTaskRemoveFromEventList+0xac>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d11c      	bne.n	8008f3a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	3304      	adds	r3, #4
 8008f04:	4618      	mov	r0, r3
 8008f06:	f7fe fd86 	bl	8007a16 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0e:	2201      	movs	r2, #1
 8008f10:	409a      	lsls	r2, r3
 8008f12:	4b18      	ldr	r3, [pc, #96]	; (8008f74 <xTaskRemoveFromEventList+0xb0>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	4a16      	ldr	r2, [pc, #88]	; (8008f74 <xTaskRemoveFromEventList+0xb0>)
 8008f1a:	6013      	str	r3, [r2, #0]
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f20:	4613      	mov	r3, r2
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	4413      	add	r3, r2
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	4a13      	ldr	r2, [pc, #76]	; (8008f78 <xTaskRemoveFromEventList+0xb4>)
 8008f2a:	441a      	add	r2, r3
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	3304      	adds	r3, #4
 8008f30:	4619      	mov	r1, r3
 8008f32:	4610      	mov	r0, r2
 8008f34:	f7fe fd12 	bl	800795c <vListInsertEnd>
 8008f38:	e005      	b.n	8008f46 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	3318      	adds	r3, #24
 8008f3e:	4619      	mov	r1, r3
 8008f40:	480e      	ldr	r0, [pc, #56]	; (8008f7c <xTaskRemoveFromEventList+0xb8>)
 8008f42:	f7fe fd0b 	bl	800795c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f4a:	4b0d      	ldr	r3, [pc, #52]	; (8008f80 <xTaskRemoveFromEventList+0xbc>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d905      	bls.n	8008f60 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008f54:	2301      	movs	r3, #1
 8008f56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008f58:	4b0a      	ldr	r3, [pc, #40]	; (8008f84 <xTaskRemoveFromEventList+0xc0>)
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	601a      	str	r2, [r3, #0]
 8008f5e:	e001      	b.n	8008f64 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8008f60:	2300      	movs	r3, #0
 8008f62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008f64:	697b      	ldr	r3, [r7, #20]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3718      	adds	r7, #24
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	2000106c 	.word	0x2000106c
 8008f74:	2000104c 	.word	0x2000104c
 8008f78:	20000f48 	.word	0x20000f48
 8008f7c:	20001004 	.word	0x20001004
 8008f80:	20000f44 	.word	0x20000f44
 8008f84:	20001058 	.word	0x20001058

08008f88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f90:	4b06      	ldr	r3, [pc, #24]	; (8008fac <vTaskInternalSetTimeOutState+0x24>)
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008f98:	4b05      	ldr	r3, [pc, #20]	; (8008fb0 <vTaskInternalSetTimeOutState+0x28>)
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	605a      	str	r2, [r3, #4]
}
 8008fa0:	bf00      	nop
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr
 8008fac:	2000105c 	.word	0x2000105c
 8008fb0:	20001048 	.word	0x20001048

08008fb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b088      	sub	sp, #32
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d109      	bne.n	8008fd8 <xTaskCheckForTimeOut+0x24>
 8008fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc8:	f383 8811 	msr	BASEPRI, r3
 8008fcc:	f3bf 8f6f 	isb	sy
 8008fd0:	f3bf 8f4f 	dsb	sy
 8008fd4:	613b      	str	r3, [r7, #16]
 8008fd6:	e7fe      	b.n	8008fd6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d109      	bne.n	8008ff2 <xTaskCheckForTimeOut+0x3e>
 8008fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe2:	f383 8811 	msr	BASEPRI, r3
 8008fe6:	f3bf 8f6f 	isb	sy
 8008fea:	f3bf 8f4f 	dsb	sy
 8008fee:	60fb      	str	r3, [r7, #12]
 8008ff0:	e7fe      	b.n	8008ff0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008ff2:	f000 ffab 	bl	8009f4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008ff6:	4b1d      	ldr	r3, [pc, #116]	; (800906c <xTaskCheckForTimeOut+0xb8>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	69ba      	ldr	r2, [r7, #24]
 8009002:	1ad3      	subs	r3, r2, r3
 8009004:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800900e:	d102      	bne.n	8009016 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009010:	2300      	movs	r3, #0
 8009012:	61fb      	str	r3, [r7, #28]
 8009014:	e023      	b.n	800905e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	4b15      	ldr	r3, [pc, #84]	; (8009070 <xTaskCheckForTimeOut+0xbc>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	429a      	cmp	r2, r3
 8009020:	d007      	beq.n	8009032 <xTaskCheckForTimeOut+0x7e>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	69ba      	ldr	r2, [r7, #24]
 8009028:	429a      	cmp	r2, r3
 800902a:	d302      	bcc.n	8009032 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800902c:	2301      	movs	r3, #1
 800902e:	61fb      	str	r3, [r7, #28]
 8009030:	e015      	b.n	800905e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	697a      	ldr	r2, [r7, #20]
 8009038:	429a      	cmp	r2, r3
 800903a:	d20b      	bcs.n	8009054 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	1ad2      	subs	r2, r2, r3
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f7ff ff9d 	bl	8008f88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800904e:	2300      	movs	r3, #0
 8009050:	61fb      	str	r3, [r7, #28]
 8009052:	e004      	b.n	800905e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	2200      	movs	r2, #0
 8009058:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800905a:	2301      	movs	r3, #1
 800905c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800905e:	f000 ffa3 	bl	8009fa8 <vPortExitCritical>

	return xReturn;
 8009062:	69fb      	ldr	r3, [r7, #28]
}
 8009064:	4618      	mov	r0, r3
 8009066:	3720      	adds	r7, #32
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	20001048 	.word	0x20001048
 8009070:	2000105c 	.word	0x2000105c

08009074 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009074:	b480      	push	{r7}
 8009076:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009078:	4b03      	ldr	r3, [pc, #12]	; (8009088 <vTaskMissedYield+0x14>)
 800907a:	2201      	movs	r2, #1
 800907c:	601a      	str	r2, [r3, #0]
}
 800907e:	bf00      	nop
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr
 8009088:	20001058 	.word	0x20001058

0800908c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009094:	f000 f852 	bl	800913c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009098:	4b06      	ldr	r3, [pc, #24]	; (80090b4 <prvIdleTask+0x28>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2b01      	cmp	r3, #1
 800909e:	d9f9      	bls.n	8009094 <prvIdleTask+0x8>
			{
				taskYIELD();
 80090a0:	4b05      	ldr	r3, [pc, #20]	; (80090b8 <prvIdleTask+0x2c>)
 80090a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090a6:	601a      	str	r2, [r3, #0]
 80090a8:	f3bf 8f4f 	dsb	sy
 80090ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80090b0:	e7f0      	b.n	8009094 <prvIdleTask+0x8>
 80090b2:	bf00      	nop
 80090b4:	20000f48 	.word	0x20000f48
 80090b8:	e000ed04 	.word	0xe000ed04

080090bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090c2:	2300      	movs	r3, #0
 80090c4:	607b      	str	r3, [r7, #4]
 80090c6:	e00c      	b.n	80090e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	4613      	mov	r3, r2
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	4413      	add	r3, r2
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	4a12      	ldr	r2, [pc, #72]	; (800911c <prvInitialiseTaskLists+0x60>)
 80090d4:	4413      	add	r3, r2
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7fe fc13 	bl	8007902 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	3301      	adds	r3, #1
 80090e0:	607b      	str	r3, [r7, #4]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2b06      	cmp	r3, #6
 80090e6:	d9ef      	bls.n	80090c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80090e8:	480d      	ldr	r0, [pc, #52]	; (8009120 <prvInitialiseTaskLists+0x64>)
 80090ea:	f7fe fc0a 	bl	8007902 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80090ee:	480d      	ldr	r0, [pc, #52]	; (8009124 <prvInitialiseTaskLists+0x68>)
 80090f0:	f7fe fc07 	bl	8007902 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80090f4:	480c      	ldr	r0, [pc, #48]	; (8009128 <prvInitialiseTaskLists+0x6c>)
 80090f6:	f7fe fc04 	bl	8007902 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80090fa:	480c      	ldr	r0, [pc, #48]	; (800912c <prvInitialiseTaskLists+0x70>)
 80090fc:	f7fe fc01 	bl	8007902 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009100:	480b      	ldr	r0, [pc, #44]	; (8009130 <prvInitialiseTaskLists+0x74>)
 8009102:	f7fe fbfe 	bl	8007902 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009106:	4b0b      	ldr	r3, [pc, #44]	; (8009134 <prvInitialiseTaskLists+0x78>)
 8009108:	4a05      	ldr	r2, [pc, #20]	; (8009120 <prvInitialiseTaskLists+0x64>)
 800910a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800910c:	4b0a      	ldr	r3, [pc, #40]	; (8009138 <prvInitialiseTaskLists+0x7c>)
 800910e:	4a05      	ldr	r2, [pc, #20]	; (8009124 <prvInitialiseTaskLists+0x68>)
 8009110:	601a      	str	r2, [r3, #0]
}
 8009112:	bf00      	nop
 8009114:	3708      	adds	r7, #8
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	20000f48 	.word	0x20000f48
 8009120:	20000fd4 	.word	0x20000fd4
 8009124:	20000fe8 	.word	0x20000fe8
 8009128:	20001004 	.word	0x20001004
 800912c:	20001018 	.word	0x20001018
 8009130:	20001030 	.word	0x20001030
 8009134:	20000ffc 	.word	0x20000ffc
 8009138:	20001000 	.word	0x20001000

0800913c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009142:	e019      	b.n	8009178 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009144:	f000 ff02 	bl	8009f4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009148:	4b0f      	ldr	r3, [pc, #60]	; (8009188 <prvCheckTasksWaitingTermination+0x4c>)
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	3304      	adds	r3, #4
 8009154:	4618      	mov	r0, r3
 8009156:	f7fe fc5e 	bl	8007a16 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800915a:	4b0c      	ldr	r3, [pc, #48]	; (800918c <prvCheckTasksWaitingTermination+0x50>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	3b01      	subs	r3, #1
 8009160:	4a0a      	ldr	r2, [pc, #40]	; (800918c <prvCheckTasksWaitingTermination+0x50>)
 8009162:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009164:	4b0a      	ldr	r3, [pc, #40]	; (8009190 <prvCheckTasksWaitingTermination+0x54>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	3b01      	subs	r3, #1
 800916a:	4a09      	ldr	r2, [pc, #36]	; (8009190 <prvCheckTasksWaitingTermination+0x54>)
 800916c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800916e:	f000 ff1b 	bl	8009fa8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 f80e 	bl	8009194 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009178:	4b05      	ldr	r3, [pc, #20]	; (8009190 <prvCheckTasksWaitingTermination+0x54>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d1e1      	bne.n	8009144 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009180:	bf00      	nop
 8009182:	3708      	adds	r7, #8
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	20001018 	.word	0x20001018
 800918c:	20001044 	.word	0x20001044
 8009190:	2000102c 	.word	0x2000102c

08009194 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d108      	bne.n	80091b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091aa:	4618      	mov	r0, r3
 80091ac:	f001 f8aa 	bl	800a304 <vPortFree>
				vPortFree( pxTCB );
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f001 f8a7 	bl	800a304 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80091b6:	e017      	b.n	80091e8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d103      	bne.n	80091ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f001 f89e 	bl	800a304 <vPortFree>
	}
 80091c8:	e00e      	b.n	80091e8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091d0:	2b02      	cmp	r3, #2
 80091d2:	d009      	beq.n	80091e8 <prvDeleteTCB+0x54>
 80091d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d8:	f383 8811 	msr	BASEPRI, r3
 80091dc:	f3bf 8f6f 	isb	sy
 80091e0:	f3bf 8f4f 	dsb	sy
 80091e4:	60fb      	str	r3, [r7, #12]
 80091e6:	e7fe      	b.n	80091e6 <prvDeleteTCB+0x52>
	}
 80091e8:	bf00      	nop
 80091ea:	3710      	adds	r7, #16
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091f6:	4b0c      	ldr	r3, [pc, #48]	; (8009228 <prvResetNextTaskUnblockTime+0x38>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d104      	bne.n	800920a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009200:	4b0a      	ldr	r3, [pc, #40]	; (800922c <prvResetNextTaskUnblockTime+0x3c>)
 8009202:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009206:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009208:	e008      	b.n	800921c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800920a:	4b07      	ldr	r3, [pc, #28]	; (8009228 <prvResetNextTaskUnblockTime+0x38>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	4a04      	ldr	r2, [pc, #16]	; (800922c <prvResetNextTaskUnblockTime+0x3c>)
 800921a:	6013      	str	r3, [r2, #0]
}
 800921c:	bf00      	nop
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr
 8009228:	20000ffc 	.word	0x20000ffc
 800922c:	20001064 	.word	0x20001064

08009230 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009236:	4b0b      	ldr	r3, [pc, #44]	; (8009264 <xTaskGetSchedulerState+0x34>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d102      	bne.n	8009244 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800923e:	2301      	movs	r3, #1
 8009240:	607b      	str	r3, [r7, #4]
 8009242:	e008      	b.n	8009256 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009244:	4b08      	ldr	r3, [pc, #32]	; (8009268 <xTaskGetSchedulerState+0x38>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d102      	bne.n	8009252 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800924c:	2302      	movs	r3, #2
 800924e:	607b      	str	r3, [r7, #4]
 8009250:	e001      	b.n	8009256 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009252:	2300      	movs	r3, #0
 8009254:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009256:	687b      	ldr	r3, [r7, #4]
	}
 8009258:	4618      	mov	r0, r3
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr
 8009264:	20001050 	.word	0x20001050
 8009268:	2000106c 	.word	0x2000106c

0800926c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800926c:	b580      	push	{r7, lr}
 800926e:	b086      	sub	sp, #24
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009278:	2300      	movs	r3, #0
 800927a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d06c      	beq.n	800935c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009282:	4b39      	ldr	r3, [pc, #228]	; (8009368 <xTaskPriorityDisinherit+0xfc>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	693a      	ldr	r2, [r7, #16]
 8009288:	429a      	cmp	r2, r3
 800928a:	d009      	beq.n	80092a0 <xTaskPriorityDisinherit+0x34>
 800928c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009290:	f383 8811 	msr	BASEPRI, r3
 8009294:	f3bf 8f6f 	isb	sy
 8009298:	f3bf 8f4f 	dsb	sy
 800929c:	60fb      	str	r3, [r7, #12]
 800929e:	e7fe      	b.n	800929e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d109      	bne.n	80092bc <xTaskPriorityDisinherit+0x50>
 80092a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ac:	f383 8811 	msr	BASEPRI, r3
 80092b0:	f3bf 8f6f 	isb	sy
 80092b4:	f3bf 8f4f 	dsb	sy
 80092b8:	60bb      	str	r3, [r7, #8]
 80092ba:	e7fe      	b.n	80092ba <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092c0:	1e5a      	subs	r2, r3, #1
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d044      	beq.n	800935c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d140      	bne.n	800935c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	3304      	adds	r3, #4
 80092de:	4618      	mov	r0, r3
 80092e0:	f7fe fb99 	bl	8007a16 <uxListRemove>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d115      	bne.n	8009316 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ee:	491f      	ldr	r1, [pc, #124]	; (800936c <xTaskPriorityDisinherit+0x100>)
 80092f0:	4613      	mov	r3, r2
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	4413      	add	r3, r2
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	440b      	add	r3, r1
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d10a      	bne.n	8009316 <xTaskPriorityDisinherit+0xaa>
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009304:	2201      	movs	r2, #1
 8009306:	fa02 f303 	lsl.w	r3, r2, r3
 800930a:	43da      	mvns	r2, r3
 800930c:	4b18      	ldr	r3, [pc, #96]	; (8009370 <xTaskPriorityDisinherit+0x104>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4013      	ands	r3, r2
 8009312:	4a17      	ldr	r2, [pc, #92]	; (8009370 <xTaskPriorityDisinherit+0x104>)
 8009314:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009322:	f1c3 0207 	rsb	r2, r3, #7
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932e:	2201      	movs	r2, #1
 8009330:	409a      	lsls	r2, r3
 8009332:	4b0f      	ldr	r3, [pc, #60]	; (8009370 <xTaskPriorityDisinherit+0x104>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4313      	orrs	r3, r2
 8009338:	4a0d      	ldr	r2, [pc, #52]	; (8009370 <xTaskPriorityDisinherit+0x104>)
 800933a:	6013      	str	r3, [r2, #0]
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009340:	4613      	mov	r3, r2
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	4413      	add	r3, r2
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	4a08      	ldr	r2, [pc, #32]	; (800936c <xTaskPriorityDisinherit+0x100>)
 800934a:	441a      	add	r2, r3
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	3304      	adds	r3, #4
 8009350:	4619      	mov	r1, r3
 8009352:	4610      	mov	r0, r2
 8009354:	f7fe fb02 	bl	800795c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009358:	2301      	movs	r3, #1
 800935a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800935c:	697b      	ldr	r3, [r7, #20]
	}
 800935e:	4618      	mov	r0, r3
 8009360:	3718      	adds	r7, #24
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
 8009366:	bf00      	nop
 8009368:	20000f44 	.word	0x20000f44
 800936c:	20000f48 	.word	0x20000f48
 8009370:	2000104c 	.word	0x2000104c

08009374 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800937e:	f000 fde5 	bl	8009f4c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8009382:	4b1e      	ldr	r3, [pc, #120]	; (80093fc <ulTaskNotifyTake+0x88>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009388:	2b00      	cmp	r3, #0
 800938a:	d113      	bne.n	80093b4 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800938c:	4b1b      	ldr	r3, [pc, #108]	; (80093fc <ulTaskNotifyTake+0x88>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2201      	movs	r2, #1
 8009392:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00b      	beq.n	80093b4 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800939c:	2101      	movs	r1, #1
 800939e:	6838      	ldr	r0, [r7, #0]
 80093a0:	f000 f8be 	bl	8009520 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80093a4:	4b16      	ldr	r3, [pc, #88]	; (8009400 <ulTaskNotifyTake+0x8c>)
 80093a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093aa:	601a      	str	r2, [r3, #0]
 80093ac:	f3bf 8f4f 	dsb	sy
 80093b0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80093b4:	f000 fdf8 	bl	8009fa8 <vPortExitCritical>

		taskENTER_CRITICAL();
 80093b8:	f000 fdc8 	bl	8009f4c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80093bc:	4b0f      	ldr	r3, [pc, #60]	; (80093fc <ulTaskNotifyTake+0x88>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093c2:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00c      	beq.n	80093e4 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d004      	beq.n	80093da <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80093d0:	4b0a      	ldr	r3, [pc, #40]	; (80093fc <ulTaskNotifyTake+0x88>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	2200      	movs	r2, #0
 80093d6:	64da      	str	r2, [r3, #76]	; 0x4c
 80093d8:	e004      	b.n	80093e4 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80093da:	4b08      	ldr	r3, [pc, #32]	; (80093fc <ulTaskNotifyTake+0x88>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	3a01      	subs	r2, #1
 80093e2:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80093e4:	4b05      	ldr	r3, [pc, #20]	; (80093fc <ulTaskNotifyTake+0x88>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 80093ee:	f000 fddb 	bl	8009fa8 <vPortExitCritical>

		return ulReturn;
 80093f2:	68fb      	ldr	r3, [r7, #12]
	}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	20000f44 	.word	0x20000f44
 8009400:	e000ed04 	.word	0xe000ed04

08009404 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009404:	b580      	push	{r7, lr}
 8009406:	b08a      	sub	sp, #40	; 0x28
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d109      	bne.n	8009428 <vTaskNotifyGiveFromISR+0x24>
 8009414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009418:	f383 8811 	msr	BASEPRI, r3
 800941c:	f3bf 8f6f 	isb	sy
 8009420:	f3bf 8f4f 	dsb	sy
 8009424:	61bb      	str	r3, [r7, #24]
 8009426:	e7fe      	b.n	8009426 <vTaskNotifyGiveFromISR+0x22>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009428:	f000 fe6c 	bl	800a104 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 8009430:	f3ef 8211 	mrs	r2, BASEPRI
 8009434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009438:	f383 8811 	msr	BASEPRI, r3
 800943c:	f3bf 8f6f 	isb	sy
 8009440:	f3bf 8f4f 	dsb	sy
 8009444:	617a      	str	r2, [r7, #20]
 8009446:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009448:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800944a:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800944c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009452:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009456:	2202      	movs	r2, #2
 8009458:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009460:	1c5a      	adds	r2, r3, #1
 8009462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009464:	64da      	str	r2, [r3, #76]	; 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009466:	7ffb      	ldrb	r3, [r7, #31]
 8009468:	2b01      	cmp	r3, #1
 800946a:	d144      	bne.n	80094f6 <vTaskNotifyGiveFromISR+0xf2>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800946c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009470:	2b00      	cmp	r3, #0
 8009472:	d009      	beq.n	8009488 <vTaskNotifyGiveFromISR+0x84>
	__asm volatile
 8009474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009478:	f383 8811 	msr	BASEPRI, r3
 800947c:	f3bf 8f6f 	isb	sy
 8009480:	f3bf 8f4f 	dsb	sy
 8009484:	60fb      	str	r3, [r7, #12]
 8009486:	e7fe      	b.n	8009486 <vTaskNotifyGiveFromISR+0x82>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009488:	4b1f      	ldr	r3, [pc, #124]	; (8009508 <vTaskNotifyGiveFromISR+0x104>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d11c      	bne.n	80094ca <vTaskNotifyGiveFromISR+0xc6>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009492:	3304      	adds	r3, #4
 8009494:	4618      	mov	r0, r3
 8009496:	f7fe fabe 	bl	8007a16 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800949a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800949e:	2201      	movs	r2, #1
 80094a0:	409a      	lsls	r2, r3
 80094a2:	4b1a      	ldr	r3, [pc, #104]	; (800950c <vTaskNotifyGiveFromISR+0x108>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4313      	orrs	r3, r2
 80094a8:	4a18      	ldr	r2, [pc, #96]	; (800950c <vTaskNotifyGiveFromISR+0x108>)
 80094aa:	6013      	str	r3, [r2, #0]
 80094ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b0:	4613      	mov	r3, r2
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	4413      	add	r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	4a15      	ldr	r2, [pc, #84]	; (8009510 <vTaskNotifyGiveFromISR+0x10c>)
 80094ba:	441a      	add	r2, r3
 80094bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094be:	3304      	adds	r3, #4
 80094c0:	4619      	mov	r1, r3
 80094c2:	4610      	mov	r0, r2
 80094c4:	f7fe fa4a 	bl	800795c <vListInsertEnd>
 80094c8:	e005      	b.n	80094d6 <vTaskNotifyGiveFromISR+0xd2>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80094ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094cc:	3318      	adds	r3, #24
 80094ce:	4619      	mov	r1, r3
 80094d0:	4810      	ldr	r0, [pc, #64]	; (8009514 <vTaskNotifyGiveFromISR+0x110>)
 80094d2:	f7fe fa43 	bl	800795c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80094d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094da:	4b0f      	ldr	r3, [pc, #60]	; (8009518 <vTaskNotifyGiveFromISR+0x114>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d908      	bls.n	80094f6 <vTaskNotifyGiveFromISR+0xf2>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d002      	beq.n	80094f0 <vTaskNotifyGiveFromISR+0xec>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	2201      	movs	r2, #1
 80094ee:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80094f0:	4b0a      	ldr	r3, [pc, #40]	; (800951c <vTaskNotifyGiveFromISR+0x118>)
 80094f2:	2201      	movs	r2, #1
 80094f4:	601a      	str	r2, [r3, #0]
 80094f6:	6a3b      	ldr	r3, [r7, #32]
 80094f8:	60bb      	str	r3, [r7, #8]
	__asm volatile
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8009500:	bf00      	nop
 8009502:	3728      	adds	r7, #40	; 0x28
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}
 8009508:	2000106c 	.word	0x2000106c
 800950c:	2000104c 	.word	0x2000104c
 8009510:	20000f48 	.word	0x20000f48
 8009514:	20001004 	.word	0x20001004
 8009518:	20000f44 	.word	0x20000f44
 800951c:	20001058 	.word	0x20001058

08009520 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800952a:	4b29      	ldr	r3, [pc, #164]	; (80095d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009530:	4b28      	ldr	r3, [pc, #160]	; (80095d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	3304      	adds	r3, #4
 8009536:	4618      	mov	r0, r3
 8009538:	f7fe fa6d 	bl	8007a16 <uxListRemove>
 800953c:	4603      	mov	r3, r0
 800953e:	2b00      	cmp	r3, #0
 8009540:	d10b      	bne.n	800955a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009542:	4b24      	ldr	r3, [pc, #144]	; (80095d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009548:	2201      	movs	r2, #1
 800954a:	fa02 f303 	lsl.w	r3, r2, r3
 800954e:	43da      	mvns	r2, r3
 8009550:	4b21      	ldr	r3, [pc, #132]	; (80095d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4013      	ands	r3, r2
 8009556:	4a20      	ldr	r2, [pc, #128]	; (80095d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009558:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009560:	d10a      	bne.n	8009578 <prvAddCurrentTaskToDelayedList+0x58>
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d007      	beq.n	8009578 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009568:	4b1a      	ldr	r3, [pc, #104]	; (80095d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	3304      	adds	r3, #4
 800956e:	4619      	mov	r1, r3
 8009570:	481a      	ldr	r0, [pc, #104]	; (80095dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8009572:	f7fe f9f3 	bl	800795c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009576:	e026      	b.n	80095c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4413      	add	r3, r2
 800957e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009580:	4b14      	ldr	r3, [pc, #80]	; (80095d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	68ba      	ldr	r2, [r7, #8]
 8009586:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009588:	68ba      	ldr	r2, [r7, #8]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	429a      	cmp	r2, r3
 800958e:	d209      	bcs.n	80095a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009590:	4b13      	ldr	r3, [pc, #76]	; (80095e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	4b0f      	ldr	r3, [pc, #60]	; (80095d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	3304      	adds	r3, #4
 800959a:	4619      	mov	r1, r3
 800959c:	4610      	mov	r0, r2
 800959e:	f7fe fa01 	bl	80079a4 <vListInsert>
}
 80095a2:	e010      	b.n	80095c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095a4:	4b0f      	ldr	r3, [pc, #60]	; (80095e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	4b0a      	ldr	r3, [pc, #40]	; (80095d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	3304      	adds	r3, #4
 80095ae:	4619      	mov	r1, r3
 80095b0:	4610      	mov	r0, r2
 80095b2:	f7fe f9f7 	bl	80079a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80095b6:	4b0c      	ldr	r3, [pc, #48]	; (80095e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	68ba      	ldr	r2, [r7, #8]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d202      	bcs.n	80095c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80095c0:	4a09      	ldr	r2, [pc, #36]	; (80095e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	6013      	str	r3, [r2, #0]
}
 80095c6:	bf00      	nop
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	20001048 	.word	0x20001048
 80095d4:	20000f44 	.word	0x20000f44
 80095d8:	2000104c 	.word	0x2000104c
 80095dc:	20001030 	.word	0x20001030
 80095e0:	20001000 	.word	0x20001000
 80095e4:	20000ffc 	.word	0x20000ffc
 80095e8:	20001064 	.word	0x20001064

080095ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b08a      	sub	sp, #40	; 0x28
 80095f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80095f2:	2300      	movs	r3, #0
 80095f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80095f6:	f000 fb43 	bl	8009c80 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80095fa:	4b1c      	ldr	r3, [pc, #112]	; (800966c <xTimerCreateTimerTask+0x80>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d021      	beq.n	8009646 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009602:	2300      	movs	r3, #0
 8009604:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009606:	2300      	movs	r3, #0
 8009608:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800960a:	1d3a      	adds	r2, r7, #4
 800960c:	f107 0108 	add.w	r1, r7, #8
 8009610:	f107 030c 	add.w	r3, r7, #12
 8009614:	4618      	mov	r0, r3
 8009616:	f7f8 f957 	bl	80018c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800961a:	6879      	ldr	r1, [r7, #4]
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	9202      	str	r2, [sp, #8]
 8009622:	9301      	str	r3, [sp, #4]
 8009624:	2302      	movs	r3, #2
 8009626:	9300      	str	r3, [sp, #0]
 8009628:	2300      	movs	r3, #0
 800962a:	460a      	mov	r2, r1
 800962c:	4910      	ldr	r1, [pc, #64]	; (8009670 <xTimerCreateTimerTask+0x84>)
 800962e:	4811      	ldr	r0, [pc, #68]	; (8009674 <xTimerCreateTimerTask+0x88>)
 8009630:	f7ff f807 	bl	8008642 <xTaskCreateStatic>
 8009634:	4602      	mov	r2, r0
 8009636:	4b10      	ldr	r3, [pc, #64]	; (8009678 <xTimerCreateTimerTask+0x8c>)
 8009638:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800963a:	4b0f      	ldr	r3, [pc, #60]	; (8009678 <xTimerCreateTimerTask+0x8c>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d001      	beq.n	8009646 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009642:	2301      	movs	r3, #1
 8009644:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d109      	bne.n	8009660 <xTimerCreateTimerTask+0x74>
	__asm volatile
 800964c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009650:	f383 8811 	msr	BASEPRI, r3
 8009654:	f3bf 8f6f 	isb	sy
 8009658:	f3bf 8f4f 	dsb	sy
 800965c:	613b      	str	r3, [r7, #16]
 800965e:	e7fe      	b.n	800965e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8009660:	697b      	ldr	r3, [r7, #20]
}
 8009662:	4618      	mov	r0, r3
 8009664:	3718      	adds	r7, #24
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	200010a0 	.word	0x200010a0
 8009670:	0800dcf0 	.word	0x0800dcf0
 8009674:	08009865 	.word	0x08009865
 8009678:	200010a4 	.word	0x200010a4

0800967c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800967c:	b580      	push	{r7, lr}
 800967e:	b088      	sub	sp, #32
 8009680:	af02      	add	r7, sp, #8
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	607a      	str	r2, [r7, #4]
 8009688:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800968a:	2028      	movs	r0, #40	; 0x28
 800968c:	f000 fd78 	bl	800a180 <pvPortMalloc>
 8009690:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d00d      	beq.n	80096b4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	2200      	movs	r2, #0
 800969c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	9301      	str	r3, [sp, #4]
 80096a4:	6a3b      	ldr	r3, [r7, #32]
 80096a6:	9300      	str	r3, [sp, #0]
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	68b9      	ldr	r1, [r7, #8]
 80096ae:	68f8      	ldr	r0, [r7, #12]
 80096b0:	f000 f805 	bl	80096be <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80096b4:	697b      	ldr	r3, [r7, #20]
	}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3718      	adds	r7, #24
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b086      	sub	sp, #24
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	60f8      	str	r0, [r7, #12]
 80096c6:	60b9      	str	r1, [r7, #8]
 80096c8:	607a      	str	r2, [r7, #4]
 80096ca:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d109      	bne.n	80096e6 <prvInitialiseNewTimer+0x28>
 80096d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d6:	f383 8811 	msr	BASEPRI, r3
 80096da:	f3bf 8f6f 	isb	sy
 80096de:	f3bf 8f4f 	dsb	sy
 80096e2:	617b      	str	r3, [r7, #20]
 80096e4:	e7fe      	b.n	80096e4 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 80096e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d01e      	beq.n	800972a <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80096ec:	f000 fac8 	bl	8009c80 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80096f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f2:	68fa      	ldr	r2, [r7, #12]
 80096f4:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80096f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f8:	68ba      	ldr	r2, [r7, #8]
 80096fa:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80096fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fe:	683a      	ldr	r2, [r7, #0]
 8009700:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009704:	6a3a      	ldr	r2, [r7, #32]
 8009706:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970a:	3304      	adds	r3, #4
 800970c:	4618      	mov	r0, r3
 800970e:	f7fe f918 	bl	8007942 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d008      	beq.n	800972a <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8009718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800971e:	f043 0304 	orr.w	r3, r3, #4
 8009722:	b2da      	uxtb	r2, r3
 8009724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009726:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800972a:	bf00      	nop
 800972c:	3718      	adds	r7, #24
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
	...

08009734 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b08a      	sub	sp, #40	; 0x28
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	607a      	str	r2, [r7, #4]
 8009740:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009742:	2300      	movs	r3, #0
 8009744:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d109      	bne.n	8009760 <xTimerGenericCommand+0x2c>
 800974c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009750:	f383 8811 	msr	BASEPRI, r3
 8009754:	f3bf 8f6f 	isb	sy
 8009758:	f3bf 8f4f 	dsb	sy
 800975c:	623b      	str	r3, [r7, #32]
 800975e:	e7fe      	b.n	800975e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009760:	4b19      	ldr	r3, [pc, #100]	; (80097c8 <xTimerGenericCommand+0x94>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d02a      	beq.n	80097be <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	2b05      	cmp	r3, #5
 8009778:	dc18      	bgt.n	80097ac <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800977a:	f7ff fd59 	bl	8009230 <xTaskGetSchedulerState>
 800977e:	4603      	mov	r3, r0
 8009780:	2b02      	cmp	r3, #2
 8009782:	d109      	bne.n	8009798 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009784:	4b10      	ldr	r3, [pc, #64]	; (80097c8 <xTimerGenericCommand+0x94>)
 8009786:	6818      	ldr	r0, [r3, #0]
 8009788:	f107 0114 	add.w	r1, r7, #20
 800978c:	2300      	movs	r3, #0
 800978e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009790:	f7fe faa8 	bl	8007ce4 <xQueueGenericSend>
 8009794:	6278      	str	r0, [r7, #36]	; 0x24
 8009796:	e012      	b.n	80097be <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009798:	4b0b      	ldr	r3, [pc, #44]	; (80097c8 <xTimerGenericCommand+0x94>)
 800979a:	6818      	ldr	r0, [r3, #0]
 800979c:	f107 0114 	add.w	r1, r7, #20
 80097a0:	2300      	movs	r3, #0
 80097a2:	2200      	movs	r2, #0
 80097a4:	f7fe fa9e 	bl	8007ce4 <xQueueGenericSend>
 80097a8:	6278      	str	r0, [r7, #36]	; 0x24
 80097aa:	e008      	b.n	80097be <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80097ac:	4b06      	ldr	r3, [pc, #24]	; (80097c8 <xTimerGenericCommand+0x94>)
 80097ae:	6818      	ldr	r0, [r3, #0]
 80097b0:	f107 0114 	add.w	r1, r7, #20
 80097b4:	2300      	movs	r3, #0
 80097b6:	683a      	ldr	r2, [r7, #0]
 80097b8:	f7fe fbac 	bl	8007f14 <xQueueGenericSendFromISR>
 80097bc:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80097be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3728      	adds	r7, #40	; 0x28
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}
 80097c8:	200010a0 	.word	0x200010a0

080097cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b088      	sub	sp, #32
 80097d0:	af02      	add	r7, sp, #8
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097d6:	4b22      	ldr	r3, [pc, #136]	; (8009860 <prvProcessExpiredTimer+0x94>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	68db      	ldr	r3, [r3, #12]
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	3304      	adds	r3, #4
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7fe f916 	bl	8007a16 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80097f0:	f003 0304 	and.w	r3, r3, #4
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d021      	beq.n	800983c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	699a      	ldr	r2, [r3, #24]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	18d1      	adds	r1, r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	683a      	ldr	r2, [r7, #0]
 8009804:	6978      	ldr	r0, [r7, #20]
 8009806:	f000 f8d1 	bl	80099ac <prvInsertTimerInActiveList>
 800980a:	4603      	mov	r3, r0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d01e      	beq.n	800984e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009810:	2300      	movs	r3, #0
 8009812:	9300      	str	r3, [sp, #0]
 8009814:	2300      	movs	r3, #0
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	2100      	movs	r1, #0
 800981a:	6978      	ldr	r0, [r7, #20]
 800981c:	f7ff ff8a 	bl	8009734 <xTimerGenericCommand>
 8009820:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d112      	bne.n	800984e <prvProcessExpiredTimer+0x82>
 8009828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982c:	f383 8811 	msr	BASEPRI, r3
 8009830:	f3bf 8f6f 	isb	sy
 8009834:	f3bf 8f4f 	dsb	sy
 8009838:	60fb      	str	r3, [r7, #12]
 800983a:	e7fe      	b.n	800983a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009842:	f023 0301 	bic.w	r3, r3, #1
 8009846:	b2da      	uxtb	r2, r3
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	6a1b      	ldr	r3, [r3, #32]
 8009852:	6978      	ldr	r0, [r7, #20]
 8009854:	4798      	blx	r3
}
 8009856:	bf00      	nop
 8009858:	3718      	adds	r7, #24
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	20001098 	.word	0x20001098

08009864 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800986c:	f107 0308 	add.w	r3, r7, #8
 8009870:	4618      	mov	r0, r3
 8009872:	f000 f857 	bl	8009924 <prvGetNextExpireTime>
 8009876:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	4619      	mov	r1, r3
 800987c:	68f8      	ldr	r0, [r7, #12]
 800987e:	f000 f803 	bl	8009888 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009882:	f000 f8d5 	bl	8009a30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009886:	e7f1      	b.n	800986c <prvTimerTask+0x8>

08009888 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009892:	f7ff f8fd 	bl	8008a90 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009896:	f107 0308 	add.w	r3, r7, #8
 800989a:	4618      	mov	r0, r3
 800989c:	f000 f866 	bl	800996c <prvSampleTimeNow>
 80098a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d130      	bne.n	800990a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d10a      	bne.n	80098c4 <prvProcessTimerOrBlockTask+0x3c>
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d806      	bhi.n	80098c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80098b6:	f7ff f8f9 	bl	8008aac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80098ba:	68f9      	ldr	r1, [r7, #12]
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f7ff ff85 	bl	80097cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80098c2:	e024      	b.n	800990e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d008      	beq.n	80098dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80098ca:	4b13      	ldr	r3, [pc, #76]	; (8009918 <prvProcessTimerOrBlockTask+0x90>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d101      	bne.n	80098d8 <prvProcessTimerOrBlockTask+0x50>
 80098d4:	2301      	movs	r3, #1
 80098d6:	e000      	b.n	80098da <prvProcessTimerOrBlockTask+0x52>
 80098d8:	2300      	movs	r3, #0
 80098da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80098dc:	4b0f      	ldr	r3, [pc, #60]	; (800991c <prvProcessTimerOrBlockTask+0x94>)
 80098de:	6818      	ldr	r0, [r3, #0]
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	1ad3      	subs	r3, r2, r3
 80098e6:	683a      	ldr	r2, [r7, #0]
 80098e8:	4619      	mov	r1, r3
 80098ea:	f7fe fddb 	bl	80084a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80098ee:	f7ff f8dd 	bl	8008aac <xTaskResumeAll>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d10a      	bne.n	800990e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80098f8:	4b09      	ldr	r3, [pc, #36]	; (8009920 <prvProcessTimerOrBlockTask+0x98>)
 80098fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098fe:	601a      	str	r2, [r3, #0]
 8009900:	f3bf 8f4f 	dsb	sy
 8009904:	f3bf 8f6f 	isb	sy
}
 8009908:	e001      	b.n	800990e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800990a:	f7ff f8cf 	bl	8008aac <xTaskResumeAll>
}
 800990e:	bf00      	nop
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	2000109c 	.word	0x2000109c
 800991c:	200010a0 	.word	0x200010a0
 8009920:	e000ed04 	.word	0xe000ed04

08009924 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009924:	b480      	push	{r7}
 8009926:	b085      	sub	sp, #20
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800992c:	4b0e      	ldr	r3, [pc, #56]	; (8009968 <prvGetNextExpireTime+0x44>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d101      	bne.n	800993a <prvGetNextExpireTime+0x16>
 8009936:	2201      	movs	r2, #1
 8009938:	e000      	b.n	800993c <prvGetNextExpireTime+0x18>
 800993a:	2200      	movs	r2, #0
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d105      	bne.n	8009954 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009948:	4b07      	ldr	r3, [pc, #28]	; (8009968 <prvGetNextExpireTime+0x44>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	60fb      	str	r3, [r7, #12]
 8009952:	e001      	b.n	8009958 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009954:	2300      	movs	r3, #0
 8009956:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009958:	68fb      	ldr	r3, [r7, #12]
}
 800995a:	4618      	mov	r0, r3
 800995c:	3714      	adds	r7, #20
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr
 8009966:	bf00      	nop
 8009968:	20001098 	.word	0x20001098

0800996c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009974:	f7ff f936 	bl	8008be4 <xTaskGetTickCount>
 8009978:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800997a:	4b0b      	ldr	r3, [pc, #44]	; (80099a8 <prvSampleTimeNow+0x3c>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	68fa      	ldr	r2, [r7, #12]
 8009980:	429a      	cmp	r2, r3
 8009982:	d205      	bcs.n	8009990 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009984:	f000 f918 	bl	8009bb8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	601a      	str	r2, [r3, #0]
 800998e:	e002      	b.n	8009996 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009996:	4a04      	ldr	r2, [pc, #16]	; (80099a8 <prvSampleTimeNow+0x3c>)
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800999c:	68fb      	ldr	r3, [r7, #12]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	200010a8 	.word	0x200010a8

080099ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b086      	sub	sp, #24
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	607a      	str	r2, [r7, #4]
 80099b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80099ba:	2300      	movs	r3, #0
 80099bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	68ba      	ldr	r2, [r7, #8]
 80099c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	68fa      	ldr	r2, [r7, #12]
 80099c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80099ca:	68ba      	ldr	r2, [r7, #8]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d812      	bhi.n	80099f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	1ad2      	subs	r2, r2, r3
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	699b      	ldr	r3, [r3, #24]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d302      	bcc.n	80099e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80099e0:	2301      	movs	r3, #1
 80099e2:	617b      	str	r3, [r7, #20]
 80099e4:	e01b      	b.n	8009a1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80099e6:	4b10      	ldr	r3, [pc, #64]	; (8009a28 <prvInsertTimerInActiveList+0x7c>)
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	3304      	adds	r3, #4
 80099ee:	4619      	mov	r1, r3
 80099f0:	4610      	mov	r0, r2
 80099f2:	f7fd ffd7 	bl	80079a4 <vListInsert>
 80099f6:	e012      	b.n	8009a1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d206      	bcs.n	8009a0e <prvInsertTimerInActiveList+0x62>
 8009a00:	68ba      	ldr	r2, [r7, #8]
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d302      	bcc.n	8009a0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	617b      	str	r3, [r7, #20]
 8009a0c:	e007      	b.n	8009a1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a0e:	4b07      	ldr	r3, [pc, #28]	; (8009a2c <prvInsertTimerInActiveList+0x80>)
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	3304      	adds	r3, #4
 8009a16:	4619      	mov	r1, r3
 8009a18:	4610      	mov	r0, r2
 8009a1a:	f7fd ffc3 	bl	80079a4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009a1e:	697b      	ldr	r3, [r7, #20]
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3718      	adds	r7, #24
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	2000109c 	.word	0x2000109c
 8009a2c:	20001098 	.word	0x20001098

08009a30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b08c      	sub	sp, #48	; 0x30
 8009a34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a36:	e0ac      	b.n	8009b92 <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	f2c0 80a8 	blt.w	8009b90 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a46:	695b      	ldr	r3, [r3, #20]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d004      	beq.n	8009a56 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4e:	3304      	adds	r3, #4
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7fd ffe0 	bl	8007a16 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a56:	1d3b      	adds	r3, r7, #4
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7ff ff87 	bl	800996c <prvSampleTimeNow>
 8009a5e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	2b09      	cmp	r3, #9
 8009a64:	f200 8095 	bhi.w	8009b92 <prvProcessReceivedCommands+0x162>
 8009a68:	a201      	add	r2, pc, #4	; (adr r2, 8009a70 <prvProcessReceivedCommands+0x40>)
 8009a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a6e:	bf00      	nop
 8009a70:	08009a99 	.word	0x08009a99
 8009a74:	08009a99 	.word	0x08009a99
 8009a78:	08009a99 	.word	0x08009a99
 8009a7c:	08009b0b 	.word	0x08009b0b
 8009a80:	08009b1f 	.word	0x08009b1f
 8009a84:	08009b67 	.word	0x08009b67
 8009a88:	08009a99 	.word	0x08009a99
 8009a8c:	08009a99 	.word	0x08009a99
 8009a90:	08009b0b 	.word	0x08009b0b
 8009a94:	08009b1f 	.word	0x08009b1f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009a9e:	f043 0301 	orr.w	r3, r3, #1
 8009aa2:	b2da      	uxtb	r2, r3
 8009aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aae:	699b      	ldr	r3, [r3, #24]
 8009ab0:	18d1      	adds	r1, r2, r3
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	6a3a      	ldr	r2, [r7, #32]
 8009ab6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ab8:	f7ff ff78 	bl	80099ac <prvInsertTimerInActiveList>
 8009abc:	4603      	mov	r3, r0
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d067      	beq.n	8009b92 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac4:	6a1b      	ldr	r3, [r3, #32]
 8009ac6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ac8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009acc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009ad0:	f003 0304 	and.w	r3, r3, #4
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d05c      	beq.n	8009b92 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009ad8:	68fa      	ldr	r2, [r7, #12]
 8009ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009adc:	699b      	ldr	r3, [r3, #24]
 8009ade:	441a      	add	r2, r3
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	9300      	str	r3, [sp, #0]
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	2100      	movs	r1, #0
 8009ae8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009aea:	f7ff fe23 	bl	8009734 <xTimerGenericCommand>
 8009aee:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d14d      	bne.n	8009b92 <prvProcessReceivedCommands+0x162>
 8009af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afa:	f383 8811 	msr	BASEPRI, r3
 8009afe:	f3bf 8f6f 	isb	sy
 8009b02:	f3bf 8f4f 	dsb	sy
 8009b06:	61bb      	str	r3, [r7, #24]
 8009b08:	e7fe      	b.n	8009b08 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009b10:	f023 0301 	bic.w	r3, r3, #1
 8009b14:	b2da      	uxtb	r2, r3
 8009b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8009b1c:	e039      	b.n	8009b92 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009b24:	f043 0301 	orr.w	r3, r3, #1
 8009b28:	b2da      	uxtb	r2, r3
 8009b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009b30:	68fa      	ldr	r2, [r7, #12]
 8009b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b34:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b38:	699b      	ldr	r3, [r3, #24]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d109      	bne.n	8009b52 <prvProcessReceivedCommands+0x122>
 8009b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b42:	f383 8811 	msr	BASEPRI, r3
 8009b46:	f3bf 8f6f 	isb	sy
 8009b4a:	f3bf 8f4f 	dsb	sy
 8009b4e:	617b      	str	r3, [r7, #20]
 8009b50:	e7fe      	b.n	8009b50 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b54:	699a      	ldr	r2, [r3, #24]
 8009b56:	6a3b      	ldr	r3, [r7, #32]
 8009b58:	18d1      	adds	r1, r2, r3
 8009b5a:	6a3b      	ldr	r3, [r7, #32]
 8009b5c:	6a3a      	ldr	r2, [r7, #32]
 8009b5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b60:	f7ff ff24 	bl	80099ac <prvInsertTimerInActiveList>
					break;
 8009b64:	e015      	b.n	8009b92 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009b6c:	f003 0302 	and.w	r3, r3, #2
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d103      	bne.n	8009b7c <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8009b74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b76:	f000 fbc5 	bl	800a304 <vPortFree>
 8009b7a:	e00a      	b.n	8009b92 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009b82:	f023 0301 	bic.w	r3, r3, #1
 8009b86:	b2da      	uxtb	r2, r3
 8009b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009b8e:	e000      	b.n	8009b92 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009b90:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b92:	4b08      	ldr	r3, [pc, #32]	; (8009bb4 <prvProcessReceivedCommands+0x184>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f107 0108 	add.w	r1, r7, #8
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7fe fa5f 	bl	8008060 <xQueueReceive>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	f47f af47 	bne.w	8009a38 <prvProcessReceivedCommands+0x8>
	}
}
 8009baa:	bf00      	nop
 8009bac:	3728      	adds	r7, #40	; 0x28
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	200010a0 	.word	0x200010a0

08009bb8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b088      	sub	sp, #32
 8009bbc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009bbe:	e047      	b.n	8009c50 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009bc0:	4b2d      	ldr	r3, [pc, #180]	; (8009c78 <prvSwitchTimerLists+0xc0>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bca:	4b2b      	ldr	r3, [pc, #172]	; (8009c78 <prvSwitchTimerLists+0xc0>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	3304      	adds	r3, #4
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7fd ff1c 	bl	8007a16 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	6a1b      	ldr	r3, [r3, #32]
 8009be2:	68f8      	ldr	r0, [r7, #12]
 8009be4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009bec:	f003 0304 	and.w	r3, r3, #4
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d02d      	beq.n	8009c50 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	699b      	ldr	r3, [r3, #24]
 8009bf8:	693a      	ldr	r2, [r7, #16]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009bfe:	68ba      	ldr	r2, [r7, #8]
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d90e      	bls.n	8009c24 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	68ba      	ldr	r2, [r7, #8]
 8009c0a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	68fa      	ldr	r2, [r7, #12]
 8009c10:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c12:	4b19      	ldr	r3, [pc, #100]	; (8009c78 <prvSwitchTimerLists+0xc0>)
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	3304      	adds	r3, #4
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	4610      	mov	r0, r2
 8009c1e:	f7fd fec1 	bl	80079a4 <vListInsert>
 8009c22:	e015      	b.n	8009c50 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c24:	2300      	movs	r3, #0
 8009c26:	9300      	str	r3, [sp, #0]
 8009c28:	2300      	movs	r3, #0
 8009c2a:	693a      	ldr	r2, [r7, #16]
 8009c2c:	2100      	movs	r1, #0
 8009c2e:	68f8      	ldr	r0, [r7, #12]
 8009c30:	f7ff fd80 	bl	8009734 <xTimerGenericCommand>
 8009c34:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d109      	bne.n	8009c50 <prvSwitchTimerLists+0x98>
 8009c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c40:	f383 8811 	msr	BASEPRI, r3
 8009c44:	f3bf 8f6f 	isb	sy
 8009c48:	f3bf 8f4f 	dsb	sy
 8009c4c:	603b      	str	r3, [r7, #0]
 8009c4e:	e7fe      	b.n	8009c4e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c50:	4b09      	ldr	r3, [pc, #36]	; (8009c78 <prvSwitchTimerLists+0xc0>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d1b2      	bne.n	8009bc0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009c5a:	4b07      	ldr	r3, [pc, #28]	; (8009c78 <prvSwitchTimerLists+0xc0>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009c60:	4b06      	ldr	r3, [pc, #24]	; (8009c7c <prvSwitchTimerLists+0xc4>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a04      	ldr	r2, [pc, #16]	; (8009c78 <prvSwitchTimerLists+0xc0>)
 8009c66:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009c68:	4a04      	ldr	r2, [pc, #16]	; (8009c7c <prvSwitchTimerLists+0xc4>)
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	6013      	str	r3, [r2, #0]
}
 8009c6e:	bf00      	nop
 8009c70:	3718      	adds	r7, #24
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	20001098 	.word	0x20001098
 8009c7c:	2000109c 	.word	0x2000109c

08009c80 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009c86:	f000 f961 	bl	8009f4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009c8a:	4b15      	ldr	r3, [pc, #84]	; (8009ce0 <prvCheckForValidListAndQueue+0x60>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d120      	bne.n	8009cd4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009c92:	4814      	ldr	r0, [pc, #80]	; (8009ce4 <prvCheckForValidListAndQueue+0x64>)
 8009c94:	f7fd fe35 	bl	8007902 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009c98:	4813      	ldr	r0, [pc, #76]	; (8009ce8 <prvCheckForValidListAndQueue+0x68>)
 8009c9a:	f7fd fe32 	bl	8007902 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009c9e:	4b13      	ldr	r3, [pc, #76]	; (8009cec <prvCheckForValidListAndQueue+0x6c>)
 8009ca0:	4a10      	ldr	r2, [pc, #64]	; (8009ce4 <prvCheckForValidListAndQueue+0x64>)
 8009ca2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009ca4:	4b12      	ldr	r3, [pc, #72]	; (8009cf0 <prvCheckForValidListAndQueue+0x70>)
 8009ca6:	4a10      	ldr	r2, [pc, #64]	; (8009ce8 <prvCheckForValidListAndQueue+0x68>)
 8009ca8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009caa:	2300      	movs	r3, #0
 8009cac:	9300      	str	r3, [sp, #0]
 8009cae:	4b11      	ldr	r3, [pc, #68]	; (8009cf4 <prvCheckForValidListAndQueue+0x74>)
 8009cb0:	4a11      	ldr	r2, [pc, #68]	; (8009cf8 <prvCheckForValidListAndQueue+0x78>)
 8009cb2:	210c      	movs	r1, #12
 8009cb4:	200a      	movs	r0, #10
 8009cb6:	f7fd ff41 	bl	8007b3c <xQueueGenericCreateStatic>
 8009cba:	4602      	mov	r2, r0
 8009cbc:	4b08      	ldr	r3, [pc, #32]	; (8009ce0 <prvCheckForValidListAndQueue+0x60>)
 8009cbe:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009cc0:	4b07      	ldr	r3, [pc, #28]	; (8009ce0 <prvCheckForValidListAndQueue+0x60>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d005      	beq.n	8009cd4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009cc8:	4b05      	ldr	r3, [pc, #20]	; (8009ce0 <prvCheckForValidListAndQueue+0x60>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	490b      	ldr	r1, [pc, #44]	; (8009cfc <prvCheckForValidListAndQueue+0x7c>)
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7fe fbc0 	bl	8008454 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009cd4:	f000 f968 	bl	8009fa8 <vPortExitCritical>
}
 8009cd8:	bf00      	nop
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	200010a0 	.word	0x200010a0
 8009ce4:	20001070 	.word	0x20001070
 8009ce8:	20001084 	.word	0x20001084
 8009cec:	20001098 	.word	0x20001098
 8009cf0:	2000109c 	.word	0x2000109c
 8009cf4:	20001124 	.word	0x20001124
 8009cf8:	200010ac 	.word	0x200010ac
 8009cfc:	0800dcf8 	.word	0x0800dcf8

08009d00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009d00:	b480      	push	{r7}
 8009d02:	b085      	sub	sp, #20
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	3b04      	subs	r3, #4
 8009d10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009d18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	3b04      	subs	r3, #4
 8009d1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	f023 0201 	bic.w	r2, r3, #1
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	3b04      	subs	r3, #4
 8009d2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009d30:	4a0c      	ldr	r2, [pc, #48]	; (8009d64 <pxPortInitialiseStack+0x64>)
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	3b14      	subs	r3, #20
 8009d3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	3b04      	subs	r3, #4
 8009d46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f06f 0202 	mvn.w	r2, #2
 8009d4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	3b20      	subs	r3, #32
 8009d54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009d56:	68fb      	ldr	r3, [r7, #12]
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3714      	adds	r7, #20
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr
 8009d64:	08009d69 	.word	0x08009d69

08009d68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009d72:	4b11      	ldr	r3, [pc, #68]	; (8009db8 <prvTaskExitError+0x50>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d7a:	d009      	beq.n	8009d90 <prvTaskExitError+0x28>
 8009d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d80:	f383 8811 	msr	BASEPRI, r3
 8009d84:	f3bf 8f6f 	isb	sy
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	60fb      	str	r3, [r7, #12]
 8009d8e:	e7fe      	b.n	8009d8e <prvTaskExitError+0x26>
 8009d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d94:	f383 8811 	msr	BASEPRI, r3
 8009d98:	f3bf 8f6f 	isb	sy
 8009d9c:	f3bf 8f4f 	dsb	sy
 8009da0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009da2:	bf00      	nop
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d0fc      	beq.n	8009da4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009daa:	bf00      	nop
 8009dac:	3714      	adds	r7, #20
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop
 8009db8:	20000010 	.word	0x20000010
 8009dbc:	00000000 	.word	0x00000000

08009dc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009dc0:	4b07      	ldr	r3, [pc, #28]	; (8009de0 <pxCurrentTCBConst2>)
 8009dc2:	6819      	ldr	r1, [r3, #0]
 8009dc4:	6808      	ldr	r0, [r1, #0]
 8009dc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dca:	f380 8809 	msr	PSP, r0
 8009dce:	f3bf 8f6f 	isb	sy
 8009dd2:	f04f 0000 	mov.w	r0, #0
 8009dd6:	f380 8811 	msr	BASEPRI, r0
 8009dda:	4770      	bx	lr
 8009ddc:	f3af 8000 	nop.w

08009de0 <pxCurrentTCBConst2>:
 8009de0:	20000f44 	.word	0x20000f44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009de4:	bf00      	nop
 8009de6:	bf00      	nop

08009de8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009de8:	4808      	ldr	r0, [pc, #32]	; (8009e0c <prvPortStartFirstTask+0x24>)
 8009dea:	6800      	ldr	r0, [r0, #0]
 8009dec:	6800      	ldr	r0, [r0, #0]
 8009dee:	f380 8808 	msr	MSP, r0
 8009df2:	f04f 0000 	mov.w	r0, #0
 8009df6:	f380 8814 	msr	CONTROL, r0
 8009dfa:	b662      	cpsie	i
 8009dfc:	b661      	cpsie	f
 8009dfe:	f3bf 8f4f 	dsb	sy
 8009e02:	f3bf 8f6f 	isb	sy
 8009e06:	df00      	svc	0
 8009e08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009e0a:	bf00      	nop
 8009e0c:	e000ed08 	.word	0xe000ed08

08009e10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b086      	sub	sp, #24
 8009e14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009e16:	4b44      	ldr	r3, [pc, #272]	; (8009f28 <xPortStartScheduler+0x118>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a44      	ldr	r2, [pc, #272]	; (8009f2c <xPortStartScheduler+0x11c>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d109      	bne.n	8009e34 <xPortStartScheduler+0x24>
 8009e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e24:	f383 8811 	msr	BASEPRI, r3
 8009e28:	f3bf 8f6f 	isb	sy
 8009e2c:	f3bf 8f4f 	dsb	sy
 8009e30:	613b      	str	r3, [r7, #16]
 8009e32:	e7fe      	b.n	8009e32 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009e34:	4b3c      	ldr	r3, [pc, #240]	; (8009f28 <xPortStartScheduler+0x118>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a3d      	ldr	r2, [pc, #244]	; (8009f30 <xPortStartScheduler+0x120>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d109      	bne.n	8009e52 <xPortStartScheduler+0x42>
 8009e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e42:	f383 8811 	msr	BASEPRI, r3
 8009e46:	f3bf 8f6f 	isb	sy
 8009e4a:	f3bf 8f4f 	dsb	sy
 8009e4e:	60fb      	str	r3, [r7, #12]
 8009e50:	e7fe      	b.n	8009e50 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009e52:	4b38      	ldr	r3, [pc, #224]	; (8009f34 <xPortStartScheduler+0x124>)
 8009e54:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	22ff      	movs	r2, #255	; 0xff
 8009e62:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e6c:	78fb      	ldrb	r3, [r7, #3]
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009e74:	b2da      	uxtb	r2, r3
 8009e76:	4b30      	ldr	r3, [pc, #192]	; (8009f38 <xPortStartScheduler+0x128>)
 8009e78:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e7a:	4b30      	ldr	r3, [pc, #192]	; (8009f3c <xPortStartScheduler+0x12c>)
 8009e7c:	2207      	movs	r2, #7
 8009e7e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e80:	e009      	b.n	8009e96 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009e82:	4b2e      	ldr	r3, [pc, #184]	; (8009f3c <xPortStartScheduler+0x12c>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	3b01      	subs	r3, #1
 8009e88:	4a2c      	ldr	r2, [pc, #176]	; (8009f3c <xPortStartScheduler+0x12c>)
 8009e8a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e8c:	78fb      	ldrb	r3, [r7, #3]
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	005b      	lsls	r3, r3, #1
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e96:	78fb      	ldrb	r3, [r7, #3]
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e9e:	2b80      	cmp	r3, #128	; 0x80
 8009ea0:	d0ef      	beq.n	8009e82 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009ea2:	4b26      	ldr	r3, [pc, #152]	; (8009f3c <xPortStartScheduler+0x12c>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f1c3 0307 	rsb	r3, r3, #7
 8009eaa:	2b04      	cmp	r3, #4
 8009eac:	d009      	beq.n	8009ec2 <xPortStartScheduler+0xb2>
 8009eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb2:	f383 8811 	msr	BASEPRI, r3
 8009eb6:	f3bf 8f6f 	isb	sy
 8009eba:	f3bf 8f4f 	dsb	sy
 8009ebe:	60bb      	str	r3, [r7, #8]
 8009ec0:	e7fe      	b.n	8009ec0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ec2:	4b1e      	ldr	r3, [pc, #120]	; (8009f3c <xPortStartScheduler+0x12c>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	021b      	lsls	r3, r3, #8
 8009ec8:	4a1c      	ldr	r2, [pc, #112]	; (8009f3c <xPortStartScheduler+0x12c>)
 8009eca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ecc:	4b1b      	ldr	r3, [pc, #108]	; (8009f3c <xPortStartScheduler+0x12c>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009ed4:	4a19      	ldr	r2, [pc, #100]	; (8009f3c <xPortStartScheduler+0x12c>)
 8009ed6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	b2da      	uxtb	r2, r3
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009ee0:	4b17      	ldr	r3, [pc, #92]	; (8009f40 <xPortStartScheduler+0x130>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a16      	ldr	r2, [pc, #88]	; (8009f40 <xPortStartScheduler+0x130>)
 8009ee6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009eea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009eec:	4b14      	ldr	r3, [pc, #80]	; (8009f40 <xPortStartScheduler+0x130>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a13      	ldr	r2, [pc, #76]	; (8009f40 <xPortStartScheduler+0x130>)
 8009ef2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009ef6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009ef8:	f000 f8d6 	bl	800a0a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009efc:	4b11      	ldr	r3, [pc, #68]	; (8009f44 <xPortStartScheduler+0x134>)
 8009efe:	2200      	movs	r2, #0
 8009f00:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009f02:	f000 f8f5 	bl	800a0f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009f06:	4b10      	ldr	r3, [pc, #64]	; (8009f48 <xPortStartScheduler+0x138>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a0f      	ldr	r2, [pc, #60]	; (8009f48 <xPortStartScheduler+0x138>)
 8009f0c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009f10:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009f12:	f7ff ff69 	bl	8009de8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009f16:	f7fe ff2d 	bl	8008d74 <vTaskSwitchContext>
	prvTaskExitError();
 8009f1a:	f7ff ff25 	bl	8009d68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009f1e:	2300      	movs	r3, #0
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3718      	adds	r7, #24
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	e000ed00 	.word	0xe000ed00
 8009f2c:	410fc271 	.word	0x410fc271
 8009f30:	410fc270 	.word	0x410fc270
 8009f34:	e000e400 	.word	0xe000e400
 8009f38:	20001170 	.word	0x20001170
 8009f3c:	20001174 	.word	0x20001174
 8009f40:	e000ed20 	.word	0xe000ed20
 8009f44:	20000010 	.word	0x20000010
 8009f48:	e000ef34 	.word	0xe000ef34

08009f4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f56:	f383 8811 	msr	BASEPRI, r3
 8009f5a:	f3bf 8f6f 	isb	sy
 8009f5e:	f3bf 8f4f 	dsb	sy
 8009f62:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009f64:	4b0e      	ldr	r3, [pc, #56]	; (8009fa0 <vPortEnterCritical+0x54>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	3301      	adds	r3, #1
 8009f6a:	4a0d      	ldr	r2, [pc, #52]	; (8009fa0 <vPortEnterCritical+0x54>)
 8009f6c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009f6e:	4b0c      	ldr	r3, [pc, #48]	; (8009fa0 <vPortEnterCritical+0x54>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d10e      	bne.n	8009f94 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f76:	4b0b      	ldr	r3, [pc, #44]	; (8009fa4 <vPortEnterCritical+0x58>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d009      	beq.n	8009f94 <vPortEnterCritical+0x48>
 8009f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f84:	f383 8811 	msr	BASEPRI, r3
 8009f88:	f3bf 8f6f 	isb	sy
 8009f8c:	f3bf 8f4f 	dsb	sy
 8009f90:	603b      	str	r3, [r7, #0]
 8009f92:	e7fe      	b.n	8009f92 <vPortEnterCritical+0x46>
	}
}
 8009f94:	bf00      	nop
 8009f96:	370c      	adds	r7, #12
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr
 8009fa0:	20000010 	.word	0x20000010
 8009fa4:	e000ed04 	.word	0xe000ed04

08009fa8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009fae:	4b11      	ldr	r3, [pc, #68]	; (8009ff4 <vPortExitCritical+0x4c>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d109      	bne.n	8009fca <vPortExitCritical+0x22>
 8009fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fba:	f383 8811 	msr	BASEPRI, r3
 8009fbe:	f3bf 8f6f 	isb	sy
 8009fc2:	f3bf 8f4f 	dsb	sy
 8009fc6:	607b      	str	r3, [r7, #4]
 8009fc8:	e7fe      	b.n	8009fc8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009fca:	4b0a      	ldr	r3, [pc, #40]	; (8009ff4 <vPortExitCritical+0x4c>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	4a08      	ldr	r2, [pc, #32]	; (8009ff4 <vPortExitCritical+0x4c>)
 8009fd2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009fd4:	4b07      	ldr	r3, [pc, #28]	; (8009ff4 <vPortExitCritical+0x4c>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d104      	bne.n	8009fe6 <vPortExitCritical+0x3e>
 8009fdc:	2300      	movs	r3, #0
 8009fde:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009fe6:	bf00      	nop
 8009fe8:	370c      	adds	r7, #12
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	20000010 	.word	0x20000010
	...

0800a000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a000:	f3ef 8009 	mrs	r0, PSP
 800a004:	f3bf 8f6f 	isb	sy
 800a008:	4b15      	ldr	r3, [pc, #84]	; (800a060 <pxCurrentTCBConst>)
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	f01e 0f10 	tst.w	lr, #16
 800a010:	bf08      	it	eq
 800a012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a01a:	6010      	str	r0, [r2, #0]
 800a01c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a020:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a024:	f380 8811 	msr	BASEPRI, r0
 800a028:	f3bf 8f4f 	dsb	sy
 800a02c:	f3bf 8f6f 	isb	sy
 800a030:	f7fe fea0 	bl	8008d74 <vTaskSwitchContext>
 800a034:	f04f 0000 	mov.w	r0, #0
 800a038:	f380 8811 	msr	BASEPRI, r0
 800a03c:	bc09      	pop	{r0, r3}
 800a03e:	6819      	ldr	r1, [r3, #0]
 800a040:	6808      	ldr	r0, [r1, #0]
 800a042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a046:	f01e 0f10 	tst.w	lr, #16
 800a04a:	bf08      	it	eq
 800a04c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a050:	f380 8809 	msr	PSP, r0
 800a054:	f3bf 8f6f 	isb	sy
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	f3af 8000 	nop.w

0800a060 <pxCurrentTCBConst>:
 800a060:	20000f44 	.word	0x20000f44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a064:	bf00      	nop
 800a066:	bf00      	nop

0800a068 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
	__asm volatile
 800a06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a072:	f383 8811 	msr	BASEPRI, r3
 800a076:	f3bf 8f6f 	isb	sy
 800a07a:	f3bf 8f4f 	dsb	sy
 800a07e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a080:	f7fe fdc0 	bl	8008c04 <xTaskIncrementTick>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d003      	beq.n	800a092 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a08a:	4b06      	ldr	r3, [pc, #24]	; (800a0a4 <SysTick_Handler+0x3c>)
 800a08c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a090:	601a      	str	r2, [r3, #0]
 800a092:	2300      	movs	r3, #0
 800a094:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a09c:	bf00      	nop
 800a09e:	3708      	adds	r7, #8
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	e000ed04 	.word	0xe000ed04

0800a0a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a0ac:	4b0b      	ldr	r3, [pc, #44]	; (800a0dc <vPortSetupTimerInterrupt+0x34>)
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a0b2:	4b0b      	ldr	r3, [pc, #44]	; (800a0e0 <vPortSetupTimerInterrupt+0x38>)
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a0b8:	4b0a      	ldr	r3, [pc, #40]	; (800a0e4 <vPortSetupTimerInterrupt+0x3c>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a0a      	ldr	r2, [pc, #40]	; (800a0e8 <vPortSetupTimerInterrupt+0x40>)
 800a0be:	fba2 2303 	umull	r2, r3, r2, r3
 800a0c2:	099b      	lsrs	r3, r3, #6
 800a0c4:	4a09      	ldr	r2, [pc, #36]	; (800a0ec <vPortSetupTimerInterrupt+0x44>)
 800a0c6:	3b01      	subs	r3, #1
 800a0c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a0ca:	4b04      	ldr	r3, [pc, #16]	; (800a0dc <vPortSetupTimerInterrupt+0x34>)
 800a0cc:	2207      	movs	r2, #7
 800a0ce:	601a      	str	r2, [r3, #0]
}
 800a0d0:	bf00      	nop
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop
 800a0dc:	e000e010 	.word	0xe000e010
 800a0e0:	e000e018 	.word	0xe000e018
 800a0e4:	20000004 	.word	0x20000004
 800a0e8:	10624dd3 	.word	0x10624dd3
 800a0ec:	e000e014 	.word	0xe000e014

0800a0f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a0f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a100 <vPortEnableVFP+0x10>
 800a0f4:	6801      	ldr	r1, [r0, #0]
 800a0f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a0fa:	6001      	str	r1, [r0, #0]
 800a0fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a0fe:	bf00      	nop
 800a100:	e000ed88 	.word	0xe000ed88

0800a104 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a104:	b480      	push	{r7}
 800a106:	b085      	sub	sp, #20
 800a108:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a10a:	f3ef 8305 	mrs	r3, IPSR
 800a10e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2b0f      	cmp	r3, #15
 800a114:	d913      	bls.n	800a13e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a116:	4a16      	ldr	r2, [pc, #88]	; (800a170 <vPortValidateInterruptPriority+0x6c>)
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	4413      	add	r3, r2
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a120:	4b14      	ldr	r3, [pc, #80]	; (800a174 <vPortValidateInterruptPriority+0x70>)
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	7afa      	ldrb	r2, [r7, #11]
 800a126:	429a      	cmp	r2, r3
 800a128:	d209      	bcs.n	800a13e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12e:	f383 8811 	msr	BASEPRI, r3
 800a132:	f3bf 8f6f 	isb	sy
 800a136:	f3bf 8f4f 	dsb	sy
 800a13a:	607b      	str	r3, [r7, #4]
 800a13c:	e7fe      	b.n	800a13c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a13e:	4b0e      	ldr	r3, [pc, #56]	; (800a178 <vPortValidateInterruptPriority+0x74>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a146:	4b0d      	ldr	r3, [pc, #52]	; (800a17c <vPortValidateInterruptPriority+0x78>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d909      	bls.n	800a162 <vPortValidateInterruptPriority+0x5e>
 800a14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a152:	f383 8811 	msr	BASEPRI, r3
 800a156:	f3bf 8f6f 	isb	sy
 800a15a:	f3bf 8f4f 	dsb	sy
 800a15e:	603b      	str	r3, [r7, #0]
 800a160:	e7fe      	b.n	800a160 <vPortValidateInterruptPriority+0x5c>
	}
 800a162:	bf00      	nop
 800a164:	3714      	adds	r7, #20
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr
 800a16e:	bf00      	nop
 800a170:	e000e3f0 	.word	0xe000e3f0
 800a174:	20001170 	.word	0x20001170
 800a178:	e000ed0c 	.word	0xe000ed0c
 800a17c:	20001174 	.word	0x20001174

0800a180 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b08a      	sub	sp, #40	; 0x28
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a188:	2300      	movs	r3, #0
 800a18a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a18c:	f7fe fc80 	bl	8008a90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a190:	4b57      	ldr	r3, [pc, #348]	; (800a2f0 <pvPortMalloc+0x170>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d101      	bne.n	800a19c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a198:	f000 f90c 	bl	800a3b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a19c:	4b55      	ldr	r3, [pc, #340]	; (800a2f4 <pvPortMalloc+0x174>)
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	4013      	ands	r3, r2
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	f040 808c 	bne.w	800a2c2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d01c      	beq.n	800a1ea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800a1b0:	2208      	movs	r2, #8
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f003 0307 	and.w	r3, r3, #7
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d013      	beq.n	800a1ea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f023 0307 	bic.w	r3, r3, #7
 800a1c8:	3308      	adds	r3, #8
 800a1ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f003 0307 	and.w	r3, r3, #7
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d009      	beq.n	800a1ea <pvPortMalloc+0x6a>
 800a1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1da:	f383 8811 	msr	BASEPRI, r3
 800a1de:	f3bf 8f6f 	isb	sy
 800a1e2:	f3bf 8f4f 	dsb	sy
 800a1e6:	617b      	str	r3, [r7, #20]
 800a1e8:	e7fe      	b.n	800a1e8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d068      	beq.n	800a2c2 <pvPortMalloc+0x142>
 800a1f0:	4b41      	ldr	r3, [pc, #260]	; (800a2f8 <pvPortMalloc+0x178>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d863      	bhi.n	800a2c2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a1fa:	4b40      	ldr	r3, [pc, #256]	; (800a2fc <pvPortMalloc+0x17c>)
 800a1fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a1fe:	4b3f      	ldr	r3, [pc, #252]	; (800a2fc <pvPortMalloc+0x17c>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a204:	e004      	b.n	800a210 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800a206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a208:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	429a      	cmp	r2, r3
 800a218:	d903      	bls.n	800a222 <pvPortMalloc+0xa2>
 800a21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d1f1      	bne.n	800a206 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a222:	4b33      	ldr	r3, [pc, #204]	; (800a2f0 <pvPortMalloc+0x170>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a228:	429a      	cmp	r2, r3
 800a22a:	d04a      	beq.n	800a2c2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a22c:	6a3b      	ldr	r3, [r7, #32]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2208      	movs	r2, #8
 800a232:	4413      	add	r3, r2
 800a234:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	6a3b      	ldr	r3, [r7, #32]
 800a23c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a240:	685a      	ldr	r2, [r3, #4]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	1ad2      	subs	r2, r2, r3
 800a246:	2308      	movs	r3, #8
 800a248:	005b      	lsls	r3, r3, #1
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d91e      	bls.n	800a28c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a24e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	4413      	add	r3, r2
 800a254:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	f003 0307 	and.w	r3, r3, #7
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d009      	beq.n	800a274 <pvPortMalloc+0xf4>
 800a260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a264:	f383 8811 	msr	BASEPRI, r3
 800a268:	f3bf 8f6f 	isb	sy
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	613b      	str	r3, [r7, #16]
 800a272:	e7fe      	b.n	800a272 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a276:	685a      	ldr	r2, [r3, #4]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	1ad2      	subs	r2, r2, r3
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a286:	69b8      	ldr	r0, [r7, #24]
 800a288:	f000 f8f6 	bl	800a478 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a28c:	4b1a      	ldr	r3, [pc, #104]	; (800a2f8 <pvPortMalloc+0x178>)
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	1ad3      	subs	r3, r2, r3
 800a296:	4a18      	ldr	r2, [pc, #96]	; (800a2f8 <pvPortMalloc+0x178>)
 800a298:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a29a:	4b17      	ldr	r3, [pc, #92]	; (800a2f8 <pvPortMalloc+0x178>)
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	4b18      	ldr	r3, [pc, #96]	; (800a300 <pvPortMalloc+0x180>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d203      	bcs.n	800a2ae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a2a6:	4b14      	ldr	r3, [pc, #80]	; (800a2f8 <pvPortMalloc+0x178>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a15      	ldr	r2, [pc, #84]	; (800a300 <pvPortMalloc+0x180>)
 800a2ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b0:	685a      	ldr	r2, [r3, #4]
 800a2b2:	4b10      	ldr	r3, [pc, #64]	; (800a2f4 <pvPortMalloc+0x174>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	431a      	orrs	r2, r3
 800a2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2be:	2200      	movs	r2, #0
 800a2c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a2c2:	f7fe fbf3 	bl	8008aac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	f003 0307 	and.w	r3, r3, #7
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d009      	beq.n	800a2e4 <pvPortMalloc+0x164>
 800a2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d4:	f383 8811 	msr	BASEPRI, r3
 800a2d8:	f3bf 8f6f 	isb	sy
 800a2dc:	f3bf 8f4f 	dsb	sy
 800a2e0:	60fb      	str	r3, [r7, #12]
 800a2e2:	e7fe      	b.n	800a2e2 <pvPortMalloc+0x162>
	return pvReturn;
 800a2e4:	69fb      	ldr	r3, [r7, #28]
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3728      	adds	r7, #40	; 0x28
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	2000d4d0 	.word	0x2000d4d0
 800a2f4:	2000d4dc 	.word	0x2000d4dc
 800a2f8:	2000d4d4 	.word	0x2000d4d4
 800a2fc:	2000d4c8 	.word	0x2000d4c8
 800a300:	2000d4d8 	.word	0x2000d4d8

0800a304 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b086      	sub	sp, #24
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d046      	beq.n	800a3a4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a316:	2308      	movs	r3, #8
 800a318:	425b      	negs	r3, r3
 800a31a:	697a      	ldr	r2, [r7, #20]
 800a31c:	4413      	add	r3, r2
 800a31e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	685a      	ldr	r2, [r3, #4]
 800a328:	4b20      	ldr	r3, [pc, #128]	; (800a3ac <vPortFree+0xa8>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4013      	ands	r3, r2
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d109      	bne.n	800a346 <vPortFree+0x42>
 800a332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a336:	f383 8811 	msr	BASEPRI, r3
 800a33a:	f3bf 8f6f 	isb	sy
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	60fb      	str	r3, [r7, #12]
 800a344:	e7fe      	b.n	800a344 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d009      	beq.n	800a362 <vPortFree+0x5e>
 800a34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a352:	f383 8811 	msr	BASEPRI, r3
 800a356:	f3bf 8f6f 	isb	sy
 800a35a:	f3bf 8f4f 	dsb	sy
 800a35e:	60bb      	str	r3, [r7, #8]
 800a360:	e7fe      	b.n	800a360 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	685a      	ldr	r2, [r3, #4]
 800a366:	4b11      	ldr	r3, [pc, #68]	; (800a3ac <vPortFree+0xa8>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4013      	ands	r3, r2
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d019      	beq.n	800a3a4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d115      	bne.n	800a3a4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	685a      	ldr	r2, [r3, #4]
 800a37c:	4b0b      	ldr	r3, [pc, #44]	; (800a3ac <vPortFree+0xa8>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	43db      	mvns	r3, r3
 800a382:	401a      	ands	r2, r3
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a388:	f7fe fb82 	bl	8008a90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	685a      	ldr	r2, [r3, #4]
 800a390:	4b07      	ldr	r3, [pc, #28]	; (800a3b0 <vPortFree+0xac>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4413      	add	r3, r2
 800a396:	4a06      	ldr	r2, [pc, #24]	; (800a3b0 <vPortFree+0xac>)
 800a398:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a39a:	6938      	ldr	r0, [r7, #16]
 800a39c:	f000 f86c 	bl	800a478 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a3a0:	f7fe fb84 	bl	8008aac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a3a4:	bf00      	nop
 800a3a6:	3718      	adds	r7, #24
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	2000d4dc 	.word	0x2000d4dc
 800a3b0:	2000d4d4 	.word	0x2000d4d4

0800a3b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b085      	sub	sp, #20
 800a3b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a3ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a3be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a3c0:	4b27      	ldr	r3, [pc, #156]	; (800a460 <prvHeapInit+0xac>)
 800a3c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f003 0307 	and.w	r3, r3, #7
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d00c      	beq.n	800a3e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	3307      	adds	r3, #7
 800a3d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f023 0307 	bic.w	r3, r3, #7
 800a3da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a3dc:	68ba      	ldr	r2, [r7, #8]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	1ad3      	subs	r3, r2, r3
 800a3e2:	4a1f      	ldr	r2, [pc, #124]	; (800a460 <prvHeapInit+0xac>)
 800a3e4:	4413      	add	r3, r2
 800a3e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a3ec:	4a1d      	ldr	r2, [pc, #116]	; (800a464 <prvHeapInit+0xb0>)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a3f2:	4b1c      	ldr	r3, [pc, #112]	; (800a464 <prvHeapInit+0xb0>)
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	68ba      	ldr	r2, [r7, #8]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a400:	2208      	movs	r2, #8
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	1a9b      	subs	r3, r3, r2
 800a406:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f023 0307 	bic.w	r3, r3, #7
 800a40e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	4a15      	ldr	r2, [pc, #84]	; (800a468 <prvHeapInit+0xb4>)
 800a414:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a416:	4b14      	ldr	r3, [pc, #80]	; (800a468 <prvHeapInit+0xb4>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	2200      	movs	r2, #0
 800a41c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a41e:	4b12      	ldr	r3, [pc, #72]	; (800a468 <prvHeapInit+0xb4>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	2200      	movs	r2, #0
 800a424:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	68fa      	ldr	r2, [r7, #12]
 800a42e:	1ad2      	subs	r2, r2, r3
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a434:	4b0c      	ldr	r3, [pc, #48]	; (800a468 <prvHeapInit+0xb4>)
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	4a0a      	ldr	r2, [pc, #40]	; (800a46c <prvHeapInit+0xb8>)
 800a442:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	4a09      	ldr	r2, [pc, #36]	; (800a470 <prvHeapInit+0xbc>)
 800a44a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a44c:	4b09      	ldr	r3, [pc, #36]	; (800a474 <prvHeapInit+0xc0>)
 800a44e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a452:	601a      	str	r2, [r3, #0]
}
 800a454:	bf00      	nop
 800a456:	3714      	adds	r7, #20
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr
 800a460:	20001178 	.word	0x20001178
 800a464:	2000d4c8 	.word	0x2000d4c8
 800a468:	2000d4d0 	.word	0x2000d4d0
 800a46c:	2000d4d8 	.word	0x2000d4d8
 800a470:	2000d4d4 	.word	0x2000d4d4
 800a474:	2000d4dc 	.word	0x2000d4dc

0800a478 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a478:	b480      	push	{r7}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a480:	4b28      	ldr	r3, [pc, #160]	; (800a524 <prvInsertBlockIntoFreeList+0xac>)
 800a482:	60fb      	str	r3, [r7, #12]
 800a484:	e002      	b.n	800a48c <prvInsertBlockIntoFreeList+0x14>
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	60fb      	str	r3, [r7, #12]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	687a      	ldr	r2, [r7, #4]
 800a492:	429a      	cmp	r2, r3
 800a494:	d8f7      	bhi.n	800a486 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	68ba      	ldr	r2, [r7, #8]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	687a      	ldr	r2, [r7, #4]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d108      	bne.n	800a4ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	685a      	ldr	r2, [r3, #4]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	441a      	add	r2, r3
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	68ba      	ldr	r2, [r7, #8]
 800a4c4:	441a      	add	r2, r3
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d118      	bne.n	800a500 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	4b15      	ldr	r3, [pc, #84]	; (800a528 <prvInsertBlockIntoFreeList+0xb0>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d00d      	beq.n	800a4f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	685a      	ldr	r2, [r3, #4]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	441a      	add	r2, r3
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	601a      	str	r2, [r3, #0]
 800a4f4:	e008      	b.n	800a508 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a4f6:	4b0c      	ldr	r3, [pc, #48]	; (800a528 <prvInsertBlockIntoFreeList+0xb0>)
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	601a      	str	r2, [r3, #0]
 800a4fe:	e003      	b.n	800a508 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681a      	ldr	r2, [r3, #0]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a508:	68fa      	ldr	r2, [r7, #12]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d002      	beq.n	800a516 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a516:	bf00      	nop
 800a518:	3714      	adds	r7, #20
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr
 800a522:	bf00      	nop
 800a524:	2000d4c8 	.word	0x2000d4c8
 800a528:	2000d4d0 	.word	0x2000d4d0

0800a52c <adc_interface_init>:
static ADC_HandleTypeDef m2;
static float current_ma_filt[2];
static float alpha = 0.99;

void adc_interface_init(ADC_HandleTypeDef ch1, ADC_HandleTypeDef ch2)
{
 800a52c:	b084      	sub	sp, #16
 800a52e:	b580      	push	{r7, lr}
 800a530:	af00      	add	r7, sp, #0
 800a532:	f107 0c08 	add.w	ip, r7, #8
 800a536:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	m1 = ch1;
 800a53a:	4b0e      	ldr	r3, [pc, #56]	; (800a574 <adc_interface_init+0x48>)
 800a53c:	4618      	mov	r0, r3
 800a53e:	f107 0108 	add.w	r1, r7, #8
 800a542:	2348      	movs	r3, #72	; 0x48
 800a544:	461a      	mov	r2, r3
 800a546:	f002 fcf1 	bl	800cf2c <memcpy>
	m2 = ch2;
 800a54a:	4b0b      	ldr	r3, [pc, #44]	; (800a578 <adc_interface_init+0x4c>)
 800a54c:	4618      	mov	r0, r3
 800a54e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a552:	2248      	movs	r2, #72	; 0x48
 800a554:	4619      	mov	r1, r3
 800a556:	f002 fce9 	bl	800cf2c <memcpy>
	HAL_ADC_Start(&m1);
 800a55a:	4806      	ldr	r0, [pc, #24]	; (800a574 <adc_interface_init+0x48>)
 800a55c:	f7f9 fdb6 	bl	80040cc <HAL_ADC_Start>
	HAL_ADC_Start(&m2);
 800a560:	4805      	ldr	r0, [pc, #20]	; (800a578 <adc_interface_init+0x4c>)
 800a562:	f7f9 fdb3 	bl	80040cc <HAL_ADC_Start>
}
 800a566:	bf00      	nop
 800a568:	46bd      	mov	sp, r7
 800a56a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a56e:	b004      	add	sp, #16
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop
 800a574:	2000d4e0 	.word	0x2000d4e0
 800a578:	2000d528 	.word	0x2000d528
 800a57c:	00000000 	.word	0x00000000

0800a580 <sample_filter_adc>:

void sample_filter_adc(void)
{
 800a580:	b590      	push	{r4, r7, lr}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
	uint8_t channel = 0;
 800a586:	2300      	movs	r3, #0
 800a588:	71fb      	strb	r3, [r7, #7]
	HAL_ADC_PollForConversion(&m1, 5);
 800a58a:	2105      	movs	r1, #5
 800a58c:	485a      	ldr	r0, [pc, #360]	; (800a6f8 <sample_filter_adc+0x178>)
 800a58e:	f7f9 fe63 	bl	8004258 <HAL_ADC_PollForConversion>
	uint16_t raw = HAL_ADC_GetValue(&m1);
 800a592:	4859      	ldr	r0, [pc, #356]	; (800a6f8 <sample_filter_adc+0x178>)
 800a594:	f7fa f825 	bl	80045e2 <HAL_ADC_GetValue>
 800a598:	4603      	mov	r3, r0
 800a59a:	80bb      	strh	r3, [r7, #4]
	float current_ma_f = ((((raw / 4095.0) * 3.0)/2.15) * 1000.0);
 800a59c:	88bb      	ldrh	r3, [r7, #4]
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7f5 ff68 	bl	8000474 <__aeabi_i2d>
 800a5a4:	a350      	add	r3, pc, #320	; (adr r3, 800a6e8 <sample_filter_adc+0x168>)
 800a5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5aa:	f7f6 f8f7 	bl	800079c <__aeabi_ddiv>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	460c      	mov	r4, r1
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	4621      	mov	r1, r4
 800a5b6:	f04f 0200 	mov.w	r2, #0
 800a5ba:	4b50      	ldr	r3, [pc, #320]	; (800a6fc <sample_filter_adc+0x17c>)
 800a5bc:	f7f5 ffc4 	bl	8000548 <__aeabi_dmul>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	460c      	mov	r4, r1
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	4621      	mov	r1, r4
 800a5c8:	a349      	add	r3, pc, #292	; (adr r3, 800a6f0 <sample_filter_adc+0x170>)
 800a5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ce:	f7f6 f8e5 	bl	800079c <__aeabi_ddiv>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	460c      	mov	r4, r1
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	4621      	mov	r1, r4
 800a5da:	f04f 0200 	mov.w	r2, #0
 800a5de:	4b48      	ldr	r3, [pc, #288]	; (800a700 <sample_filter_adc+0x180>)
 800a5e0:	f7f5 ffb2 	bl	8000548 <__aeabi_dmul>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	460c      	mov	r4, r1
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	4621      	mov	r1, r4
 800a5ec:	f7f6 fa84 	bl	8000af8 <__aeabi_d2f>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	603b      	str	r3, [r7, #0]
	current_ma_filt[channel] = alpha * current_ma_filt[channel] + (1.0f-alpha) * current_ma_f;
 800a5f4:	79fb      	ldrb	r3, [r7, #7]
 800a5f6:	4a43      	ldr	r2, [pc, #268]	; (800a704 <sample_filter_adc+0x184>)
 800a5f8:	009b      	lsls	r3, r3, #2
 800a5fa:	4413      	add	r3, r2
 800a5fc:	ed93 7a00 	vldr	s14, [r3]
 800a600:	4b41      	ldr	r3, [pc, #260]	; (800a708 <sample_filter_adc+0x188>)
 800a602:	edd3 7a00 	vldr	s15, [r3]
 800a606:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a60a:	4b3f      	ldr	r3, [pc, #252]	; (800a708 <sample_filter_adc+0x188>)
 800a60c:	edd3 7a00 	vldr	s15, [r3]
 800a610:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a614:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a618:	edd7 7a00 	vldr	s15, [r7]
 800a61c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a620:	79fb      	ldrb	r3, [r7, #7]
 800a622:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a626:	4a37      	ldr	r2, [pc, #220]	; (800a704 <sample_filter_adc+0x184>)
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	4413      	add	r3, r2
 800a62c:	edc3 7a00 	vstr	s15, [r3]

	channel = 1;
 800a630:	2301      	movs	r3, #1
 800a632:	71fb      	strb	r3, [r7, #7]
	HAL_ADC_PollForConversion(&m2, 5);
 800a634:	2105      	movs	r1, #5
 800a636:	4835      	ldr	r0, [pc, #212]	; (800a70c <sample_filter_adc+0x18c>)
 800a638:	f7f9 fe0e 	bl	8004258 <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&m2);
 800a63c:	4833      	ldr	r0, [pc, #204]	; (800a70c <sample_filter_adc+0x18c>)
 800a63e:	f7f9 ffd0 	bl	80045e2 <HAL_ADC_GetValue>
 800a642:	4603      	mov	r3, r0
 800a644:	80bb      	strh	r3, [r7, #4]
	current_ma_f = ((((raw / 4095.0) * 3.0)/2.15) * 1000.0);
 800a646:	88bb      	ldrh	r3, [r7, #4]
 800a648:	4618      	mov	r0, r3
 800a64a:	f7f5 ff13 	bl	8000474 <__aeabi_i2d>
 800a64e:	a326      	add	r3, pc, #152	; (adr r3, 800a6e8 <sample_filter_adc+0x168>)
 800a650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a654:	f7f6 f8a2 	bl	800079c <__aeabi_ddiv>
 800a658:	4603      	mov	r3, r0
 800a65a:	460c      	mov	r4, r1
 800a65c:	4618      	mov	r0, r3
 800a65e:	4621      	mov	r1, r4
 800a660:	f04f 0200 	mov.w	r2, #0
 800a664:	4b25      	ldr	r3, [pc, #148]	; (800a6fc <sample_filter_adc+0x17c>)
 800a666:	f7f5 ff6f 	bl	8000548 <__aeabi_dmul>
 800a66a:	4603      	mov	r3, r0
 800a66c:	460c      	mov	r4, r1
 800a66e:	4618      	mov	r0, r3
 800a670:	4621      	mov	r1, r4
 800a672:	a31f      	add	r3, pc, #124	; (adr r3, 800a6f0 <sample_filter_adc+0x170>)
 800a674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a678:	f7f6 f890 	bl	800079c <__aeabi_ddiv>
 800a67c:	4603      	mov	r3, r0
 800a67e:	460c      	mov	r4, r1
 800a680:	4618      	mov	r0, r3
 800a682:	4621      	mov	r1, r4
 800a684:	f04f 0200 	mov.w	r2, #0
 800a688:	4b1d      	ldr	r3, [pc, #116]	; (800a700 <sample_filter_adc+0x180>)
 800a68a:	f7f5 ff5d 	bl	8000548 <__aeabi_dmul>
 800a68e:	4603      	mov	r3, r0
 800a690:	460c      	mov	r4, r1
 800a692:	4618      	mov	r0, r3
 800a694:	4621      	mov	r1, r4
 800a696:	f7f6 fa2f 	bl	8000af8 <__aeabi_d2f>
 800a69a:	4603      	mov	r3, r0
 800a69c:	603b      	str	r3, [r7, #0]
	current_ma_filt[channel] = alpha * current_ma_filt[channel] + (1.0f-alpha) * current_ma_f;
 800a69e:	79fb      	ldrb	r3, [r7, #7]
 800a6a0:	4a18      	ldr	r2, [pc, #96]	; (800a704 <sample_filter_adc+0x184>)
 800a6a2:	009b      	lsls	r3, r3, #2
 800a6a4:	4413      	add	r3, r2
 800a6a6:	ed93 7a00 	vldr	s14, [r3]
 800a6aa:	4b17      	ldr	r3, [pc, #92]	; (800a708 <sample_filter_adc+0x188>)
 800a6ac:	edd3 7a00 	vldr	s15, [r3]
 800a6b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a6b4:	4b14      	ldr	r3, [pc, #80]	; (800a708 <sample_filter_adc+0x188>)
 800a6b6:	edd3 7a00 	vldr	s15, [r3]
 800a6ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6be:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a6c2:	edd7 7a00 	vldr	s15, [r7]
 800a6c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a6ca:	79fb      	ldrb	r3, [r7, #7]
 800a6cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6d0:	4a0c      	ldr	r2, [pc, #48]	; (800a704 <sample_filter_adc+0x184>)
 800a6d2:	009b      	lsls	r3, r3, #2
 800a6d4:	4413      	add	r3, r2
 800a6d6:	edc3 7a00 	vstr	s15, [r3]
}
 800a6da:	bf00      	nop
 800a6dc:	370c      	adds	r7, #12
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd90      	pop	{r4, r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	f3af 8000 	nop.w
 800a6e8:	00000000 	.word	0x00000000
 800a6ec:	40affe00 	.word	0x40affe00
 800a6f0:	33333333 	.word	0x33333333
 800a6f4:	40013333 	.word	0x40013333
 800a6f8:	2000d4e0 	.word	0x2000d4e0
 800a6fc:	40080000 	.word	0x40080000
 800a700:	408f4000 	.word	0x408f4000
 800a704:	2000d570 	.word	0x2000d570
 800a708:	20000014 	.word	0x20000014
 800a70c:	2000d528 	.word	0x2000d528

0800a710 <get_motor_current_ma>:

uint32_t get_motor_current_ma(uint8_t channel)
{
 800a710:	b480      	push	{r7}
 800a712:	b085      	sub	sp, #20
 800a714:	af00      	add	r7, sp, #0
 800a716:	4603      	mov	r3, r0
 800a718:	71fb      	strb	r3, [r7, #7]
	if(channel == 0)
 800a71a:	79fb      	ldrb	r3, [r7, #7]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d10c      	bne.n	800a73a <get_motor_current_ma+0x2a>
	{
		uint32_t current_ma = (uint32_t) current_ma_filt[channel];
 800a720:	79fb      	ldrb	r3, [r7, #7]
 800a722:	4a11      	ldr	r2, [pc, #68]	; (800a768 <get_motor_current_ma+0x58>)
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	4413      	add	r3, r2
 800a728:	edd3 7a00 	vldr	s15, [r3]
 800a72c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a730:	ee17 3a90 	vmov	r3, s15
 800a734:	60bb      	str	r3, [r7, #8]
		return current_ma;
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	e010      	b.n	800a75c <get_motor_current_ma+0x4c>
	}
	else if(channel == 1)
 800a73a:	79fb      	ldrb	r3, [r7, #7]
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d10c      	bne.n	800a75a <get_motor_current_ma+0x4a>
	{
		uint32_t current_ma = (uint32_t) current_ma_filt[channel];
 800a740:	79fb      	ldrb	r3, [r7, #7]
 800a742:	4a09      	ldr	r2, [pc, #36]	; (800a768 <get_motor_current_ma+0x58>)
 800a744:	009b      	lsls	r3, r3, #2
 800a746:	4413      	add	r3, r2
 800a748:	edd3 7a00 	vldr	s15, [r3]
 800a74c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a750:	ee17 3a90 	vmov	r3, s15
 800a754:	60fb      	str	r3, [r7, #12]
		return current_ma;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	e000      	b.n	800a75c <get_motor_current_ma+0x4c>
	}
	else
	{
		return 0;
 800a75a:	2300      	movs	r3, #0
	}
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3714      	adds	r7, #20
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr
 800a768:	2000d570 	.word	0x2000d570

0800a76c <unpack_can_message>:
 */

#include "can_messages.h"

 void unpack_can_message(can_message_id_t * msg)
 {
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
	msg->can_msg_type = ((msg->raw_id & CAN_MSG_TYPE_MASK) >> CAN_MSG_TYPE_SHIFT);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	0a9b      	lsrs	r3, r3, #10
 800a77a:	f003 0201 	and.w	r2, r3, #1
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	605a      	str	r2, [r3, #4]
	msg->can_class = ((msg->raw_id & CAN_MSG_CLASS_MASK) >> CAN_MSG_CLASS_SHIFT);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	09db      	lsrs	r3, r3, #7
 800a788:	f003 0207 	and.w	r2, r3, #7
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	609a      	str	r2, [r3, #8]
	msg->can_index = ((msg->raw_id & CAN_MSG_INDEX_MASK) >> CAN_MSG_INDEX_SHIFT);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	091b      	lsrs	r3, r3, #4
 800a796:	f003 0207 	and.w	r2, r3, #7
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	60da      	str	r2, [r3, #12]
	msg->can_device = ((msg->raw_id & CAN_MSG_DEVICE_MASK) >> CAN_MSG_DEVICE_SHIFT);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f003 020f 	and.w	r2, r3, #15
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	611a      	str	r2, [r3, #16]
 }
 800a7aa:	bf00      	nop
 800a7ac:	370c      	adds	r7, #12
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr

0800a7b6 <pack_can_message>:

 void pack_can_message(can_message_id_t * msg)
 {
 800a7b6:	b480      	push	{r7}
 800a7b8:	b083      	sub	sp, #12
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
	msg->raw_id = ((msg->can_msg_type << CAN_MSG_TYPE_SHIFT) & CAN_MSG_TYPE_MASK);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	029b      	lsls	r3, r3, #10
 800a7c4:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	601a      	str	r2, [r3, #0]
	msg->raw_id |= ((msg->can_class << CAN_MSG_CLASS_SHIFT) & CAN_MSG_CLASS_MASK);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	01db      	lsls	r3, r3, #7
 800a7d6:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800a7da:	431a      	orrs	r2, r3
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	601a      	str	r2, [r3, #0]
	msg->raw_id |= ((msg->can_index << CAN_MSG_INDEX_SHIFT) & CAN_MSG_INDEX_MASK);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	011b      	lsls	r3, r3, #4
 800a7ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a7ee:	431a      	orrs	r2, r3
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	601a      	str	r2, [r3, #0]
	msg->raw_id |= ((msg->can_device << CAN_MSG_DEVICE_SHIFT) & CAN_MSG_DEVICE_MASK);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	691b      	ldr	r3, [r3, #16]
 800a7fc:	f003 030f 	and.w	r3, r3, #15
 800a800:	431a      	orrs	r2, r3
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	601a      	str	r2, [r3, #0]
 }
 800a806:	bf00      	nop
 800a808:	370c      	adds	r7, #12
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr
	...

0800a814 <get_motor_encoder_ticks>:
 static volatile int32_t ticks_offset[NUMBER_MOTORS] = {0};
 static volatile int32_t ticks_count[NUMBER_MOTORS] = {0};
 static volatile uint16_t last_cnt[NUMBER_MOTORS] = {0};

 int32_t get_motor_encoder_ticks(uint8_t channel)
 {
 800a814:	b480      	push	{r7}
 800a816:	b085      	sub	sp, #20
 800a818:	af00      	add	r7, sp, #0
 800a81a:	4603      	mov	r3, r0
 800a81c:	71fb      	strb	r3, [r7, #7]
	 if(channel == 0)
 800a81e:	79fb      	ldrb	r3, [r7, #7]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d143      	bne.n	800a8ac <get_motor_encoder_ticks+0x98>
	 {
		 uint16_t current_count =  TIM1->CNT;
 800a824:	4b4c      	ldr	r3, [pc, #304]	; (800a958 <get_motor_encoder_ticks+0x144>)
 800a826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a828:	81bb      	strh	r3, [r7, #12]
		 // Check for rollover
		 if(current_count < 5000 && last_cnt[channel] > 60000)
 800a82a:	89bb      	ldrh	r3, [r7, #12]
 800a82c:	f241 3287 	movw	r2, #4999	; 0x1387
 800a830:	4293      	cmp	r3, r2
 800a832:	d813      	bhi.n	800a85c <get_motor_encoder_ticks+0x48>
 800a834:	79fb      	ldrb	r3, [r7, #7]
 800a836:	4a49      	ldr	r2, [pc, #292]	; (800a95c <get_motor_encoder_ticks+0x148>)
 800a838:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	f64e 2260 	movw	r2, #60000	; 0xea60
 800a842:	4293      	cmp	r3, r2
 800a844:	d90a      	bls.n	800a85c <get_motor_encoder_ticks+0x48>
		 {
			 // Overflow
			 ticks_offset[channel] += 65536;
 800a846:	79fb      	ldrb	r3, [r7, #7]
 800a848:	4a45      	ldr	r2, [pc, #276]	; (800a960 <get_motor_encoder_ticks+0x14c>)
 800a84a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a84e:	79fb      	ldrb	r3, [r7, #7]
 800a850:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800a854:	4942      	ldr	r1, [pc, #264]	; (800a960 <get_motor_encoder_ticks+0x14c>)
 800a856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a85a:	e017      	b.n	800a88c <get_motor_encoder_ticks+0x78>
		 }
		 else if(current_count > 60000 && last_cnt[channel] < 5000)
 800a85c:	89bb      	ldrh	r3, [r7, #12]
 800a85e:	f64e 2260 	movw	r2, #60000	; 0xea60
 800a862:	4293      	cmp	r3, r2
 800a864:	d912      	bls.n	800a88c <get_motor_encoder_ticks+0x78>
 800a866:	79fb      	ldrb	r3, [r7, #7]
 800a868:	4a3c      	ldr	r2, [pc, #240]	; (800a95c <get_motor_encoder_ticks+0x148>)
 800a86a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a86e:	b29b      	uxth	r3, r3
 800a870:	f241 3287 	movw	r2, #4999	; 0x1387
 800a874:	4293      	cmp	r3, r2
 800a876:	d809      	bhi.n	800a88c <get_motor_encoder_ticks+0x78>
		 {
			 // Underflow
			 ticks_offset[channel] -= 65536;
 800a878:	79fb      	ldrb	r3, [r7, #7]
 800a87a:	4a39      	ldr	r2, [pc, #228]	; (800a960 <get_motor_encoder_ticks+0x14c>)
 800a87c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a880:	79fb      	ldrb	r3, [r7, #7]
 800a882:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 800a886:	4936      	ldr	r1, [pc, #216]	; (800a960 <get_motor_encoder_ticks+0x14c>)
 800a888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		 }

		 last_cnt[channel] = current_count;
 800a88c:	79fb      	ldrb	r3, [r7, #7]
 800a88e:	4933      	ldr	r1, [pc, #204]	; (800a95c <get_motor_encoder_ticks+0x148>)
 800a890:	89ba      	ldrh	r2, [r7, #12]
 800a892:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		 ticks_count[channel] = current_count + ticks_offset[channel];
 800a896:	89b9      	ldrh	r1, [r7, #12]
 800a898:	79fb      	ldrb	r3, [r7, #7]
 800a89a:	4a31      	ldr	r2, [pc, #196]	; (800a960 <get_motor_encoder_ticks+0x14c>)
 800a89c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a8a0:	79fb      	ldrb	r3, [r7, #7]
 800a8a2:	440a      	add	r2, r1
 800a8a4:	492f      	ldr	r1, [pc, #188]	; (800a964 <get_motor_encoder_ticks+0x150>)
 800a8a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a8aa:	e04b      	b.n	800a944 <get_motor_encoder_ticks+0x130>
	 }
	 else if(channel == 1)
 800a8ac:	79fb      	ldrb	r3, [r7, #7]
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d143      	bne.n	800a93a <get_motor_encoder_ticks+0x126>
	 {
		 uint16_t current_count =  TIM3->CNT;
 800a8b2:	4b2d      	ldr	r3, [pc, #180]	; (800a968 <get_motor_encoder_ticks+0x154>)
 800a8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b6:	81fb      	strh	r3, [r7, #14]
		 // Check for rollover
		 if(current_count < 5000 && last_cnt[channel] > 60000)
 800a8b8:	89fb      	ldrh	r3, [r7, #14]
 800a8ba:	f241 3287 	movw	r2, #4999	; 0x1387
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d813      	bhi.n	800a8ea <get_motor_encoder_ticks+0xd6>
 800a8c2:	79fb      	ldrb	r3, [r7, #7]
 800a8c4:	4a25      	ldr	r2, [pc, #148]	; (800a95c <get_motor_encoder_ticks+0x148>)
 800a8c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	f64e 2260 	movw	r2, #60000	; 0xea60
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d90a      	bls.n	800a8ea <get_motor_encoder_ticks+0xd6>
		 {
			 // Overflow
			 ticks_offset[channel] += 65536;
 800a8d4:	79fb      	ldrb	r3, [r7, #7]
 800a8d6:	4a22      	ldr	r2, [pc, #136]	; (800a960 <get_motor_encoder_ticks+0x14c>)
 800a8d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a8dc:	79fb      	ldrb	r3, [r7, #7]
 800a8de:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800a8e2:	491f      	ldr	r1, [pc, #124]	; (800a960 <get_motor_encoder_ticks+0x14c>)
 800a8e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a8e8:	e017      	b.n	800a91a <get_motor_encoder_ticks+0x106>
		 }
		 else if(current_count > 60000 && last_cnt[channel] < 5000)
 800a8ea:	89fb      	ldrh	r3, [r7, #14]
 800a8ec:	f64e 2260 	movw	r2, #60000	; 0xea60
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d912      	bls.n	800a91a <get_motor_encoder_ticks+0x106>
 800a8f4:	79fb      	ldrb	r3, [r7, #7]
 800a8f6:	4a19      	ldr	r2, [pc, #100]	; (800a95c <get_motor_encoder_ticks+0x148>)
 800a8f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	f241 3287 	movw	r2, #4999	; 0x1387
 800a902:	4293      	cmp	r3, r2
 800a904:	d809      	bhi.n	800a91a <get_motor_encoder_ticks+0x106>
		 {
			 // Underflow
			 ticks_offset[channel] -= 65536;
 800a906:	79fb      	ldrb	r3, [r7, #7]
 800a908:	4a15      	ldr	r2, [pc, #84]	; (800a960 <get_motor_encoder_ticks+0x14c>)
 800a90a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a90e:	79fb      	ldrb	r3, [r7, #7]
 800a910:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 800a914:	4912      	ldr	r1, [pc, #72]	; (800a960 <get_motor_encoder_ticks+0x14c>)
 800a916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		 }

		 last_cnt[channel] = current_count;
 800a91a:	79fb      	ldrb	r3, [r7, #7]
 800a91c:	490f      	ldr	r1, [pc, #60]	; (800a95c <get_motor_encoder_ticks+0x148>)
 800a91e:	89fa      	ldrh	r2, [r7, #14]
 800a920:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		 ticks_count[channel] = current_count + ticks_offset[channel];
 800a924:	89f9      	ldrh	r1, [r7, #14]
 800a926:	79fb      	ldrb	r3, [r7, #7]
 800a928:	4a0d      	ldr	r2, [pc, #52]	; (800a960 <get_motor_encoder_ticks+0x14c>)
 800a92a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a92e:	79fb      	ldrb	r3, [r7, #7]
 800a930:	440a      	add	r2, r1
 800a932:	490c      	ldr	r1, [pc, #48]	; (800a964 <get_motor_encoder_ticks+0x150>)
 800a934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a938:	e004      	b.n	800a944 <get_motor_encoder_ticks+0x130>
	 }
	 else if(channel >= NUMBER_MOTORS)
 800a93a:	79fb      	ldrb	r3, [r7, #7]
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d901      	bls.n	800a944 <get_motor_encoder_ticks+0x130>
	 {
		return 0;
 800a940:	2300      	movs	r3, #0
 800a942:	e003      	b.n	800a94c <get_motor_encoder_ticks+0x138>
	 }
	 return ticks_count[channel];
 800a944:	79fb      	ldrb	r3, [r7, #7]
 800a946:	4a07      	ldr	r2, [pc, #28]	; (800a964 <get_motor_encoder_ticks+0x150>)
 800a948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 }
 800a94c:	4618      	mov	r0, r3
 800a94e:	3714      	adds	r7, #20
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr
 800a958:	40010000 	.word	0x40010000
 800a95c:	2000d588 	.word	0x2000d588
 800a960:	2000d578 	.word	0x2000d578
 800a964:	2000d580 	.word	0x2000d580
 800a968:	40000400 	.word	0x40000400

0800a96c <set_motor_encoder_ticks>:

 void set_motor_encoder_ticks(uint8_t channel, int32_t ticks)
 {
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	4603      	mov	r3, r0
 800a974:	6039      	str	r1, [r7, #0]
 800a976:	71fb      	strb	r3, [r7, #7]
	if(channel >= NUMBER_MOTORS)
 800a978:	79fb      	ldrb	r3, [r7, #7]
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d80f      	bhi.n	800a99e <set_motor_encoder_ticks+0x32>
	{
		return;
	}
	// TODO check this
	ticks_offset[channel] += (ticks - ticks_count[channel]);
 800a97e:	79fb      	ldrb	r3, [r7, #7]
 800a980:	4a0a      	ldr	r2, [pc, #40]	; (800a9ac <set_motor_encoder_ticks+0x40>)
 800a982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a986:	683a      	ldr	r2, [r7, #0]
 800a988:	1ad1      	subs	r1, r2, r3
 800a98a:	79fb      	ldrb	r3, [r7, #7]
 800a98c:	4a08      	ldr	r2, [pc, #32]	; (800a9b0 <set_motor_encoder_ticks+0x44>)
 800a98e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a992:	79fb      	ldrb	r3, [r7, #7]
 800a994:	440a      	add	r2, r1
 800a996:	4906      	ldr	r1, [pc, #24]	; (800a9b0 <set_motor_encoder_ticks+0x44>)
 800a998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a99c:	e000      	b.n	800a9a0 <set_motor_encoder_ticks+0x34>
		return;
 800a99e:	bf00      	nop
 }
 800a9a0:	370c      	adds	r7, #12
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr
 800a9aa:	bf00      	nop
 800a9ac:	2000d580 	.word	0x2000d580
 800a9b0:	2000d578 	.word	0x2000d578

0800a9b4 <precalc_inverse_trig>:
static float acos_div = 0.1;
static float atan_div = 0.1;
int32_t half_range = 10;

void precalc_inverse_trig(void)
{
 800a9b4:	b590      	push	{r4, r7, lr}
 800a9b6:	b085      	sub	sp, #20
 800a9b8:	af00      	add	r7, sp, #0
	int32_t i;
	// acos domain from -1 to 1
	float darg = 2.0 / NUM_ELEMENTS_IT;
 800a9ba:	4b42      	ldr	r3, [pc, #264]	; (800aac4 <precalc_inverse_trig+0x110>)
 800a9bc:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < NUM_ELEMENTS_IT; i++)
 800a9be:	2300      	movs	r3, #0
 800a9c0:	60fb      	str	r3, [r7, #12]
 800a9c2:	e031      	b.n	800aa28 <precalc_inverse_trig+0x74>
	{
		float arg = -1.0 + i*darg;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	ee07 3a90 	vmov	s15, r3
 800a9ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a9ce:	edd7 7a02 	vldr	s15, [r7, #8]
 800a9d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a9da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a9de:	edc7 7a00 	vstr	s15, [r7]
		acos_arg_table[i] = arg;
 800a9e2:	4a39      	ldr	r2, [pc, #228]	; (800aac8 <precalc_inverse_trig+0x114>)
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	009b      	lsls	r3, r3, #2
 800a9e8:	4413      	add	r3, r2
 800a9ea:	683a      	ldr	r2, [r7, #0]
 800a9ec:	601a      	str	r2, [r3, #0]
		acos_out_table[i] = acos(acos_arg_table[i]);
 800a9ee:	4a36      	ldr	r2, [pc, #216]	; (800aac8 <precalc_inverse_trig+0x114>)
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	4413      	add	r3, r2
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7f5 fd4d 	bl	8000498 <__aeabi_f2d>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	460c      	mov	r4, r1
 800aa02:	ec44 3b10 	vmov	d0, r3, r4
 800aa06:	f002 fc51 	bl	800d2ac <acos>
 800aa0a:	ec54 3b10 	vmov	r3, r4, d0
 800aa0e:	4618      	mov	r0, r3
 800aa10:	4621      	mov	r1, r4
 800aa12:	f7f6 f871 	bl	8000af8 <__aeabi_d2f>
 800aa16:	4601      	mov	r1, r0
 800aa18:	4a2c      	ldr	r2, [pc, #176]	; (800aacc <precalc_inverse_trig+0x118>)
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	4413      	add	r3, r2
 800aa20:	6019      	str	r1, [r3, #0]
	for(i = 0; i < NUM_ELEMENTS_IT; i++)
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	3301      	adds	r3, #1
 800aa26:	60fb      	str	r3, [r7, #12]
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800aa2e:	dbc9      	blt.n	800a9c4 <precalc_inverse_trig+0x10>
	}
	acos_div = 1.0f / (1.0f / (NUM_ELEMENTS_IT/2));
 800aa30:	4b27      	ldr	r3, [pc, #156]	; (800aad0 <precalc_inverse_trig+0x11c>)
 800aa32:	4a28      	ldr	r2, [pc, #160]	; (800aad4 <precalc_inverse_trig+0x120>)
 800aa34:	601a      	str	r2, [r3, #0]
	half_range = NUM_ELEMENTS_IT / 2;
 800aa36:	4b28      	ldr	r3, [pc, #160]	; (800aad8 <precalc_inverse_trig+0x124>)
 800aa38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aa3c:	601a      	str	r2, [r3, #0]

	// atan domain all real numbers, but asymptotic to +-pi/2 outside of roughly +-20.0
	darg = (2.0 * ATAN_ARG_RANGE) / NUM_ELEMENTS_IT;
 800aa3e:	4b27      	ldr	r3, [pc, #156]	; (800aadc <precalc_inverse_trig+0x128>)
 800aa40:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < NUM_ELEMENTS_IT; i++)
 800aa42:	2300      	movs	r3, #0
 800aa44:	60fb      	str	r3, [r7, #12]
 800aa46:	e031      	b.n	800aaac <precalc_inverse_trig+0xf8>
	{
		float arg = -ATAN_ARG_RANGE + i*darg;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	ee07 3a90 	vmov	s15, r3
 800aa4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa52:	edd7 7a02 	vldr	s15, [r7, #8]
 800aa56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa5a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800aa5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aa62:	edc7 7a01 	vstr	s15, [r7, #4]
		atan_arg_table[i] = arg;
 800aa66:	4a1e      	ldr	r2, [pc, #120]	; (800aae0 <precalc_inverse_trig+0x12c>)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	4413      	add	r3, r2
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	601a      	str	r2, [r3, #0]
		atan_out_table[i] = atan(atan_arg_table[i]);
 800aa72:	4a1b      	ldr	r2, [pc, #108]	; (800aae0 <precalc_inverse_trig+0x12c>)
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	009b      	lsls	r3, r3, #2
 800aa78:	4413      	add	r3, r2
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f7f5 fd0b 	bl	8000498 <__aeabi_f2d>
 800aa82:	4603      	mov	r3, r0
 800aa84:	460c      	mov	r4, r1
 800aa86:	ec44 3b10 	vmov	d0, r3, r4
 800aa8a:	f002 fa65 	bl	800cf58 <atan>
 800aa8e:	ec54 3b10 	vmov	r3, r4, d0
 800aa92:	4618      	mov	r0, r3
 800aa94:	4621      	mov	r1, r4
 800aa96:	f7f6 f82f 	bl	8000af8 <__aeabi_d2f>
 800aa9a:	4601      	mov	r1, r0
 800aa9c:	4a11      	ldr	r2, [pc, #68]	; (800aae4 <precalc_inverse_trig+0x130>)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	4413      	add	r3, r2
 800aaa4:	6019      	str	r1, [r3, #0]
	for(i = 0; i < NUM_ELEMENTS_IT; i++)
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	60fb      	str	r3, [r7, #12]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800aab2:	dbc9      	blt.n	800aa48 <precalc_inverse_trig+0x94>
	}
	atan_div = 1.0f / ((1.0f * ATAN_ARG_RANGE) / (NUM_ELEMENTS_IT/2));
 800aab4:	4b0c      	ldr	r3, [pc, #48]	; (800aae8 <precalc_inverse_trig+0x134>)
 800aab6:	4a0d      	ldr	r2, [pc, #52]	; (800aaec <precalc_inverse_trig+0x138>)
 800aab8:	601a      	str	r2, [r3, #0]
}
 800aaba:	bf00      	nop
 800aabc:	3714      	adds	r7, #20
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd90      	pop	{r4, r7, pc}
 800aac2:	bf00      	nop
 800aac4:	3a83126f 	.word	0x3a83126f
 800aac8:	2000d58c 	.word	0x2000d58c
 800aacc:	2000f4cc 	.word	0x2000f4cc
 800aad0:	20000018 	.word	0x20000018
 800aad4:	4479ffff 	.word	0x4479ffff
 800aad8:	20000020 	.word	0x20000020
 800aadc:	3c23d70a 	.word	0x3c23d70a
 800aae0:	2001140c 	.word	0x2001140c
 800aae4:	2001334c 	.word	0x2001334c
 800aae8:	2000001c 	.word	0x2000001c
 800aaec:	42c80000 	.word	0x42c80000

0800aaf0 <fast_acos>:

float fast_acos(float x)
{
 800aaf0:	b590      	push	{r4, r7, lr}
 800aaf2:	b087      	sub	sp, #28
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	ed87 0a01 	vstr	s0, [r7, #4]
	// Wrap to +-1
	if(x > 1.0 || x < -1.0)
 800aafa:	edd7 7a01 	vldr	s15, [r7, #4]
 800aafe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab02:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab0a:	dc08      	bgt.n	800ab1e <fast_acos+0x2e>
 800ab0c:	edd7 7a01 	vldr	s15, [r7, #4]
 800ab10:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ab14:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab1c:	d510      	bpl.n	800ab40 <fast_acos+0x50>
	{
		return acos(x); // TODO
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f7f5 fcba 	bl	8000498 <__aeabi_f2d>
 800ab24:	4603      	mov	r3, r0
 800ab26:	460c      	mov	r4, r1
 800ab28:	ec44 3b10 	vmov	d0, r3, r4
 800ab2c:	f002 fbbe 	bl	800d2ac <acos>
 800ab30:	ec54 3b10 	vmov	r3, r4, d0
 800ab34:	4618      	mov	r0, r3
 800ab36:	4621      	mov	r1, r4
 800ab38:	f7f5 ffde 	bl	8000af8 <__aeabi_d2f>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	e025      	b.n	800ab8c <fast_acos+0x9c>
	}
	// Fast search
	float temp = x * acos_div; // Divided by 1.0 / NUM_ELEMENTS/2. E.g. 0.5 /( 1.0/ 10 ) goes to 5, -0.5 goes to -5
 800ab40:	4b16      	ldr	r3, [pc, #88]	; (800ab9c <fast_acos+0xac>)
 800ab42:	edd3 7a00 	vldr	s15, [r3]
 800ab46:	ed97 7a01 	vldr	s14, [r7, #4]
 800ab4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab4e:	edc7 7a04 	vstr	s15, [r7, #16]
	int32_t offset = half_range + (int32_t) temp;
 800ab52:	edd7 7a04 	vldr	s15, [r7, #16]
 800ab56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ab5a:	ee17 2a90 	vmov	r2, s15
 800ab5e:	4b10      	ldr	r3, [pc, #64]	; (800aba0 <fast_acos+0xb0>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4413      	add	r3, r2
 800ab64:	617b      	str	r3, [r7, #20]
	if(offset < 0){offset = 0;}
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	da01      	bge.n	800ab70 <fast_acos+0x80>
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	617b      	str	r3, [r7, #20]
	if(offset >= NUM_ELEMENTS_IT){offset = NUM_ELEMENTS_IT-1;}
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ab76:	db02      	blt.n	800ab7e <fast_acos+0x8e>
 800ab78:	f240 73cf 	movw	r3, #1999	; 0x7cf
 800ab7c:	617b      	str	r3, [r7, #20]
	float val = acos_out_table[offset];
 800ab7e:	4a09      	ldr	r2, [pc, #36]	; (800aba4 <fast_acos+0xb4>)
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	4413      	add	r3, r2
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	60fb      	str	r3, [r7, #12]
	return val;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	ee07 3a90 	vmov	s15, r3
}
 800ab90:	eeb0 0a67 	vmov.f32	s0, s15
 800ab94:	371c      	adds	r7, #28
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd90      	pop	{r4, r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	20000018 	.word	0x20000018
 800aba0:	20000020 	.word	0x20000020
 800aba4:	2000f4cc 	.word	0x2000f4cc

0800aba8 <fast_atan>:

float fast_atan(float x)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b087      	sub	sp, #28
 800abac:	af00      	add	r7, sp, #0
 800abae:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x > ATAN_ARG_RANGE)
 800abb2:	edd7 7a01 	vldr	s15, [r7, #4]
 800abb6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800abba:	eef4 7ac7 	vcmpe.f32	s15, s14
 800abbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abc2:	dd01      	ble.n	800abc8 <fast_atan+0x20>
	{
		return M_PI_2; // TODO interpolate?
 800abc4:	4b1d      	ldr	r3, [pc, #116]	; (800ac3c <fast_atan+0x94>)
 800abc6:	e030      	b.n	800ac2a <fast_atan+0x82>
	}
	else if(x < -ATAN_ARG_RANGE)
 800abc8:	edd7 7a01 	vldr	s15, [r7, #4]
 800abcc:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800abd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800abd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abd8:	d501      	bpl.n	800abde <fast_atan+0x36>
	{
		return -M_PI_2; // TODO interpolate?
 800abda:	4b19      	ldr	r3, [pc, #100]	; (800ac40 <fast_atan+0x98>)
 800abdc:	e025      	b.n	800ac2a <fast_atan+0x82>
	}
	else
	{
		// Search through
		// Fast search
		float temp = x * atan_div; // Divided by RANGE / NUM_ELEMENTS/2. E.g. 10.0 /( 20.0/ 10 ) goes to 5, -10 goes to -5
 800abde:	4b19      	ldr	r3, [pc, #100]	; (800ac44 <fast_atan+0x9c>)
 800abe0:	edd3 7a00 	vldr	s15, [r3]
 800abe4:	ed97 7a01 	vldr	s14, [r7, #4]
 800abe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abec:	edc7 7a04 	vstr	s15, [r7, #16]
		int32_t offset = half_range + (int32_t) temp;
 800abf0:	edd7 7a04 	vldr	s15, [r7, #16]
 800abf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800abf8:	ee17 2a90 	vmov	r2, s15
 800abfc:	4b12      	ldr	r3, [pc, #72]	; (800ac48 <fast_atan+0xa0>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4413      	add	r3, r2
 800ac02:	617b      	str	r3, [r7, #20]
		if(offset < 0){offset = 0;}
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	da01      	bge.n	800ac0e <fast_atan+0x66>
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	617b      	str	r3, [r7, #20]
		if(offset >= NUM_ELEMENTS_IT){offset = NUM_ELEMENTS_IT-1;}
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ac14:	db02      	blt.n	800ac1c <fast_atan+0x74>
 800ac16:	f240 73cf 	movw	r3, #1999	; 0x7cf
 800ac1a:	617b      	str	r3, [r7, #20]
		float val = atan_out_table[offset];
 800ac1c:	4a0b      	ldr	r2, [pc, #44]	; (800ac4c <fast_atan+0xa4>)
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	4413      	add	r3, r2
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	60fb      	str	r3, [r7, #12]
		return val;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	ee07 3a90 	vmov	s15, r3
	}
}
 800ac2e:	eeb0 0a67 	vmov.f32	s0, s15
 800ac32:	371c      	adds	r7, #28
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr
 800ac3c:	3fc90fdb 	.word	0x3fc90fdb
 800ac40:	bfc90fdb 	.word	0xbfc90fdb
 800ac44:	2000001c 	.word	0x2000001c
 800ac48:	20000020 	.word	0x20000020
 800ac4c:	2001334c 	.word	0x2001334c

0800ac50 <calculate_impedance_control>:
 #include "impedance_controller.h"

 static const float speed_alpha = 0.995;

 void calculate_impedance_control(const impedance_control_params_t params, const leg_ik_t leg, const pos_joint_space_t current_pos, const pos_cartesian_t desired_pos, impedance_control_cmds_t * cmds)
 {
 800ac50:	b084      	sub	sp, #16
 800ac52:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ac56:	b0a0      	sub	sp, #128	; 0x80
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	f107 0498 	add.w	r4, r7, #152	; 0x98
 800ac5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ac62:	eeb0 4a40 	vmov.f32	s8, s0
 800ac66:	eef0 4a60 	vmov.f32	s9, s1
 800ac6a:	eeb0 5a41 	vmov.f32	s10, s2
 800ac6e:	eef0 5a61 	vmov.f32	s11, s3
 800ac72:	eeb0 6a42 	vmov.f32	s12, s4
 800ac76:	eef0 6a62 	vmov.f32	s13, s5
 800ac7a:	eeb0 7a43 	vmov.f32	s14, s6
 800ac7e:	eef0 7a63 	vmov.f32	s15, s7
 800ac82:	ed87 4a04 	vstr	s8, [r7, #16]
 800ac86:	edc7 4a05 	vstr	s9, [r7, #20]
 800ac8a:	ed87 5a06 	vstr	s10, [r7, #24]
 800ac8e:	edc7 5a07 	vstr	s11, [r7, #28]
 800ac92:	ed87 6a02 	vstr	s12, [r7, #8]
 800ac96:	edc7 6a03 	vstr	s13, [r7, #12]
 800ac9a:	ed87 7a00 	vstr	s14, [r7]
 800ac9e:	edc7 7a01 	vstr	s15, [r7, #4]
	static pos_cartesian_t des_cart_speed_mps;
	static uint32_t cycle_count = 0;
	pos_cartesian_t current_pos_cart;
	jacobian_t jac;

	calculate_fk_and_jacobian(&leg, &current_pos_cart, current_pos, &jac);
 800aca2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800aca6:	ed97 7a02 	vldr	s14, [r7, #8]
 800acaa:	edd7 7a03 	vldr	s15, [r7, #12]
 800acae:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800acb2:	f107 0310 	add.w	r3, r7, #16
 800acb6:	eeb0 0a47 	vmov.f32	s0, s14
 800acba:	eef0 0a67 	vmov.f32	s1, s15
 800acbe:	4618      	mov	r0, r3
 800acc0:	f000 fac2 	bl	800b248 <calculate_fk_and_jacobian>

	// Calculate speed
	uint32_t current_time = xTaskGetTickCount();
 800acc4:	f7fd ff8e 	bl	8008be4 <xTaskGetTickCount>
 800acc8:	4603      	mov	r3, r0
 800acca:	67fb      	str	r3, [r7, #124]	; 0x7c
	float dt = 0.00025; // 4kHz loop
 800accc:	4bbe      	ldr	r3, [pc, #760]	; (800afc8 <calculate_impedance_control+0x378>)
 800acce:	67bb      	str	r3, [r7, #120]	; 0x78
	act_cart_speed_mps.x = speed_alpha * act_cart_speed_mps.x + (1.0-speed_alpha) * ((current_pos_cart.x - last_pos_cart.x) / dt);
 800acd0:	4bbe      	ldr	r3, [pc, #760]	; (800afcc <calculate_impedance_control+0x37c>)
 800acd2:	edd3 7a00 	vldr	s15, [r3]
 800acd6:	ed9f 7abe 	vldr	s14, [pc, #760]	; 800afd0 <calculate_impedance_control+0x380>
 800acda:	ee67 7a87 	vmul.f32	s15, s15, s14
 800acde:	ee17 0a90 	vmov	r0, s15
 800ace2:	f7f5 fbd9 	bl	8000498 <__aeabi_f2d>
 800ace6:	4604      	mov	r4, r0
 800ace8:	460d      	mov	r5, r1
 800acea:	4bba      	ldr	r3, [pc, #744]	; (800afd4 <calculate_impedance_control+0x384>)
 800acec:	4618      	mov	r0, r3
 800acee:	f7f5 fbd3 	bl	8000498 <__aeabi_f2d>
 800acf2:	4602      	mov	r2, r0
 800acf4:	460b      	mov	r3, r1
 800acf6:	f04f 0000 	mov.w	r0, #0
 800acfa:	49b7      	ldr	r1, [pc, #732]	; (800afd8 <calculate_impedance_control+0x388>)
 800acfc:	f7f5 fa6c 	bl	80001d8 <__aeabi_dsub>
 800ad00:	4602      	mov	r2, r0
 800ad02:	460b      	mov	r3, r1
 800ad04:	4690      	mov	r8, r2
 800ad06:	4699      	mov	r9, r3
 800ad08:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800ad0c:	4bb3      	ldr	r3, [pc, #716]	; (800afdc <calculate_impedance_control+0x38c>)
 800ad0e:	edd3 7a00 	vldr	s15, [r3]
 800ad12:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ad16:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800ad1a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ad1e:	ee16 0a90 	vmov	r0, s13
 800ad22:	f7f5 fbb9 	bl	8000498 <__aeabi_f2d>
 800ad26:	4602      	mov	r2, r0
 800ad28:	460b      	mov	r3, r1
 800ad2a:	4640      	mov	r0, r8
 800ad2c:	4649      	mov	r1, r9
 800ad2e:	f7f5 fc0b 	bl	8000548 <__aeabi_dmul>
 800ad32:	4602      	mov	r2, r0
 800ad34:	460b      	mov	r3, r1
 800ad36:	4620      	mov	r0, r4
 800ad38:	4629      	mov	r1, r5
 800ad3a:	f7f5 fa4f 	bl	80001dc <__adddf3>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	460c      	mov	r4, r1
 800ad42:	4618      	mov	r0, r3
 800ad44:	4621      	mov	r1, r4
 800ad46:	f7f5 fed7 	bl	8000af8 <__aeabi_d2f>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	4b9f      	ldr	r3, [pc, #636]	; (800afcc <calculate_impedance_control+0x37c>)
 800ad4e:	601a      	str	r2, [r3, #0]
	act_cart_speed_mps.y = speed_alpha * act_cart_speed_mps.y + (1.0-speed_alpha) * ((current_pos_cart.y - last_pos_cart.y) / dt);
 800ad50:	4b9e      	ldr	r3, [pc, #632]	; (800afcc <calculate_impedance_control+0x37c>)
 800ad52:	edd3 7a01 	vldr	s15, [r3, #4]
 800ad56:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 800afd0 <calculate_impedance_control+0x380>
 800ad5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ad5e:	ee17 0a90 	vmov	r0, s15
 800ad62:	f7f5 fb99 	bl	8000498 <__aeabi_f2d>
 800ad66:	4604      	mov	r4, r0
 800ad68:	460d      	mov	r5, r1
 800ad6a:	4b9a      	ldr	r3, [pc, #616]	; (800afd4 <calculate_impedance_control+0x384>)
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f7f5 fb93 	bl	8000498 <__aeabi_f2d>
 800ad72:	4602      	mov	r2, r0
 800ad74:	460b      	mov	r3, r1
 800ad76:	f04f 0000 	mov.w	r0, #0
 800ad7a:	4997      	ldr	r1, [pc, #604]	; (800afd8 <calculate_impedance_control+0x388>)
 800ad7c:	f7f5 fa2c 	bl	80001d8 <__aeabi_dsub>
 800ad80:	4602      	mov	r2, r0
 800ad82:	460b      	mov	r3, r1
 800ad84:	4690      	mov	r8, r2
 800ad86:	4699      	mov	r9, r3
 800ad88:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800ad8c:	4b93      	ldr	r3, [pc, #588]	; (800afdc <calculate_impedance_control+0x38c>)
 800ad8e:	edd3 7a01 	vldr	s15, [r3, #4]
 800ad92:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ad96:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800ad9a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ad9e:	ee16 0a90 	vmov	r0, s13
 800ada2:	f7f5 fb79 	bl	8000498 <__aeabi_f2d>
 800ada6:	4602      	mov	r2, r0
 800ada8:	460b      	mov	r3, r1
 800adaa:	4640      	mov	r0, r8
 800adac:	4649      	mov	r1, r9
 800adae:	f7f5 fbcb 	bl	8000548 <__aeabi_dmul>
 800adb2:	4602      	mov	r2, r0
 800adb4:	460b      	mov	r3, r1
 800adb6:	4620      	mov	r0, r4
 800adb8:	4629      	mov	r1, r5
 800adba:	f7f5 fa0f 	bl	80001dc <__adddf3>
 800adbe:	4603      	mov	r3, r0
 800adc0:	460c      	mov	r4, r1
 800adc2:	4618      	mov	r0, r3
 800adc4:	4621      	mov	r1, r4
 800adc6:	f7f5 fe97 	bl	8000af8 <__aeabi_d2f>
 800adca:	4602      	mov	r2, r0
 800adcc:	4b7f      	ldr	r3, [pc, #508]	; (800afcc <calculate_impedance_control+0x37c>)
 800adce:	605a      	str	r2, [r3, #4]

	des_cart_speed_mps.x = speed_alpha * des_cart_speed_mps.x + (1.0-speed_alpha) *((desired_pos.x - last_des_pos_cart.x) / dt);
 800add0:	4b83      	ldr	r3, [pc, #524]	; (800afe0 <calculate_impedance_control+0x390>)
 800add2:	edd3 7a00 	vldr	s15, [r3]
 800add6:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800afd0 <calculate_impedance_control+0x380>
 800adda:	ee67 7a87 	vmul.f32	s15, s15, s14
 800adde:	ee17 0a90 	vmov	r0, s15
 800ade2:	f7f5 fb59 	bl	8000498 <__aeabi_f2d>
 800ade6:	4604      	mov	r4, r0
 800ade8:	460d      	mov	r5, r1
 800adea:	4b7a      	ldr	r3, [pc, #488]	; (800afd4 <calculate_impedance_control+0x384>)
 800adec:	4618      	mov	r0, r3
 800adee:	f7f5 fb53 	bl	8000498 <__aeabi_f2d>
 800adf2:	4602      	mov	r2, r0
 800adf4:	460b      	mov	r3, r1
 800adf6:	f04f 0000 	mov.w	r0, #0
 800adfa:	4977      	ldr	r1, [pc, #476]	; (800afd8 <calculate_impedance_control+0x388>)
 800adfc:	f7f5 f9ec 	bl	80001d8 <__aeabi_dsub>
 800ae00:	4602      	mov	r2, r0
 800ae02:	460b      	mov	r3, r1
 800ae04:	4690      	mov	r8, r2
 800ae06:	4699      	mov	r9, r3
 800ae08:	ed97 7a00 	vldr	s14, [r7]
 800ae0c:	4b75      	ldr	r3, [pc, #468]	; (800afe4 <calculate_impedance_control+0x394>)
 800ae0e:	edd3 7a00 	vldr	s15, [r3]
 800ae12:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ae16:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800ae1a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ae1e:	ee16 0a90 	vmov	r0, s13
 800ae22:	f7f5 fb39 	bl	8000498 <__aeabi_f2d>
 800ae26:	4602      	mov	r2, r0
 800ae28:	460b      	mov	r3, r1
 800ae2a:	4640      	mov	r0, r8
 800ae2c:	4649      	mov	r1, r9
 800ae2e:	f7f5 fb8b 	bl	8000548 <__aeabi_dmul>
 800ae32:	4602      	mov	r2, r0
 800ae34:	460b      	mov	r3, r1
 800ae36:	4620      	mov	r0, r4
 800ae38:	4629      	mov	r1, r5
 800ae3a:	f7f5 f9cf 	bl	80001dc <__adddf3>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	460c      	mov	r4, r1
 800ae42:	4618      	mov	r0, r3
 800ae44:	4621      	mov	r1, r4
 800ae46:	f7f5 fe57 	bl	8000af8 <__aeabi_d2f>
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	4b64      	ldr	r3, [pc, #400]	; (800afe0 <calculate_impedance_control+0x390>)
 800ae4e:	601a      	str	r2, [r3, #0]
	des_cart_speed_mps.y = speed_alpha * des_cart_speed_mps.y + (1.0-speed_alpha) *((desired_pos.y - last_des_pos_cart.y) / dt);
 800ae50:	4b63      	ldr	r3, [pc, #396]	; (800afe0 <calculate_impedance_control+0x390>)
 800ae52:	edd3 7a01 	vldr	s15, [r3, #4]
 800ae56:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800afd0 <calculate_impedance_control+0x380>
 800ae5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae5e:	ee17 0a90 	vmov	r0, s15
 800ae62:	f7f5 fb19 	bl	8000498 <__aeabi_f2d>
 800ae66:	4604      	mov	r4, r0
 800ae68:	460d      	mov	r5, r1
 800ae6a:	4b5a      	ldr	r3, [pc, #360]	; (800afd4 <calculate_impedance_control+0x384>)
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f7f5 fb13 	bl	8000498 <__aeabi_f2d>
 800ae72:	4602      	mov	r2, r0
 800ae74:	460b      	mov	r3, r1
 800ae76:	f04f 0000 	mov.w	r0, #0
 800ae7a:	4957      	ldr	r1, [pc, #348]	; (800afd8 <calculate_impedance_control+0x388>)
 800ae7c:	f7f5 f9ac 	bl	80001d8 <__aeabi_dsub>
 800ae80:	4602      	mov	r2, r0
 800ae82:	460b      	mov	r3, r1
 800ae84:	4690      	mov	r8, r2
 800ae86:	4699      	mov	r9, r3
 800ae88:	ed97 7a01 	vldr	s14, [r7, #4]
 800ae8c:	4b55      	ldr	r3, [pc, #340]	; (800afe4 <calculate_impedance_control+0x394>)
 800ae8e:	edd3 7a01 	vldr	s15, [r3, #4]
 800ae92:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ae96:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800ae9a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ae9e:	ee16 0a90 	vmov	r0, s13
 800aea2:	f7f5 faf9 	bl	8000498 <__aeabi_f2d>
 800aea6:	4602      	mov	r2, r0
 800aea8:	460b      	mov	r3, r1
 800aeaa:	4640      	mov	r0, r8
 800aeac:	4649      	mov	r1, r9
 800aeae:	f7f5 fb4b 	bl	8000548 <__aeabi_dmul>
 800aeb2:	4602      	mov	r2, r0
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	4629      	mov	r1, r5
 800aeba:	f7f5 f98f 	bl	80001dc <__adddf3>
 800aebe:	4603      	mov	r3, r0
 800aec0:	460c      	mov	r4, r1
 800aec2:	4618      	mov	r0, r3
 800aec4:	4621      	mov	r1, r4
 800aec6:	f7f5 fe17 	bl	8000af8 <__aeabi_d2f>
 800aeca:	4602      	mov	r2, r0
 800aecc:	4b44      	ldr	r3, [pc, #272]	; (800afe0 <calculate_impedance_control+0x390>)
 800aece:	605a      	str	r2, [r3, #4]

	last_pos_cart.x = current_pos_cart.x;
 800aed0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aed2:	4a42      	ldr	r2, [pc, #264]	; (800afdc <calculate_impedance_control+0x38c>)
 800aed4:	6013      	str	r3, [r2, #0]
	last_pos_cart.y = current_pos_cart.y;
 800aed6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aed8:	4a40      	ldr	r2, [pc, #256]	; (800afdc <calculate_impedance_control+0x38c>)
 800aeda:	6053      	str	r3, [r2, #4]
	last_des_pos_cart.x = desired_pos.x;
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	4a41      	ldr	r2, [pc, #260]	; (800afe4 <calculate_impedance_control+0x394>)
 800aee0:	6013      	str	r3, [r2, #0]
	last_des_pos_cart.y = desired_pos.y;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	4a3f      	ldr	r2, [pc, #252]	; (800afe4 <calculate_impedance_control+0x394>)
 800aee6:	6053      	str	r3, [r2, #4]
	last_time = current_time;
 800aee8:	4a3f      	ldr	r2, [pc, #252]	; (800afe8 <calculate_impedance_control+0x398>)
 800aeea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aeec:	6013      	str	r3, [r2, #0]

	// Calculate desired force from springs
	float fx = params.k_eff_x * (desired_pos.x - current_pos_cart.x); // In N
 800aeee:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 800aef2:	edd7 6a00 	vldr	s13, [r7]
 800aef6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800aefa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800aefe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af02:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	float fy = params.k_eff_y * (desired_pos.y - current_pos_cart.y);
 800af06:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800af0a:	edd7 6a01 	vldr	s13, [r7, #4]
 800af0e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800af12:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800af16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af1a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	// Damping
	fx += params.c_eff_x * (act_cart_speed_mps.x - des_cart_speed_mps.x); // TODO use relative
 800af1e:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800af22:	4b2a      	ldr	r3, [pc, #168]	; (800afcc <calculate_impedance_control+0x37c>)
 800af24:	edd3 6a00 	vldr	s13, [r3]
 800af28:	4b2d      	ldr	r3, [pc, #180]	; (800afe0 <calculate_impedance_control+0x390>)
 800af2a:	edd3 7a00 	vldr	s15, [r3]
 800af2e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800af32:	ee27 7a27 	vmul.f32	s14, s14, s15
 800af36:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800af3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af3e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	fy += params.c_eff_y * (act_cart_speed_mps.y - des_cart_speed_mps.y);
 800af42:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 800af46:	4b21      	ldr	r3, [pc, #132]	; (800afcc <calculate_impedance_control+0x37c>)
 800af48:	edd3 6a01 	vldr	s13, [r3, #4]
 800af4c:	4b24      	ldr	r3, [pc, #144]	; (800afe0 <calculate_impedance_control+0x390>)
 800af4e:	edd3 7a01 	vldr	s15, [r3, #4]
 800af52:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800af56:	ee27 7a27 	vmul.f32	s14, s14, s15
 800af5a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800af5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af62:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

	if(cycle_count++ % 40)
 800af66:	4b21      	ldr	r3, [pc, #132]	; (800afec <calculate_impedance_control+0x39c>)
 800af68:	6819      	ldr	r1, [r3, #0]
 800af6a:	1c4b      	adds	r3, r1, #1
 800af6c:	4a1f      	ldr	r2, [pc, #124]	; (800afec <calculate_impedance_control+0x39c>)
 800af6e:	6013      	str	r3, [r2, #0]
 800af70:	4b1f      	ldr	r3, [pc, #124]	; (800aff0 <calculate_impedance_control+0x3a0>)
 800af72:	fba3 2301 	umull	r2, r3, r3, r1
 800af76:	095a      	lsrs	r2, r3, #5
 800af78:	4613      	mov	r3, r2
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	4413      	add	r3, r2
 800af7e:	00db      	lsls	r3, r3, #3
 800af80:	1aca      	subs	r2, r1, r3
 800af82:	2a00      	cmp	r2, #0
 800af84:	d036      	beq.n	800aff4 <calculate_impedance_control+0x3a4>
	{
		canbus_frame_t frame;
		can_message_id_t id_helper;

		id_helper.can_msg_type = CAN_MSG_TYPE_INFO;
 800af86:	2301      	movs	r3, #1
 800af88:	62bb      	str	r3, [r7, #40]	; 0x28
		id_helper.can_class = CAN_MSG_CLASS_INFO_TELEMETRY;
 800af8a:	2300      	movs	r3, #0
 800af8c:	62fb      	str	r3, [r7, #44]	; 0x2c
		id_helper.can_device = get_device_index();
 800af8e:	f7f6 fc35 	bl	80017fc <get_device_index>
 800af92:	4603      	mov	r3, r0
 800af94:	637b      	str	r3, [r7, #52]	; 0x34

		id_helper.can_index = CAN_MSG_INDEX_INFO_PROPRIO_FORCE;
 800af96:	2306      	movs	r3, #6
 800af98:	633b      	str	r3, [r7, #48]	; 0x30
		pack_can_message(&id_helper);
 800af9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7ff fc09 	bl	800a7b6 <pack_can_message>

		frame.id = id_helper.raw_id;
 800afa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa6:	63bb      	str	r3, [r7, #56]	; 0x38
		frame.length = 8;
 800afa8:	2308      	movs	r3, #8
 800afaa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		memcpy(&frame.data[0], &fx, 4);
 800afae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afb0:	f8c7 303d 	str.w	r3, [r7, #61]	; 0x3d
		memcpy(&frame.data[4], &fy, 4);
 800afb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afb6:	f8c7 3041 	str.w	r3, [r7, #65]	; 0x41
		add_can_frame_to_tx_queue(frame);
 800afba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800afbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800afc0:	f7f6 fc48 	bl	8001854 <add_can_frame_to_tx_queue>
 800afc4:	e016      	b.n	800aff4 <calculate_impedance_control+0x3a4>
 800afc6:	bf00      	nop
 800afc8:	3983126f 	.word	0x3983126f
 800afcc:	2001528c 	.word	0x2001528c
 800afd0:	3f7eb852 	.word	0x3f7eb852
 800afd4:	3f7eb852 	.word	0x3f7eb852
 800afd8:	3ff00000 	.word	0x3ff00000
 800afdc:	20015294 	.word	0x20015294
 800afe0:	2001529c 	.word	0x2001529c
 800afe4:	200152a4 	.word	0x200152a4
 800afe8:	200152ac 	.word	0x200152ac
 800afec:	200152b0 	.word	0x200152b0
 800aff0:	cccccccd 	.word	0xcccccccd
	}

	// Calculate desired torque, tau_d = J^T * f_d
	// In N * m
	float tau_hip = fx*jac.j_00 + fy*jac.j_10;
 800aff4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800aff8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800affc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b000:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800b004:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800b008:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b00c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b010:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	float tau_knee = fx*jac.j_01 + fy*jac.j_11;
 800b014:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800b018:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800b01c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b020:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800b024:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800b028:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b02c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b030:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70


	// Account for gear ratio
	tau_hip = tau_hip / params.gear_ratio;
 800b034:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800b038:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 800b03c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b040:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	tau_knee = tau_knee / params.gear_ratio;
 800b044:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800b048:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 800b04c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b050:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

	// Calculate desired current to meet torque
	float current_hip = params.gain_current_per_torque * tau_hip;
 800b054:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800b058:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800b05c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b060:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	float current_knee = params.gain_current_per_torque * tau_knee;
 800b064:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800b068:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800b06c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b070:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	// Current controller outside of here
	cmds->hip_cmd_ma = current_hip * 1000.0;
 800b074:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b076:	f7f5 fa0f 	bl	8000498 <__aeabi_f2d>
 800b07a:	f04f 0200 	mov.w	r2, #0
 800b07e:	4b13      	ldr	r3, [pc, #76]	; (800b0cc <calculate_impedance_control+0x47c>)
 800b080:	f7f5 fa62 	bl	8000548 <__aeabi_dmul>
 800b084:	4603      	mov	r3, r0
 800b086:	460c      	mov	r4, r1
 800b088:	4618      	mov	r0, r3
 800b08a:	4621      	mov	r1, r4
 800b08c:	f7f5 fd0c 	bl	8000aa8 <__aeabi_d2iz>
 800b090:	4602      	mov	r2, r0
 800b092:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b096:	601a      	str	r2, [r3, #0]
	cmds->knee_cmd_ma = current_knee * 1000.0;
 800b098:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800b09a:	f7f5 f9fd 	bl	8000498 <__aeabi_f2d>
 800b09e:	f04f 0200 	mov.w	r2, #0
 800b0a2:	4b0a      	ldr	r3, [pc, #40]	; (800b0cc <calculate_impedance_control+0x47c>)
 800b0a4:	f7f5 fa50 	bl	8000548 <__aeabi_dmul>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	460c      	mov	r4, r1
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	4621      	mov	r1, r4
 800b0b0:	f7f5 fcfa 	bl	8000aa8 <__aeabi_d2iz>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b0ba:	605a      	str	r2, [r3, #4]
 }
 800b0bc:	bf00      	nop
 800b0be:	3780      	adds	r7, #128	; 0x80
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 800b0c6:	b004      	add	sp, #16
 800b0c8:	4770      	bx	lr
 800b0ca:	bf00      	nop
 800b0cc:	408f4000 	.word	0x408f4000

0800b0d0 <init_leg_precalcs>:
 #include <math.h>
 #include "fast_inverse_trig.h"
 #include "arm_math.h"

 void init_leg_precalcs(leg_ik_t * leg)
 {
 800b0d0:	b5b0      	push	{r4, r5, r7, lr}
 800b0d2:	b082      	sub	sp, #8
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
	leg->alpha_1 = -(leg->calf_length_m*leg->calf_length_m + leg->thigh_length_m*leg->thigh_length_m);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	ed93 7a01 	vldr	s14, [r3, #4]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	edd3 7a01 	vldr	s15, [r3, #4]
 800b0e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	edd3 6a00 	vldr	s13, [r3]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	edd3 7a00 	vldr	s15, [r3]
 800b0f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b0f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0fc:	eef1 7a67 	vneg.f32	s15, s15
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	edc3 7a02 	vstr	s15, [r3, #8]
	leg->alpha_2 = 1.0 / (2.0 * leg->calf_length_m * leg->thigh_length_m);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	4618      	mov	r0, r3
 800b10c:	f7f5 f9c4 	bl	8000498 <__aeabi_f2d>
 800b110:	4602      	mov	r2, r0
 800b112:	460b      	mov	r3, r1
 800b114:	f7f5 f862 	bl	80001dc <__adddf3>
 800b118:	4603      	mov	r3, r0
 800b11a:	460c      	mov	r4, r1
 800b11c:	4625      	mov	r5, r4
 800b11e:	461c      	mov	r4, r3
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	4618      	mov	r0, r3
 800b126:	f7f5 f9b7 	bl	8000498 <__aeabi_f2d>
 800b12a:	4602      	mov	r2, r0
 800b12c:	460b      	mov	r3, r1
 800b12e:	4620      	mov	r0, r4
 800b130:	4629      	mov	r1, r5
 800b132:	f7f5 fa09 	bl	8000548 <__aeabi_dmul>
 800b136:	4603      	mov	r3, r0
 800b138:	460c      	mov	r4, r1
 800b13a:	461a      	mov	r2, r3
 800b13c:	4623      	mov	r3, r4
 800b13e:	f04f 0000 	mov.w	r0, #0
 800b142:	4908      	ldr	r1, [pc, #32]	; (800b164 <init_leg_precalcs+0x94>)
 800b144:	f7f5 fb2a 	bl	800079c <__aeabi_ddiv>
 800b148:	4603      	mov	r3, r0
 800b14a:	460c      	mov	r4, r1
 800b14c:	4618      	mov	r0, r3
 800b14e:	4621      	mov	r1, r4
 800b150:	f7f5 fcd2 	bl	8000af8 <__aeabi_d2f>
 800b154:	4602      	mov	r2, r0
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	60da      	str	r2, [r3, #12]
 }
 800b15a:	bf00      	nop
 800b15c:	3708      	adds	r7, #8
 800b15e:	46bd      	mov	sp, r7
 800b160:	bdb0      	pop	{r4, r5, r7, pc}
 800b162:	bf00      	nop
 800b164:	3ff00000 	.word	0x3ff00000

0800b168 <calculate_ik>:

 void calculate_ik(leg_ik_t * leg, pos_joint_space_t * joint_angles, const pos_cartesian_t pos)
 {
 800b168:	b580      	push	{r7, lr}
 800b16a:	ed2d 8b04 	vpush	{d8-d9}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
 800b172:	60f8      	str	r0, [r7, #12]
 800b174:	60b9      	str	r1, [r7, #8]
 800b176:	eeb0 7a40 	vmov.f32	s14, s0
 800b17a:	eef0 7a60 	vmov.f32	s15, s1
 800b17e:	ed87 7a00 	vstr	s14, [r7]
 800b182:	edc7 7a01 	vstr	s15, [r7, #4]
	joint_angles->knee_angle_rad = fast_acos(leg->alpha_2 * (pos.x*pos.x + pos.y*pos.y + leg->alpha_1) );
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	ed93 7a03 	vldr	s14, [r3, #12]
 800b18c:	edd7 6a00 	vldr	s13, [r7]
 800b190:	edd7 7a00 	vldr	s15, [r7]
 800b194:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b198:	ed97 6a01 	vldr	s12, [r7, #4]
 800b19c:	edd7 7a01 	vldr	s15, [r7, #4]
 800b1a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 800b1a4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	edd3 7a02 	vldr	s15, [r3, #8]
 800b1ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1b6:	eeb0 0a67 	vmov.f32	s0, s15
 800b1ba:	f7ff fc99 	bl	800aaf0 <fast_acos>
 800b1be:	eef0 7a40 	vmov.f32	s15, s0
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	edc3 7a01 	vstr	s15, [r3, #4]
	joint_angles->thigh_angle_rad = fast_atan( pos.y / pos.x ) - fast_atan( (leg->calf_length_m * arm_sin_f32(joint_angles->knee_angle_rad)) / (leg->thigh_length_m + leg->calf_length_m * arm_cos_f32(joint_angles->knee_angle_rad)) );
 800b1c8:	ed97 7a01 	vldr	s14, [r7, #4]
 800b1cc:	edd7 7a00 	vldr	s15, [r7]
 800b1d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b1d4:	eeb0 0a66 	vmov.f32	s0, s13
 800b1d8:	f7ff fce6 	bl	800aba8 <fast_atan>
 800b1dc:	eef0 9a40 	vmov.f32	s19, s0
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	ed93 8a01 	vldr	s16, [r3, #4]
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	edd3 7a01 	vldr	s15, [r3, #4]
 800b1ec:	eeb0 0a67 	vmov.f32	s0, s15
 800b1f0:	f001 fdee 	bl	800cdd0 <arm_sin_f32>
 800b1f4:	eef0 7a40 	vmov.f32	s15, s0
 800b1f8:	ee28 8a27 	vmul.f32	s16, s16, s15
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	edd3 8a00 	vldr	s17, [r3]
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	ed93 9a01 	vldr	s18, [r3, #4]
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	edd3 7a01 	vldr	s15, [r3, #4]
 800b20e:	eeb0 0a67 	vmov.f32	s0, s15
 800b212:	f001 fe21 	bl	800ce58 <arm_cos_f32>
 800b216:	eef0 7a40 	vmov.f32	s15, s0
 800b21a:	ee69 7a27 	vmul.f32	s15, s18, s15
 800b21e:	ee78 7aa7 	vadd.f32	s15, s17, s15
 800b222:	ee88 7a27 	vdiv.f32	s14, s16, s15
 800b226:	eeb0 0a47 	vmov.f32	s0, s14
 800b22a:	f7ff fcbd 	bl	800aba8 <fast_atan>
 800b22e:	eef0 7a40 	vmov.f32	s15, s0
 800b232:	ee79 7ae7 	vsub.f32	s15, s19, s15
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	edc3 7a00 	vstr	s15, [r3]
 }
 800b23c:	bf00      	nop
 800b23e:	3710      	adds	r7, #16
 800b240:	46bd      	mov	sp, r7
 800b242:	ecbd 8b04 	vpop	{d8-d9}
 800b246:	bd80      	pop	{r7, pc}

0800b248 <calculate_fk_and_jacobian>:
	pos->x = leg->thigh_length_m * arm_cos_f32(joint_angles.thigh_angle_rad) + leg->calf_length_m * arm_cos_f32(joint_angles.thigh_angle_rad + joint_angles.knee_angle_rad);
	pos->y = leg->thigh_length_m * arm_sin_f32(joint_angles.thigh_angle_rad) + leg->calf_length_m * arm_sin_f32(joint_angles.thigh_angle_rad + joint_angles.knee_angle_rad);
 }

 void calculate_fk_and_jacobian(leg_ik_t * leg, pos_cartesian_t * pos, const pos_joint_space_t joint_angles, jacobian_t * j)
 {
 800b248:	b580      	push	{r7, lr}
 800b24a:	b08a      	sub	sp, #40	; 0x28
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6178      	str	r0, [r7, #20]
 800b250:	6139      	str	r1, [r7, #16]
 800b252:	eeb0 7a40 	vmov.f32	s14, s0
 800b256:	eef0 7a60 	vmov.f32	s15, s1
 800b25a:	607a      	str	r2, [r7, #4]
 800b25c:	ed87 7a02 	vstr	s14, [r7, #8]
 800b260:	edc7 7a03 	vstr	s15, [r7, #12]
	// Optimization, avoid calculating sin and cos functions twice
	float ct = arm_cos_f32(joint_angles.thigh_angle_rad);
 800b264:	edd7 7a02 	vldr	s15, [r7, #8]
 800b268:	eeb0 0a67 	vmov.f32	s0, s15
 800b26c:	f001 fdf4 	bl	800ce58 <arm_cos_f32>
 800b270:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float st = arm_sin_f32(joint_angles.thigh_angle_rad);
 800b274:	edd7 7a02 	vldr	s15, [r7, #8]
 800b278:	eeb0 0a67 	vmov.f32	s0, s15
 800b27c:	f001 fda8 	bl	800cdd0 <arm_sin_f32>
 800b280:	ed87 0a08 	vstr	s0, [r7, #32]
	float ctk = arm_cos_f32(joint_angles.thigh_angle_rad + joint_angles.knee_angle_rad);
 800b284:	ed97 7a02 	vldr	s14, [r7, #8]
 800b288:	edd7 7a03 	vldr	s15, [r7, #12]
 800b28c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b290:	eeb0 0a67 	vmov.f32	s0, s15
 800b294:	f001 fde0 	bl	800ce58 <arm_cos_f32>
 800b298:	ed87 0a07 	vstr	s0, [r7, #28]
	float stk = arm_sin_f32(joint_angles.thigh_angle_rad + joint_angles.knee_angle_rad);
 800b29c:	ed97 7a02 	vldr	s14, [r7, #8]
 800b2a0:	edd7 7a03 	vldr	s15, [r7, #12]
 800b2a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2a8:	eeb0 0a67 	vmov.f32	s0, s15
 800b2ac:	f001 fd90 	bl	800cdd0 <arm_sin_f32>
 800b2b0:	ed87 0a06 	vstr	s0, [r7, #24]

	pos->x = leg->thigh_length_m * ct + leg->calf_length_m * ctk;
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	ed93 7a00 	vldr	s14, [r3]
 800b2ba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b2be:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	edd3 6a01 	vldr	s13, [r3, #4]
 800b2c8:	edd7 7a07 	vldr	s15, [r7, #28]
 800b2cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b2d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	edc3 7a00 	vstr	s15, [r3]
	pos->y = leg->thigh_length_m * st + leg->calf_length_m * stk;
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	ed93 7a00 	vldr	s14, [r3]
 800b2e0:	edd7 7a08 	vldr	s15, [r7, #32]
 800b2e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	edd3 6a01 	vldr	s13, [r3, #4]
 800b2ee:	edd7 7a06 	vldr	s15, [r7, #24]
 800b2f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b2f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	edc3 7a01 	vstr	s15, [r3, #4]

	j->j_01 = -leg->calf_length_m * stk;
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	edd3 7a01 	vldr	s15, [r3, #4]
 800b306:	eeb1 7a67 	vneg.f32	s14, s15
 800b30a:	edd7 7a06 	vldr	s15, [r7, #24]
 800b30e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	edc3 7a01 	vstr	s15, [r3, #4]
	j->j_00 = -leg->thigh_length_m * st + j->j_01;
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	edd3 7a00 	vldr	s15, [r3]
 800b31e:	eeb1 7a67 	vneg.f32	s14, s15
 800b322:	edd7 7a08 	vldr	s15, [r7, #32]
 800b326:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	edd3 7a01 	vldr	s15, [r3, #4]
 800b330:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	edc3 7a00 	vstr	s15, [r3]
	j->j_11 = leg->calf_length_m * ctk;
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	ed93 7a01 	vldr	s14, [r3, #4]
 800b340:	edd7 7a07 	vldr	s15, [r7, #28]
 800b344:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	edc3 7a03 	vstr	s15, [r3, #12]
	j->j_10 = leg->thigh_length_m * ct + j->j_11;
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	ed93 7a00 	vldr	s14, [r3]
 800b354:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b358:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	edd3 7a03 	vldr	s15, [r3, #12]
 800b362:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	edc3 7a02 	vstr	s15, [r3, #8]

 }
 800b36c:	bf00      	nop
 800b36e:	3728      	adds	r7, #40	; 0x28
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}

0800b374 <motion_primitive_init>:
 static volatile uint8_t primitive_index = 0;
 static uint32_t time_offset = 0;
 static primitive_t primitives[NUMBER_PRIMITIVES];

 void motion_primitive_init(void)
 {
 800b374:	b480      	push	{r7}
 800b376:	af00      	add	r7, sp, #0

	// t_part must be always increasing, never > 1.0. Must be a cyclical motion primitive

	// Slow trot walk
	// Triangular, 1Hz, roughly 3X longer on ground than in air, front slightly forward of hip
	primitives[0].num_keyframes = 3;
 800b378:	4bb9      	ldr	r3, [pc, #740]	; (800b660 <motion_primitive_init+0x2ec>)
 800b37a:	2203      	movs	r2, #3
 800b37c:	701a      	strb	r2, [r3, #0]
	primitives[0].tau = 2.0;
 800b37e:	4bb8      	ldr	r3, [pc, #736]	; (800b660 <motion_primitive_init+0x2ec>)
 800b380:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b384:	615a      	str	r2, [r3, #20]
	primitives[0].t_offset = 0.0;
 800b386:	4bb6      	ldr	r3, [pc, #728]	; (800b660 <motion_primitive_init+0x2ec>)
 800b388:	f04f 0200 	mov.w	r2, #0
 800b38c:	619a      	str	r2, [r3, #24]
	primitives[0].invert = 0;
 800b38e:	4bb4      	ldr	r3, [pc, #720]	; (800b660 <motion_primitive_init+0x2ec>)
 800b390:	2200      	movs	r2, #0
 800b392:	705a      	strb	r2, [r3, #1]
	primitives[0].time_reverse = 0;
 800b394:	4bb2      	ldr	r3, [pc, #712]	; (800b660 <motion_primitive_init+0x2ec>)
 800b396:	2200      	movs	r2, #0
 800b398:	709a      	strb	r2, [r3, #2]
	primitives[0].x_offset_m = 0;
 800b39a:	4bb1      	ldr	r3, [pc, #708]	; (800b660 <motion_primitive_init+0x2ec>)
 800b39c:	f04f 0200 	mov.w	r2, #0
 800b3a0:	605a      	str	r2, [r3, #4]
	primitives[0].y_offset_m = 0;
 800b3a2:	4baf      	ldr	r3, [pc, #700]	; (800b660 <motion_primitive_init+0x2ec>)
 800b3a4:	f04f 0200 	mov.w	r2, #0
 800b3a8:	609a      	str	r2, [r3, #8]
	primitives[0].x_scale = 1.0;
 800b3aa:	4bad      	ldr	r3, [pc, #692]	; (800b660 <motion_primitive_init+0x2ec>)
 800b3ac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b3b0:	60da      	str	r2, [r3, #12]
	primitives[0].y_scale = 1.0;
 800b3b2:	4bab      	ldr	r3, [pc, #684]	; (800b660 <motion_primitive_init+0x2ec>)
 800b3b4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b3b8:	611a      	str	r2, [r3, #16]

	primitives[0].frames[0].t_part = 0.0;
 800b3ba:	4ba9      	ldr	r3, [pc, #676]	; (800b660 <motion_primitive_init+0x2ec>)
 800b3bc:	f04f 0200 	mov.w	r2, #0
 800b3c0:	625a      	str	r2, [r3, #36]	; 0x24
	primitives[0].frames[0].x = 0.105;
 800b3c2:	4ba7      	ldr	r3, [pc, #668]	; (800b660 <motion_primitive_init+0x2ec>)
 800b3c4:	4aa7      	ldr	r2, [pc, #668]	; (800b664 <motion_primitive_init+0x2f0>)
 800b3c6:	61da      	str	r2, [r3, #28]
	primitives[0].frames[0].y = 0.01;
 800b3c8:	4ba5      	ldr	r3, [pc, #660]	; (800b660 <motion_primitive_init+0x2ec>)
 800b3ca:	4aa7      	ldr	r2, [pc, #668]	; (800b668 <motion_primitive_init+0x2f4>)
 800b3cc:	621a      	str	r2, [r3, #32]

	primitives[0].frames[1].t_part = 0.75;
 800b3ce:	4ba4      	ldr	r3, [pc, #656]	; (800b660 <motion_primitive_init+0x2ec>)
 800b3d0:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 800b3d4:	635a      	str	r2, [r3, #52]	; 0x34
	primitives[0].frames[1].x = 0.105;
 800b3d6:	4ba2      	ldr	r3, [pc, #648]	; (800b660 <motion_primitive_init+0x2ec>)
 800b3d8:	4aa2      	ldr	r2, [pc, #648]	; (800b664 <motion_primitive_init+0x2f0>)
 800b3da:	62da      	str	r2, [r3, #44]	; 0x2c
	primitives[0].frames[1].y = -0.05;
 800b3dc:	4ba0      	ldr	r3, [pc, #640]	; (800b660 <motion_primitive_init+0x2ec>)
 800b3de:	4aa3      	ldr	r2, [pc, #652]	; (800b66c <motion_primitive_init+0x2f8>)
 800b3e0:	631a      	str	r2, [r3, #48]	; 0x30

	primitives[0].frames[2].t_part = 0.875;
 800b3e2:	4b9f      	ldr	r3, [pc, #636]	; (800b660 <motion_primitive_init+0x2ec>)
 800b3e4:	4aa2      	ldr	r2, [pc, #648]	; (800b670 <motion_primitive_init+0x2fc>)
 800b3e6:	645a      	str	r2, [r3, #68]	; 0x44
	primitives[0].frames[2].x = 0.06;
 800b3e8:	4b9d      	ldr	r3, [pc, #628]	; (800b660 <motion_primitive_init+0x2ec>)
 800b3ea:	4aa2      	ldr	r2, [pc, #648]	; (800b674 <motion_primitive_init+0x300>)
 800b3ec:	63da      	str	r2, [r3, #60]	; 0x3c
	primitives[0].frames[2].y = -0.02;
 800b3ee:	4b9c      	ldr	r3, [pc, #624]	; (800b660 <motion_primitive_init+0x2ec>)
 800b3f0:	4aa1      	ldr	r2, [pc, #644]	; (800b678 <motion_primitive_init+0x304>)
 800b3f2:	641a      	str	r2, [r3, #64]	; 0x40

	// Fast trot walk
	// Mostly triangular, in air roughly same as on ground, rear slightly backward of hip
	primitives[1].num_keyframes = 4;
 800b3f4:	4b9a      	ldr	r3, [pc, #616]	; (800b660 <motion_primitive_init+0x2ec>)
 800b3f6:	2204      	movs	r2, #4
 800b3f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	primitives[1].tau = 2.0;
 800b3fc:	4b98      	ldr	r3, [pc, #608]	; (800b660 <motion_primitive_init+0x2ec>)
 800b3fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b402:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	primitives[1].t_offset = 0.0;
 800b406:	4b96      	ldr	r3, [pc, #600]	; (800b660 <motion_primitive_init+0x2ec>)
 800b408:	f04f 0200 	mov.w	r2, #0
 800b40c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	primitives[1].invert = 0;
 800b410:	4b93      	ldr	r3, [pc, #588]	; (800b660 <motion_primitive_init+0x2ec>)
 800b412:	2200      	movs	r2, #0
 800b414:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
	primitives[1].time_reverse = 0;
 800b418:	4b91      	ldr	r3, [pc, #580]	; (800b660 <motion_primitive_init+0x2ec>)
 800b41a:	2200      	movs	r2, #0
 800b41c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	primitives[1].x_offset_m = 0;
 800b420:	4b8f      	ldr	r3, [pc, #572]	; (800b660 <motion_primitive_init+0x2ec>)
 800b422:	f04f 0200 	mov.w	r2, #0
 800b426:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	primitives[1].y_offset_m = 0;
 800b42a:	4b8d      	ldr	r3, [pc, #564]	; (800b660 <motion_primitive_init+0x2ec>)
 800b42c:	f04f 0200 	mov.w	r2, #0
 800b430:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	primitives[1].x_scale = 1.0;
 800b434:	4b8a      	ldr	r3, [pc, #552]	; (800b660 <motion_primitive_init+0x2ec>)
 800b436:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b43a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	primitives[1].y_scale = 1.0;
 800b43e:	4b88      	ldr	r3, [pc, #544]	; (800b660 <motion_primitive_init+0x2ec>)
 800b440:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b444:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	primitives[1].frames[0].t_part = 0.0;
 800b448:	4b85      	ldr	r3, [pc, #532]	; (800b660 <motion_primitive_init+0x2ec>)
 800b44a:	f04f 0200 	mov.w	r2, #0
 800b44e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	primitives[1].frames[0].x = 0.09;
 800b452:	4b83      	ldr	r3, [pc, #524]	; (800b660 <motion_primitive_init+0x2ec>)
 800b454:	4a89      	ldr	r2, [pc, #548]	; (800b67c <motion_primitive_init+0x308>)
 800b456:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	primitives[1].frames[0].y = 0.06;
 800b45a:	4b81      	ldr	r3, [pc, #516]	; (800b660 <motion_primitive_init+0x2ec>)
 800b45c:	4a85      	ldr	r2, [pc, #532]	; (800b674 <motion_primitive_init+0x300>)
 800b45e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	primitives[1].frames[1].t_part = 0.5;
 800b462:	4b7f      	ldr	r3, [pc, #508]	; (800b660 <motion_primitive_init+0x2ec>)
 800b464:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800b468:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	primitives[1].frames[1].x = 0.09;
 800b46c:	4b7c      	ldr	r3, [pc, #496]	; (800b660 <motion_primitive_init+0x2ec>)
 800b46e:	4a83      	ldr	r2, [pc, #524]	; (800b67c <motion_primitive_init+0x308>)
 800b470:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	primitives[1].frames[1].y = -0.01;
 800b474:	4b7a      	ldr	r3, [pc, #488]	; (800b660 <motion_primitive_init+0x2ec>)
 800b476:	4a82      	ldr	r2, [pc, #520]	; (800b680 <motion_primitive_init+0x30c>)
 800b478:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	primitives[1].frames[2].t_part = 0.75;
 800b47c:	4b78      	ldr	r3, [pc, #480]	; (800b660 <motion_primitive_init+0x2ec>)
 800b47e:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 800b482:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	primitives[1].frames[2].x = 0.05;
 800b486:	4b76      	ldr	r3, [pc, #472]	; (800b660 <motion_primitive_init+0x2ec>)
 800b488:	4a7e      	ldr	r2, [pc, #504]	; (800b684 <motion_primitive_init+0x310>)
 800b48a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	primitives[1].frames[2].y = 0.02;
 800b48e:	4b74      	ldr	r3, [pc, #464]	; (800b660 <motion_primitive_init+0x2ec>)
 800b490:	4a7d      	ldr	r2, [pc, #500]	; (800b688 <motion_primitive_init+0x314>)
 800b492:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

	primitives[1].frames[3].t_part = 0.95;
 800b496:	4b72      	ldr	r3, [pc, #456]	; (800b660 <motion_primitive_init+0x2ec>)
 800b498:	4a7c      	ldr	r2, [pc, #496]	; (800b68c <motion_primitive_init+0x318>)
 800b49a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	primitives[1].frames[3].x = 0.08;
 800b49e:	4b70      	ldr	r3, [pc, #448]	; (800b660 <motion_primitive_init+0x2ec>)
 800b4a0:	4a7b      	ldr	r2, [pc, #492]	; (800b690 <motion_primitive_init+0x31c>)
 800b4a2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	primitives[1].frames[3].y = 0.065;
 800b4a6:	4b6e      	ldr	r3, [pc, #440]	; (800b660 <motion_primitive_init+0x2ec>)
 800b4a8:	4a7a      	ldr	r2, [pc, #488]	; (800b694 <motion_primitive_init+0x320>)
 800b4aa:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	// Bound
	// Mostly triangular, in air roughly same as on ground, centered on hip
	primitives[2].num_keyframes = 4;
 800b4ae:	4b6c      	ldr	r3, [pc, #432]	; (800b660 <motion_primitive_init+0x2ec>)
 800b4b0:	2204      	movs	r2, #4
 800b4b2:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	primitives[2].tau = 2.0;
 800b4b6:	4b6a      	ldr	r3, [pc, #424]	; (800b660 <motion_primitive_init+0x2ec>)
 800b4b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b4bc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	primitives[2].t_offset = 0.0;
 800b4c0:	4b67      	ldr	r3, [pc, #412]	; (800b660 <motion_primitive_init+0x2ec>)
 800b4c2:	f04f 0200 	mov.w	r2, #0
 800b4c6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	primitives[2].invert = 0;
 800b4ca:	4b65      	ldr	r3, [pc, #404]	; (800b660 <motion_primitive_init+0x2ec>)
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
	primitives[2].time_reverse = 0;
 800b4d2:	4b63      	ldr	r3, [pc, #396]	; (800b660 <motion_primitive_init+0x2ec>)
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
	primitives[2].x_offset_m = 0;
 800b4da:	4b61      	ldr	r3, [pc, #388]	; (800b660 <motion_primitive_init+0x2ec>)
 800b4dc:	f04f 0200 	mov.w	r2, #0
 800b4e0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	primitives[2].y_offset_m = 0;
 800b4e4:	4b5e      	ldr	r3, [pc, #376]	; (800b660 <motion_primitive_init+0x2ec>)
 800b4e6:	f04f 0200 	mov.w	r2, #0
 800b4ea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	primitives[2].x_scale = 1.0;
 800b4ee:	4b5c      	ldr	r3, [pc, #368]	; (800b660 <motion_primitive_init+0x2ec>)
 800b4f0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b4f4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	primitives[2].y_scale = 1.0;
 800b4f8:	4b59      	ldr	r3, [pc, #356]	; (800b660 <motion_primitive_init+0x2ec>)
 800b4fa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b4fe:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	primitives[2].frames[0].t_part = 0.0;
 800b502:	4b57      	ldr	r3, [pc, #348]	; (800b660 <motion_primitive_init+0x2ec>)
 800b504:	f04f 0200 	mov.w	r2, #0
 800b508:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	primitives[2].frames[0].x = 0.105;
 800b50c:	4b54      	ldr	r3, [pc, #336]	; (800b660 <motion_primitive_init+0x2ec>)
 800b50e:	4a55      	ldr	r2, [pc, #340]	; (800b664 <motion_primitive_init+0x2f0>)
 800b510:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	primitives[2].frames[0].y = 0.03;
 800b514:	4b52      	ldr	r3, [pc, #328]	; (800b660 <motion_primitive_init+0x2ec>)
 800b516:	4a60      	ldr	r2, [pc, #384]	; (800b698 <motion_primitive_init+0x324>)
 800b518:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	primitives[2].frames[1].t_part = 0.5;
 800b51c:	4b50      	ldr	r3, [pc, #320]	; (800b660 <motion_primitive_init+0x2ec>)
 800b51e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800b522:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	primitives[2].frames[1].x = 0.105;
 800b526:	4b4e      	ldr	r3, [pc, #312]	; (800b660 <motion_primitive_init+0x2ec>)
 800b528:	4a4e      	ldr	r2, [pc, #312]	; (800b664 <motion_primitive_init+0x2f0>)
 800b52a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	primitives[2].frames[1].y = -0.03;
 800b52e:	4b4c      	ldr	r3, [pc, #304]	; (800b660 <motion_primitive_init+0x2ec>)
 800b530:	4a5a      	ldr	r2, [pc, #360]	; (800b69c <motion_primitive_init+0x328>)
 800b532:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	primitives[2].frames[2].t_part = 0.7;
 800b536:	4b4a      	ldr	r3, [pc, #296]	; (800b660 <motion_primitive_init+0x2ec>)
 800b538:	4a59      	ldr	r2, [pc, #356]	; (800b6a0 <motion_primitive_init+0x32c>)
 800b53a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	primitives[2].frames[2].x = 0.08;
 800b53e:	4b48      	ldr	r3, [pc, #288]	; (800b660 <motion_primitive_init+0x2ec>)
 800b540:	4a53      	ldr	r2, [pc, #332]	; (800b690 <motion_primitive_init+0x31c>)
 800b542:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	primitives[2].frames[2].y = -0.015;
 800b546:	4b46      	ldr	r3, [pc, #280]	; (800b660 <motion_primitive_init+0x2ec>)
 800b548:	4a56      	ldr	r2, [pc, #344]	; (800b6a4 <motion_primitive_init+0x330>)
 800b54a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138

	primitives[2].frames[3].t_part = 0.9;
 800b54e:	4b44      	ldr	r3, [pc, #272]	; (800b660 <motion_primitive_init+0x2ec>)
 800b550:	4a55      	ldr	r2, [pc, #340]	; (800b6a8 <motion_primitive_init+0x334>)
 800b552:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	primitives[2].frames[3].x = 0.095;
 800b556:	4b42      	ldr	r3, [pc, #264]	; (800b660 <motion_primitive_init+0x2ec>)
 800b558:	4a54      	ldr	r2, [pc, #336]	; (800b6ac <motion_primitive_init+0x338>)
 800b55a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	primitives[2].frames[3].y = 0.04;
 800b55e:	4b40      	ldr	r3, [pc, #256]	; (800b660 <motion_primitive_init+0x2ec>)
 800b560:	4a53      	ldr	r2, [pc, #332]	; (800b6b0 <motion_primitive_init+0x33c>)
 800b562:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

	// Pronk
	// Only vertical motion, slow down, fast down, fast up, fast to nominal
	primitives[3].num_keyframes = 5;
 800b566:	4b3e      	ldr	r3, [pc, #248]	; (800b660 <motion_primitive_init+0x2ec>)
 800b568:	2205      	movs	r2, #5
 800b56a:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
	primitives[3].tau = 2.0;
 800b56e:	4b3c      	ldr	r3, [pc, #240]	; (800b660 <motion_primitive_init+0x2ec>)
 800b570:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b574:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	primitives[3].t_offset = 0.0;
 800b578:	4b39      	ldr	r3, [pc, #228]	; (800b660 <motion_primitive_init+0x2ec>)
 800b57a:	f04f 0200 	mov.w	r2, #0
 800b57e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	primitives[3].invert = 0;
 800b582:	4b37      	ldr	r3, [pc, #220]	; (800b660 <motion_primitive_init+0x2ec>)
 800b584:	2200      	movs	r2, #0
 800b586:	f883 2175 	strb.w	r2, [r3, #373]	; 0x175
	primitives[3].time_reverse = 0;
 800b58a:	4b35      	ldr	r3, [pc, #212]	; (800b660 <motion_primitive_init+0x2ec>)
 800b58c:	2200      	movs	r2, #0
 800b58e:	f883 2176 	strb.w	r2, [r3, #374]	; 0x176
	primitives[3].x_offset_m = 0;
 800b592:	4b33      	ldr	r3, [pc, #204]	; (800b660 <motion_primitive_init+0x2ec>)
 800b594:	f04f 0200 	mov.w	r2, #0
 800b598:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	primitives[3].y_offset_m = 0;
 800b59c:	4b30      	ldr	r3, [pc, #192]	; (800b660 <motion_primitive_init+0x2ec>)
 800b59e:	f04f 0200 	mov.w	r2, #0
 800b5a2:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
	primitives[3].x_scale = 1.0;
 800b5a6:	4b2e      	ldr	r3, [pc, #184]	; (800b660 <motion_primitive_init+0x2ec>)
 800b5a8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b5ac:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	primitives[3].y_scale = 1.0;
 800b5b0:	4b2b      	ldr	r3, [pc, #172]	; (800b660 <motion_primitive_init+0x2ec>)
 800b5b2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b5b6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	primitives[3].frames[0].t_part = 0.0;
 800b5ba:	4b29      	ldr	r3, [pc, #164]	; (800b660 <motion_primitive_init+0x2ec>)
 800b5bc:	f04f 0200 	mov.w	r2, #0
 800b5c0:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	primitives[3].frames[0].x = 0.07;
 800b5c4:	4b26      	ldr	r3, [pc, #152]	; (800b660 <motion_primitive_init+0x2ec>)
 800b5c6:	4a3b      	ldr	r2, [pc, #236]	; (800b6b4 <motion_primitive_init+0x340>)
 800b5c8:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	primitives[3].frames[0].y = 0.0;
 800b5cc:	4b24      	ldr	r3, [pc, #144]	; (800b660 <motion_primitive_init+0x2ec>)
 800b5ce:	f04f 0200 	mov.w	r2, #0
 800b5d2:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

	primitives[3].frames[1].t_part = 0.3;
 800b5d6:	4b22      	ldr	r3, [pc, #136]	; (800b660 <motion_primitive_init+0x2ec>)
 800b5d8:	4a37      	ldr	r2, [pc, #220]	; (800b6b8 <motion_primitive_init+0x344>)
 800b5da:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	primitives[3].frames[1].x = 0.09;
 800b5de:	4b20      	ldr	r3, [pc, #128]	; (800b660 <motion_primitive_init+0x2ec>)
 800b5e0:	4a26      	ldr	r2, [pc, #152]	; (800b67c <motion_primitive_init+0x308>)
 800b5e2:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	primitives[3].frames[1].y = 0.0;
 800b5e6:	4b1e      	ldr	r3, [pc, #120]	; (800b660 <motion_primitive_init+0x2ec>)
 800b5e8:	f04f 0200 	mov.w	r2, #0
 800b5ec:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

	primitives[3].frames[2].t_part = 0.4;
 800b5f0:	4b1b      	ldr	r3, [pc, #108]	; (800b660 <motion_primitive_init+0x2ec>)
 800b5f2:	4a32      	ldr	r2, [pc, #200]	; (800b6bc <motion_primitive_init+0x348>)
 800b5f4:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
	primitives[3].frames[2].x = 0.105;
 800b5f8:	4b19      	ldr	r3, [pc, #100]	; (800b660 <motion_primitive_init+0x2ec>)
 800b5fa:	4a1a      	ldr	r2, [pc, #104]	; (800b664 <motion_primitive_init+0x2f0>)
 800b5fc:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
	primitives[3].frames[2].y = 0.0;
 800b600:	4b17      	ldr	r3, [pc, #92]	; (800b660 <motion_primitive_init+0x2ec>)
 800b602:	f04f 0200 	mov.w	r2, #0
 800b606:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4

	primitives[3].frames[3].t_part = 0.5;
 800b60a:	4b15      	ldr	r3, [pc, #84]	; (800b660 <motion_primitive_init+0x2ec>)
 800b60c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800b610:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
	primitives[3].frames[3].x = 0.05;
 800b614:	4b12      	ldr	r3, [pc, #72]	; (800b660 <motion_primitive_init+0x2ec>)
 800b616:	4a1b      	ldr	r2, [pc, #108]	; (800b684 <motion_primitive_init+0x310>)
 800b618:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
	primitives[3].frames[3].y = 0.0;
 800b61c:	4b10      	ldr	r3, [pc, #64]	; (800b660 <motion_primitive_init+0x2ec>)
 800b61e:	f04f 0200 	mov.w	r2, #0
 800b622:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4

	primitives[3].frames[4].t_part = 0.6;
 800b626:	4b0e      	ldr	r3, [pc, #56]	; (800b660 <motion_primitive_init+0x2ec>)
 800b628:	4a25      	ldr	r2, [pc, #148]	; (800b6c0 <motion_primitive_init+0x34c>)
 800b62a:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	primitives[3].frames[4].x = 0.07;
 800b62e:	4b0c      	ldr	r3, [pc, #48]	; (800b660 <motion_primitive_init+0x2ec>)
 800b630:	4a20      	ldr	r2, [pc, #128]	; (800b6b4 <motion_primitive_init+0x340>)
 800b632:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	primitives[3].frames[4].y = 0.0;
 800b636:	4b0a      	ldr	r3, [pc, #40]	; (800b660 <motion_primitive_init+0x2ec>)
 800b638:	f04f 0200 	mov.w	r2, #0
 800b63c:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

	/*************  Bezier curves starting  **************************/

	// Slow trot walk with quadratic Bezier curve
	// Triangular, 1Hz, roughly 3X longer on ground than in air, front slightly forward of hip
	primitives[4].num_keyframes = 6;
 800b640:	4b07      	ldr	r3, [pc, #28]	; (800b660 <motion_primitive_init+0x2ec>)
 800b642:	2206      	movs	r2, #6
 800b644:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0
	primitives[4].tau = 2.0;
 800b648:	4b05      	ldr	r3, [pc, #20]	; (800b660 <motion_primitive_init+0x2ec>)
 800b64a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b64e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	primitives[4].t_offset = 0.0;
 800b652:	4b03      	ldr	r3, [pc, #12]	; (800b660 <motion_primitive_init+0x2ec>)
 800b654:	f04f 0200 	mov.w	r2, #0
 800b658:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800b65c:	e032      	b.n	800b6c4 <motion_primitive_init+0x350>
 800b65e:	bf00      	nop
 800b660:	200152bc 	.word	0x200152bc
 800b664:	3dd70a3d 	.word	0x3dd70a3d
 800b668:	3c23d70a 	.word	0x3c23d70a
 800b66c:	bd4ccccd 	.word	0xbd4ccccd
 800b670:	3f600000 	.word	0x3f600000
 800b674:	3d75c28f 	.word	0x3d75c28f
 800b678:	bca3d70a 	.word	0xbca3d70a
 800b67c:	3db851ec 	.word	0x3db851ec
 800b680:	bc23d70a 	.word	0xbc23d70a
 800b684:	3d4ccccd 	.word	0x3d4ccccd
 800b688:	3ca3d70a 	.word	0x3ca3d70a
 800b68c:	3f733333 	.word	0x3f733333
 800b690:	3da3d70a 	.word	0x3da3d70a
 800b694:	3d851eb8 	.word	0x3d851eb8
 800b698:	3cf5c28f 	.word	0x3cf5c28f
 800b69c:	bcf5c28f 	.word	0xbcf5c28f
 800b6a0:	3f333333 	.word	0x3f333333
 800b6a4:	bc75c28f 	.word	0xbc75c28f
 800b6a8:	3f666666 	.word	0x3f666666
 800b6ac:	3dc28f5c 	.word	0x3dc28f5c
 800b6b0:	3d23d70a 	.word	0x3d23d70a
 800b6b4:	3d8f5c29 	.word	0x3d8f5c29
 800b6b8:	3e99999a 	.word	0x3e99999a
 800b6bc:	3ecccccd 	.word	0x3ecccccd
 800b6c0:	3f19999a 	.word	0x3f19999a
	primitives[4].invert = 0;
 800b6c4:	4bbd      	ldr	r3, [pc, #756]	; (800b9bc <motion_primitive_init+0x648>)
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f883 21f1 	strb.w	r2, [r3, #497]	; 0x1f1
	primitives[4].time_reverse = 0;
 800b6cc:	4bbb      	ldr	r3, [pc, #748]	; (800b9bc <motion_primitive_init+0x648>)
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	f883 21f2 	strb.w	r2, [r3, #498]	; 0x1f2
	primitives[4].x_offset_m = 0;
 800b6d4:	4bb9      	ldr	r3, [pc, #740]	; (800b9bc <motion_primitive_init+0x648>)
 800b6d6:	f04f 0200 	mov.w	r2, #0
 800b6da:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
	primitives[4].y_offset_m = 0;
 800b6de:	4bb7      	ldr	r3, [pc, #732]	; (800b9bc <motion_primitive_init+0x648>)
 800b6e0:	f04f 0200 	mov.w	r2, #0
 800b6e4:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	primitives[4].x_scale = 1.0;
 800b6e8:	4bb4      	ldr	r3, [pc, #720]	; (800b9bc <motion_primitive_init+0x648>)
 800b6ea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b6ee:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
	primitives[4].y_scale = 1.0;
 800b6f2:	4bb2      	ldr	r3, [pc, #712]	; (800b9bc <motion_primitive_init+0x648>)
 800b6f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b6f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	primitives[4].frames[0].t_part = 0.0;
 800b6fc:	4baf      	ldr	r3, [pc, #700]	; (800b9bc <motion_primitive_init+0x648>)
 800b6fe:	f04f 0200 	mov.w	r2, #0
 800b702:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	primitives[4].frames[0].x = 0.105;
 800b706:	4bad      	ldr	r3, [pc, #692]	; (800b9bc <motion_primitive_init+0x648>)
 800b708:	4aad      	ldr	r2, [pc, #692]	; (800b9c0 <motion_primitive_init+0x64c>)
 800b70a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	primitives[4].frames[0].y = 0.01;
 800b70e:	4bab      	ldr	r3, [pc, #684]	; (800b9bc <motion_primitive_init+0x648>)
 800b710:	4aac      	ldr	r2, [pc, #688]	; (800b9c4 <motion_primitive_init+0x650>)
 800b712:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	primitives[4].frames[0].ctrl = KEY_VMC;
 800b716:	4ba9      	ldr	r3, [pc, #676]	; (800b9bc <motion_primitive_init+0x648>)
 800b718:	2202      	movs	r2, #2
 800b71a:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

	primitives[4].frames[1].t_part = 0.375; // Time not used
 800b71e:	4ba7      	ldr	r3, [pc, #668]	; (800b9bc <motion_primitive_init+0x648>)
 800b720:	f04f 527b 	mov.w	r2, #1052770304	; 0x3ec00000
 800b724:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	primitives[4].frames[1].x = 0.115;
 800b728:	4ba4      	ldr	r3, [pc, #656]	; (800b9bc <motion_primitive_init+0x648>)
 800b72a:	4aa7      	ldr	r2, [pc, #668]	; (800b9c8 <motion_primitive_init+0x654>)
 800b72c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	primitives[4].frames[1].y = -0.02;
 800b730:	4ba2      	ldr	r3, [pc, #648]	; (800b9bc <motion_primitive_init+0x648>)
 800b732:	4aa6      	ldr	r2, [pc, #664]	; (800b9cc <motion_primitive_init+0x658>)
 800b734:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	primitives[4].frames[1].ctrl = KEY_VMC;
 800b738:	4ba0      	ldr	r3, [pc, #640]	; (800b9bc <motion_primitive_init+0x648>)
 800b73a:	2202      	movs	r2, #2
 800b73c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

	primitives[4].frames[2].t_part = 0.75;
 800b740:	4b9e      	ldr	r3, [pc, #632]	; (800b9bc <motion_primitive_init+0x648>)
 800b742:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 800b746:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	primitives[4].frames[2].x = 0.105;
 800b74a:	4b9c      	ldr	r3, [pc, #624]	; (800b9bc <motion_primitive_init+0x648>)
 800b74c:	4a9c      	ldr	r2, [pc, #624]	; (800b9c0 <motion_primitive_init+0x64c>)
 800b74e:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	primitives[4].frames[2].y = -0.05;
 800b752:	4b9a      	ldr	r3, [pc, #616]	; (800b9bc <motion_primitive_init+0x648>)
 800b754:	4a9e      	ldr	r2, [pc, #632]	; (800b9d0 <motion_primitive_init+0x65c>)
 800b756:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	primitives[4].frames[2].ctrl = KEY_POSITION;
 800b75a:	4b98      	ldr	r3, [pc, #608]	; (800b9bc <motion_primitive_init+0x648>)
 800b75c:	2201      	movs	r2, #1
 800b75e:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238

	primitives[4].frames[3].t_part = 0.8; // Time not used
 800b762:	4b96      	ldr	r3, [pc, #600]	; (800b9bc <motion_primitive_init+0x648>)
 800b764:	4a9b      	ldr	r2, [pc, #620]	; (800b9d4 <motion_primitive_init+0x660>)
 800b766:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	primitives[4].frames[3].x = 0.07;
 800b76a:	4b94      	ldr	r3, [pc, #592]	; (800b9bc <motion_primitive_init+0x648>)
 800b76c:	4a9a      	ldr	r2, [pc, #616]	; (800b9d8 <motion_primitive_init+0x664>)
 800b76e:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
	primitives[4].frames[3].y = -0.075;
 800b772:	4b92      	ldr	r3, [pc, #584]	; (800b9bc <motion_primitive_init+0x648>)
 800b774:	4a99      	ldr	r2, [pc, #612]	; (800b9dc <motion_primitive_init+0x668>)
 800b776:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	primitives[4].frames[3].ctrl = KEY_POSITION;
 800b77a:	4b90      	ldr	r3, [pc, #576]	; (800b9bc <motion_primitive_init+0x648>)
 800b77c:	2201      	movs	r2, #1
 800b77e:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248

	primitives[4].frames[4].t_part = 0.875;
 800b782:	4b8e      	ldr	r3, [pc, #568]	; (800b9bc <motion_primitive_init+0x648>)
 800b784:	4a96      	ldr	r2, [pc, #600]	; (800b9e0 <motion_primitive_init+0x66c>)
 800b786:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
	primitives[4].frames[4].x = 0.06;
 800b78a:	4b8c      	ldr	r3, [pc, #560]	; (800b9bc <motion_primitive_init+0x648>)
 800b78c:	4a95      	ldr	r2, [pc, #596]	; (800b9e4 <motion_primitive_init+0x670>)
 800b78e:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
	primitives[4].frames[4].y = -0.02;
 800b792:	4b8a      	ldr	r3, [pc, #552]	; (800b9bc <motion_primitive_init+0x648>)
 800b794:	4a8d      	ldr	r2, [pc, #564]	; (800b9cc <motion_primitive_init+0x658>)
 800b796:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	primitives[4].frames[4].ctrl = KEY_POSITION;
 800b79a:	4b88      	ldr	r3, [pc, #544]	; (800b9bc <motion_primitive_init+0x648>)
 800b79c:	2201      	movs	r2, #1
 800b79e:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258

	primitives[4].frames[5].t_part = 0.9; // Time not used
 800b7a2:	4b86      	ldr	r3, [pc, #536]	; (800b9bc <motion_primitive_init+0x648>)
 800b7a4:	4a90      	ldr	r2, [pc, #576]	; (800b9e8 <motion_primitive_init+0x674>)
 800b7a6:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
	primitives[4].frames[5].x = 0.07;
 800b7aa:	4b84      	ldr	r3, [pc, #528]	; (800b9bc <motion_primitive_init+0x648>)
 800b7ac:	4a8a      	ldr	r2, [pc, #552]	; (800b9d8 <motion_primitive_init+0x664>)
 800b7ae:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	primitives[4].frames[5].y = 0.035;
 800b7b2:	4b82      	ldr	r3, [pc, #520]	; (800b9bc <motion_primitive_init+0x648>)
 800b7b4:	4a8d      	ldr	r2, [pc, #564]	; (800b9ec <motion_primitive_init+0x678>)
 800b7b6:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
	primitives[4].frames[5].ctrl = KEY_POSITION;
 800b7ba:	4b80      	ldr	r3, [pc, #512]	; (800b9bc <motion_primitive_init+0x648>)
 800b7bc:	2201      	movs	r2, #1
 800b7be:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268

	// Fast trot walk
	// Mostly triangular, in air roughly same as on ground, rear slightly backward of hip
	primitives[5].num_keyframes = 6;
 800b7c2:	4b7e      	ldr	r3, [pc, #504]	; (800b9bc <motion_primitive_init+0x648>)
 800b7c4:	2206      	movs	r2, #6
 800b7c6:	f883 226c 	strb.w	r2, [r3, #620]	; 0x26c
	primitives[5].tau = 2.0;
 800b7ca:	4b7c      	ldr	r3, [pc, #496]	; (800b9bc <motion_primitive_init+0x648>)
 800b7cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b7d0:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
	primitives[5].t_offset = 0.0;
 800b7d4:	4b79      	ldr	r3, [pc, #484]	; (800b9bc <motion_primitive_init+0x648>)
 800b7d6:	f04f 0200 	mov.w	r2, #0
 800b7da:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
	primitives[5].invert = 0;
 800b7de:	4b77      	ldr	r3, [pc, #476]	; (800b9bc <motion_primitive_init+0x648>)
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	f883 226d 	strb.w	r2, [r3, #621]	; 0x26d
	primitives[5].time_reverse = 0;
 800b7e6:	4b75      	ldr	r3, [pc, #468]	; (800b9bc <motion_primitive_init+0x648>)
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	f883 226e 	strb.w	r2, [r3, #622]	; 0x26e
	primitives[5].x_offset_m = 0;
 800b7ee:	4b73      	ldr	r3, [pc, #460]	; (800b9bc <motion_primitive_init+0x648>)
 800b7f0:	f04f 0200 	mov.w	r2, #0
 800b7f4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
	primitives[5].y_offset_m = 0;
 800b7f8:	4b70      	ldr	r3, [pc, #448]	; (800b9bc <motion_primitive_init+0x648>)
 800b7fa:	f04f 0200 	mov.w	r2, #0
 800b7fe:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
	primitives[5].x_scale = 1.0;
 800b802:	4b6e      	ldr	r3, [pc, #440]	; (800b9bc <motion_primitive_init+0x648>)
 800b804:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b808:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
	primitives[5].y_scale = 1.0;
 800b80c:	4b6b      	ldr	r3, [pc, #428]	; (800b9bc <motion_primitive_init+0x648>)
 800b80e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b812:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

	primitives[5].frames[0].t_part = 0.0;
 800b816:	4b69      	ldr	r3, [pc, #420]	; (800b9bc <motion_primitive_init+0x648>)
 800b818:	f04f 0200 	mov.w	r2, #0
 800b81c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	primitives[5].frames[0].x = 0.09;
 800b820:	4b66      	ldr	r3, [pc, #408]	; (800b9bc <motion_primitive_init+0x648>)
 800b822:	4a73      	ldr	r2, [pc, #460]	; (800b9f0 <motion_primitive_init+0x67c>)
 800b824:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	primitives[5].frames[0].y = 0.06;
 800b828:	4b64      	ldr	r3, [pc, #400]	; (800b9bc <motion_primitive_init+0x648>)
 800b82a:	4a6e      	ldr	r2, [pc, #440]	; (800b9e4 <motion_primitive_init+0x670>)
 800b82c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c

	primitives[5].frames[1].t_part = 0.25; // Time not used
 800b830:	4b62      	ldr	r3, [pc, #392]	; (800b9bc <motion_primitive_init+0x648>)
 800b832:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800b836:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	primitives[5].frames[1].x = 0.105;
 800b83a:	4b60      	ldr	r3, [pc, #384]	; (800b9bc <motion_primitive_init+0x648>)
 800b83c:	4a60      	ldr	r2, [pc, #384]	; (800b9c0 <motion_primitive_init+0x64c>)
 800b83e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
	primitives[5].frames[1].y = 0.025;
 800b842:	4b5e      	ldr	r3, [pc, #376]	; (800b9bc <motion_primitive_init+0x648>)
 800b844:	4a6b      	ldr	r2, [pc, #428]	; (800b9f4 <motion_primitive_init+0x680>)
 800b846:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c

	primitives[5].frames[2].t_part = 0.5;
 800b84a:	4b5c      	ldr	r3, [pc, #368]	; (800b9bc <motion_primitive_init+0x648>)
 800b84c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800b850:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
	primitives[5].frames[2].x = 0.09;
 800b854:	4b59      	ldr	r3, [pc, #356]	; (800b9bc <motion_primitive_init+0x648>)
 800b856:	4a66      	ldr	r2, [pc, #408]	; (800b9f0 <motion_primitive_init+0x67c>)
 800b858:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
	primitives[5].frames[2].y = -0.01;
 800b85c:	4b57      	ldr	r3, [pc, #348]	; (800b9bc <motion_primitive_init+0x648>)
 800b85e:	4a66      	ldr	r2, [pc, #408]	; (800b9f8 <motion_primitive_init+0x684>)
 800b860:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac

	primitives[5].frames[3].t_part = 0.6; // Time not used
 800b864:	4b55      	ldr	r3, [pc, #340]	; (800b9bc <motion_primitive_init+0x648>)
 800b866:	4a65      	ldr	r2, [pc, #404]	; (800b9fc <motion_primitive_init+0x688>)
 800b868:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
	primitives[5].frames[3].x = 0.06;
 800b86c:	4b53      	ldr	r3, [pc, #332]	; (800b9bc <motion_primitive_init+0x648>)
 800b86e:	4a5d      	ldr	r2, [pc, #372]	; (800b9e4 <motion_primitive_init+0x670>)
 800b870:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
	primitives[5].frames[3].y = -0.025;
 800b874:	4b51      	ldr	r3, [pc, #324]	; (800b9bc <motion_primitive_init+0x648>)
 800b876:	4a62      	ldr	r2, [pc, #392]	; (800ba00 <motion_primitive_init+0x68c>)
 800b878:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

	primitives[5].frames[4].t_part = 0.75;
 800b87c:	4b4f      	ldr	r3, [pc, #316]	; (800b9bc <motion_primitive_init+0x648>)
 800b87e:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 800b882:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
	primitives[5].frames[4].x = 0.06;
 800b886:	4b4d      	ldr	r3, [pc, #308]	; (800b9bc <motion_primitive_init+0x648>)
 800b888:	4a56      	ldr	r2, [pc, #344]	; (800b9e4 <motion_primitive_init+0x670>)
 800b88a:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
	primitives[5].frames[4].y = 0.02;
 800b88e:	4b4b      	ldr	r3, [pc, #300]	; (800b9bc <motion_primitive_init+0x648>)
 800b890:	4a5c      	ldr	r2, [pc, #368]	; (800ba04 <motion_primitive_init+0x690>)
 800b892:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

	primitives[5].frames[5].t_part = 0.85; // Time not used
 800b896:	4b49      	ldr	r3, [pc, #292]	; (800b9bc <motion_primitive_init+0x648>)
 800b898:	4a5b      	ldr	r2, [pc, #364]	; (800ba08 <motion_primitive_init+0x694>)
 800b89a:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
	primitives[5].frames[5].x = 0.06;
 800b89e:	4b47      	ldr	r3, [pc, #284]	; (800b9bc <motion_primitive_init+0x648>)
 800b8a0:	4a50      	ldr	r2, [pc, #320]	; (800b9e4 <motion_primitive_init+0x670>)
 800b8a2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
	primitives[5].frames[5].y = 0.08;
 800b8a6:	4b45      	ldr	r3, [pc, #276]	; (800b9bc <motion_primitive_init+0x648>)
 800b8a8:	4a58      	ldr	r2, [pc, #352]	; (800ba0c <motion_primitive_init+0x698>)
 800b8aa:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc

	// Slow trot walk with quadratic Bezier curve, shifted nearer to hip, centered
	// Triangular, 1Hz, roughly 3X longer on ground than in air, front slightly forward of hip
	primitives[6].num_keyframes = 6;
 800b8ae:	4b43      	ldr	r3, [pc, #268]	; (800b9bc <motion_primitive_init+0x648>)
 800b8b0:	2206      	movs	r2, #6
 800b8b2:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	primitives[6].tau = 2.0;
 800b8b6:	4b41      	ldr	r3, [pc, #260]	; (800b9bc <motion_primitive_init+0x648>)
 800b8b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b8bc:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	primitives[6].t_offset = 0.0;
 800b8c0:	4b3e      	ldr	r3, [pc, #248]	; (800b9bc <motion_primitive_init+0x648>)
 800b8c2:	f04f 0200 	mov.w	r2, #0
 800b8c6:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
	primitives[6].invert = 0;
 800b8ca:	4b3c      	ldr	r3, [pc, #240]	; (800b9bc <motion_primitive_init+0x648>)
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
	primitives[6].time_reverse = 0;
 800b8d2:	4b3a      	ldr	r3, [pc, #232]	; (800b9bc <motion_primitive_init+0x648>)
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	primitives[6].x_offset_m = 0;
 800b8da:	4b38      	ldr	r3, [pc, #224]	; (800b9bc <motion_primitive_init+0x648>)
 800b8dc:	f04f 0200 	mov.w	r2, #0
 800b8e0:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	primitives[6].y_offset_m = 0;
 800b8e4:	4b35      	ldr	r3, [pc, #212]	; (800b9bc <motion_primitive_init+0x648>)
 800b8e6:	f04f 0200 	mov.w	r2, #0
 800b8ea:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
	primitives[6].x_scale = 1.0;
 800b8ee:	4b33      	ldr	r3, [pc, #204]	; (800b9bc <motion_primitive_init+0x648>)
 800b8f0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b8f4:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	primitives[6].y_scale = 1.0;
 800b8f8:	4b30      	ldr	r3, [pc, #192]	; (800b9bc <motion_primitive_init+0x648>)
 800b8fa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b8fe:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8

	primitives[6].frames[0].t_part = 0.0;
 800b902:	4b2e      	ldr	r3, [pc, #184]	; (800b9bc <motion_primitive_init+0x648>)
 800b904:	f04f 0200 	mov.w	r2, #0
 800b908:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
	primitives[6].frames[0].x = 0.095;
 800b90c:	4b2b      	ldr	r3, [pc, #172]	; (800b9bc <motion_primitive_init+0x648>)
 800b90e:	4a40      	ldr	r2, [pc, #256]	; (800ba10 <motion_primitive_init+0x69c>)
 800b910:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	primitives[6].frames[0].y = 0.03;
 800b914:	4b29      	ldr	r3, [pc, #164]	; (800b9bc <motion_primitive_init+0x648>)
 800b916:	4a3f      	ldr	r2, [pc, #252]	; (800ba14 <motion_primitive_init+0x6a0>)
 800b918:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

	primitives[6].frames[1].t_part = 0.375; // Time not used
 800b91c:	4b27      	ldr	r3, [pc, #156]	; (800b9bc <motion_primitive_init+0x648>)
 800b91e:	f04f 527b 	mov.w	r2, #1052770304	; 0x3ec00000
 800b922:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
	primitives[6].frames[1].x = 0.105;
 800b926:	4b25      	ldr	r3, [pc, #148]	; (800b9bc <motion_primitive_init+0x648>)
 800b928:	4a25      	ldr	r2, [pc, #148]	; (800b9c0 <motion_primitive_init+0x64c>)
 800b92a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
	primitives[6].frames[1].y = 0.0;
 800b92e:	4b23      	ldr	r3, [pc, #140]	; (800b9bc <motion_primitive_init+0x648>)
 800b930:	f04f 0200 	mov.w	r2, #0
 800b934:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

	primitives[6].frames[2].t_part = 0.75;
 800b938:	4b20      	ldr	r3, [pc, #128]	; (800b9bc <motion_primitive_init+0x648>)
 800b93a:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 800b93e:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c
	primitives[6].frames[2].x = 0.095;
 800b942:	4b1e      	ldr	r3, [pc, #120]	; (800b9bc <motion_primitive_init+0x648>)
 800b944:	4a32      	ldr	r2, [pc, #200]	; (800ba10 <motion_primitive_init+0x69c>)
 800b946:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	primitives[6].frames[2].y = -0.03;
 800b94a:	4b1c      	ldr	r3, [pc, #112]	; (800b9bc <motion_primitive_init+0x648>)
 800b94c:	4a32      	ldr	r2, [pc, #200]	; (800ba18 <motion_primitive_init+0x6a4>)
 800b94e:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328

	primitives[6].frames[3].t_part = 0.8; // Time not used
 800b952:	4b1a      	ldr	r3, [pc, #104]	; (800b9bc <motion_primitive_init+0x648>)
 800b954:	4a1f      	ldr	r2, [pc, #124]	; (800b9d4 <motion_primitive_init+0x660>)
 800b956:	f8c3 233c 	str.w	r2, [r3, #828]	; 0x33c
	primitives[6].frames[3].x = 0.06;
 800b95a:	4b18      	ldr	r3, [pc, #96]	; (800b9bc <motion_primitive_init+0x648>)
 800b95c:	4a21      	ldr	r2, [pc, #132]	; (800b9e4 <motion_primitive_init+0x670>)
 800b95e:	f8c3 2334 	str.w	r2, [r3, #820]	; 0x334
	primitives[6].frames[3].y = -0.045;
 800b962:	4b16      	ldr	r3, [pc, #88]	; (800b9bc <motion_primitive_init+0x648>)
 800b964:	4a2d      	ldr	r2, [pc, #180]	; (800ba1c <motion_primitive_init+0x6a8>)
 800b966:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338

	primitives[6].frames[4].t_part = 0.875;
 800b96a:	4b14      	ldr	r3, [pc, #80]	; (800b9bc <motion_primitive_init+0x648>)
 800b96c:	4a1c      	ldr	r2, [pc, #112]	; (800b9e0 <motion_primitive_init+0x66c>)
 800b96e:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
	primitives[6].frames[4].x = 0.05;
 800b972:	4b12      	ldr	r3, [pc, #72]	; (800b9bc <motion_primitive_init+0x648>)
 800b974:	4a2a      	ldr	r2, [pc, #168]	; (800ba20 <motion_primitive_init+0x6ac>)
 800b976:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
	primitives[6].frames[4].y = 0.0;
 800b97a:	4b10      	ldr	r3, [pc, #64]	; (800b9bc <motion_primitive_init+0x648>)
 800b97c:	f04f 0200 	mov.w	r2, #0
 800b980:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348

	primitives[6].frames[5].t_part = 0.9; // Time not used
 800b984:	4b0d      	ldr	r3, [pc, #52]	; (800b9bc <motion_primitive_init+0x648>)
 800b986:	4a18      	ldr	r2, [pc, #96]	; (800b9e8 <motion_primitive_init+0x674>)
 800b988:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
	primitives[6].frames[5].x = 0.06;
 800b98c:	4b0b      	ldr	r3, [pc, #44]	; (800b9bc <motion_primitive_init+0x648>)
 800b98e:	4a15      	ldr	r2, [pc, #84]	; (800b9e4 <motion_primitive_init+0x670>)
 800b990:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
	primitives[6].frames[5].y = 0.045;
 800b994:	4b09      	ldr	r3, [pc, #36]	; (800b9bc <motion_primitive_init+0x648>)
 800b996:	4a23      	ldr	r2, [pc, #140]	; (800ba24 <motion_primitive_init+0x6b0>)
 800b998:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358

	// Fast trot walk, shifted to help impedance control, high step
	// Mostly triangular, in air roughly same as on ground, rear slightly backward of hip
	primitives[7].num_keyframes = 6;
 800b99c:	4b07      	ldr	r3, [pc, #28]	; (800b9bc <motion_primitive_init+0x648>)
 800b99e:	2206      	movs	r2, #6
 800b9a0:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364
	primitives[7].tau = 2.0;
 800b9a4:	4b05      	ldr	r3, [pc, #20]	; (800b9bc <motion_primitive_init+0x648>)
 800b9a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b9aa:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
	primitives[7].t_offset = 0.0;
 800b9ae:	4b03      	ldr	r3, [pc, #12]	; (800b9bc <motion_primitive_init+0x648>)
 800b9b0:	f04f 0200 	mov.w	r2, #0
 800b9b4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
 800b9b8:	e036      	b.n	800ba28 <motion_primitive_init+0x6b4>
 800b9ba:	bf00      	nop
 800b9bc:	200152bc 	.word	0x200152bc
 800b9c0:	3dd70a3d 	.word	0x3dd70a3d
 800b9c4:	3c23d70a 	.word	0x3c23d70a
 800b9c8:	3deb851f 	.word	0x3deb851f
 800b9cc:	bca3d70a 	.word	0xbca3d70a
 800b9d0:	bd4ccccd 	.word	0xbd4ccccd
 800b9d4:	3f4ccccd 	.word	0x3f4ccccd
 800b9d8:	3d8f5c29 	.word	0x3d8f5c29
 800b9dc:	bd99999a 	.word	0xbd99999a
 800b9e0:	3f600000 	.word	0x3f600000
 800b9e4:	3d75c28f 	.word	0x3d75c28f
 800b9e8:	3f666666 	.word	0x3f666666
 800b9ec:	3d0f5c29 	.word	0x3d0f5c29
 800b9f0:	3db851ec 	.word	0x3db851ec
 800b9f4:	3ccccccd 	.word	0x3ccccccd
 800b9f8:	bc23d70a 	.word	0xbc23d70a
 800b9fc:	3f19999a 	.word	0x3f19999a
 800ba00:	bccccccd 	.word	0xbccccccd
 800ba04:	3ca3d70a 	.word	0x3ca3d70a
 800ba08:	3f59999a 	.word	0x3f59999a
 800ba0c:	3da3d70a 	.word	0x3da3d70a
 800ba10:	3dc28f5c 	.word	0x3dc28f5c
 800ba14:	3cf5c28f 	.word	0x3cf5c28f
 800ba18:	bcf5c28f 	.word	0xbcf5c28f
 800ba1c:	bd3851ec 	.word	0xbd3851ec
 800ba20:	3d4ccccd 	.word	0x3d4ccccd
 800ba24:	3d3851ec 	.word	0x3d3851ec
	primitives[7].invert = 0;
 800ba28:	4b43      	ldr	r3, [pc, #268]	; (800bb38 <motion_primitive_init+0x7c4>)
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f883 2365 	strb.w	r2, [r3, #869]	; 0x365
	primitives[7].time_reverse = 0;
 800ba30:	4b41      	ldr	r3, [pc, #260]	; (800bb38 <motion_primitive_init+0x7c4>)
 800ba32:	2200      	movs	r2, #0
 800ba34:	f883 2366 	strb.w	r2, [r3, #870]	; 0x366
	primitives[7].x_offset_m = 0;
 800ba38:	4b3f      	ldr	r3, [pc, #252]	; (800bb38 <motion_primitive_init+0x7c4>)
 800ba3a:	f04f 0200 	mov.w	r2, #0
 800ba3e:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
	primitives[7].y_offset_m = 0;
 800ba42:	4b3d      	ldr	r3, [pc, #244]	; (800bb38 <motion_primitive_init+0x7c4>)
 800ba44:	f04f 0200 	mov.w	r2, #0
 800ba48:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
	primitives[7].x_scale = 1.0;
 800ba4c:	4b3a      	ldr	r3, [pc, #232]	; (800bb38 <motion_primitive_init+0x7c4>)
 800ba4e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ba52:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
	primitives[7].y_scale = 1.0;
 800ba56:	4b38      	ldr	r3, [pc, #224]	; (800bb38 <motion_primitive_init+0x7c4>)
 800ba58:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ba5c:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374

	primitives[7].frames[0].t_part = 0.0;
 800ba60:	4b35      	ldr	r3, [pc, #212]	; (800bb38 <motion_primitive_init+0x7c4>)
 800ba62:	f04f 0200 	mov.w	r2, #0
 800ba66:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	primitives[7].frames[0].x = 0.095;
 800ba6a:	4b33      	ldr	r3, [pc, #204]	; (800bb38 <motion_primitive_init+0x7c4>)
 800ba6c:	4a33      	ldr	r2, [pc, #204]	; (800bb3c <motion_primitive_init+0x7c8>)
 800ba6e:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
	primitives[7].frames[0].y = 0.015;
 800ba72:	4b31      	ldr	r3, [pc, #196]	; (800bb38 <motion_primitive_init+0x7c4>)
 800ba74:	4a32      	ldr	r2, [pc, #200]	; (800bb40 <motion_primitive_init+0x7cc>)
 800ba76:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
	primitives[7].frames[0].ctrl = KEY_VMC;
 800ba7a:	4b2f      	ldr	r3, [pc, #188]	; (800bb38 <motion_primitive_init+0x7c4>)
 800ba7c:	2202      	movs	r2, #2
 800ba7e:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c

	primitives[7].frames[1].t_part = 0.25; // Time not used
 800ba82:	4b2d      	ldr	r3, [pc, #180]	; (800bb38 <motion_primitive_init+0x7c4>)
 800ba84:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800ba88:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
	primitives[7].frames[1].x = 0.105;
 800ba8c:	4b2a      	ldr	r3, [pc, #168]	; (800bb38 <motion_primitive_init+0x7c4>)
 800ba8e:	4a2d      	ldr	r2, [pc, #180]	; (800bb44 <motion_primitive_init+0x7d0>)
 800ba90:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
	primitives[7].frames[1].y = 0.0;
 800ba94:	4b28      	ldr	r3, [pc, #160]	; (800bb38 <motion_primitive_init+0x7c4>)
 800ba96:	f04f 0200 	mov.w	r2, #0
 800ba9a:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
	primitives[7].frames[1].ctrl = KEY_VMC;
 800ba9e:	4b26      	ldr	r3, [pc, #152]	; (800bb38 <motion_primitive_init+0x7c4>)
 800baa0:	2202      	movs	r2, #2
 800baa2:	f883 239c 	strb.w	r2, [r3, #924]	; 0x39c

	primitives[7].frames[2].t_part = 0.5;
 800baa6:	4b24      	ldr	r3, [pc, #144]	; (800bb38 <motion_primitive_init+0x7c4>)
 800baa8:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800baac:	f8c3 23a8 	str.w	r2, [r3, #936]	; 0x3a8
	primitives[7].frames[2].x = 0.095;
 800bab0:	4b21      	ldr	r3, [pc, #132]	; (800bb38 <motion_primitive_init+0x7c4>)
 800bab2:	4a22      	ldr	r2, [pc, #136]	; (800bb3c <motion_primitive_init+0x7c8>)
 800bab4:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	primitives[7].frames[2].y = -0.015;
 800bab8:	4b1f      	ldr	r3, [pc, #124]	; (800bb38 <motion_primitive_init+0x7c4>)
 800baba:	4a23      	ldr	r2, [pc, #140]	; (800bb48 <motion_primitive_init+0x7d4>)
 800babc:	f8c3 23a4 	str.w	r2, [r3, #932]	; 0x3a4
	primitives[7].frames[2].ctrl = KEY_POSITION;
 800bac0:	4b1d      	ldr	r3, [pc, #116]	; (800bb38 <motion_primitive_init+0x7c4>)
 800bac2:	2201      	movs	r2, #1
 800bac4:	f883 23ac 	strb.w	r2, [r3, #940]	; 0x3ac

	primitives[7].frames[3].t_part = 0.6; // Time not used
 800bac8:	4b1b      	ldr	r3, [pc, #108]	; (800bb38 <motion_primitive_init+0x7c4>)
 800baca:	4a20      	ldr	r2, [pc, #128]	; (800bb4c <motion_primitive_init+0x7d8>)
 800bacc:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
	primitives[7].frames[3].x = 0.07;
 800bad0:	4b19      	ldr	r3, [pc, #100]	; (800bb38 <motion_primitive_init+0x7c4>)
 800bad2:	4a1f      	ldr	r2, [pc, #124]	; (800bb50 <motion_primitive_init+0x7dc>)
 800bad4:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
	primitives[7].frames[3].y = -0.03;
 800bad8:	4b17      	ldr	r3, [pc, #92]	; (800bb38 <motion_primitive_init+0x7c4>)
 800bada:	4a1e      	ldr	r2, [pc, #120]	; (800bb54 <motion_primitive_init+0x7e0>)
 800badc:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
	primitives[7].frames[3].ctrl = KEY_POSITION;
 800bae0:	4b15      	ldr	r3, [pc, #84]	; (800bb38 <motion_primitive_init+0x7c4>)
 800bae2:	2201      	movs	r2, #1
 800bae4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

	primitives[7].frames[4].t_part = 0.75;
 800bae8:	4b13      	ldr	r3, [pc, #76]	; (800bb38 <motion_primitive_init+0x7c4>)
 800baea:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 800baee:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
	primitives[7].frames[4].x = 0.06;
 800baf2:	4b11      	ldr	r3, [pc, #68]	; (800bb38 <motion_primitive_init+0x7c4>)
 800baf4:	4a18      	ldr	r2, [pc, #96]	; (800bb58 <motion_primitive_init+0x7e4>)
 800baf6:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
	primitives[7].frames[4].y = 0.0;
 800bafa:	4b0f      	ldr	r3, [pc, #60]	; (800bb38 <motion_primitive_init+0x7c4>)
 800bafc:	f04f 0200 	mov.w	r2, #0
 800bb00:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
	primitives[7].frames[4].ctrl = KEY_POSITION;
 800bb04:	4b0c      	ldr	r3, [pc, #48]	; (800bb38 <motion_primitive_init+0x7c4>)
 800bb06:	2201      	movs	r2, #1
 800bb08:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

	primitives[7].frames[5].t_part = 0.85; // Time not used
 800bb0c:	4b0a      	ldr	r3, [pc, #40]	; (800bb38 <motion_primitive_init+0x7c4>)
 800bb0e:	4a13      	ldr	r2, [pc, #76]	; (800bb5c <motion_primitive_init+0x7e8>)
 800bb10:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
	primitives[7].frames[5].x = 0.07;
 800bb14:	4b08      	ldr	r3, [pc, #32]	; (800bb38 <motion_primitive_init+0x7c4>)
 800bb16:	4a0e      	ldr	r2, [pc, #56]	; (800bb50 <motion_primitive_init+0x7dc>)
 800bb18:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
	primitives[7].frames[5].y = 0.035;
 800bb1c:	4b06      	ldr	r3, [pc, #24]	; (800bb38 <motion_primitive_init+0x7c4>)
 800bb1e:	4a10      	ldr	r2, [pc, #64]	; (800bb60 <motion_primitive_init+0x7ec>)
 800bb20:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
	primitives[7].frames[5].ctrl = KEY_POSITION;
 800bb24:	4b04      	ldr	r3, [pc, #16]	; (800bb38 <motion_primitive_init+0x7c4>)
 800bb26:	2201      	movs	r2, #1
 800bb28:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
 }
 800bb2c:	bf00      	nop
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb34:	4770      	bx	lr
 800bb36:	bf00      	nop
 800bb38:	200152bc 	.word	0x200152bc
 800bb3c:	3dc28f5c 	.word	0x3dc28f5c
 800bb40:	3c75c28f 	.word	0x3c75c28f
 800bb44:	3dd70a3d 	.word	0x3dd70a3d
 800bb48:	bc75c28f 	.word	0xbc75c28f
 800bb4c:	3f19999a 	.word	0x3f19999a
 800bb50:	3d8f5c29 	.word	0x3d8f5c29
 800bb54:	bcf5c28f 	.word	0xbcf5c28f
 800bb58:	3d75c28f 	.word	0x3d75c28f
 800bb5c:	3f59999a 	.word	0x3f59999a
 800bb60:	3d0f5c29 	.word	0x3d0f5c29

0800bb64 <motion_primitive_time_sync>:

 void motion_primitive_time_sync(uint32_t external_time)
 {
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b082      	sub	sp, #8
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
	time_offset = (xTaskGetTickCount() - external_time);
 800bb6c:	f7fd f83a 	bl	8008be4 <xTaskGetTickCount>
 800bb70:	4602      	mov	r2, r0
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	1ad3      	subs	r3, r2, r3
 800bb76:	4a03      	ldr	r2, [pc, #12]	; (800bb84 <motion_primitive_time_sync+0x20>)
 800bb78:	6013      	str	r3, [r2, #0]
 }
 800bb7a:	bf00      	nop
 800bb7c:	3708      	adds	r7, #8
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
 800bb82:	bf00      	nop
 800bb84:	200152b8 	.word	0x200152b8

0800bb88 <motion_primitive_set_index>:

 void motion_primitive_set_index(uint8_t index)
 {
 800bb88:	b480      	push	{r7}
 800bb8a:	b083      	sub	sp, #12
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	4603      	mov	r3, r0
 800bb90:	71fb      	strb	r3, [r7, #7]
	if(index >= NUMBER_PRIMITIVES)
 800bb92:	79fb      	ldrb	r3, [r7, #7]
 800bb94:	2b07      	cmp	r3, #7
 800bb96:	d803      	bhi.n	800bba0 <motion_primitive_set_index+0x18>
	{
		return;
	}
	primitive_index = index;
 800bb98:	4a04      	ldr	r2, [pc, #16]	; (800bbac <motion_primitive_set_index+0x24>)
 800bb9a:	79fb      	ldrb	r3, [r7, #7]
 800bb9c:	7013      	strb	r3, [r2, #0]
 800bb9e:	e000      	b.n	800bba2 <motion_primitive_set_index+0x1a>
		return;
 800bba0:	bf00      	nop
 }
 800bba2:	370c      	adds	r7, #12
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr
 800bbac:	200152b4 	.word	0x200152b4

0800bbb0 <motion_primitive_set_timing>:

 void motion_primitive_set_timing(uint8_t index, float tau, float t_offset, uint8_t invert, uint8_t time_reverse)
 {
 800bbb0:	b480      	push	{r7}
 800bbb2:	b085      	sub	sp, #20
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	ed87 0a02 	vstr	s0, [r7, #8]
 800bbbc:	edc7 0a01 	vstr	s1, [r7, #4]
 800bbc0:	73fb      	strb	r3, [r7, #15]
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	73bb      	strb	r3, [r7, #14]
 800bbc6:	4613      	mov	r3, r2
 800bbc8:	737b      	strb	r3, [r7, #13]
	if(index >= NUMBER_PRIMITIVES)
 800bbca:	7bfb      	ldrb	r3, [r7, #15]
 800bbcc:	2b07      	cmp	r3, #7
 800bbce:	d828      	bhi.n	800bc22 <motion_primitive_set_timing+0x72>
	{
		return;
	}
	primitives[index].tau = tau;
 800bbd0:	7bfa      	ldrb	r2, [r7, #15]
 800bbd2:	4917      	ldr	r1, [pc, #92]	; (800bc30 <motion_primitive_set_timing+0x80>)
 800bbd4:	4613      	mov	r3, r2
 800bbd6:	015b      	lsls	r3, r3, #5
 800bbd8:	1a9b      	subs	r3, r3, r2
 800bbda:	009b      	lsls	r3, r3, #2
 800bbdc:	440b      	add	r3, r1
 800bbde:	3314      	adds	r3, #20
 800bbe0:	68ba      	ldr	r2, [r7, #8]
 800bbe2:	601a      	str	r2, [r3, #0]
	primitives[index].t_offset = t_offset;
 800bbe4:	7bfa      	ldrb	r2, [r7, #15]
 800bbe6:	4912      	ldr	r1, [pc, #72]	; (800bc30 <motion_primitive_set_timing+0x80>)
 800bbe8:	4613      	mov	r3, r2
 800bbea:	015b      	lsls	r3, r3, #5
 800bbec:	1a9b      	subs	r3, r3, r2
 800bbee:	009b      	lsls	r3, r3, #2
 800bbf0:	440b      	add	r3, r1
 800bbf2:	3318      	adds	r3, #24
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	601a      	str	r2, [r3, #0]
	primitives[index].invert = invert;
 800bbf8:	7bfa      	ldrb	r2, [r7, #15]
 800bbfa:	490d      	ldr	r1, [pc, #52]	; (800bc30 <motion_primitive_set_timing+0x80>)
 800bbfc:	4613      	mov	r3, r2
 800bbfe:	015b      	lsls	r3, r3, #5
 800bc00:	1a9b      	subs	r3, r3, r2
 800bc02:	009b      	lsls	r3, r3, #2
 800bc04:	440b      	add	r3, r1
 800bc06:	3301      	adds	r3, #1
 800bc08:	7bba      	ldrb	r2, [r7, #14]
 800bc0a:	701a      	strb	r2, [r3, #0]
	primitives[index].time_reverse = time_reverse;
 800bc0c:	7bfa      	ldrb	r2, [r7, #15]
 800bc0e:	4908      	ldr	r1, [pc, #32]	; (800bc30 <motion_primitive_set_timing+0x80>)
 800bc10:	4613      	mov	r3, r2
 800bc12:	015b      	lsls	r3, r3, #5
 800bc14:	1a9b      	subs	r3, r3, r2
 800bc16:	009b      	lsls	r3, r3, #2
 800bc18:	440b      	add	r3, r1
 800bc1a:	3302      	adds	r3, #2
 800bc1c:	7b7a      	ldrb	r2, [r7, #13]
 800bc1e:	701a      	strb	r2, [r3, #0]
 800bc20:	e000      	b.n	800bc24 <motion_primitive_set_timing+0x74>
		return;
 800bc22:	bf00      	nop
 }
 800bc24:	3714      	adds	r7, #20
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr
 800bc2e:	bf00      	nop
 800bc30:	200152bc 	.word	0x200152bc

0800bc34 <motion_primitive_set_scaling>:

 void motion_primitive_set_scaling(uint8_t index, float x_offset, float y_offset, float x_scale, float y_scale)
 {
 800bc34:	b480      	push	{r7}
 800bc36:	b087      	sub	sp, #28
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	ed87 0a04 	vstr	s0, [r7, #16]
 800bc40:	edc7 0a03 	vstr	s1, [r7, #12]
 800bc44:	ed87 1a02 	vstr	s2, [r7, #8]
 800bc48:	edc7 1a01 	vstr	s3, [r7, #4]
 800bc4c:	75fb      	strb	r3, [r7, #23]
	if(index >= NUMBER_PRIMITIVES)
 800bc4e:	7dfb      	ldrb	r3, [r7, #23]
 800bc50:	2b07      	cmp	r3, #7
 800bc52:	d828      	bhi.n	800bca6 <motion_primitive_set_scaling+0x72>
	{
		return;
	}
	primitives[index].x_offset_m = x_offset;
 800bc54:	7dfa      	ldrb	r2, [r7, #23]
 800bc56:	4917      	ldr	r1, [pc, #92]	; (800bcb4 <motion_primitive_set_scaling+0x80>)
 800bc58:	4613      	mov	r3, r2
 800bc5a:	015b      	lsls	r3, r3, #5
 800bc5c:	1a9b      	subs	r3, r3, r2
 800bc5e:	009b      	lsls	r3, r3, #2
 800bc60:	440b      	add	r3, r1
 800bc62:	3304      	adds	r3, #4
 800bc64:	693a      	ldr	r2, [r7, #16]
 800bc66:	601a      	str	r2, [r3, #0]
	primitives[index].y_offset_m = y_offset;
 800bc68:	7dfa      	ldrb	r2, [r7, #23]
 800bc6a:	4912      	ldr	r1, [pc, #72]	; (800bcb4 <motion_primitive_set_scaling+0x80>)
 800bc6c:	4613      	mov	r3, r2
 800bc6e:	015b      	lsls	r3, r3, #5
 800bc70:	1a9b      	subs	r3, r3, r2
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	440b      	add	r3, r1
 800bc76:	3308      	adds	r3, #8
 800bc78:	68fa      	ldr	r2, [r7, #12]
 800bc7a:	601a      	str	r2, [r3, #0]
	primitives[index].x_scale = x_scale;
 800bc7c:	7dfa      	ldrb	r2, [r7, #23]
 800bc7e:	490d      	ldr	r1, [pc, #52]	; (800bcb4 <motion_primitive_set_scaling+0x80>)
 800bc80:	4613      	mov	r3, r2
 800bc82:	015b      	lsls	r3, r3, #5
 800bc84:	1a9b      	subs	r3, r3, r2
 800bc86:	009b      	lsls	r3, r3, #2
 800bc88:	440b      	add	r3, r1
 800bc8a:	330c      	adds	r3, #12
 800bc8c:	68ba      	ldr	r2, [r7, #8]
 800bc8e:	601a      	str	r2, [r3, #0]
	primitives[index].y_scale = y_scale;
 800bc90:	7dfa      	ldrb	r2, [r7, #23]
 800bc92:	4908      	ldr	r1, [pc, #32]	; (800bcb4 <motion_primitive_set_scaling+0x80>)
 800bc94:	4613      	mov	r3, r2
 800bc96:	015b      	lsls	r3, r3, #5
 800bc98:	1a9b      	subs	r3, r3, r2
 800bc9a:	009b      	lsls	r3, r3, #2
 800bc9c:	440b      	add	r3, r1
 800bc9e:	3310      	adds	r3, #16
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	601a      	str	r2, [r3, #0]
 800bca4:	e000      	b.n	800bca8 <motion_primitive_set_scaling+0x74>
		return;
 800bca6:	bf00      	nop
 }
 800bca8:	371c      	adds	r7, #28
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb0:	4770      	bx	lr
 800bcb2:	bf00      	nop
 800bcb4:	200152bc 	.word	0x200152bc

0800bcb8 <motion_primitive_get_position>:

 void motion_primitive_get_position(float * x, float * y)
 {
 800bcb8:	b5b0      	push	{r4, r5, r7, lr}
 800bcba:	b08c      	sub	sp, #48	; 0x30
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	6039      	str	r1, [r7, #0]
	// First find global time,taking into account time syncs and primitive local offsets
	float current_t = 0.001 * (xTaskGetTickCount() - time_offset) - primitives[primitive_index].t_offset;
 800bcc2:	f7fc ff8f 	bl	8008be4 <xTaskGetTickCount>
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	4b3f      	ldr	r3, [pc, #252]	; (800bdc8 <motion_primitive_get_position+0x110>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	1ad3      	subs	r3, r2, r3
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f7f4 fbc0 	bl	8000454 <__aeabi_ui2d>
 800bcd4:	a33a      	add	r3, pc, #232	; (adr r3, 800bdc0 <motion_primitive_get_position+0x108>)
 800bcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcda:	f7f4 fc35 	bl	8000548 <__aeabi_dmul>
 800bcde:	4603      	mov	r3, r0
 800bce0:	460c      	mov	r4, r1
 800bce2:	4625      	mov	r5, r4
 800bce4:	461c      	mov	r4, r3
 800bce6:	4b39      	ldr	r3, [pc, #228]	; (800bdcc <motion_primitive_get_position+0x114>)
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	b2db      	uxtb	r3, r3
 800bcec:	4619      	mov	r1, r3
 800bcee:	4a38      	ldr	r2, [pc, #224]	; (800bdd0 <motion_primitive_get_position+0x118>)
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	015b      	lsls	r3, r3, #5
 800bcf4:	1a5b      	subs	r3, r3, r1
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	4413      	add	r3, r2
 800bcfa:	3318      	adds	r3, #24
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7f4 fbca 	bl	8000498 <__aeabi_f2d>
 800bd04:	4602      	mov	r2, r0
 800bd06:	460b      	mov	r3, r1
 800bd08:	4620      	mov	r0, r4
 800bd0a:	4629      	mov	r1, r5
 800bd0c:	f7f4 fa64 	bl	80001d8 <__aeabi_dsub>
 800bd10:	4603      	mov	r3, r0
 800bd12:	460c      	mov	r4, r1
 800bd14:	4618      	mov	r0, r3
 800bd16:	4621      	mov	r1, r4
 800bd18:	f7f4 feee 	bl	8000af8 <__aeabi_d2f>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	627b      	str	r3, [r7, #36]	; 0x24

	float time_in_cycle = fmod(current_t, primitives[primitive_index].tau);
 800bd20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd22:	f7f4 fbb9 	bl	8000498 <__aeabi_f2d>
 800bd26:	4604      	mov	r4, r0
 800bd28:	460d      	mov	r5, r1
 800bd2a:	4b28      	ldr	r3, [pc, #160]	; (800bdcc <motion_primitive_get_position+0x114>)
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	b2db      	uxtb	r3, r3
 800bd30:	4619      	mov	r1, r3
 800bd32:	4a27      	ldr	r2, [pc, #156]	; (800bdd0 <motion_primitive_get_position+0x118>)
 800bd34:	460b      	mov	r3, r1
 800bd36:	015b      	lsls	r3, r3, #5
 800bd38:	1a5b      	subs	r3, r3, r1
 800bd3a:	009b      	lsls	r3, r3, #2
 800bd3c:	4413      	add	r3, r2
 800bd3e:	3314      	adds	r3, #20
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7f4 fba8 	bl	8000498 <__aeabi_f2d>
 800bd48:	4602      	mov	r2, r0
 800bd4a:	460b      	mov	r3, r1
 800bd4c:	ec43 2b11 	vmov	d1, r2, r3
 800bd50:	ec45 4b10 	vmov	d0, r4, r5
 800bd54:	f001 fb02 	bl	800d35c <fmod>
 800bd58:	ec54 3b10 	vmov	r3, r4, d0
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	4621      	mov	r1, r4
 800bd60:	f7f4 feca 	bl	8000af8 <__aeabi_d2f>
 800bd64:	4603      	mov	r3, r0
 800bd66:	623b      	str	r3, [r7, #32]
	float time_in_cycle_part = time_in_cycle / primitives[primitive_index].tau; // Prevent further mults
 800bd68:	4b18      	ldr	r3, [pc, #96]	; (800bdcc <motion_primitive_get_position+0x114>)
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	4619      	mov	r1, r3
 800bd70:	4a17      	ldr	r2, [pc, #92]	; (800bdd0 <motion_primitive_get_position+0x118>)
 800bd72:	460b      	mov	r3, r1
 800bd74:	015b      	lsls	r3, r3, #5
 800bd76:	1a5b      	subs	r3, r3, r1
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	4413      	add	r3, r2
 800bd7c:	3314      	adds	r3, #20
 800bd7e:	ed93 7a00 	vldr	s14, [r3]
 800bd82:	edd7 6a08 	vldr	s13, [r7, #32]
 800bd86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd8a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	if(primitives[primitive_index].time_reverse > 0)
 800bd8e:	4b0f      	ldr	r3, [pc, #60]	; (800bdcc <motion_primitive_get_position+0x114>)
 800bd90:	781b      	ldrb	r3, [r3, #0]
 800bd92:	b2db      	uxtb	r3, r3
 800bd94:	4619      	mov	r1, r3
 800bd96:	4a0e      	ldr	r2, [pc, #56]	; (800bdd0 <motion_primitive_get_position+0x118>)
 800bd98:	460b      	mov	r3, r1
 800bd9a:	015b      	lsls	r3, r3, #5
 800bd9c:	1a5b      	subs	r3, r3, r1
 800bd9e:	009b      	lsls	r3, r3, #2
 800bda0:	4413      	add	r3, r2
 800bda2:	3302      	adds	r3, #2
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d007      	beq.n	800bdba <motion_primitive_get_position+0x102>
	{
		time_in_cycle_part = 1.0 - time_in_cycle_part;
 800bdaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800bdb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bdb6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	}

	// Now find where we are in the cycle and linearly interpolate
	int i;
	float x_cmd, y_cmd;
	for(i = 1; i < primitives[primitive_index].num_keyframes; i++)
 800bdba:	2301      	movs	r3, #1
 800bdbc:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdbe:	e290      	b.n	800c2e2 <motion_primitive_get_position+0x62a>
 800bdc0:	d2f1a9fc 	.word	0xd2f1a9fc
 800bdc4:	3f50624d 	.word	0x3f50624d
 800bdc8:	200152b8 	.word	0x200152b8
 800bdcc:	200152b4 	.word	0x200152b4
 800bdd0:	200152bc 	.word	0x200152bc
	{
		// Are we between keyframes?
		if(time_in_cycle_part >= primitives[primitive_index].frames[i-1].t_part && time_in_cycle_part < primitives[primitive_index].frames[i].t_part)
 800bdd4:	4ba4      	ldr	r3, [pc, #656]	; (800c068 <motion_primitive_get_position+0x3b0>)
 800bdd6:	781b      	ldrb	r3, [r3, #0]
 800bdd8:	b2db      	uxtb	r3, r3
 800bdda:	4618      	mov	r0, r3
 800bddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdde:	3b01      	subs	r3, #1
 800bde0:	49a2      	ldr	r1, [pc, #648]	; (800c06c <motion_primitive_get_position+0x3b4>)
 800bde2:	3302      	adds	r3, #2
 800bde4:	011a      	lsls	r2, r3, #4
 800bde6:	4603      	mov	r3, r0
 800bde8:	015b      	lsls	r3, r3, #5
 800bdea:	1a1b      	subs	r3, r3, r0
 800bdec:	009b      	lsls	r3, r3, #2
 800bdee:	4413      	add	r3, r2
 800bdf0:	440b      	add	r3, r1
 800bdf2:	3304      	adds	r3, #4
 800bdf4:	edd3 7a00 	vldr	s15, [r3]
 800bdf8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800bdfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800be00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be04:	f2c0 8134 	blt.w	800c070 <motion_primitive_get_position+0x3b8>
 800be08:	4b97      	ldr	r3, [pc, #604]	; (800c068 <motion_primitive_get_position+0x3b0>)
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	4618      	mov	r0, r3
 800be10:	4996      	ldr	r1, [pc, #600]	; (800c06c <motion_primitive_get_position+0x3b4>)
 800be12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be14:	3302      	adds	r3, #2
 800be16:	011a      	lsls	r2, r3, #4
 800be18:	4603      	mov	r3, r0
 800be1a:	015b      	lsls	r3, r3, #5
 800be1c:	1a1b      	subs	r3, r3, r0
 800be1e:	009b      	lsls	r3, r3, #2
 800be20:	4413      	add	r3, r2
 800be22:	440b      	add	r3, r1
 800be24:	3304      	adds	r3, #4
 800be26:	edd3 7a00 	vldr	s15, [r3]
 800be2a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800be2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800be32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be36:	f140 811b 	bpl.w	800c070 <motion_primitive_get_position+0x3b8>
		{
			// Last value plus section of new value
			float dt = (time_in_cycle_part - primitives[primitive_index].frames[i-1].t_part);
 800be3a:	4b8b      	ldr	r3, [pc, #556]	; (800c068 <motion_primitive_get_position+0x3b0>)
 800be3c:	781b      	ldrb	r3, [r3, #0]
 800be3e:	b2db      	uxtb	r3, r3
 800be40:	4618      	mov	r0, r3
 800be42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be44:	3b01      	subs	r3, #1
 800be46:	4989      	ldr	r1, [pc, #548]	; (800c06c <motion_primitive_get_position+0x3b4>)
 800be48:	3302      	adds	r3, #2
 800be4a:	011a      	lsls	r2, r3, #4
 800be4c:	4603      	mov	r3, r0
 800be4e:	015b      	lsls	r3, r3, #5
 800be50:	1a1b      	subs	r3, r3, r0
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	4413      	add	r3, r2
 800be56:	440b      	add	r3, r1
 800be58:	3304      	adds	r3, #4
 800be5a:	edd3 7a00 	vldr	s15, [r3]
 800be5e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800be62:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be66:	edc7 7a07 	vstr	s15, [r7, #28]
			float d_section_dt = 1.0 / (primitives[primitive_index].frames[i].t_part - primitives[primitive_index].frames[i-1].t_part);
 800be6a:	4b7f      	ldr	r3, [pc, #508]	; (800c068 <motion_primitive_get_position+0x3b0>)
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	b2db      	uxtb	r3, r3
 800be70:	4618      	mov	r0, r3
 800be72:	497e      	ldr	r1, [pc, #504]	; (800c06c <motion_primitive_get_position+0x3b4>)
 800be74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be76:	3302      	adds	r3, #2
 800be78:	011a      	lsls	r2, r3, #4
 800be7a:	4603      	mov	r3, r0
 800be7c:	015b      	lsls	r3, r3, #5
 800be7e:	1a1b      	subs	r3, r3, r0
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	4413      	add	r3, r2
 800be84:	440b      	add	r3, r1
 800be86:	3304      	adds	r3, #4
 800be88:	ed93 7a00 	vldr	s14, [r3]
 800be8c:	4b76      	ldr	r3, [pc, #472]	; (800c068 <motion_primitive_get_position+0x3b0>)
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	b2db      	uxtb	r3, r3
 800be92:	4618      	mov	r0, r3
 800be94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be96:	3b01      	subs	r3, #1
 800be98:	4974      	ldr	r1, [pc, #464]	; (800c06c <motion_primitive_get_position+0x3b4>)
 800be9a:	3302      	adds	r3, #2
 800be9c:	011a      	lsls	r2, r3, #4
 800be9e:	4603      	mov	r3, r0
 800bea0:	015b      	lsls	r3, r3, #5
 800bea2:	1a1b      	subs	r3, r3, r0
 800bea4:	009b      	lsls	r3, r3, #2
 800bea6:	4413      	add	r3, r2
 800bea8:	440b      	add	r3, r1
 800beaa:	3304      	adds	r3, #4
 800beac:	edd3 7a00 	vldr	s15, [r3]
 800beb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800beb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800beb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bebc:	edc7 7a06 	vstr	s15, [r7, #24]
			x_cmd = primitives[primitive_index].frames[i-1].x + (dt * (primitives[primitive_index].frames[i].x - primitives[primitive_index].frames[i-1].x) * d_section_dt);
 800bec0:	4b69      	ldr	r3, [pc, #420]	; (800c068 <motion_primitive_get_position+0x3b0>)
 800bec2:	781b      	ldrb	r3, [r3, #0]
 800bec4:	b2db      	uxtb	r3, r3
 800bec6:	4618      	mov	r0, r3
 800bec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beca:	3b01      	subs	r3, #1
 800becc:	4967      	ldr	r1, [pc, #412]	; (800c06c <motion_primitive_get_position+0x3b4>)
 800bece:	011a      	lsls	r2, r3, #4
 800bed0:	4603      	mov	r3, r0
 800bed2:	015b      	lsls	r3, r3, #5
 800bed4:	1a1b      	subs	r3, r3, r0
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	4413      	add	r3, r2
 800beda:	440b      	add	r3, r1
 800bedc:	331c      	adds	r3, #28
 800bede:	ed93 7a00 	vldr	s14, [r3]
 800bee2:	4b61      	ldr	r3, [pc, #388]	; (800c068 <motion_primitive_get_position+0x3b0>)
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	4618      	mov	r0, r3
 800beea:	4960      	ldr	r1, [pc, #384]	; (800c06c <motion_primitive_get_position+0x3b4>)
 800beec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beee:	011a      	lsls	r2, r3, #4
 800bef0:	4603      	mov	r3, r0
 800bef2:	015b      	lsls	r3, r3, #5
 800bef4:	1a1b      	subs	r3, r3, r0
 800bef6:	009b      	lsls	r3, r3, #2
 800bef8:	4413      	add	r3, r2
 800befa:	440b      	add	r3, r1
 800befc:	331c      	adds	r3, #28
 800befe:	edd3 6a00 	vldr	s13, [r3]
 800bf02:	4b59      	ldr	r3, [pc, #356]	; (800c068 <motion_primitive_get_position+0x3b0>)
 800bf04:	781b      	ldrb	r3, [r3, #0]
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	4618      	mov	r0, r3
 800bf0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf0c:	3b01      	subs	r3, #1
 800bf0e:	4957      	ldr	r1, [pc, #348]	; (800c06c <motion_primitive_get_position+0x3b4>)
 800bf10:	011a      	lsls	r2, r3, #4
 800bf12:	4603      	mov	r3, r0
 800bf14:	015b      	lsls	r3, r3, #5
 800bf16:	1a1b      	subs	r3, r3, r0
 800bf18:	009b      	lsls	r3, r3, #2
 800bf1a:	4413      	add	r3, r2
 800bf1c:	440b      	add	r3, r1
 800bf1e:	331c      	adds	r3, #28
 800bf20:	edd3 7a00 	vldr	s15, [r3]
 800bf24:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800bf28:	edd7 7a07 	vldr	s15, [r7, #28]
 800bf2c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800bf30:	edd7 7a06 	vldr	s15, [r7, #24]
 800bf34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bf38:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf3c:	edc7 7a05 	vstr	s15, [r7, #20]
			y_cmd = primitives[primitive_index].frames[i-1].y + (dt * (primitives[primitive_index].frames[i].y - primitives[primitive_index].frames[i-1].y) * d_section_dt);
 800bf40:	4b49      	ldr	r3, [pc, #292]	; (800c068 <motion_primitive_get_position+0x3b0>)
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	b2db      	uxtb	r3, r3
 800bf46:	4618      	mov	r0, r3
 800bf48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf4a:	3b01      	subs	r3, #1
 800bf4c:	4947      	ldr	r1, [pc, #284]	; (800c06c <motion_primitive_get_position+0x3b4>)
 800bf4e:	011a      	lsls	r2, r3, #4
 800bf50:	4603      	mov	r3, r0
 800bf52:	015b      	lsls	r3, r3, #5
 800bf54:	1a1b      	subs	r3, r3, r0
 800bf56:	009b      	lsls	r3, r3, #2
 800bf58:	4413      	add	r3, r2
 800bf5a:	440b      	add	r3, r1
 800bf5c:	3320      	adds	r3, #32
 800bf5e:	ed93 7a00 	vldr	s14, [r3]
 800bf62:	4b41      	ldr	r3, [pc, #260]	; (800c068 <motion_primitive_get_position+0x3b0>)
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	b2db      	uxtb	r3, r3
 800bf68:	4618      	mov	r0, r3
 800bf6a:	4940      	ldr	r1, [pc, #256]	; (800c06c <motion_primitive_get_position+0x3b4>)
 800bf6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6e:	011a      	lsls	r2, r3, #4
 800bf70:	4603      	mov	r3, r0
 800bf72:	015b      	lsls	r3, r3, #5
 800bf74:	1a1b      	subs	r3, r3, r0
 800bf76:	009b      	lsls	r3, r3, #2
 800bf78:	4413      	add	r3, r2
 800bf7a:	440b      	add	r3, r1
 800bf7c:	3320      	adds	r3, #32
 800bf7e:	edd3 6a00 	vldr	s13, [r3]
 800bf82:	4b39      	ldr	r3, [pc, #228]	; (800c068 <motion_primitive_get_position+0x3b0>)
 800bf84:	781b      	ldrb	r3, [r3, #0]
 800bf86:	b2db      	uxtb	r3, r3
 800bf88:	4618      	mov	r0, r3
 800bf8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf8c:	3b01      	subs	r3, #1
 800bf8e:	4937      	ldr	r1, [pc, #220]	; (800c06c <motion_primitive_get_position+0x3b4>)
 800bf90:	011a      	lsls	r2, r3, #4
 800bf92:	4603      	mov	r3, r0
 800bf94:	015b      	lsls	r3, r3, #5
 800bf96:	1a1b      	subs	r3, r3, r0
 800bf98:	009b      	lsls	r3, r3, #2
 800bf9a:	4413      	add	r3, r2
 800bf9c:	440b      	add	r3, r1
 800bf9e:	3320      	adds	r3, #32
 800bfa0:	edd3 7a00 	vldr	s15, [r3]
 800bfa4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800bfa8:	edd7 7a07 	vldr	s15, [r7, #28]
 800bfac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800bfb0:	edd7 7a06 	vldr	s15, [r7, #24]
 800bfb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bfb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bfbc:	edc7 7a04 	vstr	s15, [r7, #16]
			// Apply offset, then scale it
			x_cmd += primitives[primitive_index].x_offset_m;
 800bfc0:	4b29      	ldr	r3, [pc, #164]	; (800c068 <motion_primitive_get_position+0x3b0>)
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	b2db      	uxtb	r3, r3
 800bfc6:	4619      	mov	r1, r3
 800bfc8:	4a28      	ldr	r2, [pc, #160]	; (800c06c <motion_primitive_get_position+0x3b4>)
 800bfca:	460b      	mov	r3, r1
 800bfcc:	015b      	lsls	r3, r3, #5
 800bfce:	1a5b      	subs	r3, r3, r1
 800bfd0:	009b      	lsls	r3, r3, #2
 800bfd2:	4413      	add	r3, r2
 800bfd4:	3304      	adds	r3, #4
 800bfd6:	edd3 7a00 	vldr	s15, [r3]
 800bfda:	ed97 7a05 	vldr	s14, [r7, #20]
 800bfde:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bfe2:	edc7 7a05 	vstr	s15, [r7, #20]
			x_cmd *= primitives[primitive_index].x_scale;
 800bfe6:	4b20      	ldr	r3, [pc, #128]	; (800c068 <motion_primitive_get_position+0x3b0>)
 800bfe8:	781b      	ldrb	r3, [r3, #0]
 800bfea:	b2db      	uxtb	r3, r3
 800bfec:	4619      	mov	r1, r3
 800bfee:	4a1f      	ldr	r2, [pc, #124]	; (800c06c <motion_primitive_get_position+0x3b4>)
 800bff0:	460b      	mov	r3, r1
 800bff2:	015b      	lsls	r3, r3, #5
 800bff4:	1a5b      	subs	r3, r3, r1
 800bff6:	009b      	lsls	r3, r3, #2
 800bff8:	4413      	add	r3, r2
 800bffa:	330c      	adds	r3, #12
 800bffc:	edd3 7a00 	vldr	s15, [r3]
 800c000:	ed97 7a05 	vldr	s14, [r7, #20]
 800c004:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c008:	edc7 7a05 	vstr	s15, [r7, #20]
			y_cmd += primitives[primitive_index].y_offset_m;
 800c00c:	4b16      	ldr	r3, [pc, #88]	; (800c068 <motion_primitive_get_position+0x3b0>)
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	b2db      	uxtb	r3, r3
 800c012:	4619      	mov	r1, r3
 800c014:	4a15      	ldr	r2, [pc, #84]	; (800c06c <motion_primitive_get_position+0x3b4>)
 800c016:	460b      	mov	r3, r1
 800c018:	015b      	lsls	r3, r3, #5
 800c01a:	1a5b      	subs	r3, r3, r1
 800c01c:	009b      	lsls	r3, r3, #2
 800c01e:	4413      	add	r3, r2
 800c020:	3308      	adds	r3, #8
 800c022:	edd3 7a00 	vldr	s15, [r3]
 800c026:	ed97 7a04 	vldr	s14, [r7, #16]
 800c02a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c02e:	edc7 7a04 	vstr	s15, [r7, #16]
			y_cmd *= primitives[primitive_index].y_scale;
 800c032:	4b0d      	ldr	r3, [pc, #52]	; (800c068 <motion_primitive_get_position+0x3b0>)
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	b2db      	uxtb	r3, r3
 800c038:	4619      	mov	r1, r3
 800c03a:	4a0c      	ldr	r2, [pc, #48]	; (800c06c <motion_primitive_get_position+0x3b4>)
 800c03c:	460b      	mov	r3, r1
 800c03e:	015b      	lsls	r3, r3, #5
 800c040:	1a5b      	subs	r3, r3, r1
 800c042:	009b      	lsls	r3, r3, #2
 800c044:	4413      	add	r3, r2
 800c046:	3310      	adds	r3, #16
 800c048:	edd3 7a00 	vldr	s15, [r3]
 800c04c:	ed97 7a04 	vldr	s14, [r7, #16]
 800c050:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c054:	edc7 7a04 	vstr	s15, [r7, #16]

			*x = x_cmd;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	697a      	ldr	r2, [r7, #20]
 800c05c:	601a      	str	r2, [r3, #0]
			*y = y_cmd;
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	693a      	ldr	r2, [r7, #16]
 800c062:	601a      	str	r2, [r3, #0]
			return;
 800c064:	e14d      	b.n	800c302 <motion_primitive_get_position+0x64a>
 800c066:	bf00      	nop
 800c068:	200152b4 	.word	0x200152b4
 800c06c:	200152bc 	.word	0x200152bc
		}
		// Are we at the end, and after last keyframe
		if(i == (primitives[primitive_index].num_keyframes-1) && time_in_cycle_part >= primitives[primitive_index].frames[i].t_part)
 800c070:	4ba5      	ldr	r3, [pc, #660]	; (800c308 <motion_primitive_get_position+0x650>)
 800c072:	781b      	ldrb	r3, [r3, #0]
 800c074:	b2db      	uxtb	r3, r3
 800c076:	4619      	mov	r1, r3
 800c078:	4aa4      	ldr	r2, [pc, #656]	; (800c30c <motion_primitive_get_position+0x654>)
 800c07a:	460b      	mov	r3, r1
 800c07c:	015b      	lsls	r3, r3, #5
 800c07e:	1a5b      	subs	r3, r3, r1
 800c080:	009b      	lsls	r3, r3, #2
 800c082:	4413      	add	r3, r2
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	3b01      	subs	r3, #1
 800c088:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c08a:	429a      	cmp	r2, r3
 800c08c:	f040 8126 	bne.w	800c2dc <motion_primitive_get_position+0x624>
 800c090:	4b9d      	ldr	r3, [pc, #628]	; (800c308 <motion_primitive_get_position+0x650>)
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	b2db      	uxtb	r3, r3
 800c096:	4618      	mov	r0, r3
 800c098:	499c      	ldr	r1, [pc, #624]	; (800c30c <motion_primitive_get_position+0x654>)
 800c09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09c:	3302      	adds	r3, #2
 800c09e:	011a      	lsls	r2, r3, #4
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	015b      	lsls	r3, r3, #5
 800c0a4:	1a1b      	subs	r3, r3, r0
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	4413      	add	r3, r2
 800c0aa:	440b      	add	r3, r1
 800c0ac:	3304      	adds	r3, #4
 800c0ae:	edd3 7a00 	vldr	s15, [r3]
 800c0b2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c0b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c0ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0be:	f2c0 810d 	blt.w	800c2dc <motion_primitive_get_position+0x624>
		{
			// Last value plus section of new value
			float dt = (time_in_cycle_part - primitives[primitive_index].frames[i].t_part);
 800c0c2:	4b91      	ldr	r3, [pc, #580]	; (800c308 <motion_primitive_get_position+0x650>)
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	b2db      	uxtb	r3, r3
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	4990      	ldr	r1, [pc, #576]	; (800c30c <motion_primitive_get_position+0x654>)
 800c0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ce:	3302      	adds	r3, #2
 800c0d0:	011a      	lsls	r2, r3, #4
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	015b      	lsls	r3, r3, #5
 800c0d6:	1a1b      	subs	r3, r3, r0
 800c0d8:	009b      	lsls	r3, r3, #2
 800c0da:	4413      	add	r3, r2
 800c0dc:	440b      	add	r3, r1
 800c0de:	3304      	adds	r3, #4
 800c0e0:	edd3 7a00 	vldr	s15, [r3]
 800c0e4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c0e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c0ec:	edc7 7a03 	vstr	s15, [r7, #12]
			float d_section_dt = 1.0 / (1.0 - primitives[primitive_index].frames[i].t_part);
 800c0f0:	4b85      	ldr	r3, [pc, #532]	; (800c308 <motion_primitive_get_position+0x650>)
 800c0f2:	781b      	ldrb	r3, [r3, #0]
 800c0f4:	b2db      	uxtb	r3, r3
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	4984      	ldr	r1, [pc, #528]	; (800c30c <motion_primitive_get_position+0x654>)
 800c0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fc:	3302      	adds	r3, #2
 800c0fe:	011a      	lsls	r2, r3, #4
 800c100:	4603      	mov	r3, r0
 800c102:	015b      	lsls	r3, r3, #5
 800c104:	1a1b      	subs	r3, r3, r0
 800c106:	009b      	lsls	r3, r3, #2
 800c108:	4413      	add	r3, r2
 800c10a:	440b      	add	r3, r1
 800c10c:	3304      	adds	r3, #4
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	4618      	mov	r0, r3
 800c112:	f7f4 f9c1 	bl	8000498 <__aeabi_f2d>
 800c116:	4603      	mov	r3, r0
 800c118:	460c      	mov	r4, r1
 800c11a:	461a      	mov	r2, r3
 800c11c:	4623      	mov	r3, r4
 800c11e:	f04f 0000 	mov.w	r0, #0
 800c122:	497b      	ldr	r1, [pc, #492]	; (800c310 <motion_primitive_get_position+0x658>)
 800c124:	f7f4 f858 	bl	80001d8 <__aeabi_dsub>
 800c128:	4603      	mov	r3, r0
 800c12a:	460c      	mov	r4, r1
 800c12c:	461a      	mov	r2, r3
 800c12e:	4623      	mov	r3, r4
 800c130:	f04f 0000 	mov.w	r0, #0
 800c134:	4976      	ldr	r1, [pc, #472]	; (800c310 <motion_primitive_get_position+0x658>)
 800c136:	f7f4 fb31 	bl	800079c <__aeabi_ddiv>
 800c13a:	4603      	mov	r3, r0
 800c13c:	460c      	mov	r4, r1
 800c13e:	4618      	mov	r0, r3
 800c140:	4621      	mov	r1, r4
 800c142:	f7f4 fcd9 	bl	8000af8 <__aeabi_d2f>
 800c146:	4603      	mov	r3, r0
 800c148:	60bb      	str	r3, [r7, #8]
			x_cmd = primitives[primitive_index].frames[i].x + (dt * (primitives[primitive_index].frames[0].x - primitives[primitive_index].frames[i].x) * d_section_dt); // Cyclical, so zero index is next frame at end
 800c14a:	4b6f      	ldr	r3, [pc, #444]	; (800c308 <motion_primitive_get_position+0x650>)
 800c14c:	781b      	ldrb	r3, [r3, #0]
 800c14e:	b2db      	uxtb	r3, r3
 800c150:	4618      	mov	r0, r3
 800c152:	496e      	ldr	r1, [pc, #440]	; (800c30c <motion_primitive_get_position+0x654>)
 800c154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c156:	011a      	lsls	r2, r3, #4
 800c158:	4603      	mov	r3, r0
 800c15a:	015b      	lsls	r3, r3, #5
 800c15c:	1a1b      	subs	r3, r3, r0
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	4413      	add	r3, r2
 800c162:	440b      	add	r3, r1
 800c164:	331c      	adds	r3, #28
 800c166:	ed93 7a00 	vldr	s14, [r3]
 800c16a:	4b67      	ldr	r3, [pc, #412]	; (800c308 <motion_primitive_get_position+0x650>)
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	b2db      	uxtb	r3, r3
 800c170:	4619      	mov	r1, r3
 800c172:	4a66      	ldr	r2, [pc, #408]	; (800c30c <motion_primitive_get_position+0x654>)
 800c174:	460b      	mov	r3, r1
 800c176:	015b      	lsls	r3, r3, #5
 800c178:	1a5b      	subs	r3, r3, r1
 800c17a:	009b      	lsls	r3, r3, #2
 800c17c:	4413      	add	r3, r2
 800c17e:	331c      	adds	r3, #28
 800c180:	edd3 6a00 	vldr	s13, [r3]
 800c184:	4b60      	ldr	r3, [pc, #384]	; (800c308 <motion_primitive_get_position+0x650>)
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	b2db      	uxtb	r3, r3
 800c18a:	4618      	mov	r0, r3
 800c18c:	495f      	ldr	r1, [pc, #380]	; (800c30c <motion_primitive_get_position+0x654>)
 800c18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c190:	011a      	lsls	r2, r3, #4
 800c192:	4603      	mov	r3, r0
 800c194:	015b      	lsls	r3, r3, #5
 800c196:	1a1b      	subs	r3, r3, r0
 800c198:	009b      	lsls	r3, r3, #2
 800c19a:	4413      	add	r3, r2
 800c19c:	440b      	add	r3, r1
 800c19e:	331c      	adds	r3, #28
 800c1a0:	edd3 7a00 	vldr	s15, [r3]
 800c1a4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c1a8:	edd7 7a03 	vldr	s15, [r7, #12]
 800c1ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c1b0:	edd7 7a02 	vldr	s15, [r7, #8]
 800c1b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c1b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1bc:	edc7 7a05 	vstr	s15, [r7, #20]
			y_cmd = primitives[primitive_index].frames[i].y + (dt * (primitives[primitive_index].frames[0].y - primitives[primitive_index].frames[i].y) * d_section_dt);
 800c1c0:	4b51      	ldr	r3, [pc, #324]	; (800c308 <motion_primitive_get_position+0x650>)
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	b2db      	uxtb	r3, r3
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	4950      	ldr	r1, [pc, #320]	; (800c30c <motion_primitive_get_position+0x654>)
 800c1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1cc:	011a      	lsls	r2, r3, #4
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	015b      	lsls	r3, r3, #5
 800c1d2:	1a1b      	subs	r3, r3, r0
 800c1d4:	009b      	lsls	r3, r3, #2
 800c1d6:	4413      	add	r3, r2
 800c1d8:	440b      	add	r3, r1
 800c1da:	3320      	adds	r3, #32
 800c1dc:	ed93 7a00 	vldr	s14, [r3]
 800c1e0:	4b49      	ldr	r3, [pc, #292]	; (800c308 <motion_primitive_get_position+0x650>)
 800c1e2:	781b      	ldrb	r3, [r3, #0]
 800c1e4:	b2db      	uxtb	r3, r3
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	4a48      	ldr	r2, [pc, #288]	; (800c30c <motion_primitive_get_position+0x654>)
 800c1ea:	460b      	mov	r3, r1
 800c1ec:	015b      	lsls	r3, r3, #5
 800c1ee:	1a5b      	subs	r3, r3, r1
 800c1f0:	009b      	lsls	r3, r3, #2
 800c1f2:	4413      	add	r3, r2
 800c1f4:	3320      	adds	r3, #32
 800c1f6:	edd3 6a00 	vldr	s13, [r3]
 800c1fa:	4b43      	ldr	r3, [pc, #268]	; (800c308 <motion_primitive_get_position+0x650>)
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	4618      	mov	r0, r3
 800c202:	4942      	ldr	r1, [pc, #264]	; (800c30c <motion_primitive_get_position+0x654>)
 800c204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c206:	011a      	lsls	r2, r3, #4
 800c208:	4603      	mov	r3, r0
 800c20a:	015b      	lsls	r3, r3, #5
 800c20c:	1a1b      	subs	r3, r3, r0
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	4413      	add	r3, r2
 800c212:	440b      	add	r3, r1
 800c214:	3320      	adds	r3, #32
 800c216:	edd3 7a00 	vldr	s15, [r3]
 800c21a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c21e:	edd7 7a03 	vldr	s15, [r7, #12]
 800c222:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c226:	edd7 7a02 	vldr	s15, [r7, #8]
 800c22a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c22e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c232:	edc7 7a04 	vstr	s15, [r7, #16]
			// Apply offset, then scale it
			x_cmd += primitives[primitive_index].x_offset_m;
 800c236:	4b34      	ldr	r3, [pc, #208]	; (800c308 <motion_primitive_get_position+0x650>)
 800c238:	781b      	ldrb	r3, [r3, #0]
 800c23a:	b2db      	uxtb	r3, r3
 800c23c:	4619      	mov	r1, r3
 800c23e:	4a33      	ldr	r2, [pc, #204]	; (800c30c <motion_primitive_get_position+0x654>)
 800c240:	460b      	mov	r3, r1
 800c242:	015b      	lsls	r3, r3, #5
 800c244:	1a5b      	subs	r3, r3, r1
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	4413      	add	r3, r2
 800c24a:	3304      	adds	r3, #4
 800c24c:	edd3 7a00 	vldr	s15, [r3]
 800c250:	ed97 7a05 	vldr	s14, [r7, #20]
 800c254:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c258:	edc7 7a05 	vstr	s15, [r7, #20]
			x_cmd *= primitives[primitive_index].x_scale;
 800c25c:	4b2a      	ldr	r3, [pc, #168]	; (800c308 <motion_primitive_get_position+0x650>)
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	b2db      	uxtb	r3, r3
 800c262:	4619      	mov	r1, r3
 800c264:	4a29      	ldr	r2, [pc, #164]	; (800c30c <motion_primitive_get_position+0x654>)
 800c266:	460b      	mov	r3, r1
 800c268:	015b      	lsls	r3, r3, #5
 800c26a:	1a5b      	subs	r3, r3, r1
 800c26c:	009b      	lsls	r3, r3, #2
 800c26e:	4413      	add	r3, r2
 800c270:	330c      	adds	r3, #12
 800c272:	edd3 7a00 	vldr	s15, [r3]
 800c276:	ed97 7a05 	vldr	s14, [r7, #20]
 800c27a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c27e:	edc7 7a05 	vstr	s15, [r7, #20]
			y_cmd += primitives[primitive_index].y_offset_m;
 800c282:	4b21      	ldr	r3, [pc, #132]	; (800c308 <motion_primitive_get_position+0x650>)
 800c284:	781b      	ldrb	r3, [r3, #0]
 800c286:	b2db      	uxtb	r3, r3
 800c288:	4619      	mov	r1, r3
 800c28a:	4a20      	ldr	r2, [pc, #128]	; (800c30c <motion_primitive_get_position+0x654>)
 800c28c:	460b      	mov	r3, r1
 800c28e:	015b      	lsls	r3, r3, #5
 800c290:	1a5b      	subs	r3, r3, r1
 800c292:	009b      	lsls	r3, r3, #2
 800c294:	4413      	add	r3, r2
 800c296:	3308      	adds	r3, #8
 800c298:	edd3 7a00 	vldr	s15, [r3]
 800c29c:	ed97 7a04 	vldr	s14, [r7, #16]
 800c2a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2a4:	edc7 7a04 	vstr	s15, [r7, #16]
			y_cmd *= primitives[primitive_index].y_scale;
 800c2a8:	4b17      	ldr	r3, [pc, #92]	; (800c308 <motion_primitive_get_position+0x650>)
 800c2aa:	781b      	ldrb	r3, [r3, #0]
 800c2ac:	b2db      	uxtb	r3, r3
 800c2ae:	4619      	mov	r1, r3
 800c2b0:	4a16      	ldr	r2, [pc, #88]	; (800c30c <motion_primitive_get_position+0x654>)
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	015b      	lsls	r3, r3, #5
 800c2b6:	1a5b      	subs	r3, r3, r1
 800c2b8:	009b      	lsls	r3, r3, #2
 800c2ba:	4413      	add	r3, r2
 800c2bc:	3310      	adds	r3, #16
 800c2be:	edd3 7a00 	vldr	s15, [r3]
 800c2c2:	ed97 7a04 	vldr	s14, [r7, #16]
 800c2c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2ca:	edc7 7a04 	vstr	s15, [r7, #16]

			*x = x_cmd;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	697a      	ldr	r2, [r7, #20]
 800c2d2:	601a      	str	r2, [r3, #0]
			*y = y_cmd;
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	693a      	ldr	r2, [r7, #16]
 800c2d8:	601a      	str	r2, [r3, #0]
			return;
 800c2da:	e012      	b.n	800c302 <motion_primitive_get_position+0x64a>
	for(i = 1; i < primitives[primitive_index].num_keyframes; i++)
 800c2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2de:	3301      	adds	r3, #1
 800c2e0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c2e2:	4b09      	ldr	r3, [pc, #36]	; (800c308 <motion_primitive_get_position+0x650>)
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	4619      	mov	r1, r3
 800c2ea:	4a08      	ldr	r2, [pc, #32]	; (800c30c <motion_primitive_get_position+0x654>)
 800c2ec:	460b      	mov	r3, r1
 800c2ee:	015b      	lsls	r3, r3, #5
 800c2f0:	1a5b      	subs	r3, r3, r1
 800c2f2:	009b      	lsls	r3, r3, #2
 800c2f4:	4413      	add	r3, r2
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	f6ff ad69 	blt.w	800bdd4 <motion_primitive_get_position+0x11c>
		}
	}
 }
 800c302:	3730      	adds	r7, #48	; 0x30
 800c304:	46bd      	mov	sp, r7
 800c306:	bdb0      	pop	{r4, r5, r7, pc}
 800c308:	200152b4 	.word	0x200152b4
 800c30c:	200152bc 	.word	0x200152bc
 800c310:	3ff00000 	.word	0x3ff00000
 800c314:	00000000 	.word	0x00000000

0800c318 <motion_primitive_get_position_bezier_quadratic>:

 void motion_primitive_get_position_bezier_quadratic(float * x, float * y, KEYFRAME_CONTROL * ctrl_method)
 {
 800c318:	b5b0      	push	{r4, r5, r7, lr}
 800c31a:	b08e      	sub	sp, #56	; 0x38
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	60f8      	str	r0, [r7, #12]
 800c320:	60b9      	str	r1, [r7, #8]
 800c322:	607a      	str	r2, [r7, #4]
	 // Default no change to control method
	 *ctrl_method = KEY_DO_NOT_CHANGE;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2200      	movs	r2, #0
 800c328:	701a      	strb	r2, [r3, #0]

	if( primitives[primitive_index].num_keyframes % 2 != 0)
 800c32a:	4b57      	ldr	r3, [pc, #348]	; (800c488 <motion_primitive_get_position_bezier_quadratic+0x170>)
 800c32c:	781b      	ldrb	r3, [r3, #0]
 800c32e:	b2db      	uxtb	r3, r3
 800c330:	4619      	mov	r1, r3
 800c332:	4a56      	ldr	r2, [pc, #344]	; (800c48c <motion_primitive_get_position_bezier_quadratic+0x174>)
 800c334:	460b      	mov	r3, r1
 800c336:	015b      	lsls	r3, r3, #5
 800c338:	1a5b      	subs	r3, r3, r1
 800c33a:	009b      	lsls	r3, r3, #2
 800c33c:	4413      	add	r3, r2
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	f003 0301 	and.w	r3, r3, #1
 800c344:	b2db      	uxtb	r3, r3
 800c346:	2b00      	cmp	r3, #0
 800c348:	d01b      	beq.n	800c382 <motion_primitive_get_position_bezier_quadratic+0x6a>
	{
		// Stay at first element, assume it is safe.
		// Bezier quadratic curve cycle must have even number of elements
		*x = primitives[primitive_index].frames[0].x;
 800c34a:	4b4f      	ldr	r3, [pc, #316]	; (800c488 <motion_primitive_get_position_bezier_quadratic+0x170>)
 800c34c:	781b      	ldrb	r3, [r3, #0]
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	4619      	mov	r1, r3
 800c352:	4a4e      	ldr	r2, [pc, #312]	; (800c48c <motion_primitive_get_position_bezier_quadratic+0x174>)
 800c354:	460b      	mov	r3, r1
 800c356:	015b      	lsls	r3, r3, #5
 800c358:	1a5b      	subs	r3, r3, r1
 800c35a:	009b      	lsls	r3, r3, #2
 800c35c:	4413      	add	r3, r2
 800c35e:	331c      	adds	r3, #28
 800c360:	681a      	ldr	r2, [r3, #0]
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	601a      	str	r2, [r3, #0]
		*y = primitives[primitive_index].frames[0].y;
 800c366:	4b48      	ldr	r3, [pc, #288]	; (800c488 <motion_primitive_get_position_bezier_quadratic+0x170>)
 800c368:	781b      	ldrb	r3, [r3, #0]
 800c36a:	b2db      	uxtb	r3, r3
 800c36c:	4619      	mov	r1, r3
 800c36e:	4a47      	ldr	r2, [pc, #284]	; (800c48c <motion_primitive_get_position_bezier_quadratic+0x174>)
 800c370:	460b      	mov	r3, r1
 800c372:	015b      	lsls	r3, r3, #5
 800c374:	1a5b      	subs	r3, r3, r1
 800c376:	009b      	lsls	r3, r3, #2
 800c378:	4413      	add	r3, r2
 800c37a:	3320      	adds	r3, #32
 800c37c:	681a      	ldr	r2, [r3, #0]
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	601a      	str	r2, [r3, #0]
	}
	// First find global time,taking into account time syncs and primitive local offsets
	float current_t = 0.001 * (xTaskGetTickCount() - time_offset) - primitives[primitive_index].t_offset;
 800c382:	f7fc fc2f 	bl	8008be4 <xTaskGetTickCount>
 800c386:	4602      	mov	r2, r0
 800c388:	4b41      	ldr	r3, [pc, #260]	; (800c490 <motion_primitive_get_position_bezier_quadratic+0x178>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	1ad3      	subs	r3, r2, r3
 800c38e:	4618      	mov	r0, r3
 800c390:	f7f4 f860 	bl	8000454 <__aeabi_ui2d>
 800c394:	a33a      	add	r3, pc, #232	; (adr r3, 800c480 <motion_primitive_get_position_bezier_quadratic+0x168>)
 800c396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39a:	f7f4 f8d5 	bl	8000548 <__aeabi_dmul>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	460c      	mov	r4, r1
 800c3a2:	4625      	mov	r5, r4
 800c3a4:	461c      	mov	r4, r3
 800c3a6:	4b38      	ldr	r3, [pc, #224]	; (800c488 <motion_primitive_get_position_bezier_quadratic+0x170>)
 800c3a8:	781b      	ldrb	r3, [r3, #0]
 800c3aa:	b2db      	uxtb	r3, r3
 800c3ac:	4619      	mov	r1, r3
 800c3ae:	4a37      	ldr	r2, [pc, #220]	; (800c48c <motion_primitive_get_position_bezier_quadratic+0x174>)
 800c3b0:	460b      	mov	r3, r1
 800c3b2:	015b      	lsls	r3, r3, #5
 800c3b4:	1a5b      	subs	r3, r3, r1
 800c3b6:	009b      	lsls	r3, r3, #2
 800c3b8:	4413      	add	r3, r2
 800c3ba:	3318      	adds	r3, #24
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7f4 f86a 	bl	8000498 <__aeabi_f2d>
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	460b      	mov	r3, r1
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	4629      	mov	r1, r5
 800c3cc:	f7f3 ff04 	bl	80001d8 <__aeabi_dsub>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	460c      	mov	r4, r1
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	4621      	mov	r1, r4
 800c3d8:	f7f4 fb8e 	bl	8000af8 <__aeabi_d2f>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	62fb      	str	r3, [r7, #44]	; 0x2c

	float time_in_cycle = fmod(current_t, primitives[primitive_index].tau);
 800c3e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3e2:	f7f4 f859 	bl	8000498 <__aeabi_f2d>
 800c3e6:	4604      	mov	r4, r0
 800c3e8:	460d      	mov	r5, r1
 800c3ea:	4b27      	ldr	r3, [pc, #156]	; (800c488 <motion_primitive_get_position_bezier_quadratic+0x170>)
 800c3ec:	781b      	ldrb	r3, [r3, #0]
 800c3ee:	b2db      	uxtb	r3, r3
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	4a26      	ldr	r2, [pc, #152]	; (800c48c <motion_primitive_get_position_bezier_quadratic+0x174>)
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	015b      	lsls	r3, r3, #5
 800c3f8:	1a5b      	subs	r3, r3, r1
 800c3fa:	009b      	lsls	r3, r3, #2
 800c3fc:	4413      	add	r3, r2
 800c3fe:	3314      	adds	r3, #20
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	4618      	mov	r0, r3
 800c404:	f7f4 f848 	bl	8000498 <__aeabi_f2d>
 800c408:	4602      	mov	r2, r0
 800c40a:	460b      	mov	r3, r1
 800c40c:	ec43 2b11 	vmov	d1, r2, r3
 800c410:	ec45 4b10 	vmov	d0, r4, r5
 800c414:	f000 ffa2 	bl	800d35c <fmod>
 800c418:	ec54 3b10 	vmov	r3, r4, d0
 800c41c:	4618      	mov	r0, r3
 800c41e:	4621      	mov	r1, r4
 800c420:	f7f4 fb6a 	bl	8000af8 <__aeabi_d2f>
 800c424:	4603      	mov	r3, r0
 800c426:	62bb      	str	r3, [r7, #40]	; 0x28
	float time_in_cycle_part = time_in_cycle / primitives[primitive_index].tau; // Prevent further mults
 800c428:	4b17      	ldr	r3, [pc, #92]	; (800c488 <motion_primitive_get_position_bezier_quadratic+0x170>)
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	b2db      	uxtb	r3, r3
 800c42e:	4619      	mov	r1, r3
 800c430:	4a16      	ldr	r2, [pc, #88]	; (800c48c <motion_primitive_get_position_bezier_quadratic+0x174>)
 800c432:	460b      	mov	r3, r1
 800c434:	015b      	lsls	r3, r3, #5
 800c436:	1a5b      	subs	r3, r3, r1
 800c438:	009b      	lsls	r3, r3, #2
 800c43a:	4413      	add	r3, r2
 800c43c:	3314      	adds	r3, #20
 800c43e:	ed93 7a00 	vldr	s14, [r3]
 800c442:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c44a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	if(primitives[primitive_index].time_reverse > 0)
 800c44e:	4b0e      	ldr	r3, [pc, #56]	; (800c488 <motion_primitive_get_position_bezier_quadratic+0x170>)
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	b2db      	uxtb	r3, r3
 800c454:	4619      	mov	r1, r3
 800c456:	4a0d      	ldr	r2, [pc, #52]	; (800c48c <motion_primitive_get_position_bezier_quadratic+0x174>)
 800c458:	460b      	mov	r3, r1
 800c45a:	015b      	lsls	r3, r3, #5
 800c45c:	1a5b      	subs	r3, r3, r1
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	4413      	add	r3, r2
 800c462:	3302      	adds	r3, #2
 800c464:	781b      	ldrb	r3, [r3, #0]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d007      	beq.n	800c47a <motion_primitive_get_position_bezier_quadratic+0x162>
	{
		time_in_cycle_part = 1.0 - time_in_cycle_part;
 800c46a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c46e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c472:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c476:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	// Now find where we are in the cycle and Bezier quadratic interpolation
	// Every odd keyframe is a guide point. Path moves through even keyframes
	int i;
	float x_cmd, y_cmd;
	for(i = 1; i < primitives[primitive_index].num_keyframes/2; i++)
 800c47a:	2301      	movs	r3, #1
 800c47c:	633b      	str	r3, [r7, #48]	; 0x30
 800c47e:	e362      	b.n	800cb46 <motion_primitive_get_position_bezier_quadratic+0x82e>
 800c480:	d2f1a9fc 	.word	0xd2f1a9fc
 800c484:	3f50624d 	.word	0x3f50624d
 800c488:	200152b4 	.word	0x200152b4
 800c48c:	200152bc 	.word	0x200152bc
 800c490:	200152b8 	.word	0x200152b8
	{
		// find the keyframe, looking between every other, starting at index 0
		// e.g. for 6 keyframes, we look at 0, 2, 4, and consider "6" as 0 again
		if(time_in_cycle_part >= primitives[primitive_index].frames[2*i-2].t_part && time_in_cycle_part < primitives[primitive_index].frames[2*i].t_part)
 800c494:	4bd7      	ldr	r3, [pc, #860]	; (800c7f4 <motion_primitive_get_position_bezier_quadratic+0x4dc>)
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	b2db      	uxtb	r3, r3
 800c49a:	4618      	mov	r0, r3
 800c49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c49e:	3b01      	subs	r3, #1
 800c4a0:	005b      	lsls	r3, r3, #1
 800c4a2:	49d5      	ldr	r1, [pc, #852]	; (800c7f8 <motion_primitive_get_position_bezier_quadratic+0x4e0>)
 800c4a4:	3302      	adds	r3, #2
 800c4a6:	011a      	lsls	r2, r3, #4
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	015b      	lsls	r3, r3, #5
 800c4ac:	1a1b      	subs	r3, r3, r0
 800c4ae:	009b      	lsls	r3, r3, #2
 800c4b0:	4413      	add	r3, r2
 800c4b2:	440b      	add	r3, r1
 800c4b4:	3304      	adds	r3, #4
 800c4b6:	edd3 7a00 	vldr	s15, [r3]
 800c4ba:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c4be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c4c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4c6:	f2c0 819d 	blt.w	800c804 <motion_primitive_get_position_bezier_quadratic+0x4ec>
 800c4ca:	4bca      	ldr	r3, [pc, #808]	; (800c7f4 <motion_primitive_get_position_bezier_quadratic+0x4dc>)
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	b2db      	uxtb	r3, r3
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d4:	005b      	lsls	r3, r3, #1
 800c4d6:	49c8      	ldr	r1, [pc, #800]	; (800c7f8 <motion_primitive_get_position_bezier_quadratic+0x4e0>)
 800c4d8:	3302      	adds	r3, #2
 800c4da:	011a      	lsls	r2, r3, #4
 800c4dc:	4603      	mov	r3, r0
 800c4de:	015b      	lsls	r3, r3, #5
 800c4e0:	1a1b      	subs	r3, r3, r0
 800c4e2:	009b      	lsls	r3, r3, #2
 800c4e4:	4413      	add	r3, r2
 800c4e6:	440b      	add	r3, r1
 800c4e8:	3304      	adds	r3, #4
 800c4ea:	edd3 7a00 	vldr	s15, [r3]
 800c4ee:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c4f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c4f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4fa:	f140 8183 	bpl.w	800c804 <motion_primitive_get_position_bezier_quadratic+0x4ec>
		{
			// scale to something that varies 0 <= dt < 1 between the points
			float dt = (primitives[primitive_index].frames[2*i].t_part - time_in_cycle_part) / (primitives[primitive_index].frames[2*i].t_part - primitives[primitive_index].frames[2*i - 2].t_part);
 800c4fe:	4bbd      	ldr	r3, [pc, #756]	; (800c7f4 <motion_primitive_get_position_bezier_quadratic+0x4dc>)
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	b2db      	uxtb	r3, r3
 800c504:	4618      	mov	r0, r3
 800c506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c508:	005b      	lsls	r3, r3, #1
 800c50a:	49bb      	ldr	r1, [pc, #748]	; (800c7f8 <motion_primitive_get_position_bezier_quadratic+0x4e0>)
 800c50c:	3302      	adds	r3, #2
 800c50e:	011a      	lsls	r2, r3, #4
 800c510:	4603      	mov	r3, r0
 800c512:	015b      	lsls	r3, r3, #5
 800c514:	1a1b      	subs	r3, r3, r0
 800c516:	009b      	lsls	r3, r3, #2
 800c518:	4413      	add	r3, r2
 800c51a:	440b      	add	r3, r1
 800c51c:	3304      	adds	r3, #4
 800c51e:	ed93 7a00 	vldr	s14, [r3]
 800c522:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c526:	ee77 6a67 	vsub.f32	s13, s14, s15
 800c52a:	4bb2      	ldr	r3, [pc, #712]	; (800c7f4 <motion_primitive_get_position_bezier_quadratic+0x4dc>)
 800c52c:	781b      	ldrb	r3, [r3, #0]
 800c52e:	b2db      	uxtb	r3, r3
 800c530:	4618      	mov	r0, r3
 800c532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c534:	005b      	lsls	r3, r3, #1
 800c536:	49b0      	ldr	r1, [pc, #704]	; (800c7f8 <motion_primitive_get_position_bezier_quadratic+0x4e0>)
 800c538:	3302      	adds	r3, #2
 800c53a:	011a      	lsls	r2, r3, #4
 800c53c:	4603      	mov	r3, r0
 800c53e:	015b      	lsls	r3, r3, #5
 800c540:	1a1b      	subs	r3, r3, r0
 800c542:	009b      	lsls	r3, r3, #2
 800c544:	4413      	add	r3, r2
 800c546:	440b      	add	r3, r1
 800c548:	3304      	adds	r3, #4
 800c54a:	ed93 7a00 	vldr	s14, [r3]
 800c54e:	4ba9      	ldr	r3, [pc, #676]	; (800c7f4 <motion_primitive_get_position_bezier_quadratic+0x4dc>)
 800c550:	781b      	ldrb	r3, [r3, #0]
 800c552:	b2db      	uxtb	r3, r3
 800c554:	4618      	mov	r0, r3
 800c556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c558:	3b01      	subs	r3, #1
 800c55a:	005b      	lsls	r3, r3, #1
 800c55c:	49a6      	ldr	r1, [pc, #664]	; (800c7f8 <motion_primitive_get_position_bezier_quadratic+0x4e0>)
 800c55e:	3302      	adds	r3, #2
 800c560:	011a      	lsls	r2, r3, #4
 800c562:	4603      	mov	r3, r0
 800c564:	015b      	lsls	r3, r3, #5
 800c566:	1a1b      	subs	r3, r3, r0
 800c568:	009b      	lsls	r3, r3, #2
 800c56a:	4413      	add	r3, r2
 800c56c:	440b      	add	r3, r1
 800c56e:	3304      	adds	r3, #4
 800c570:	edd3 7a00 	vldr	s15, [r3]
 800c574:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c578:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c57c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			float one_min_dt = 1.0 - dt; // used many times
 800c580:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c584:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c588:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c58c:	edc7 7a08 	vstr	s15, [r7, #32]
			x_cmd = one_min_dt*(one_min_dt*primitives[primitive_index].frames[2*i].x + dt*primitives[primitive_index].frames[2*i-1].x) + dt * (one_min_dt * primitives[primitive_index].frames[2*i-1].x + dt * primitives[primitive_index].frames[2*i-2].x);
 800c590:	4b98      	ldr	r3, [pc, #608]	; (800c7f4 <motion_primitive_get_position_bezier_quadratic+0x4dc>)
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	b2db      	uxtb	r3, r3
 800c596:	4618      	mov	r0, r3
 800c598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59a:	005b      	lsls	r3, r3, #1
 800c59c:	4996      	ldr	r1, [pc, #600]	; (800c7f8 <motion_primitive_get_position_bezier_quadratic+0x4e0>)
 800c59e:	011a      	lsls	r2, r3, #4
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	015b      	lsls	r3, r3, #5
 800c5a4:	1a1b      	subs	r3, r3, r0
 800c5a6:	009b      	lsls	r3, r3, #2
 800c5a8:	4413      	add	r3, r2
 800c5aa:	440b      	add	r3, r1
 800c5ac:	331c      	adds	r3, #28
 800c5ae:	ed93 7a00 	vldr	s14, [r3]
 800c5b2:	edd7 7a08 	vldr	s15, [r7, #32]
 800c5b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5ba:	4b8e      	ldr	r3, [pc, #568]	; (800c7f4 <motion_primitive_get_position_bezier_quadratic+0x4dc>)
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	b2db      	uxtb	r3, r3
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c4:	005b      	lsls	r3, r3, #1
 800c5c6:	3b01      	subs	r3, #1
 800c5c8:	498b      	ldr	r1, [pc, #556]	; (800c7f8 <motion_primitive_get_position_bezier_quadratic+0x4e0>)
 800c5ca:	011a      	lsls	r2, r3, #4
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	015b      	lsls	r3, r3, #5
 800c5d0:	1a1b      	subs	r3, r3, r0
 800c5d2:	009b      	lsls	r3, r3, #2
 800c5d4:	4413      	add	r3, r2
 800c5d6:	440b      	add	r3, r1
 800c5d8:	331c      	adds	r3, #28
 800c5da:	edd3 6a00 	vldr	s13, [r3]
 800c5de:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c5e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c5e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c5ea:	edd7 7a08 	vldr	s15, [r7, #32]
 800c5ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5f2:	4b80      	ldr	r3, [pc, #512]	; (800c7f4 <motion_primitive_get_position_bezier_quadratic+0x4dc>)
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	b2db      	uxtb	r3, r3
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5fc:	005b      	lsls	r3, r3, #1
 800c5fe:	3b01      	subs	r3, #1
 800c600:	497d      	ldr	r1, [pc, #500]	; (800c7f8 <motion_primitive_get_position_bezier_quadratic+0x4e0>)
 800c602:	011a      	lsls	r2, r3, #4
 800c604:	4603      	mov	r3, r0
 800c606:	015b      	lsls	r3, r3, #5
 800c608:	1a1b      	subs	r3, r3, r0
 800c60a:	009b      	lsls	r3, r3, #2
 800c60c:	4413      	add	r3, r2
 800c60e:	440b      	add	r3, r1
 800c610:	331c      	adds	r3, #28
 800c612:	edd3 6a00 	vldr	s13, [r3]
 800c616:	edd7 7a08 	vldr	s15, [r7, #32]
 800c61a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c61e:	4b75      	ldr	r3, [pc, #468]	; (800c7f4 <motion_primitive_get_position_bezier_quadratic+0x4dc>)
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	b2db      	uxtb	r3, r3
 800c624:	4618      	mov	r0, r3
 800c626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c628:	3b01      	subs	r3, #1
 800c62a:	005b      	lsls	r3, r3, #1
 800c62c:	4972      	ldr	r1, [pc, #456]	; (800c7f8 <motion_primitive_get_position_bezier_quadratic+0x4e0>)
 800c62e:	011a      	lsls	r2, r3, #4
 800c630:	4603      	mov	r3, r0
 800c632:	015b      	lsls	r3, r3, #5
 800c634:	1a1b      	subs	r3, r3, r0
 800c636:	009b      	lsls	r3, r3, #2
 800c638:	4413      	add	r3, r2
 800c63a:	440b      	add	r3, r1
 800c63c:	331c      	adds	r3, #28
 800c63e:	ed93 6a00 	vldr	s12, [r3]
 800c642:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c646:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c64a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c64e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c652:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c656:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c65a:	edc7 7a07 	vstr	s15, [r7, #28]
			y_cmd = one_min_dt*(one_min_dt*primitives[primitive_index].frames[2*i].y + dt*primitives[primitive_index].frames[2*i-1].y) + dt * (one_min_dt * primitives[primitive_index].frames[2*i-1].y + dt * primitives[primitive_index].frames[2*i-2].y);
 800c65e:	4b65      	ldr	r3, [pc, #404]	; (800c7f4 <motion_primitive_get_position_bezier_quadratic+0x4dc>)
 800c660:	781b      	ldrb	r3, [r3, #0]
 800c662:	b2db      	uxtb	r3, r3
 800c664:	4618      	mov	r0, r3
 800c666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c668:	005b      	lsls	r3, r3, #1
 800c66a:	4963      	ldr	r1, [pc, #396]	; (800c7f8 <motion_primitive_get_position_bezier_quadratic+0x4e0>)
 800c66c:	011a      	lsls	r2, r3, #4
 800c66e:	4603      	mov	r3, r0
 800c670:	015b      	lsls	r3, r3, #5
 800c672:	1a1b      	subs	r3, r3, r0
 800c674:	009b      	lsls	r3, r3, #2
 800c676:	4413      	add	r3, r2
 800c678:	440b      	add	r3, r1
 800c67a:	3320      	adds	r3, #32
 800c67c:	ed93 7a00 	vldr	s14, [r3]
 800c680:	edd7 7a08 	vldr	s15, [r7, #32]
 800c684:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c688:	4b5a      	ldr	r3, [pc, #360]	; (800c7f4 <motion_primitive_get_position_bezier_quadratic+0x4dc>)
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	b2db      	uxtb	r3, r3
 800c68e:	4618      	mov	r0, r3
 800c690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c692:	005b      	lsls	r3, r3, #1
 800c694:	3b01      	subs	r3, #1
 800c696:	4958      	ldr	r1, [pc, #352]	; (800c7f8 <motion_primitive_get_position_bezier_quadratic+0x4e0>)
 800c698:	011a      	lsls	r2, r3, #4
 800c69a:	4603      	mov	r3, r0
 800c69c:	015b      	lsls	r3, r3, #5
 800c69e:	1a1b      	subs	r3, r3, r0
 800c6a0:	009b      	lsls	r3, r3, #2
 800c6a2:	4413      	add	r3, r2
 800c6a4:	440b      	add	r3, r1
 800c6a6:	3320      	adds	r3, #32
 800c6a8:	edd3 6a00 	vldr	s13, [r3]
 800c6ac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c6b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c6b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c6b8:	edd7 7a08 	vldr	s15, [r7, #32]
 800c6bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6c0:	4b4c      	ldr	r3, [pc, #304]	; (800c7f4 <motion_primitive_get_position_bezier_quadratic+0x4dc>)
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	b2db      	uxtb	r3, r3
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ca:	005b      	lsls	r3, r3, #1
 800c6cc:	3b01      	subs	r3, #1
 800c6ce:	494a      	ldr	r1, [pc, #296]	; (800c7f8 <motion_primitive_get_position_bezier_quadratic+0x4e0>)
 800c6d0:	011a      	lsls	r2, r3, #4
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	015b      	lsls	r3, r3, #5
 800c6d6:	1a1b      	subs	r3, r3, r0
 800c6d8:	009b      	lsls	r3, r3, #2
 800c6da:	4413      	add	r3, r2
 800c6dc:	440b      	add	r3, r1
 800c6de:	3320      	adds	r3, #32
 800c6e0:	edd3 6a00 	vldr	s13, [r3]
 800c6e4:	edd7 7a08 	vldr	s15, [r7, #32]
 800c6e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c6ec:	4b41      	ldr	r3, [pc, #260]	; (800c7f4 <motion_primitive_get_position_bezier_quadratic+0x4dc>)
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	b2db      	uxtb	r3, r3
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f6:	3b01      	subs	r3, #1
 800c6f8:	005b      	lsls	r3, r3, #1
 800c6fa:	493f      	ldr	r1, [pc, #252]	; (800c7f8 <motion_primitive_get_position_bezier_quadratic+0x4e0>)
 800c6fc:	011a      	lsls	r2, r3, #4
 800c6fe:	4603      	mov	r3, r0
 800c700:	015b      	lsls	r3, r3, #5
 800c702:	1a1b      	subs	r3, r3, r0
 800c704:	009b      	lsls	r3, r3, #2
 800c706:	4413      	add	r3, r2
 800c708:	440b      	add	r3, r1
 800c70a:	3320      	adds	r3, #32
 800c70c:	ed93 6a00 	vldr	s12, [r3]
 800c710:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c714:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c718:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c71c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c720:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c724:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c728:	edc7 7a06 	vstr	s15, [r7, #24]
			// Apply offset, then scale it
			x_cmd += primitives[primitive_index].x_offset_m;
 800c72c:	4b31      	ldr	r3, [pc, #196]	; (800c7f4 <motion_primitive_get_position_bezier_quadratic+0x4dc>)
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	b2db      	uxtb	r3, r3
 800c732:	4619      	mov	r1, r3
 800c734:	4a30      	ldr	r2, [pc, #192]	; (800c7f8 <motion_primitive_get_position_bezier_quadratic+0x4e0>)
 800c736:	460b      	mov	r3, r1
 800c738:	015b      	lsls	r3, r3, #5
 800c73a:	1a5b      	subs	r3, r3, r1
 800c73c:	009b      	lsls	r3, r3, #2
 800c73e:	4413      	add	r3, r2
 800c740:	3304      	adds	r3, #4
 800c742:	edd3 7a00 	vldr	s15, [r3]
 800c746:	ed97 7a07 	vldr	s14, [r7, #28]
 800c74a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c74e:	edc7 7a07 	vstr	s15, [r7, #28]
			x_cmd *= primitives[primitive_index].x_scale;
 800c752:	4b28      	ldr	r3, [pc, #160]	; (800c7f4 <motion_primitive_get_position_bezier_quadratic+0x4dc>)
 800c754:	781b      	ldrb	r3, [r3, #0]
 800c756:	b2db      	uxtb	r3, r3
 800c758:	4619      	mov	r1, r3
 800c75a:	4a27      	ldr	r2, [pc, #156]	; (800c7f8 <motion_primitive_get_position_bezier_quadratic+0x4e0>)
 800c75c:	460b      	mov	r3, r1
 800c75e:	015b      	lsls	r3, r3, #5
 800c760:	1a5b      	subs	r3, r3, r1
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	4413      	add	r3, r2
 800c766:	330c      	adds	r3, #12
 800c768:	edd3 7a00 	vldr	s15, [r3]
 800c76c:	ed97 7a07 	vldr	s14, [r7, #28]
 800c770:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c774:	edc7 7a07 	vstr	s15, [r7, #28]
			y_cmd += primitives[primitive_index].y_offset_m;
 800c778:	4b1e      	ldr	r3, [pc, #120]	; (800c7f4 <motion_primitive_get_position_bezier_quadratic+0x4dc>)
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	b2db      	uxtb	r3, r3
 800c77e:	4619      	mov	r1, r3
 800c780:	4a1d      	ldr	r2, [pc, #116]	; (800c7f8 <motion_primitive_get_position_bezier_quadratic+0x4e0>)
 800c782:	460b      	mov	r3, r1
 800c784:	015b      	lsls	r3, r3, #5
 800c786:	1a5b      	subs	r3, r3, r1
 800c788:	009b      	lsls	r3, r3, #2
 800c78a:	4413      	add	r3, r2
 800c78c:	3308      	adds	r3, #8
 800c78e:	edd3 7a00 	vldr	s15, [r3]
 800c792:	ed97 7a06 	vldr	s14, [r7, #24]
 800c796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c79a:	edc7 7a06 	vstr	s15, [r7, #24]
			y_cmd *= primitives[primitive_index].y_scale;
 800c79e:	4b15      	ldr	r3, [pc, #84]	; (800c7f4 <motion_primitive_get_position_bezier_quadratic+0x4dc>)
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	b2db      	uxtb	r3, r3
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	4a14      	ldr	r2, [pc, #80]	; (800c7f8 <motion_primitive_get_position_bezier_quadratic+0x4e0>)
 800c7a8:	460b      	mov	r3, r1
 800c7aa:	015b      	lsls	r3, r3, #5
 800c7ac:	1a5b      	subs	r3, r3, r1
 800c7ae:	009b      	lsls	r3, r3, #2
 800c7b0:	4413      	add	r3, r2
 800c7b2:	3310      	adds	r3, #16
 800c7b4:	edd3 7a00 	vldr	s15, [r3]
 800c7b8:	ed97 7a06 	vldr	s14, [r7, #24]
 800c7bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7c0:	edc7 7a06 	vstr	s15, [r7, #24]

			*x = x_cmd;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	69fa      	ldr	r2, [r7, #28]
 800c7c8:	601a      	str	r2, [r3, #0]
			*y = y_cmd;
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	69ba      	ldr	r2, [r7, #24]
 800c7ce:	601a      	str	r2, [r3, #0]

			*ctrl_method = primitives[primitive_index].frames[2*i-1].ctrl;
 800c7d0:	4b08      	ldr	r3, [pc, #32]	; (800c7f4 <motion_primitive_get_position_bezier_quadratic+0x4dc>)
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	b2db      	uxtb	r3, r3
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7da:	005b      	lsls	r3, r3, #1
 800c7dc:	3b01      	subs	r3, #1
 800c7de:	4906      	ldr	r1, [pc, #24]	; (800c7f8 <motion_primitive_get_position_bezier_quadratic+0x4e0>)
 800c7e0:	3302      	adds	r3, #2
 800c7e2:	011a      	lsls	r2, r3, #4
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	015b      	lsls	r3, r3, #5
 800c7e8:	1a1b      	subs	r3, r3, r0
 800c7ea:	009b      	lsls	r3, r3, #2
 800c7ec:	4413      	add	r3, r2
 800c7ee:	440b      	add	r3, r1
 800c7f0:	3308      	adds	r3, #8
 800c7f2:	e003      	b.n	800c7fc <motion_primitive_get_position_bezier_quadratic+0x4e4>
 800c7f4:	200152b4 	.word	0x200152b4
 800c7f8:	200152bc 	.word	0x200152bc
 800c7fc:	781a      	ldrb	r2, [r3, #0]
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	701a      	strb	r2, [r3, #0]

			return;
 800c802:	e1b2      	b.n	800cb6a <motion_primitive_get_position_bezier_quadratic+0x852>
		}
		// Are we at the end, and after last keyframe
		if(i == ((primitives[primitive_index].num_keyframes/2)-1) && time_in_cycle_part >= primitives[primitive_index].frames[2*i].t_part)
 800c804:	4bcb      	ldr	r3, [pc, #812]	; (800cb34 <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c806:	781b      	ldrb	r3, [r3, #0]
 800c808:	b2db      	uxtb	r3, r3
 800c80a:	4619      	mov	r1, r3
 800c80c:	4aca      	ldr	r2, [pc, #808]	; (800cb38 <motion_primitive_get_position_bezier_quadratic+0x820>)
 800c80e:	460b      	mov	r3, r1
 800c810:	015b      	lsls	r3, r3, #5
 800c812:	1a5b      	subs	r3, r3, r1
 800c814:	009b      	lsls	r3, r3, #2
 800c816:	4413      	add	r3, r2
 800c818:	781b      	ldrb	r3, [r3, #0]
 800c81a:	085b      	lsrs	r3, r3, #1
 800c81c:	b2db      	uxtb	r3, r3
 800c81e:	3b01      	subs	r3, #1
 800c820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c822:	429a      	cmp	r2, r3
 800c824:	f040 818c 	bne.w	800cb40 <motion_primitive_get_position_bezier_quadratic+0x828>
 800c828:	4bc2      	ldr	r3, [pc, #776]	; (800cb34 <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	b2db      	uxtb	r3, r3
 800c82e:	4618      	mov	r0, r3
 800c830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c832:	005b      	lsls	r3, r3, #1
 800c834:	49c0      	ldr	r1, [pc, #768]	; (800cb38 <motion_primitive_get_position_bezier_quadratic+0x820>)
 800c836:	3302      	adds	r3, #2
 800c838:	011a      	lsls	r2, r3, #4
 800c83a:	4603      	mov	r3, r0
 800c83c:	015b      	lsls	r3, r3, #5
 800c83e:	1a1b      	subs	r3, r3, r0
 800c840:	009b      	lsls	r3, r3, #2
 800c842:	4413      	add	r3, r2
 800c844:	440b      	add	r3, r1
 800c846:	3304      	adds	r3, #4
 800c848:	edd3 7a00 	vldr	s15, [r3]
 800c84c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c850:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c858:	f2c0 8172 	blt.w	800cb40 <motion_primitive_get_position_bezier_quadratic+0x828>
		{
			// Cyclical, so zero index is last
			// scale to something that varies 0 <= dt < 1 between the points
			float dt = (1.0 - time_in_cycle_part) / (1.0 - primitives[primitive_index].frames[2*i].t_part);
 800c85c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c85e:	f7f3 fe1b 	bl	8000498 <__aeabi_f2d>
 800c862:	4603      	mov	r3, r0
 800c864:	460c      	mov	r4, r1
 800c866:	461a      	mov	r2, r3
 800c868:	4623      	mov	r3, r4
 800c86a:	f04f 0000 	mov.w	r0, #0
 800c86e:	49b3      	ldr	r1, [pc, #716]	; (800cb3c <motion_primitive_get_position_bezier_quadratic+0x824>)
 800c870:	f7f3 fcb2 	bl	80001d8 <__aeabi_dsub>
 800c874:	4603      	mov	r3, r0
 800c876:	460c      	mov	r4, r1
 800c878:	4625      	mov	r5, r4
 800c87a:	461c      	mov	r4, r3
 800c87c:	4bad      	ldr	r3, [pc, #692]	; (800cb34 <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c87e:	781b      	ldrb	r3, [r3, #0]
 800c880:	b2db      	uxtb	r3, r3
 800c882:	4618      	mov	r0, r3
 800c884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c886:	005b      	lsls	r3, r3, #1
 800c888:	49ab      	ldr	r1, [pc, #684]	; (800cb38 <motion_primitive_get_position_bezier_quadratic+0x820>)
 800c88a:	3302      	adds	r3, #2
 800c88c:	011a      	lsls	r2, r3, #4
 800c88e:	4603      	mov	r3, r0
 800c890:	015b      	lsls	r3, r3, #5
 800c892:	1a1b      	subs	r3, r3, r0
 800c894:	009b      	lsls	r3, r3, #2
 800c896:	4413      	add	r3, r2
 800c898:	440b      	add	r3, r1
 800c89a:	3304      	adds	r3, #4
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7f3 fdfa 	bl	8000498 <__aeabi_f2d>
 800c8a4:	4602      	mov	r2, r0
 800c8a6:	460b      	mov	r3, r1
 800c8a8:	f04f 0000 	mov.w	r0, #0
 800c8ac:	49a3      	ldr	r1, [pc, #652]	; (800cb3c <motion_primitive_get_position_bezier_quadratic+0x824>)
 800c8ae:	f7f3 fc93 	bl	80001d8 <__aeabi_dsub>
 800c8b2:	4602      	mov	r2, r0
 800c8b4:	460b      	mov	r3, r1
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	4629      	mov	r1, r5
 800c8ba:	f7f3 ff6f 	bl	800079c <__aeabi_ddiv>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	460c      	mov	r4, r1
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	4621      	mov	r1, r4
 800c8c6:	f7f4 f917 	bl	8000af8 <__aeabi_d2f>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	617b      	str	r3, [r7, #20]
			float one_min_dt = 1.0 - dt; // used many times
 800c8ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c8d2:	edd7 7a05 	vldr	s15, [r7, #20]
 800c8d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c8da:	edc7 7a04 	vstr	s15, [r7, #16]
			x_cmd = one_min_dt*(one_min_dt*primitives[primitive_index].frames[0].x + dt*primitives[primitive_index].frames[2*i+1].x) + dt * (one_min_dt * primitives[primitive_index].frames[2*i+1].x + dt * primitives[primitive_index].frames[2*i].x);
 800c8de:	4b95      	ldr	r3, [pc, #596]	; (800cb34 <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c8e0:	781b      	ldrb	r3, [r3, #0]
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	4619      	mov	r1, r3
 800c8e6:	4a94      	ldr	r2, [pc, #592]	; (800cb38 <motion_primitive_get_position_bezier_quadratic+0x820>)
 800c8e8:	460b      	mov	r3, r1
 800c8ea:	015b      	lsls	r3, r3, #5
 800c8ec:	1a5b      	subs	r3, r3, r1
 800c8ee:	009b      	lsls	r3, r3, #2
 800c8f0:	4413      	add	r3, r2
 800c8f2:	331c      	adds	r3, #28
 800c8f4:	ed93 7a00 	vldr	s14, [r3]
 800c8f8:	edd7 7a04 	vldr	s15, [r7, #16]
 800c8fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c900:	4b8c      	ldr	r3, [pc, #560]	; (800cb34 <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c902:	781b      	ldrb	r3, [r3, #0]
 800c904:	b2db      	uxtb	r3, r3
 800c906:	4618      	mov	r0, r3
 800c908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c90a:	005b      	lsls	r3, r3, #1
 800c90c:	3301      	adds	r3, #1
 800c90e:	498a      	ldr	r1, [pc, #552]	; (800cb38 <motion_primitive_get_position_bezier_quadratic+0x820>)
 800c910:	011a      	lsls	r2, r3, #4
 800c912:	4603      	mov	r3, r0
 800c914:	015b      	lsls	r3, r3, #5
 800c916:	1a1b      	subs	r3, r3, r0
 800c918:	009b      	lsls	r3, r3, #2
 800c91a:	4413      	add	r3, r2
 800c91c:	440b      	add	r3, r1
 800c91e:	331c      	adds	r3, #28
 800c920:	edd3 6a00 	vldr	s13, [r3]
 800c924:	edd7 7a05 	vldr	s15, [r7, #20]
 800c928:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c92c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c930:	edd7 7a04 	vldr	s15, [r7, #16]
 800c934:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c938:	4b7e      	ldr	r3, [pc, #504]	; (800cb34 <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c93a:	781b      	ldrb	r3, [r3, #0]
 800c93c:	b2db      	uxtb	r3, r3
 800c93e:	4618      	mov	r0, r3
 800c940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c942:	005b      	lsls	r3, r3, #1
 800c944:	3301      	adds	r3, #1
 800c946:	497c      	ldr	r1, [pc, #496]	; (800cb38 <motion_primitive_get_position_bezier_quadratic+0x820>)
 800c948:	011a      	lsls	r2, r3, #4
 800c94a:	4603      	mov	r3, r0
 800c94c:	015b      	lsls	r3, r3, #5
 800c94e:	1a1b      	subs	r3, r3, r0
 800c950:	009b      	lsls	r3, r3, #2
 800c952:	4413      	add	r3, r2
 800c954:	440b      	add	r3, r1
 800c956:	331c      	adds	r3, #28
 800c958:	edd3 6a00 	vldr	s13, [r3]
 800c95c:	edd7 7a04 	vldr	s15, [r7, #16]
 800c960:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c964:	4b73      	ldr	r3, [pc, #460]	; (800cb34 <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	b2db      	uxtb	r3, r3
 800c96a:	4618      	mov	r0, r3
 800c96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c96e:	005b      	lsls	r3, r3, #1
 800c970:	4971      	ldr	r1, [pc, #452]	; (800cb38 <motion_primitive_get_position_bezier_quadratic+0x820>)
 800c972:	011a      	lsls	r2, r3, #4
 800c974:	4603      	mov	r3, r0
 800c976:	015b      	lsls	r3, r3, #5
 800c978:	1a1b      	subs	r3, r3, r0
 800c97a:	009b      	lsls	r3, r3, #2
 800c97c:	4413      	add	r3, r2
 800c97e:	440b      	add	r3, r1
 800c980:	331c      	adds	r3, #28
 800c982:	ed93 6a00 	vldr	s12, [r3]
 800c986:	edd7 7a05 	vldr	s15, [r7, #20]
 800c98a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c98e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c992:	edd7 7a05 	vldr	s15, [r7, #20]
 800c996:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c99a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c99e:	edc7 7a07 	vstr	s15, [r7, #28]
			y_cmd = one_min_dt*(one_min_dt*primitives[primitive_index].frames[0].y + dt*primitives[primitive_index].frames[2*i+1].y) + dt * (one_min_dt * primitives[primitive_index].frames[2*i+1].y + dt * primitives[primitive_index].frames[2*i].y);
 800c9a2:	4b64      	ldr	r3, [pc, #400]	; (800cb34 <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c9a4:	781b      	ldrb	r3, [r3, #0]
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	4619      	mov	r1, r3
 800c9aa:	4a63      	ldr	r2, [pc, #396]	; (800cb38 <motion_primitive_get_position_bezier_quadratic+0x820>)
 800c9ac:	460b      	mov	r3, r1
 800c9ae:	015b      	lsls	r3, r3, #5
 800c9b0:	1a5b      	subs	r3, r3, r1
 800c9b2:	009b      	lsls	r3, r3, #2
 800c9b4:	4413      	add	r3, r2
 800c9b6:	3320      	adds	r3, #32
 800c9b8:	ed93 7a00 	vldr	s14, [r3]
 800c9bc:	edd7 7a04 	vldr	s15, [r7, #16]
 800c9c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c9c4:	4b5b      	ldr	r3, [pc, #364]	; (800cb34 <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c9c6:	781b      	ldrb	r3, [r3, #0]
 800c9c8:	b2db      	uxtb	r3, r3
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ce:	005b      	lsls	r3, r3, #1
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	4959      	ldr	r1, [pc, #356]	; (800cb38 <motion_primitive_get_position_bezier_quadratic+0x820>)
 800c9d4:	011a      	lsls	r2, r3, #4
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	015b      	lsls	r3, r3, #5
 800c9da:	1a1b      	subs	r3, r3, r0
 800c9dc:	009b      	lsls	r3, r3, #2
 800c9de:	4413      	add	r3, r2
 800c9e0:	440b      	add	r3, r1
 800c9e2:	3320      	adds	r3, #32
 800c9e4:	edd3 6a00 	vldr	s13, [r3]
 800c9e8:	edd7 7a05 	vldr	s15, [r7, #20]
 800c9ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c9f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c9f4:	edd7 7a04 	vldr	s15, [r7, #16]
 800c9f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c9fc:	4b4d      	ldr	r3, [pc, #308]	; (800cb34 <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	b2db      	uxtb	r3, r3
 800ca02:	4618      	mov	r0, r3
 800ca04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca06:	005b      	lsls	r3, r3, #1
 800ca08:	3301      	adds	r3, #1
 800ca0a:	494b      	ldr	r1, [pc, #300]	; (800cb38 <motion_primitive_get_position_bezier_quadratic+0x820>)
 800ca0c:	011a      	lsls	r2, r3, #4
 800ca0e:	4603      	mov	r3, r0
 800ca10:	015b      	lsls	r3, r3, #5
 800ca12:	1a1b      	subs	r3, r3, r0
 800ca14:	009b      	lsls	r3, r3, #2
 800ca16:	4413      	add	r3, r2
 800ca18:	440b      	add	r3, r1
 800ca1a:	3320      	adds	r3, #32
 800ca1c:	edd3 6a00 	vldr	s13, [r3]
 800ca20:	edd7 7a04 	vldr	s15, [r7, #16]
 800ca24:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ca28:	4b42      	ldr	r3, [pc, #264]	; (800cb34 <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	b2db      	uxtb	r3, r3
 800ca2e:	4618      	mov	r0, r3
 800ca30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca32:	005b      	lsls	r3, r3, #1
 800ca34:	4940      	ldr	r1, [pc, #256]	; (800cb38 <motion_primitive_get_position_bezier_quadratic+0x820>)
 800ca36:	011a      	lsls	r2, r3, #4
 800ca38:	4603      	mov	r3, r0
 800ca3a:	015b      	lsls	r3, r3, #5
 800ca3c:	1a1b      	subs	r3, r3, r0
 800ca3e:	009b      	lsls	r3, r3, #2
 800ca40:	4413      	add	r3, r2
 800ca42:	440b      	add	r3, r1
 800ca44:	3320      	adds	r3, #32
 800ca46:	ed93 6a00 	vldr	s12, [r3]
 800ca4a:	edd7 7a05 	vldr	s15, [r7, #20]
 800ca4e:	ee66 7a27 	vmul.f32	s15, s12, s15
 800ca52:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ca56:	edd7 7a05 	vldr	s15, [r7, #20]
 800ca5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ca5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ca62:	edc7 7a06 	vstr	s15, [r7, #24]
			// Apply offset, then scale it
			x_cmd += primitives[primitive_index].x_offset_m;
 800ca66:	4b33      	ldr	r3, [pc, #204]	; (800cb34 <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800ca68:	781b      	ldrb	r3, [r3, #0]
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	4619      	mov	r1, r3
 800ca6e:	4a32      	ldr	r2, [pc, #200]	; (800cb38 <motion_primitive_get_position_bezier_quadratic+0x820>)
 800ca70:	460b      	mov	r3, r1
 800ca72:	015b      	lsls	r3, r3, #5
 800ca74:	1a5b      	subs	r3, r3, r1
 800ca76:	009b      	lsls	r3, r3, #2
 800ca78:	4413      	add	r3, r2
 800ca7a:	3304      	adds	r3, #4
 800ca7c:	edd3 7a00 	vldr	s15, [r3]
 800ca80:	ed97 7a07 	vldr	s14, [r7, #28]
 800ca84:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ca88:	edc7 7a07 	vstr	s15, [r7, #28]
			x_cmd *= primitives[primitive_index].x_scale;
 800ca8c:	4b29      	ldr	r3, [pc, #164]	; (800cb34 <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	b2db      	uxtb	r3, r3
 800ca92:	4619      	mov	r1, r3
 800ca94:	4a28      	ldr	r2, [pc, #160]	; (800cb38 <motion_primitive_get_position_bezier_quadratic+0x820>)
 800ca96:	460b      	mov	r3, r1
 800ca98:	015b      	lsls	r3, r3, #5
 800ca9a:	1a5b      	subs	r3, r3, r1
 800ca9c:	009b      	lsls	r3, r3, #2
 800ca9e:	4413      	add	r3, r2
 800caa0:	330c      	adds	r3, #12
 800caa2:	edd3 7a00 	vldr	s15, [r3]
 800caa6:	ed97 7a07 	vldr	s14, [r7, #28]
 800caaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caae:	edc7 7a07 	vstr	s15, [r7, #28]
			y_cmd += primitives[primitive_index].y_offset_m;
 800cab2:	4b20      	ldr	r3, [pc, #128]	; (800cb34 <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800cab4:	781b      	ldrb	r3, [r3, #0]
 800cab6:	b2db      	uxtb	r3, r3
 800cab8:	4619      	mov	r1, r3
 800caba:	4a1f      	ldr	r2, [pc, #124]	; (800cb38 <motion_primitive_get_position_bezier_quadratic+0x820>)
 800cabc:	460b      	mov	r3, r1
 800cabe:	015b      	lsls	r3, r3, #5
 800cac0:	1a5b      	subs	r3, r3, r1
 800cac2:	009b      	lsls	r3, r3, #2
 800cac4:	4413      	add	r3, r2
 800cac6:	3308      	adds	r3, #8
 800cac8:	edd3 7a00 	vldr	s15, [r3]
 800cacc:	ed97 7a06 	vldr	s14, [r7, #24]
 800cad0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cad4:	edc7 7a06 	vstr	s15, [r7, #24]
			y_cmd *= primitives[primitive_index].y_scale;
 800cad8:	4b16      	ldr	r3, [pc, #88]	; (800cb34 <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800cada:	781b      	ldrb	r3, [r3, #0]
 800cadc:	b2db      	uxtb	r3, r3
 800cade:	4619      	mov	r1, r3
 800cae0:	4a15      	ldr	r2, [pc, #84]	; (800cb38 <motion_primitive_get_position_bezier_quadratic+0x820>)
 800cae2:	460b      	mov	r3, r1
 800cae4:	015b      	lsls	r3, r3, #5
 800cae6:	1a5b      	subs	r3, r3, r1
 800cae8:	009b      	lsls	r3, r3, #2
 800caea:	4413      	add	r3, r2
 800caec:	3310      	adds	r3, #16
 800caee:	edd3 7a00 	vldr	s15, [r3]
 800caf2:	ed97 7a06 	vldr	s14, [r7, #24]
 800caf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cafa:	edc7 7a06 	vstr	s15, [r7, #24]

			*x = x_cmd;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	69fa      	ldr	r2, [r7, #28]
 800cb02:	601a      	str	r2, [r3, #0]
			*y = y_cmd;
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	69ba      	ldr	r2, [r7, #24]
 800cb08:	601a      	str	r2, [r3, #0]

			*ctrl_method = primitives[primitive_index].frames[2*i+1].ctrl;
 800cb0a:	4b0a      	ldr	r3, [pc, #40]	; (800cb34 <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	4618      	mov	r0, r3
 800cb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb14:	005b      	lsls	r3, r3, #1
 800cb16:	3301      	adds	r3, #1
 800cb18:	4907      	ldr	r1, [pc, #28]	; (800cb38 <motion_primitive_get_position_bezier_quadratic+0x820>)
 800cb1a:	3302      	adds	r3, #2
 800cb1c:	011a      	lsls	r2, r3, #4
 800cb1e:	4603      	mov	r3, r0
 800cb20:	015b      	lsls	r3, r3, #5
 800cb22:	1a1b      	subs	r3, r3, r0
 800cb24:	009b      	lsls	r3, r3, #2
 800cb26:	4413      	add	r3, r2
 800cb28:	440b      	add	r3, r1
 800cb2a:	3308      	adds	r3, #8
 800cb2c:	781a      	ldrb	r2, [r3, #0]
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	701a      	strb	r2, [r3, #0]

			return;
 800cb32:	e01a      	b.n	800cb6a <motion_primitive_get_position_bezier_quadratic+0x852>
 800cb34:	200152b4 	.word	0x200152b4
 800cb38:	200152bc 	.word	0x200152bc
 800cb3c:	3ff00000 	.word	0x3ff00000
	for(i = 1; i < primitives[primitive_index].num_keyframes/2; i++)
 800cb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb42:	3301      	adds	r3, #1
 800cb44:	633b      	str	r3, [r7, #48]	; 0x30
 800cb46:	4b0a      	ldr	r3, [pc, #40]	; (800cb70 <motion_primitive_get_position_bezier_quadratic+0x858>)
 800cb48:	781b      	ldrb	r3, [r3, #0]
 800cb4a:	b2db      	uxtb	r3, r3
 800cb4c:	4619      	mov	r1, r3
 800cb4e:	4a09      	ldr	r2, [pc, #36]	; (800cb74 <motion_primitive_get_position_bezier_quadratic+0x85c>)
 800cb50:	460b      	mov	r3, r1
 800cb52:	015b      	lsls	r3, r3, #5
 800cb54:	1a5b      	subs	r3, r3, r1
 800cb56:	009b      	lsls	r3, r3, #2
 800cb58:	4413      	add	r3, r2
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	085b      	lsrs	r3, r3, #1
 800cb5e:	b2db      	uxtb	r3, r3
 800cb60:	461a      	mov	r2, r3
 800cb62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb64:	4293      	cmp	r3, r2
 800cb66:	f6ff ac95 	blt.w	800c494 <motion_primitive_get_position_bezier_quadratic+0x17c>
		}
	}
 }
 800cb6a:	3738      	adds	r7, #56	; 0x38
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bdb0      	pop	{r4, r5, r7, pc}
 800cb70:	200152b4 	.word	0x200152b4
 800cb74:	200152bc 	.word	0x200152bc

0800cb78 <motion_primitive_is_inverted>:

 bool motion_primitive_is_inverted(void)
 {
 800cb78:	b480      	push	{r7}
 800cb7a:	af00      	add	r7, sp, #0
	return (primitives[primitive_index].invert > 0);
 800cb7c:	4b0a      	ldr	r3, [pc, #40]	; (800cba8 <motion_primitive_is_inverted+0x30>)
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	b2db      	uxtb	r3, r3
 800cb82:	4619      	mov	r1, r3
 800cb84:	4a09      	ldr	r2, [pc, #36]	; (800cbac <motion_primitive_is_inverted+0x34>)
 800cb86:	460b      	mov	r3, r1
 800cb88:	015b      	lsls	r3, r3, #5
 800cb8a:	1a5b      	subs	r3, r3, r1
 800cb8c:	009b      	lsls	r3, r3, #2
 800cb8e:	4413      	add	r3, r2
 800cb90:	3301      	adds	r3, #1
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	bf14      	ite	ne
 800cb98:	2301      	movne	r3, #1
 800cb9a:	2300      	moveq	r3, #0
 800cb9c:	b2db      	uxtb	r3, r3
 }
 800cb9e:	4618      	mov	r0, r3
 800cba0:	46bd      	mov	sp, r7
 800cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba6:	4770      	bx	lr
 800cba8:	200152b4 	.word	0x200152b4
 800cbac:	200152bc 	.word	0x200152bc

0800cbb0 <motion_primitive_set_keyframe>:

 void motion_primitive_set_keyframe(uint8_t index, uint8_t keyframe_index, float x, float y, float t_part)
 {
 800cbb0:	b480      	push	{r7}
 800cbb2:	b085      	sub	sp, #20
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	460a      	mov	r2, r1
 800cbba:	ed87 0a02 	vstr	s0, [r7, #8]
 800cbbe:	edc7 0a01 	vstr	s1, [r7, #4]
 800cbc2:	ed87 1a00 	vstr	s2, [r7]
 800cbc6:	73fb      	strb	r3, [r7, #15]
 800cbc8:	4613      	mov	r3, r2
 800cbca:	73bb      	strb	r3, [r7, #14]
	if(index >= NUMBER_PRIMITIVES)
 800cbcc:	7bfb      	ldrb	r3, [r7, #15]
 800cbce:	2b07      	cmp	r3, #7
 800cbd0:	d82b      	bhi.n	800cc2a <motion_primitive_set_keyframe+0x7a>
	{
		return;
	}
	if(keyframe_index >= MAX_NUMBER_KEYFRAMES)
 800cbd2:	7bbb      	ldrb	r3, [r7, #14]
 800cbd4:	2b05      	cmp	r3, #5
 800cbd6:	d82a      	bhi.n	800cc2e <motion_primitive_set_keyframe+0x7e>
	{
		return;
	}
	primitives[index].frames[keyframe_index].t_part = t_part;
 800cbd8:	7bfa      	ldrb	r2, [r7, #15]
 800cbda:	7bbb      	ldrb	r3, [r7, #14]
 800cbdc:	4817      	ldr	r0, [pc, #92]	; (800cc3c <motion_primitive_set_keyframe+0x8c>)
 800cbde:	3302      	adds	r3, #2
 800cbe0:	0119      	lsls	r1, r3, #4
 800cbe2:	4613      	mov	r3, r2
 800cbe4:	015b      	lsls	r3, r3, #5
 800cbe6:	1a9b      	subs	r3, r3, r2
 800cbe8:	009b      	lsls	r3, r3, #2
 800cbea:	440b      	add	r3, r1
 800cbec:	4403      	add	r3, r0
 800cbee:	3304      	adds	r3, #4
 800cbf0:	683a      	ldr	r2, [r7, #0]
 800cbf2:	601a      	str	r2, [r3, #0]
	primitives[index].frames[keyframe_index].x = x;
 800cbf4:	7bfa      	ldrb	r2, [r7, #15]
 800cbf6:	7bbb      	ldrb	r3, [r7, #14]
 800cbf8:	4810      	ldr	r0, [pc, #64]	; (800cc3c <motion_primitive_set_keyframe+0x8c>)
 800cbfa:	0119      	lsls	r1, r3, #4
 800cbfc:	4613      	mov	r3, r2
 800cbfe:	015b      	lsls	r3, r3, #5
 800cc00:	1a9b      	subs	r3, r3, r2
 800cc02:	009b      	lsls	r3, r3, #2
 800cc04:	440b      	add	r3, r1
 800cc06:	4403      	add	r3, r0
 800cc08:	331c      	adds	r3, #28
 800cc0a:	68ba      	ldr	r2, [r7, #8]
 800cc0c:	601a      	str	r2, [r3, #0]
	primitives[index].frames[keyframe_index].y = y;
 800cc0e:	7bfa      	ldrb	r2, [r7, #15]
 800cc10:	7bbb      	ldrb	r3, [r7, #14]
 800cc12:	480a      	ldr	r0, [pc, #40]	; (800cc3c <motion_primitive_set_keyframe+0x8c>)
 800cc14:	0119      	lsls	r1, r3, #4
 800cc16:	4613      	mov	r3, r2
 800cc18:	015b      	lsls	r3, r3, #5
 800cc1a:	1a9b      	subs	r3, r3, r2
 800cc1c:	009b      	lsls	r3, r3, #2
 800cc1e:	440b      	add	r3, r1
 800cc20:	4403      	add	r3, r0
 800cc22:	3320      	adds	r3, #32
 800cc24:	687a      	ldr	r2, [r7, #4]
 800cc26:	601a      	str	r2, [r3, #0]
 800cc28:	e002      	b.n	800cc30 <motion_primitive_set_keyframe+0x80>
		return;
 800cc2a:	bf00      	nop
 800cc2c:	e000      	b.n	800cc30 <motion_primitive_set_keyframe+0x80>
		return;
 800cc2e:	bf00      	nop
 }
 800cc30:	3714      	adds	r7, #20
 800cc32:	46bd      	mov	sp, r7
 800cc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc38:	4770      	bx	lr
 800cc3a:	bf00      	nop
 800cc3c:	200152bc 	.word	0x200152bc

0800cc40 <get_motion_primitive>:

 uint8_t get_motion_primitive(void)
 {
 800cc40:	b480      	push	{r7}
 800cc42:	af00      	add	r7, sp, #0
	return primitive_index;
 800cc44:	4b03      	ldr	r3, [pc, #12]	; (800cc54 <get_motion_primitive+0x14>)
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	b2db      	uxtb	r3, r3
 }
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc52:	4770      	bx	lr
 800cc54:	200152b4 	.word	0x200152b4

0800cc58 <calculate_pid>:

 #include <stdint.h>
 #include "pid_controller.h"

 float calculate_pid(pid_control_t * pid, int32_t setpoint, int32_t current_position)
 {
 800cc58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800cc5c:	b086      	sub	sp, #24
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	60f8      	str	r0, [r7, #12]
 800cc62:	60b9      	str	r1, [r7, #8]
 800cc64:	607a      	str	r2, [r7, #4]
	float error = setpoint - current_position;
 800cc66:	68ba      	ldr	r2, [r7, #8]
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	1ad3      	subs	r3, r2, r3
 800cc6c:	ee07 3a90 	vmov	s15, r3
 800cc70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc74:	edc7 7a04 	vstr	s15, [r7, #16]

	// Use current vs last position instead of error changes. This is the same if setpoint does not change, but setpoint jumps
	// can cause odd spikes in command otherwise
	pid->speed = (pid->speed_alpha)*pid->speed + (1.0-pid->speed_alpha)*(current_position - pid->last_position);
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	ed93 7a08 	vldr	s14, [r3, #32]
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	edd3 7a02 	vldr	s15, [r3, #8]
 800cc84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc88:	ee17 0a90 	vmov	r0, s15
 800cc8c:	f7f3 fc04 	bl	8000498 <__aeabi_f2d>
 800cc90:	4604      	mov	r4, r0
 800cc92:	460d      	mov	r5, r1
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	6a1b      	ldr	r3, [r3, #32]
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f7f3 fbfd 	bl	8000498 <__aeabi_f2d>
 800cc9e:	4602      	mov	r2, r0
 800cca0:	460b      	mov	r3, r1
 800cca2:	f04f 0000 	mov.w	r0, #0
 800cca6:	4949      	ldr	r1, [pc, #292]	; (800cdcc <calculate_pid+0x174>)
 800cca8:	f7f3 fa96 	bl	80001d8 <__aeabi_dsub>
 800ccac:	4602      	mov	r2, r0
 800ccae:	460b      	mov	r3, r1
 800ccb0:	4690      	mov	r8, r2
 800ccb2:	4699      	mov	r9, r3
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	687a      	ldr	r2, [r7, #4]
 800ccba:	1ad3      	subs	r3, r2, r3
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f7f3 fbd9 	bl	8000474 <__aeabi_i2d>
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	4640      	mov	r0, r8
 800ccc8:	4649      	mov	r1, r9
 800ccca:	f7f3 fc3d 	bl	8000548 <__aeabi_dmul>
 800ccce:	4602      	mov	r2, r0
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	4620      	mov	r0, r4
 800ccd4:	4629      	mov	r1, r5
 800ccd6:	f7f3 fa81 	bl	80001dc <__adddf3>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	460c      	mov	r4, r1
 800ccde:	4618      	mov	r0, r3
 800cce0:	4621      	mov	r1, r4
 800cce2:	f7f3 ff09 	bl	8000af8 <__aeabi_d2f>
 800cce6:	4602      	mov	r2, r0
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	609a      	str	r2, [r3, #8]

	pid->integral += error;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	ed93 7a03 	vldr	s14, [r3, #12]
 800ccf2:	edd7 7a04 	vldr	s15, [r7, #16]
 800ccf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	edc3 7a03 	vstr	s15, [r3, #12]

	if(pid->integral > pid->integral_max)
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	ed93 7a03 	vldr	s14, [r3, #12]
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	edd3 7a04 	vldr	s15, [r3, #16]
 800cd0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cd10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd14:	dd04      	ble.n	800cd20 <calculate_pid+0xc8>
	{
		pid->integral = pid->integral_max;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	691a      	ldr	r2, [r3, #16]
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	60da      	str	r2, [r3, #12]
 800cd1e:	e00e      	b.n	800cd3e <calculate_pid+0xe6>
	}
	else if(pid->integral < pid->integral_min)
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	ed93 7a03 	vldr	s14, [r3, #12]
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	edd3 7a05 	vldr	s15, [r3, #20]
 800cd2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cd30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd34:	d503      	bpl.n	800cd3e <calculate_pid+0xe6>
	{
		pid->integral = pid->integral_min;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	695a      	ldr	r2, [r3, #20]
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	60da      	str	r2, [r3, #12]
	}

	float cmd = pid->kp * error + pid->kd * pid->speed + pid->ki * pid->integral;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800cd44:	edd7 7a04 	vldr	s15, [r7, #16]
 800cd48:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	edd3 7a02 	vldr	s15, [r3, #8]
 800cd58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cd5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	edd3 7a03 	vldr	s15, [r3, #12]
 800cd6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cd70:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cd74:	edc7 7a05 	vstr	s15, [r7, #20]

	if(cmd > pid->cmd_max)
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	edd3 7a06 	vldr	s15, [r3, #24]
 800cd7e:	ed97 7a05 	vldr	s14, [r7, #20]
 800cd82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cd86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd8a:	dd03      	ble.n	800cd94 <calculate_pid+0x13c>
	{
		cmd	= pid->cmd_max;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	699b      	ldr	r3, [r3, #24]
 800cd90:	617b      	str	r3, [r7, #20]
 800cd92:	e00c      	b.n	800cdae <calculate_pid+0x156>
	}
	else if(cmd < pid->cmd_min)
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	edd3 7a07 	vldr	s15, [r3, #28]
 800cd9a:	ed97 7a05 	vldr	s14, [r7, #20]
 800cd9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cda2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cda6:	d502      	bpl.n	800cdae <calculate_pid+0x156>
	{
		cmd = pid->cmd_min;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	69db      	ldr	r3, [r3, #28]
 800cdac:	617b      	str	r3, [r7, #20]
	}

	pid->last_error = error;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	693a      	ldr	r2, [r7, #16]
 800cdb2:	605a      	str	r2, [r3, #4]
	pid->last_position = current_position;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	687a      	ldr	r2, [r7, #4]
 800cdb8:	601a      	str	r2, [r3, #0]
	return cmd;
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	ee07 3a90 	vmov	s15, r3
 }
 800cdc0:	eeb0 0a67 	vmov.f32	s0, s15
 800cdc4:	3718      	adds	r7, #24
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800cdcc:	3ff00000 	.word	0x3ff00000

0800cdd0 <arm_sin_f32>:
 800cdd0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800ce4c <arm_sin_f32+0x7c>
 800cdd4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cdd8:	ee20 7a07 	vmul.f32	s14, s0, s14
 800cddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cde0:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800cde4:	d42c      	bmi.n	800ce40 <arm_sin_f32+0x70>
 800cde6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cdea:	eddf 6a19 	vldr	s13, [pc, #100]	; 800ce50 <arm_sin_f32+0x80>
 800cdee:	4a19      	ldr	r2, [pc, #100]	; (800ce54 <arm_sin_f32+0x84>)
 800cdf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cdf4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cdf8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cdfc:	eef4 7ae6 	vcmpe.f32	s15, s13
 800ce00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce04:	bfa8      	it	ge
 800ce06:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 800ce0a:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800ce0e:	ee17 3a10 	vmov	r3, s14
 800ce12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce16:	ee07 3a10 	vmov	s14, r3
 800ce1a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800ce1e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800ce22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ce26:	edd1 6a01 	vldr	s13, [r1, #4]
 800ce2a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ce2e:	ed91 0a00 	vldr	s0, [r1]
 800ce32:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ce36:	ee27 0a00 	vmul.f32	s0, s14, s0
 800ce3a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ce3e:	4770      	bx	lr
 800ce40:	ee17 3a90 	vmov	r3, s15
 800ce44:	3b01      	subs	r3, #1
 800ce46:	ee07 3a90 	vmov	s15, r3
 800ce4a:	e7cc      	b.n	800cde6 <arm_sin_f32+0x16>
 800ce4c:	3e22f983 	.word	0x3e22f983
 800ce50:	44000000 	.word	0x44000000
 800ce54:	0800dd18 	.word	0x0800dd18

0800ce58 <arm_cos_f32>:
 800ce58:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800cecc <arm_cos_f32+0x74>
 800ce5c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ce60:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800ce64:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ce68:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ce6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce70:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ce74:	d504      	bpl.n	800ce80 <arm_cos_f32+0x28>
 800ce76:	ee17 3a90 	vmov	r3, s15
 800ce7a:	3b01      	subs	r3, #1
 800ce7c:	ee07 3a90 	vmov	s15, r3
 800ce80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce84:	eddf 6a12 	vldr	s13, [pc, #72]	; 800ced0 <arm_cos_f32+0x78>
 800ce88:	4a12      	ldr	r2, [pc, #72]	; (800ced4 <arm_cos_f32+0x7c>)
 800ce8a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ce8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce92:	ee20 0a26 	vmul.f32	s0, s0, s13
 800ce96:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800ce9a:	ee17 3a90 	vmov	r3, s15
 800ce9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cea2:	ee07 3a90 	vmov	s15, r3
 800cea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceaa:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800ceae:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ceb2:	edd1 6a01 	vldr	s13, [r1, #4]
 800ceb6:	ed91 0a00 	vldr	s0, [r1]
 800ceba:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cebe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cec2:	ee27 0a00 	vmul.f32	s0, s14, s0
 800cec6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ceca:	4770      	bx	lr
 800cecc:	3e22f983 	.word	0x3e22f983
 800ced0:	44000000 	.word	0x44000000
 800ced4:	0800dd18 	.word	0x0800dd18

0800ced8 <__errno>:
 800ced8:	4b01      	ldr	r3, [pc, #4]	; (800cee0 <__errno+0x8>)
 800ceda:	6818      	ldr	r0, [r3, #0]
 800cedc:	4770      	bx	lr
 800cede:	bf00      	nop
 800cee0:	20000024 	.word	0x20000024

0800cee4 <__libc_init_array>:
 800cee4:	b570      	push	{r4, r5, r6, lr}
 800cee6:	4e0d      	ldr	r6, [pc, #52]	; (800cf1c <__libc_init_array+0x38>)
 800cee8:	4c0d      	ldr	r4, [pc, #52]	; (800cf20 <__libc_init_array+0x3c>)
 800ceea:	1ba4      	subs	r4, r4, r6
 800ceec:	10a4      	asrs	r4, r4, #2
 800ceee:	2500      	movs	r5, #0
 800cef0:	42a5      	cmp	r5, r4
 800cef2:	d109      	bne.n	800cf08 <__libc_init_array+0x24>
 800cef4:	4e0b      	ldr	r6, [pc, #44]	; (800cf24 <__libc_init_array+0x40>)
 800cef6:	4c0c      	ldr	r4, [pc, #48]	; (800cf28 <__libc_init_array+0x44>)
 800cef8:	f000 febe 	bl	800dc78 <_init>
 800cefc:	1ba4      	subs	r4, r4, r6
 800cefe:	10a4      	asrs	r4, r4, #2
 800cf00:	2500      	movs	r5, #0
 800cf02:	42a5      	cmp	r5, r4
 800cf04:	d105      	bne.n	800cf12 <__libc_init_array+0x2e>
 800cf06:	bd70      	pop	{r4, r5, r6, pc}
 800cf08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cf0c:	4798      	blx	r3
 800cf0e:	3501      	adds	r5, #1
 800cf10:	e7ee      	b.n	800cef0 <__libc_init_array+0xc>
 800cf12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cf16:	4798      	blx	r3
 800cf18:	3501      	adds	r5, #1
 800cf1a:	e7f2      	b.n	800cf02 <__libc_init_array+0x1e>
 800cf1c:	0800e588 	.word	0x0800e588
 800cf20:	0800e588 	.word	0x0800e588
 800cf24:	0800e588 	.word	0x0800e588
 800cf28:	0800e58c 	.word	0x0800e58c

0800cf2c <memcpy>:
 800cf2c:	b510      	push	{r4, lr}
 800cf2e:	1e43      	subs	r3, r0, #1
 800cf30:	440a      	add	r2, r1
 800cf32:	4291      	cmp	r1, r2
 800cf34:	d100      	bne.n	800cf38 <memcpy+0xc>
 800cf36:	bd10      	pop	{r4, pc}
 800cf38:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf40:	e7f7      	b.n	800cf32 <memcpy+0x6>

0800cf42 <memset>:
 800cf42:	4402      	add	r2, r0
 800cf44:	4603      	mov	r3, r0
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d100      	bne.n	800cf4c <memset+0xa>
 800cf4a:	4770      	bx	lr
 800cf4c:	f803 1b01 	strb.w	r1, [r3], #1
 800cf50:	e7f9      	b.n	800cf46 <memset+0x4>
 800cf52:	0000      	movs	r0, r0
 800cf54:	0000      	movs	r0, r0
	...

0800cf58 <atan>:
 800cf58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf5c:	ec55 4b10 	vmov	r4, r5, d0
 800cf60:	4bc3      	ldr	r3, [pc, #780]	; (800d270 <atan+0x318>)
 800cf62:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cf66:	429e      	cmp	r6, r3
 800cf68:	46ab      	mov	fp, r5
 800cf6a:	dd18      	ble.n	800cf9e <atan+0x46>
 800cf6c:	4bc1      	ldr	r3, [pc, #772]	; (800d274 <atan+0x31c>)
 800cf6e:	429e      	cmp	r6, r3
 800cf70:	dc01      	bgt.n	800cf76 <atan+0x1e>
 800cf72:	d109      	bne.n	800cf88 <atan+0x30>
 800cf74:	b144      	cbz	r4, 800cf88 <atan+0x30>
 800cf76:	4622      	mov	r2, r4
 800cf78:	462b      	mov	r3, r5
 800cf7a:	4620      	mov	r0, r4
 800cf7c:	4629      	mov	r1, r5
 800cf7e:	f7f3 f92d 	bl	80001dc <__adddf3>
 800cf82:	4604      	mov	r4, r0
 800cf84:	460d      	mov	r5, r1
 800cf86:	e006      	b.n	800cf96 <atan+0x3e>
 800cf88:	f1bb 0f00 	cmp.w	fp, #0
 800cf8c:	f340 8131 	ble.w	800d1f2 <atan+0x29a>
 800cf90:	a59b      	add	r5, pc, #620	; (adr r5, 800d200 <atan+0x2a8>)
 800cf92:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cf96:	ec45 4b10 	vmov	d0, r4, r5
 800cf9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf9e:	4bb6      	ldr	r3, [pc, #728]	; (800d278 <atan+0x320>)
 800cfa0:	429e      	cmp	r6, r3
 800cfa2:	dc14      	bgt.n	800cfce <atan+0x76>
 800cfa4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800cfa8:	429e      	cmp	r6, r3
 800cfaa:	dc0d      	bgt.n	800cfc8 <atan+0x70>
 800cfac:	a396      	add	r3, pc, #600	; (adr r3, 800d208 <atan+0x2b0>)
 800cfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb2:	ee10 0a10 	vmov	r0, s0
 800cfb6:	4629      	mov	r1, r5
 800cfb8:	f7f3 f910 	bl	80001dc <__adddf3>
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	4baf      	ldr	r3, [pc, #700]	; (800d27c <atan+0x324>)
 800cfc0:	f7f3 fd52 	bl	8000a68 <__aeabi_dcmpgt>
 800cfc4:	2800      	cmp	r0, #0
 800cfc6:	d1e6      	bne.n	800cf96 <atan+0x3e>
 800cfc8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800cfcc:	e02b      	b.n	800d026 <atan+0xce>
 800cfce:	f000 f963 	bl	800d298 <fabs>
 800cfd2:	4bab      	ldr	r3, [pc, #684]	; (800d280 <atan+0x328>)
 800cfd4:	429e      	cmp	r6, r3
 800cfd6:	ec55 4b10 	vmov	r4, r5, d0
 800cfda:	f300 80bf 	bgt.w	800d15c <atan+0x204>
 800cfde:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800cfe2:	429e      	cmp	r6, r3
 800cfe4:	f300 80a0 	bgt.w	800d128 <atan+0x1d0>
 800cfe8:	ee10 2a10 	vmov	r2, s0
 800cfec:	ee10 0a10 	vmov	r0, s0
 800cff0:	462b      	mov	r3, r5
 800cff2:	4629      	mov	r1, r5
 800cff4:	f7f3 f8f2 	bl	80001dc <__adddf3>
 800cff8:	2200      	movs	r2, #0
 800cffa:	4ba0      	ldr	r3, [pc, #640]	; (800d27c <atan+0x324>)
 800cffc:	f7f3 f8ec 	bl	80001d8 <__aeabi_dsub>
 800d000:	2200      	movs	r2, #0
 800d002:	4606      	mov	r6, r0
 800d004:	460f      	mov	r7, r1
 800d006:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d00a:	4620      	mov	r0, r4
 800d00c:	4629      	mov	r1, r5
 800d00e:	f7f3 f8e5 	bl	80001dc <__adddf3>
 800d012:	4602      	mov	r2, r0
 800d014:	460b      	mov	r3, r1
 800d016:	4630      	mov	r0, r6
 800d018:	4639      	mov	r1, r7
 800d01a:	f7f3 fbbf 	bl	800079c <__aeabi_ddiv>
 800d01e:	f04f 0a00 	mov.w	sl, #0
 800d022:	4604      	mov	r4, r0
 800d024:	460d      	mov	r5, r1
 800d026:	4622      	mov	r2, r4
 800d028:	462b      	mov	r3, r5
 800d02a:	4620      	mov	r0, r4
 800d02c:	4629      	mov	r1, r5
 800d02e:	f7f3 fa8b 	bl	8000548 <__aeabi_dmul>
 800d032:	4602      	mov	r2, r0
 800d034:	460b      	mov	r3, r1
 800d036:	4680      	mov	r8, r0
 800d038:	4689      	mov	r9, r1
 800d03a:	f7f3 fa85 	bl	8000548 <__aeabi_dmul>
 800d03e:	a374      	add	r3, pc, #464	; (adr r3, 800d210 <atan+0x2b8>)
 800d040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d044:	4606      	mov	r6, r0
 800d046:	460f      	mov	r7, r1
 800d048:	f7f3 fa7e 	bl	8000548 <__aeabi_dmul>
 800d04c:	a372      	add	r3, pc, #456	; (adr r3, 800d218 <atan+0x2c0>)
 800d04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d052:	f7f3 f8c3 	bl	80001dc <__adddf3>
 800d056:	4632      	mov	r2, r6
 800d058:	463b      	mov	r3, r7
 800d05a:	f7f3 fa75 	bl	8000548 <__aeabi_dmul>
 800d05e:	a370      	add	r3, pc, #448	; (adr r3, 800d220 <atan+0x2c8>)
 800d060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d064:	f7f3 f8ba 	bl	80001dc <__adddf3>
 800d068:	4632      	mov	r2, r6
 800d06a:	463b      	mov	r3, r7
 800d06c:	f7f3 fa6c 	bl	8000548 <__aeabi_dmul>
 800d070:	a36d      	add	r3, pc, #436	; (adr r3, 800d228 <atan+0x2d0>)
 800d072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d076:	f7f3 f8b1 	bl	80001dc <__adddf3>
 800d07a:	4632      	mov	r2, r6
 800d07c:	463b      	mov	r3, r7
 800d07e:	f7f3 fa63 	bl	8000548 <__aeabi_dmul>
 800d082:	a36b      	add	r3, pc, #428	; (adr r3, 800d230 <atan+0x2d8>)
 800d084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d088:	f7f3 f8a8 	bl	80001dc <__adddf3>
 800d08c:	4632      	mov	r2, r6
 800d08e:	463b      	mov	r3, r7
 800d090:	f7f3 fa5a 	bl	8000548 <__aeabi_dmul>
 800d094:	a368      	add	r3, pc, #416	; (adr r3, 800d238 <atan+0x2e0>)
 800d096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d09a:	f7f3 f89f 	bl	80001dc <__adddf3>
 800d09e:	4642      	mov	r2, r8
 800d0a0:	464b      	mov	r3, r9
 800d0a2:	f7f3 fa51 	bl	8000548 <__aeabi_dmul>
 800d0a6:	a366      	add	r3, pc, #408	; (adr r3, 800d240 <atan+0x2e8>)
 800d0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ac:	4680      	mov	r8, r0
 800d0ae:	4689      	mov	r9, r1
 800d0b0:	4630      	mov	r0, r6
 800d0b2:	4639      	mov	r1, r7
 800d0b4:	f7f3 fa48 	bl	8000548 <__aeabi_dmul>
 800d0b8:	a363      	add	r3, pc, #396	; (adr r3, 800d248 <atan+0x2f0>)
 800d0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0be:	f7f3 f88b 	bl	80001d8 <__aeabi_dsub>
 800d0c2:	4632      	mov	r2, r6
 800d0c4:	463b      	mov	r3, r7
 800d0c6:	f7f3 fa3f 	bl	8000548 <__aeabi_dmul>
 800d0ca:	a361      	add	r3, pc, #388	; (adr r3, 800d250 <atan+0x2f8>)
 800d0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d0:	f7f3 f882 	bl	80001d8 <__aeabi_dsub>
 800d0d4:	4632      	mov	r2, r6
 800d0d6:	463b      	mov	r3, r7
 800d0d8:	f7f3 fa36 	bl	8000548 <__aeabi_dmul>
 800d0dc:	a35e      	add	r3, pc, #376	; (adr r3, 800d258 <atan+0x300>)
 800d0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e2:	f7f3 f879 	bl	80001d8 <__aeabi_dsub>
 800d0e6:	4632      	mov	r2, r6
 800d0e8:	463b      	mov	r3, r7
 800d0ea:	f7f3 fa2d 	bl	8000548 <__aeabi_dmul>
 800d0ee:	a35c      	add	r3, pc, #368	; (adr r3, 800d260 <atan+0x308>)
 800d0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f4:	f7f3 f870 	bl	80001d8 <__aeabi_dsub>
 800d0f8:	4632      	mov	r2, r6
 800d0fa:	463b      	mov	r3, r7
 800d0fc:	f7f3 fa24 	bl	8000548 <__aeabi_dmul>
 800d100:	4602      	mov	r2, r0
 800d102:	460b      	mov	r3, r1
 800d104:	4640      	mov	r0, r8
 800d106:	4649      	mov	r1, r9
 800d108:	f7f3 f868 	bl	80001dc <__adddf3>
 800d10c:	4622      	mov	r2, r4
 800d10e:	462b      	mov	r3, r5
 800d110:	f7f3 fa1a 	bl	8000548 <__aeabi_dmul>
 800d114:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800d118:	4602      	mov	r2, r0
 800d11a:	460b      	mov	r3, r1
 800d11c:	d14b      	bne.n	800d1b6 <atan+0x25e>
 800d11e:	4620      	mov	r0, r4
 800d120:	4629      	mov	r1, r5
 800d122:	f7f3 f859 	bl	80001d8 <__aeabi_dsub>
 800d126:	e72c      	b.n	800cf82 <atan+0x2a>
 800d128:	ee10 0a10 	vmov	r0, s0
 800d12c:	2200      	movs	r2, #0
 800d12e:	4b53      	ldr	r3, [pc, #332]	; (800d27c <atan+0x324>)
 800d130:	4629      	mov	r1, r5
 800d132:	f7f3 f851 	bl	80001d8 <__aeabi_dsub>
 800d136:	2200      	movs	r2, #0
 800d138:	4606      	mov	r6, r0
 800d13a:	460f      	mov	r7, r1
 800d13c:	4b4f      	ldr	r3, [pc, #316]	; (800d27c <atan+0x324>)
 800d13e:	4620      	mov	r0, r4
 800d140:	4629      	mov	r1, r5
 800d142:	f7f3 f84b 	bl	80001dc <__adddf3>
 800d146:	4602      	mov	r2, r0
 800d148:	460b      	mov	r3, r1
 800d14a:	4630      	mov	r0, r6
 800d14c:	4639      	mov	r1, r7
 800d14e:	f7f3 fb25 	bl	800079c <__aeabi_ddiv>
 800d152:	f04f 0a01 	mov.w	sl, #1
 800d156:	4604      	mov	r4, r0
 800d158:	460d      	mov	r5, r1
 800d15a:	e764      	b.n	800d026 <atan+0xce>
 800d15c:	4b49      	ldr	r3, [pc, #292]	; (800d284 <atan+0x32c>)
 800d15e:	429e      	cmp	r6, r3
 800d160:	dc1d      	bgt.n	800d19e <atan+0x246>
 800d162:	ee10 0a10 	vmov	r0, s0
 800d166:	2200      	movs	r2, #0
 800d168:	4b47      	ldr	r3, [pc, #284]	; (800d288 <atan+0x330>)
 800d16a:	4629      	mov	r1, r5
 800d16c:	f7f3 f834 	bl	80001d8 <__aeabi_dsub>
 800d170:	2200      	movs	r2, #0
 800d172:	4606      	mov	r6, r0
 800d174:	460f      	mov	r7, r1
 800d176:	4b44      	ldr	r3, [pc, #272]	; (800d288 <atan+0x330>)
 800d178:	4620      	mov	r0, r4
 800d17a:	4629      	mov	r1, r5
 800d17c:	f7f3 f9e4 	bl	8000548 <__aeabi_dmul>
 800d180:	2200      	movs	r2, #0
 800d182:	4b3e      	ldr	r3, [pc, #248]	; (800d27c <atan+0x324>)
 800d184:	f7f3 f82a 	bl	80001dc <__adddf3>
 800d188:	4602      	mov	r2, r0
 800d18a:	460b      	mov	r3, r1
 800d18c:	4630      	mov	r0, r6
 800d18e:	4639      	mov	r1, r7
 800d190:	f7f3 fb04 	bl	800079c <__aeabi_ddiv>
 800d194:	f04f 0a02 	mov.w	sl, #2
 800d198:	4604      	mov	r4, r0
 800d19a:	460d      	mov	r5, r1
 800d19c:	e743      	b.n	800d026 <atan+0xce>
 800d19e:	462b      	mov	r3, r5
 800d1a0:	ee10 2a10 	vmov	r2, s0
 800d1a4:	2000      	movs	r0, #0
 800d1a6:	4939      	ldr	r1, [pc, #228]	; (800d28c <atan+0x334>)
 800d1a8:	f7f3 faf8 	bl	800079c <__aeabi_ddiv>
 800d1ac:	f04f 0a03 	mov.w	sl, #3
 800d1b0:	4604      	mov	r4, r0
 800d1b2:	460d      	mov	r5, r1
 800d1b4:	e737      	b.n	800d026 <atan+0xce>
 800d1b6:	4b36      	ldr	r3, [pc, #216]	; (800d290 <atan+0x338>)
 800d1b8:	4e36      	ldr	r6, [pc, #216]	; (800d294 <atan+0x33c>)
 800d1ba:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800d1be:	4456      	add	r6, sl
 800d1c0:	449a      	add	sl, r3
 800d1c2:	e9da 2300 	ldrd	r2, r3, [sl]
 800d1c6:	f7f3 f807 	bl	80001d8 <__aeabi_dsub>
 800d1ca:	4622      	mov	r2, r4
 800d1cc:	462b      	mov	r3, r5
 800d1ce:	f7f3 f803 	bl	80001d8 <__aeabi_dsub>
 800d1d2:	4602      	mov	r2, r0
 800d1d4:	460b      	mov	r3, r1
 800d1d6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d1da:	f7f2 fffd 	bl	80001d8 <__aeabi_dsub>
 800d1de:	f1bb 0f00 	cmp.w	fp, #0
 800d1e2:	4604      	mov	r4, r0
 800d1e4:	460d      	mov	r5, r1
 800d1e6:	f6bf aed6 	bge.w	800cf96 <atan+0x3e>
 800d1ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d1ee:	461d      	mov	r5, r3
 800d1f0:	e6d1      	b.n	800cf96 <atan+0x3e>
 800d1f2:	a51d      	add	r5, pc, #116	; (adr r5, 800d268 <atan+0x310>)
 800d1f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d1f8:	e6cd      	b.n	800cf96 <atan+0x3e>
 800d1fa:	bf00      	nop
 800d1fc:	f3af 8000 	nop.w
 800d200:	54442d18 	.word	0x54442d18
 800d204:	3ff921fb 	.word	0x3ff921fb
 800d208:	8800759c 	.word	0x8800759c
 800d20c:	7e37e43c 	.word	0x7e37e43c
 800d210:	e322da11 	.word	0xe322da11
 800d214:	3f90ad3a 	.word	0x3f90ad3a
 800d218:	24760deb 	.word	0x24760deb
 800d21c:	3fa97b4b 	.word	0x3fa97b4b
 800d220:	a0d03d51 	.word	0xa0d03d51
 800d224:	3fb10d66 	.word	0x3fb10d66
 800d228:	c54c206e 	.word	0xc54c206e
 800d22c:	3fb745cd 	.word	0x3fb745cd
 800d230:	920083ff 	.word	0x920083ff
 800d234:	3fc24924 	.word	0x3fc24924
 800d238:	5555550d 	.word	0x5555550d
 800d23c:	3fd55555 	.word	0x3fd55555
 800d240:	2c6a6c2f 	.word	0x2c6a6c2f
 800d244:	bfa2b444 	.word	0xbfa2b444
 800d248:	52defd9a 	.word	0x52defd9a
 800d24c:	3fadde2d 	.word	0x3fadde2d
 800d250:	af749a6d 	.word	0xaf749a6d
 800d254:	3fb3b0f2 	.word	0x3fb3b0f2
 800d258:	fe231671 	.word	0xfe231671
 800d25c:	3fbc71c6 	.word	0x3fbc71c6
 800d260:	9998ebc4 	.word	0x9998ebc4
 800d264:	3fc99999 	.word	0x3fc99999
 800d268:	54442d18 	.word	0x54442d18
 800d26c:	bff921fb 	.word	0xbff921fb
 800d270:	440fffff 	.word	0x440fffff
 800d274:	7ff00000 	.word	0x7ff00000
 800d278:	3fdbffff 	.word	0x3fdbffff
 800d27c:	3ff00000 	.word	0x3ff00000
 800d280:	3ff2ffff 	.word	0x3ff2ffff
 800d284:	40037fff 	.word	0x40037fff
 800d288:	3ff80000 	.word	0x3ff80000
 800d28c:	bff00000 	.word	0xbff00000
 800d290:	0800e540 	.word	0x0800e540
 800d294:	0800e520 	.word	0x0800e520

0800d298 <fabs>:
 800d298:	ec51 0b10 	vmov	r0, r1, d0
 800d29c:	ee10 2a10 	vmov	r2, s0
 800d2a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d2a4:	ec43 2b10 	vmov	d0, r2, r3
 800d2a8:	4770      	bx	lr
	...

0800d2ac <acos>:
 800d2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2ae:	ed2d 8b02 	vpush	{d8}
 800d2b2:	4e26      	ldr	r6, [pc, #152]	; (800d34c <acos+0xa0>)
 800d2b4:	b08b      	sub	sp, #44	; 0x2c
 800d2b6:	ec55 4b10 	vmov	r4, r5, d0
 800d2ba:	f000 f8b5 	bl	800d428 <__ieee754_acos>
 800d2be:	f996 3000 	ldrsb.w	r3, [r6]
 800d2c2:	eeb0 8a40 	vmov.f32	s16, s0
 800d2c6:	eef0 8a60 	vmov.f32	s17, s1
 800d2ca:	3301      	adds	r3, #1
 800d2cc:	d036      	beq.n	800d33c <acos+0x90>
 800d2ce:	4622      	mov	r2, r4
 800d2d0:	462b      	mov	r3, r5
 800d2d2:	4620      	mov	r0, r4
 800d2d4:	4629      	mov	r1, r5
 800d2d6:	f7f3 fbd1 	bl	8000a7c <__aeabi_dcmpun>
 800d2da:	4607      	mov	r7, r0
 800d2dc:	bb70      	cbnz	r0, 800d33c <acos+0x90>
 800d2de:	ec45 4b10 	vmov	d0, r4, r5
 800d2e2:	f7ff ffd9 	bl	800d298 <fabs>
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	4b19      	ldr	r3, [pc, #100]	; (800d350 <acos+0xa4>)
 800d2ea:	ec51 0b10 	vmov	r0, r1, d0
 800d2ee:	f7f3 fbbb 	bl	8000a68 <__aeabi_dcmpgt>
 800d2f2:	b318      	cbz	r0, 800d33c <acos+0x90>
 800d2f4:	2301      	movs	r3, #1
 800d2f6:	9300      	str	r3, [sp, #0]
 800d2f8:	4816      	ldr	r0, [pc, #88]	; (800d354 <acos+0xa8>)
 800d2fa:	4b17      	ldr	r3, [pc, #92]	; (800d358 <acos+0xac>)
 800d2fc:	9301      	str	r3, [sp, #4]
 800d2fe:	9708      	str	r7, [sp, #32]
 800d300:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800d304:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d308:	f000 fcae 	bl	800dc68 <nan>
 800d30c:	f996 3000 	ldrsb.w	r3, [r6]
 800d310:	2b02      	cmp	r3, #2
 800d312:	ed8d 0b06 	vstr	d0, [sp, #24]
 800d316:	d104      	bne.n	800d322 <acos+0x76>
 800d318:	f7ff fdde 	bl	800ced8 <__errno>
 800d31c:	2321      	movs	r3, #33	; 0x21
 800d31e:	6003      	str	r3, [r0, #0]
 800d320:	e004      	b.n	800d32c <acos+0x80>
 800d322:	4668      	mov	r0, sp
 800d324:	f000 fc9e 	bl	800dc64 <matherr>
 800d328:	2800      	cmp	r0, #0
 800d32a:	d0f5      	beq.n	800d318 <acos+0x6c>
 800d32c:	9b08      	ldr	r3, [sp, #32]
 800d32e:	b11b      	cbz	r3, 800d338 <acos+0x8c>
 800d330:	f7ff fdd2 	bl	800ced8 <__errno>
 800d334:	9b08      	ldr	r3, [sp, #32]
 800d336:	6003      	str	r3, [r0, #0]
 800d338:	ed9d 8b06 	vldr	d8, [sp, #24]
 800d33c:	eeb0 0a48 	vmov.f32	s0, s16
 800d340:	eef0 0a68 	vmov.f32	s1, s17
 800d344:	b00b      	add	sp, #44	; 0x2c
 800d346:	ecbd 8b02 	vpop	{d8}
 800d34a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d34c:	20000088 	.word	0x20000088
 800d350:	3ff00000 	.word	0x3ff00000
 800d354:	0800e569 	.word	0x0800e569
 800d358:	0800e560 	.word	0x0800e560

0800d35c <fmod>:
 800d35c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d360:	ed2d 8b02 	vpush	{d8}
 800d364:	b08b      	sub	sp, #44	; 0x2c
 800d366:	ec55 4b10 	vmov	r4, r5, d0
 800d36a:	ec57 6b11 	vmov	r6, r7, d1
 800d36e:	f000 fab7 	bl	800d8e0 <__ieee754_fmod>
 800d372:	4b2a      	ldr	r3, [pc, #168]	; (800d41c <fmod+0xc0>)
 800d374:	eeb0 8a40 	vmov.f32	s16, s0
 800d378:	eef0 8a60 	vmov.f32	s17, s1
 800d37c:	f993 8000 	ldrsb.w	r8, [r3]
 800d380:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800d384:	d030      	beq.n	800d3e8 <fmod+0x8c>
 800d386:	4632      	mov	r2, r6
 800d388:	463b      	mov	r3, r7
 800d38a:	4630      	mov	r0, r6
 800d38c:	4639      	mov	r1, r7
 800d38e:	f7f3 fb75 	bl	8000a7c <__aeabi_dcmpun>
 800d392:	bb48      	cbnz	r0, 800d3e8 <fmod+0x8c>
 800d394:	4622      	mov	r2, r4
 800d396:	462b      	mov	r3, r5
 800d398:	4620      	mov	r0, r4
 800d39a:	4629      	mov	r1, r5
 800d39c:	f7f3 fb6e 	bl	8000a7c <__aeabi_dcmpun>
 800d3a0:	4681      	mov	r9, r0
 800d3a2:	bb08      	cbnz	r0, 800d3e8 <fmod+0x8c>
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	4630      	mov	r0, r6
 800d3aa:	4639      	mov	r1, r7
 800d3ac:	f7f3 fb34 	bl	8000a18 <__aeabi_dcmpeq>
 800d3b0:	b1d0      	cbz	r0, 800d3e8 <fmod+0x8c>
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	9300      	str	r3, [sp, #0]
 800d3b6:	4b1a      	ldr	r3, [pc, #104]	; (800d420 <fmod+0xc4>)
 800d3b8:	9301      	str	r3, [sp, #4]
 800d3ba:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d3be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d3c2:	f8cd 9020 	str.w	r9, [sp, #32]
 800d3c6:	f1b8 0f00 	cmp.w	r8, #0
 800d3ca:	d116      	bne.n	800d3fa <fmod+0x9e>
 800d3cc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d3d0:	4668      	mov	r0, sp
 800d3d2:	f000 fc47 	bl	800dc64 <matherr>
 800d3d6:	b1d8      	cbz	r0, 800d410 <fmod+0xb4>
 800d3d8:	9b08      	ldr	r3, [sp, #32]
 800d3da:	b11b      	cbz	r3, 800d3e4 <fmod+0x88>
 800d3dc:	f7ff fd7c 	bl	800ced8 <__errno>
 800d3e0:	9b08      	ldr	r3, [sp, #32]
 800d3e2:	6003      	str	r3, [r0, #0]
 800d3e4:	ed9d 8b06 	vldr	d8, [sp, #24]
 800d3e8:	eeb0 0a48 	vmov.f32	s0, s16
 800d3ec:	eef0 0a68 	vmov.f32	s1, s17
 800d3f0:	b00b      	add	sp, #44	; 0x2c
 800d3f2:	ecbd 8b02 	vpop	{d8}
 800d3f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	4610      	mov	r0, r2
 800d400:	4619      	mov	r1, r3
 800d402:	f7f3 f9cb 	bl	800079c <__aeabi_ddiv>
 800d406:	f1b8 0f02 	cmp.w	r8, #2
 800d40a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d40e:	d1df      	bne.n	800d3d0 <fmod+0x74>
 800d410:	f7ff fd62 	bl	800ced8 <__errno>
 800d414:	2321      	movs	r3, #33	; 0x21
 800d416:	6003      	str	r3, [r0, #0]
 800d418:	e7de      	b.n	800d3d8 <fmod+0x7c>
 800d41a:	bf00      	nop
 800d41c:	20000088 	.word	0x20000088
 800d420:	0800e565 	.word	0x0800e565
 800d424:	00000000 	.word	0x00000000

0800d428 <__ieee754_acos>:
 800d428:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d42c:	ec55 4b10 	vmov	r4, r5, d0
 800d430:	49b7      	ldr	r1, [pc, #732]	; (800d710 <__ieee754_acos+0x2e8>)
 800d432:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d436:	428b      	cmp	r3, r1
 800d438:	dd1b      	ble.n	800d472 <__ieee754_acos+0x4a>
 800d43a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800d43e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d442:	4323      	orrs	r3, r4
 800d444:	d109      	bne.n	800d45a <__ieee754_acos+0x32>
 800d446:	2d00      	cmp	r5, #0
 800d448:	f300 8211 	bgt.w	800d86e <__ieee754_acos+0x446>
 800d44c:	a196      	add	r1, pc, #600	; (adr r1, 800d6a8 <__ieee754_acos+0x280>)
 800d44e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d452:	ec41 0b10 	vmov	d0, r0, r1
 800d456:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d45a:	ee10 2a10 	vmov	r2, s0
 800d45e:	462b      	mov	r3, r5
 800d460:	4620      	mov	r0, r4
 800d462:	4629      	mov	r1, r5
 800d464:	f7f2 feb8 	bl	80001d8 <__aeabi_dsub>
 800d468:	4602      	mov	r2, r0
 800d46a:	460b      	mov	r3, r1
 800d46c:	f7f3 f996 	bl	800079c <__aeabi_ddiv>
 800d470:	e7ef      	b.n	800d452 <__ieee754_acos+0x2a>
 800d472:	49a8      	ldr	r1, [pc, #672]	; (800d714 <__ieee754_acos+0x2ec>)
 800d474:	428b      	cmp	r3, r1
 800d476:	f300 8087 	bgt.w	800d588 <__ieee754_acos+0x160>
 800d47a:	4aa7      	ldr	r2, [pc, #668]	; (800d718 <__ieee754_acos+0x2f0>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	f340 81f9 	ble.w	800d874 <__ieee754_acos+0x44c>
 800d482:	ee10 2a10 	vmov	r2, s0
 800d486:	ee10 0a10 	vmov	r0, s0
 800d48a:	462b      	mov	r3, r5
 800d48c:	4629      	mov	r1, r5
 800d48e:	f7f3 f85b 	bl	8000548 <__aeabi_dmul>
 800d492:	a387      	add	r3, pc, #540	; (adr r3, 800d6b0 <__ieee754_acos+0x288>)
 800d494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d498:	4606      	mov	r6, r0
 800d49a:	460f      	mov	r7, r1
 800d49c:	f7f3 f854 	bl	8000548 <__aeabi_dmul>
 800d4a0:	a385      	add	r3, pc, #532	; (adr r3, 800d6b8 <__ieee754_acos+0x290>)
 800d4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a6:	f7f2 fe99 	bl	80001dc <__adddf3>
 800d4aa:	4632      	mov	r2, r6
 800d4ac:	463b      	mov	r3, r7
 800d4ae:	f7f3 f84b 	bl	8000548 <__aeabi_dmul>
 800d4b2:	a383      	add	r3, pc, #524	; (adr r3, 800d6c0 <__ieee754_acos+0x298>)
 800d4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b8:	f7f2 fe8e 	bl	80001d8 <__aeabi_dsub>
 800d4bc:	4632      	mov	r2, r6
 800d4be:	463b      	mov	r3, r7
 800d4c0:	f7f3 f842 	bl	8000548 <__aeabi_dmul>
 800d4c4:	a380      	add	r3, pc, #512	; (adr r3, 800d6c8 <__ieee754_acos+0x2a0>)
 800d4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ca:	f7f2 fe87 	bl	80001dc <__adddf3>
 800d4ce:	4632      	mov	r2, r6
 800d4d0:	463b      	mov	r3, r7
 800d4d2:	f7f3 f839 	bl	8000548 <__aeabi_dmul>
 800d4d6:	a37e      	add	r3, pc, #504	; (adr r3, 800d6d0 <__ieee754_acos+0x2a8>)
 800d4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4dc:	f7f2 fe7c 	bl	80001d8 <__aeabi_dsub>
 800d4e0:	4632      	mov	r2, r6
 800d4e2:	463b      	mov	r3, r7
 800d4e4:	f7f3 f830 	bl	8000548 <__aeabi_dmul>
 800d4e8:	a37b      	add	r3, pc, #492	; (adr r3, 800d6d8 <__ieee754_acos+0x2b0>)
 800d4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ee:	f7f2 fe75 	bl	80001dc <__adddf3>
 800d4f2:	4632      	mov	r2, r6
 800d4f4:	463b      	mov	r3, r7
 800d4f6:	f7f3 f827 	bl	8000548 <__aeabi_dmul>
 800d4fa:	a379      	add	r3, pc, #484	; (adr r3, 800d6e0 <__ieee754_acos+0x2b8>)
 800d4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d500:	4680      	mov	r8, r0
 800d502:	4689      	mov	r9, r1
 800d504:	4630      	mov	r0, r6
 800d506:	4639      	mov	r1, r7
 800d508:	f7f3 f81e 	bl	8000548 <__aeabi_dmul>
 800d50c:	a376      	add	r3, pc, #472	; (adr r3, 800d6e8 <__ieee754_acos+0x2c0>)
 800d50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d512:	f7f2 fe61 	bl	80001d8 <__aeabi_dsub>
 800d516:	4632      	mov	r2, r6
 800d518:	463b      	mov	r3, r7
 800d51a:	f7f3 f815 	bl	8000548 <__aeabi_dmul>
 800d51e:	a374      	add	r3, pc, #464	; (adr r3, 800d6f0 <__ieee754_acos+0x2c8>)
 800d520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d524:	f7f2 fe5a 	bl	80001dc <__adddf3>
 800d528:	4632      	mov	r2, r6
 800d52a:	463b      	mov	r3, r7
 800d52c:	f7f3 f80c 	bl	8000548 <__aeabi_dmul>
 800d530:	a371      	add	r3, pc, #452	; (adr r3, 800d6f8 <__ieee754_acos+0x2d0>)
 800d532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d536:	f7f2 fe4f 	bl	80001d8 <__aeabi_dsub>
 800d53a:	4632      	mov	r2, r6
 800d53c:	463b      	mov	r3, r7
 800d53e:	f7f3 f803 	bl	8000548 <__aeabi_dmul>
 800d542:	2200      	movs	r2, #0
 800d544:	4b75      	ldr	r3, [pc, #468]	; (800d71c <__ieee754_acos+0x2f4>)
 800d546:	f7f2 fe49 	bl	80001dc <__adddf3>
 800d54a:	4602      	mov	r2, r0
 800d54c:	460b      	mov	r3, r1
 800d54e:	4640      	mov	r0, r8
 800d550:	4649      	mov	r1, r9
 800d552:	f7f3 f923 	bl	800079c <__aeabi_ddiv>
 800d556:	4622      	mov	r2, r4
 800d558:	462b      	mov	r3, r5
 800d55a:	f7f2 fff5 	bl	8000548 <__aeabi_dmul>
 800d55e:	4602      	mov	r2, r0
 800d560:	460b      	mov	r3, r1
 800d562:	a167      	add	r1, pc, #412	; (adr r1, 800d700 <__ieee754_acos+0x2d8>)
 800d564:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d568:	f7f2 fe36 	bl	80001d8 <__aeabi_dsub>
 800d56c:	4602      	mov	r2, r0
 800d56e:	460b      	mov	r3, r1
 800d570:	4620      	mov	r0, r4
 800d572:	4629      	mov	r1, r5
 800d574:	f7f2 fe30 	bl	80001d8 <__aeabi_dsub>
 800d578:	4602      	mov	r2, r0
 800d57a:	460b      	mov	r3, r1
 800d57c:	a162      	add	r1, pc, #392	; (adr r1, 800d708 <__ieee754_acos+0x2e0>)
 800d57e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d582:	f7f2 fe29 	bl	80001d8 <__aeabi_dsub>
 800d586:	e764      	b.n	800d452 <__ieee754_acos+0x2a>
 800d588:	2d00      	cmp	r5, #0
 800d58a:	f280 80cb 	bge.w	800d724 <__ieee754_acos+0x2fc>
 800d58e:	ee10 0a10 	vmov	r0, s0
 800d592:	2200      	movs	r2, #0
 800d594:	4b61      	ldr	r3, [pc, #388]	; (800d71c <__ieee754_acos+0x2f4>)
 800d596:	4629      	mov	r1, r5
 800d598:	f7f2 fe20 	bl	80001dc <__adddf3>
 800d59c:	2200      	movs	r2, #0
 800d59e:	4b60      	ldr	r3, [pc, #384]	; (800d720 <__ieee754_acos+0x2f8>)
 800d5a0:	f7f2 ffd2 	bl	8000548 <__aeabi_dmul>
 800d5a4:	a342      	add	r3, pc, #264	; (adr r3, 800d6b0 <__ieee754_acos+0x288>)
 800d5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5aa:	4604      	mov	r4, r0
 800d5ac:	460d      	mov	r5, r1
 800d5ae:	f7f2 ffcb 	bl	8000548 <__aeabi_dmul>
 800d5b2:	a341      	add	r3, pc, #260	; (adr r3, 800d6b8 <__ieee754_acos+0x290>)
 800d5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b8:	f7f2 fe10 	bl	80001dc <__adddf3>
 800d5bc:	4622      	mov	r2, r4
 800d5be:	462b      	mov	r3, r5
 800d5c0:	f7f2 ffc2 	bl	8000548 <__aeabi_dmul>
 800d5c4:	a33e      	add	r3, pc, #248	; (adr r3, 800d6c0 <__ieee754_acos+0x298>)
 800d5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ca:	f7f2 fe05 	bl	80001d8 <__aeabi_dsub>
 800d5ce:	4622      	mov	r2, r4
 800d5d0:	462b      	mov	r3, r5
 800d5d2:	f7f2 ffb9 	bl	8000548 <__aeabi_dmul>
 800d5d6:	a33c      	add	r3, pc, #240	; (adr r3, 800d6c8 <__ieee754_acos+0x2a0>)
 800d5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5dc:	f7f2 fdfe 	bl	80001dc <__adddf3>
 800d5e0:	4622      	mov	r2, r4
 800d5e2:	462b      	mov	r3, r5
 800d5e4:	f7f2 ffb0 	bl	8000548 <__aeabi_dmul>
 800d5e8:	a339      	add	r3, pc, #228	; (adr r3, 800d6d0 <__ieee754_acos+0x2a8>)
 800d5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ee:	f7f2 fdf3 	bl	80001d8 <__aeabi_dsub>
 800d5f2:	4622      	mov	r2, r4
 800d5f4:	462b      	mov	r3, r5
 800d5f6:	f7f2 ffa7 	bl	8000548 <__aeabi_dmul>
 800d5fa:	a337      	add	r3, pc, #220	; (adr r3, 800d6d8 <__ieee754_acos+0x2b0>)
 800d5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d600:	f7f2 fdec 	bl	80001dc <__adddf3>
 800d604:	4622      	mov	r2, r4
 800d606:	462b      	mov	r3, r5
 800d608:	f7f2 ff9e 	bl	8000548 <__aeabi_dmul>
 800d60c:	ec45 4b10 	vmov	d0, r4, r5
 800d610:	4680      	mov	r8, r0
 800d612:	4689      	mov	r9, r1
 800d614:	f000 fa76 	bl	800db04 <__ieee754_sqrt>
 800d618:	a331      	add	r3, pc, #196	; (adr r3, 800d6e0 <__ieee754_acos+0x2b8>)
 800d61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d61e:	4620      	mov	r0, r4
 800d620:	4629      	mov	r1, r5
 800d622:	ec57 6b10 	vmov	r6, r7, d0
 800d626:	f7f2 ff8f 	bl	8000548 <__aeabi_dmul>
 800d62a:	a32f      	add	r3, pc, #188	; (adr r3, 800d6e8 <__ieee754_acos+0x2c0>)
 800d62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d630:	f7f2 fdd2 	bl	80001d8 <__aeabi_dsub>
 800d634:	4622      	mov	r2, r4
 800d636:	462b      	mov	r3, r5
 800d638:	f7f2 ff86 	bl	8000548 <__aeabi_dmul>
 800d63c:	a32c      	add	r3, pc, #176	; (adr r3, 800d6f0 <__ieee754_acos+0x2c8>)
 800d63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d642:	f7f2 fdcb 	bl	80001dc <__adddf3>
 800d646:	4622      	mov	r2, r4
 800d648:	462b      	mov	r3, r5
 800d64a:	f7f2 ff7d 	bl	8000548 <__aeabi_dmul>
 800d64e:	a32a      	add	r3, pc, #168	; (adr r3, 800d6f8 <__ieee754_acos+0x2d0>)
 800d650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d654:	f7f2 fdc0 	bl	80001d8 <__aeabi_dsub>
 800d658:	4622      	mov	r2, r4
 800d65a:	462b      	mov	r3, r5
 800d65c:	f7f2 ff74 	bl	8000548 <__aeabi_dmul>
 800d660:	2200      	movs	r2, #0
 800d662:	4b2e      	ldr	r3, [pc, #184]	; (800d71c <__ieee754_acos+0x2f4>)
 800d664:	f7f2 fdba 	bl	80001dc <__adddf3>
 800d668:	4602      	mov	r2, r0
 800d66a:	460b      	mov	r3, r1
 800d66c:	4640      	mov	r0, r8
 800d66e:	4649      	mov	r1, r9
 800d670:	f7f3 f894 	bl	800079c <__aeabi_ddiv>
 800d674:	4632      	mov	r2, r6
 800d676:	463b      	mov	r3, r7
 800d678:	f7f2 ff66 	bl	8000548 <__aeabi_dmul>
 800d67c:	a320      	add	r3, pc, #128	; (adr r3, 800d700 <__ieee754_acos+0x2d8>)
 800d67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d682:	f7f2 fda9 	bl	80001d8 <__aeabi_dsub>
 800d686:	4632      	mov	r2, r6
 800d688:	463b      	mov	r3, r7
 800d68a:	f7f2 fda7 	bl	80001dc <__adddf3>
 800d68e:	4602      	mov	r2, r0
 800d690:	460b      	mov	r3, r1
 800d692:	f7f2 fda3 	bl	80001dc <__adddf3>
 800d696:	4602      	mov	r2, r0
 800d698:	460b      	mov	r3, r1
 800d69a:	a103      	add	r1, pc, #12	; (adr r1, 800d6a8 <__ieee754_acos+0x280>)
 800d69c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6a0:	e76f      	b.n	800d582 <__ieee754_acos+0x15a>
 800d6a2:	bf00      	nop
 800d6a4:	f3af 8000 	nop.w
 800d6a8:	54442d18 	.word	0x54442d18
 800d6ac:	400921fb 	.word	0x400921fb
 800d6b0:	0dfdf709 	.word	0x0dfdf709
 800d6b4:	3f023de1 	.word	0x3f023de1
 800d6b8:	7501b288 	.word	0x7501b288
 800d6bc:	3f49efe0 	.word	0x3f49efe0
 800d6c0:	b5688f3b 	.word	0xb5688f3b
 800d6c4:	3fa48228 	.word	0x3fa48228
 800d6c8:	0e884455 	.word	0x0e884455
 800d6cc:	3fc9c155 	.word	0x3fc9c155
 800d6d0:	03eb6f7d 	.word	0x03eb6f7d
 800d6d4:	3fd4d612 	.word	0x3fd4d612
 800d6d8:	55555555 	.word	0x55555555
 800d6dc:	3fc55555 	.word	0x3fc55555
 800d6e0:	b12e9282 	.word	0xb12e9282
 800d6e4:	3fb3b8c5 	.word	0x3fb3b8c5
 800d6e8:	1b8d0159 	.word	0x1b8d0159
 800d6ec:	3fe6066c 	.word	0x3fe6066c
 800d6f0:	9c598ac8 	.word	0x9c598ac8
 800d6f4:	40002ae5 	.word	0x40002ae5
 800d6f8:	1c8a2d4b 	.word	0x1c8a2d4b
 800d6fc:	40033a27 	.word	0x40033a27
 800d700:	33145c07 	.word	0x33145c07
 800d704:	3c91a626 	.word	0x3c91a626
 800d708:	54442d18 	.word	0x54442d18
 800d70c:	3ff921fb 	.word	0x3ff921fb
 800d710:	3fefffff 	.word	0x3fefffff
 800d714:	3fdfffff 	.word	0x3fdfffff
 800d718:	3c600000 	.word	0x3c600000
 800d71c:	3ff00000 	.word	0x3ff00000
 800d720:	3fe00000 	.word	0x3fe00000
 800d724:	ee10 2a10 	vmov	r2, s0
 800d728:	462b      	mov	r3, r5
 800d72a:	2000      	movs	r0, #0
 800d72c:	496a      	ldr	r1, [pc, #424]	; (800d8d8 <__ieee754_acos+0x4b0>)
 800d72e:	f7f2 fd53 	bl	80001d8 <__aeabi_dsub>
 800d732:	2200      	movs	r2, #0
 800d734:	4b69      	ldr	r3, [pc, #420]	; (800d8dc <__ieee754_acos+0x4b4>)
 800d736:	f7f2 ff07 	bl	8000548 <__aeabi_dmul>
 800d73a:	4604      	mov	r4, r0
 800d73c:	460d      	mov	r5, r1
 800d73e:	ec45 4b10 	vmov	d0, r4, r5
 800d742:	f000 f9df 	bl	800db04 <__ieee754_sqrt>
 800d746:	a34e      	add	r3, pc, #312	; (adr r3, 800d880 <__ieee754_acos+0x458>)
 800d748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d74c:	4620      	mov	r0, r4
 800d74e:	4629      	mov	r1, r5
 800d750:	ec59 8b10 	vmov	r8, r9, d0
 800d754:	f7f2 fef8 	bl	8000548 <__aeabi_dmul>
 800d758:	a34b      	add	r3, pc, #300	; (adr r3, 800d888 <__ieee754_acos+0x460>)
 800d75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75e:	f7f2 fd3d 	bl	80001dc <__adddf3>
 800d762:	4622      	mov	r2, r4
 800d764:	462b      	mov	r3, r5
 800d766:	f7f2 feef 	bl	8000548 <__aeabi_dmul>
 800d76a:	a349      	add	r3, pc, #292	; (adr r3, 800d890 <__ieee754_acos+0x468>)
 800d76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d770:	f7f2 fd32 	bl	80001d8 <__aeabi_dsub>
 800d774:	4622      	mov	r2, r4
 800d776:	462b      	mov	r3, r5
 800d778:	f7f2 fee6 	bl	8000548 <__aeabi_dmul>
 800d77c:	a346      	add	r3, pc, #280	; (adr r3, 800d898 <__ieee754_acos+0x470>)
 800d77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d782:	f7f2 fd2b 	bl	80001dc <__adddf3>
 800d786:	4622      	mov	r2, r4
 800d788:	462b      	mov	r3, r5
 800d78a:	f7f2 fedd 	bl	8000548 <__aeabi_dmul>
 800d78e:	a344      	add	r3, pc, #272	; (adr r3, 800d8a0 <__ieee754_acos+0x478>)
 800d790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d794:	f7f2 fd20 	bl	80001d8 <__aeabi_dsub>
 800d798:	4622      	mov	r2, r4
 800d79a:	462b      	mov	r3, r5
 800d79c:	f7f2 fed4 	bl	8000548 <__aeabi_dmul>
 800d7a0:	a341      	add	r3, pc, #260	; (adr r3, 800d8a8 <__ieee754_acos+0x480>)
 800d7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a6:	f7f2 fd19 	bl	80001dc <__adddf3>
 800d7aa:	4622      	mov	r2, r4
 800d7ac:	462b      	mov	r3, r5
 800d7ae:	f7f2 fecb 	bl	8000548 <__aeabi_dmul>
 800d7b2:	a33f      	add	r3, pc, #252	; (adr r3, 800d8b0 <__ieee754_acos+0x488>)
 800d7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b8:	4682      	mov	sl, r0
 800d7ba:	468b      	mov	fp, r1
 800d7bc:	4620      	mov	r0, r4
 800d7be:	4629      	mov	r1, r5
 800d7c0:	f7f2 fec2 	bl	8000548 <__aeabi_dmul>
 800d7c4:	a33c      	add	r3, pc, #240	; (adr r3, 800d8b8 <__ieee754_acos+0x490>)
 800d7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ca:	f7f2 fd05 	bl	80001d8 <__aeabi_dsub>
 800d7ce:	4622      	mov	r2, r4
 800d7d0:	462b      	mov	r3, r5
 800d7d2:	f7f2 feb9 	bl	8000548 <__aeabi_dmul>
 800d7d6:	a33a      	add	r3, pc, #232	; (adr r3, 800d8c0 <__ieee754_acos+0x498>)
 800d7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7dc:	f7f2 fcfe 	bl	80001dc <__adddf3>
 800d7e0:	4622      	mov	r2, r4
 800d7e2:	462b      	mov	r3, r5
 800d7e4:	f7f2 feb0 	bl	8000548 <__aeabi_dmul>
 800d7e8:	a337      	add	r3, pc, #220	; (adr r3, 800d8c8 <__ieee754_acos+0x4a0>)
 800d7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ee:	f7f2 fcf3 	bl	80001d8 <__aeabi_dsub>
 800d7f2:	4622      	mov	r2, r4
 800d7f4:	462b      	mov	r3, r5
 800d7f6:	f7f2 fea7 	bl	8000548 <__aeabi_dmul>
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	4b36      	ldr	r3, [pc, #216]	; (800d8d8 <__ieee754_acos+0x4b0>)
 800d7fe:	f7f2 fced 	bl	80001dc <__adddf3>
 800d802:	4602      	mov	r2, r0
 800d804:	460b      	mov	r3, r1
 800d806:	4650      	mov	r0, sl
 800d808:	4659      	mov	r1, fp
 800d80a:	f7f2 ffc7 	bl	800079c <__aeabi_ddiv>
 800d80e:	4642      	mov	r2, r8
 800d810:	464b      	mov	r3, r9
 800d812:	f7f2 fe99 	bl	8000548 <__aeabi_dmul>
 800d816:	2600      	movs	r6, #0
 800d818:	4682      	mov	sl, r0
 800d81a:	468b      	mov	fp, r1
 800d81c:	4632      	mov	r2, r6
 800d81e:	464b      	mov	r3, r9
 800d820:	4630      	mov	r0, r6
 800d822:	4649      	mov	r1, r9
 800d824:	f7f2 fe90 	bl	8000548 <__aeabi_dmul>
 800d828:	4602      	mov	r2, r0
 800d82a:	460b      	mov	r3, r1
 800d82c:	4620      	mov	r0, r4
 800d82e:	4629      	mov	r1, r5
 800d830:	f7f2 fcd2 	bl	80001d8 <__aeabi_dsub>
 800d834:	4632      	mov	r2, r6
 800d836:	4604      	mov	r4, r0
 800d838:	460d      	mov	r5, r1
 800d83a:	464b      	mov	r3, r9
 800d83c:	4640      	mov	r0, r8
 800d83e:	4649      	mov	r1, r9
 800d840:	f7f2 fccc 	bl	80001dc <__adddf3>
 800d844:	4602      	mov	r2, r0
 800d846:	460b      	mov	r3, r1
 800d848:	4620      	mov	r0, r4
 800d84a:	4629      	mov	r1, r5
 800d84c:	f7f2 ffa6 	bl	800079c <__aeabi_ddiv>
 800d850:	4602      	mov	r2, r0
 800d852:	460b      	mov	r3, r1
 800d854:	4650      	mov	r0, sl
 800d856:	4659      	mov	r1, fp
 800d858:	f7f2 fcc0 	bl	80001dc <__adddf3>
 800d85c:	4632      	mov	r2, r6
 800d85e:	464b      	mov	r3, r9
 800d860:	f7f2 fcbc 	bl	80001dc <__adddf3>
 800d864:	4602      	mov	r2, r0
 800d866:	460b      	mov	r3, r1
 800d868:	f7f2 fcb8 	bl	80001dc <__adddf3>
 800d86c:	e5f1      	b.n	800d452 <__ieee754_acos+0x2a>
 800d86e:	2000      	movs	r0, #0
 800d870:	2100      	movs	r1, #0
 800d872:	e5ee      	b.n	800d452 <__ieee754_acos+0x2a>
 800d874:	a116      	add	r1, pc, #88	; (adr r1, 800d8d0 <__ieee754_acos+0x4a8>)
 800d876:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d87a:	e5ea      	b.n	800d452 <__ieee754_acos+0x2a>
 800d87c:	f3af 8000 	nop.w
 800d880:	0dfdf709 	.word	0x0dfdf709
 800d884:	3f023de1 	.word	0x3f023de1
 800d888:	7501b288 	.word	0x7501b288
 800d88c:	3f49efe0 	.word	0x3f49efe0
 800d890:	b5688f3b 	.word	0xb5688f3b
 800d894:	3fa48228 	.word	0x3fa48228
 800d898:	0e884455 	.word	0x0e884455
 800d89c:	3fc9c155 	.word	0x3fc9c155
 800d8a0:	03eb6f7d 	.word	0x03eb6f7d
 800d8a4:	3fd4d612 	.word	0x3fd4d612
 800d8a8:	55555555 	.word	0x55555555
 800d8ac:	3fc55555 	.word	0x3fc55555
 800d8b0:	b12e9282 	.word	0xb12e9282
 800d8b4:	3fb3b8c5 	.word	0x3fb3b8c5
 800d8b8:	1b8d0159 	.word	0x1b8d0159
 800d8bc:	3fe6066c 	.word	0x3fe6066c
 800d8c0:	9c598ac8 	.word	0x9c598ac8
 800d8c4:	40002ae5 	.word	0x40002ae5
 800d8c8:	1c8a2d4b 	.word	0x1c8a2d4b
 800d8cc:	40033a27 	.word	0x40033a27
 800d8d0:	54442d18 	.word	0x54442d18
 800d8d4:	3ff921fb 	.word	0x3ff921fb
 800d8d8:	3ff00000 	.word	0x3ff00000
 800d8dc:	3fe00000 	.word	0x3fe00000

0800d8e0 <__ieee754_fmod>:
 800d8e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8e4:	ec53 2b11 	vmov	r2, r3, d1
 800d8e8:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800d8ec:	ea5e 0402 	orrs.w	r4, lr, r2
 800d8f0:	ec51 0b10 	vmov	r0, r1, d0
 800d8f4:	461e      	mov	r6, r3
 800d8f6:	ee11 5a10 	vmov	r5, s2
 800d8fa:	4694      	mov	ip, r2
 800d8fc:	d00c      	beq.n	800d918 <__ieee754_fmod+0x38>
 800d8fe:	4c7a      	ldr	r4, [pc, #488]	; (800dae8 <__ieee754_fmod+0x208>)
 800d900:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800d904:	45a0      	cmp	r8, r4
 800d906:	4689      	mov	r9, r1
 800d908:	dc06      	bgt.n	800d918 <__ieee754_fmod+0x38>
 800d90a:	4254      	negs	r4, r2
 800d90c:	4314      	orrs	r4, r2
 800d90e:	4f77      	ldr	r7, [pc, #476]	; (800daec <__ieee754_fmod+0x20c>)
 800d910:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800d914:	42bc      	cmp	r4, r7
 800d916:	d909      	bls.n	800d92c <__ieee754_fmod+0x4c>
 800d918:	f7f2 fe16 	bl	8000548 <__aeabi_dmul>
 800d91c:	4602      	mov	r2, r0
 800d91e:	460b      	mov	r3, r1
 800d920:	f7f2 ff3c 	bl	800079c <__aeabi_ddiv>
 800d924:	ec41 0b10 	vmov	d0, r0, r1
 800d928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d92c:	45f0      	cmp	r8, lr
 800d92e:	ee10 2a10 	vmov	r2, s0
 800d932:	4607      	mov	r7, r0
 800d934:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 800d938:	dc0a      	bgt.n	800d950 <__ieee754_fmod+0x70>
 800d93a:	dbf3      	blt.n	800d924 <__ieee754_fmod+0x44>
 800d93c:	42a8      	cmp	r0, r5
 800d93e:	d3f1      	bcc.n	800d924 <__ieee754_fmod+0x44>
 800d940:	d106      	bne.n	800d950 <__ieee754_fmod+0x70>
 800d942:	496b      	ldr	r1, [pc, #428]	; (800daf0 <__ieee754_fmod+0x210>)
 800d944:	0fe4      	lsrs	r4, r4, #31
 800d946:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800d94a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d94e:	e7e9      	b.n	800d924 <__ieee754_fmod+0x44>
 800d950:	4b68      	ldr	r3, [pc, #416]	; (800daf4 <__ieee754_fmod+0x214>)
 800d952:	4598      	cmp	r8, r3
 800d954:	dc49      	bgt.n	800d9ea <__ieee754_fmod+0x10a>
 800d956:	f1b8 0f00 	cmp.w	r8, #0
 800d95a:	d13d      	bne.n	800d9d8 <__ieee754_fmod+0xf8>
 800d95c:	4866      	ldr	r0, [pc, #408]	; (800daf8 <__ieee754_fmod+0x218>)
 800d95e:	4611      	mov	r1, r2
 800d960:	2900      	cmp	r1, #0
 800d962:	dc36      	bgt.n	800d9d2 <__ieee754_fmod+0xf2>
 800d964:	459e      	cmp	lr, r3
 800d966:	dc51      	bgt.n	800da0c <__ieee754_fmod+0x12c>
 800d968:	f1be 0f00 	cmp.w	lr, #0
 800d96c:	d145      	bne.n	800d9fa <__ieee754_fmod+0x11a>
 800d96e:	4b62      	ldr	r3, [pc, #392]	; (800daf8 <__ieee754_fmod+0x218>)
 800d970:	4629      	mov	r1, r5
 800d972:	2900      	cmp	r1, #0
 800d974:	dc3e      	bgt.n	800d9f4 <__ieee754_fmod+0x114>
 800d976:	4961      	ldr	r1, [pc, #388]	; (800dafc <__ieee754_fmod+0x21c>)
 800d978:	4288      	cmp	r0, r1
 800d97a:	db4c      	blt.n	800da16 <__ieee754_fmod+0x136>
 800d97c:	f3c9 0113 	ubfx	r1, r9, #0, #20
 800d980:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d984:	4a5d      	ldr	r2, [pc, #372]	; (800dafc <__ieee754_fmod+0x21c>)
 800d986:	4293      	cmp	r3, r2
 800d988:	db59      	blt.n	800da3e <__ieee754_fmod+0x15e>
 800d98a:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800d98e:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800d992:	1ac0      	subs	r0, r0, r3
 800d994:	1b8a      	subs	r2, r1, r6
 800d996:	eba7 050c 	sub.w	r5, r7, ip
 800d99a:	2800      	cmp	r0, #0
 800d99c:	d166      	bne.n	800da6c <__ieee754_fmod+0x18c>
 800d99e:	4567      	cmp	r7, ip
 800d9a0:	bf38      	it	cc
 800d9a2:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 800d9a6:	2a00      	cmp	r2, #0
 800d9a8:	bfbc      	itt	lt
 800d9aa:	463d      	movlt	r5, r7
 800d9ac:	460a      	movlt	r2, r1
 800d9ae:	ea52 0105 	orrs.w	r1, r2, r5
 800d9b2:	d0c6      	beq.n	800d942 <__ieee754_fmod+0x62>
 800d9b4:	494f      	ldr	r1, [pc, #316]	; (800daf4 <__ieee754_fmod+0x214>)
 800d9b6:	428a      	cmp	r2, r1
 800d9b8:	dd6d      	ble.n	800da96 <__ieee754_fmod+0x1b6>
 800d9ba:	4950      	ldr	r1, [pc, #320]	; (800dafc <__ieee754_fmod+0x21c>)
 800d9bc:	428b      	cmp	r3, r1
 800d9be:	db70      	blt.n	800daa2 <__ieee754_fmod+0x1c2>
 800d9c0:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 800d9c4:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800d9c8:	4314      	orrs	r4, r2
 800d9ca:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 800d9ce:	4628      	mov	r0, r5
 800d9d0:	e7a8      	b.n	800d924 <__ieee754_fmod+0x44>
 800d9d2:	3801      	subs	r0, #1
 800d9d4:	0049      	lsls	r1, r1, #1
 800d9d6:	e7c3      	b.n	800d960 <__ieee754_fmod+0x80>
 800d9d8:	4848      	ldr	r0, [pc, #288]	; (800dafc <__ieee754_fmod+0x21c>)
 800d9da:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 800d9de:	0049      	lsls	r1, r1, #1
 800d9e0:	2900      	cmp	r1, #0
 800d9e2:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800d9e6:	dcfa      	bgt.n	800d9de <__ieee754_fmod+0xfe>
 800d9e8:	e7bc      	b.n	800d964 <__ieee754_fmod+0x84>
 800d9ea:	ea4f 5028 	mov.w	r0, r8, asr #20
 800d9ee:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800d9f2:	e7b7      	b.n	800d964 <__ieee754_fmod+0x84>
 800d9f4:	3b01      	subs	r3, #1
 800d9f6:	0049      	lsls	r1, r1, #1
 800d9f8:	e7bb      	b.n	800d972 <__ieee754_fmod+0x92>
 800d9fa:	4b40      	ldr	r3, [pc, #256]	; (800dafc <__ieee754_fmod+0x21c>)
 800d9fc:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 800da00:	0049      	lsls	r1, r1, #1
 800da02:	2900      	cmp	r1, #0
 800da04:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800da08:	dcfa      	bgt.n	800da00 <__ieee754_fmod+0x120>
 800da0a:	e7b4      	b.n	800d976 <__ieee754_fmod+0x96>
 800da0c:	ea4f 532e 	mov.w	r3, lr, asr #20
 800da10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800da14:	e7af      	b.n	800d976 <__ieee754_fmod+0x96>
 800da16:	1a0f      	subs	r7, r1, r0
 800da18:	2f1f      	cmp	r7, #31
 800da1a:	dc0a      	bgt.n	800da32 <__ieee754_fmod+0x152>
 800da1c:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 800da20:	fa08 f807 	lsl.w	r8, r8, r7
 800da24:	fa22 f101 	lsr.w	r1, r2, r1
 800da28:	ea41 0108 	orr.w	r1, r1, r8
 800da2c:	fa02 f707 	lsl.w	r7, r2, r7
 800da30:	e7a8      	b.n	800d984 <__ieee754_fmod+0xa4>
 800da32:	4933      	ldr	r1, [pc, #204]	; (800db00 <__ieee754_fmod+0x220>)
 800da34:	1a09      	subs	r1, r1, r0
 800da36:	fa02 f101 	lsl.w	r1, r2, r1
 800da3a:	2700      	movs	r7, #0
 800da3c:	e7a2      	b.n	800d984 <__ieee754_fmod+0xa4>
 800da3e:	eba2 0c03 	sub.w	ip, r2, r3
 800da42:	f1bc 0f1f 	cmp.w	ip, #31
 800da46:	dc0a      	bgt.n	800da5e <__ieee754_fmod+0x17e>
 800da48:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 800da4c:	fa0e fe0c 	lsl.w	lr, lr, ip
 800da50:	fa25 f606 	lsr.w	r6, r5, r6
 800da54:	ea46 060e 	orr.w	r6, r6, lr
 800da58:	fa05 fc0c 	lsl.w	ip, r5, ip
 800da5c:	e799      	b.n	800d992 <__ieee754_fmod+0xb2>
 800da5e:	4e28      	ldr	r6, [pc, #160]	; (800db00 <__ieee754_fmod+0x220>)
 800da60:	1af6      	subs	r6, r6, r3
 800da62:	fa05 f606 	lsl.w	r6, r5, r6
 800da66:	f04f 0c00 	mov.w	ip, #0
 800da6a:	e792      	b.n	800d992 <__ieee754_fmod+0xb2>
 800da6c:	4567      	cmp	r7, ip
 800da6e:	bf38      	it	cc
 800da70:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 800da74:	2a00      	cmp	r2, #0
 800da76:	da05      	bge.n	800da84 <__ieee754_fmod+0x1a4>
 800da78:	0ffa      	lsrs	r2, r7, #31
 800da7a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800da7e:	007f      	lsls	r7, r7, #1
 800da80:	3801      	subs	r0, #1
 800da82:	e787      	b.n	800d994 <__ieee754_fmod+0xb4>
 800da84:	ea52 0105 	orrs.w	r1, r2, r5
 800da88:	f43f af5b 	beq.w	800d942 <__ieee754_fmod+0x62>
 800da8c:	0fe9      	lsrs	r1, r5, #31
 800da8e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800da92:	006f      	lsls	r7, r5, #1
 800da94:	e7f4      	b.n	800da80 <__ieee754_fmod+0x1a0>
 800da96:	0fe8      	lsrs	r0, r5, #31
 800da98:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800da9c:	006d      	lsls	r5, r5, #1
 800da9e:	3b01      	subs	r3, #1
 800daa0:	e789      	b.n	800d9b6 <__ieee754_fmod+0xd6>
 800daa2:	1ac9      	subs	r1, r1, r3
 800daa4:	2914      	cmp	r1, #20
 800daa6:	dc0a      	bgt.n	800dabe <__ieee754_fmod+0x1de>
 800daa8:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800daac:	fa02 f303 	lsl.w	r3, r2, r3
 800dab0:	40cd      	lsrs	r5, r1
 800dab2:	432b      	orrs	r3, r5
 800dab4:	410a      	asrs	r2, r1
 800dab6:	ea42 0104 	orr.w	r1, r2, r4
 800daba:	4618      	mov	r0, r3
 800dabc:	e732      	b.n	800d924 <__ieee754_fmod+0x44>
 800dabe:	291f      	cmp	r1, #31
 800dac0:	dc07      	bgt.n	800dad2 <__ieee754_fmod+0x1f2>
 800dac2:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800dac6:	40cd      	lsrs	r5, r1
 800dac8:	fa02 f303 	lsl.w	r3, r2, r3
 800dacc:	432b      	orrs	r3, r5
 800dace:	4622      	mov	r2, r4
 800dad0:	e7f1      	b.n	800dab6 <__ieee754_fmod+0x1d6>
 800dad2:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800dad6:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800dada:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800dade:	33e2      	adds	r3, #226	; 0xe2
 800dae0:	fa42 f303 	asr.w	r3, r2, r3
 800dae4:	e7f3      	b.n	800dace <__ieee754_fmod+0x1ee>
 800dae6:	bf00      	nop
 800dae8:	7fefffff 	.word	0x7fefffff
 800daec:	7ff00000 	.word	0x7ff00000
 800daf0:	0800e570 	.word	0x0800e570
 800daf4:	000fffff 	.word	0x000fffff
 800daf8:	fffffbed 	.word	0xfffffbed
 800dafc:	fffffc02 	.word	0xfffffc02
 800db00:	fffffbe2 	.word	0xfffffbe2

0800db04 <__ieee754_sqrt>:
 800db04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db08:	4955      	ldr	r1, [pc, #340]	; (800dc60 <__ieee754_sqrt+0x15c>)
 800db0a:	ec55 4b10 	vmov	r4, r5, d0
 800db0e:	43a9      	bics	r1, r5
 800db10:	462b      	mov	r3, r5
 800db12:	462a      	mov	r2, r5
 800db14:	d112      	bne.n	800db3c <__ieee754_sqrt+0x38>
 800db16:	ee10 2a10 	vmov	r2, s0
 800db1a:	ee10 0a10 	vmov	r0, s0
 800db1e:	4629      	mov	r1, r5
 800db20:	f7f2 fd12 	bl	8000548 <__aeabi_dmul>
 800db24:	4602      	mov	r2, r0
 800db26:	460b      	mov	r3, r1
 800db28:	4620      	mov	r0, r4
 800db2a:	4629      	mov	r1, r5
 800db2c:	f7f2 fb56 	bl	80001dc <__adddf3>
 800db30:	4604      	mov	r4, r0
 800db32:	460d      	mov	r5, r1
 800db34:	ec45 4b10 	vmov	d0, r4, r5
 800db38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db3c:	2d00      	cmp	r5, #0
 800db3e:	ee10 0a10 	vmov	r0, s0
 800db42:	4621      	mov	r1, r4
 800db44:	dc0f      	bgt.n	800db66 <__ieee754_sqrt+0x62>
 800db46:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800db4a:	4330      	orrs	r0, r6
 800db4c:	d0f2      	beq.n	800db34 <__ieee754_sqrt+0x30>
 800db4e:	b155      	cbz	r5, 800db66 <__ieee754_sqrt+0x62>
 800db50:	ee10 2a10 	vmov	r2, s0
 800db54:	4620      	mov	r0, r4
 800db56:	4629      	mov	r1, r5
 800db58:	f7f2 fb3e 	bl	80001d8 <__aeabi_dsub>
 800db5c:	4602      	mov	r2, r0
 800db5e:	460b      	mov	r3, r1
 800db60:	f7f2 fe1c 	bl	800079c <__aeabi_ddiv>
 800db64:	e7e4      	b.n	800db30 <__ieee754_sqrt+0x2c>
 800db66:	151b      	asrs	r3, r3, #20
 800db68:	d073      	beq.n	800dc52 <__ieee754_sqrt+0x14e>
 800db6a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800db6e:	07dd      	lsls	r5, r3, #31
 800db70:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800db74:	bf48      	it	mi
 800db76:	0fc8      	lsrmi	r0, r1, #31
 800db78:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800db7c:	bf44      	itt	mi
 800db7e:	0049      	lslmi	r1, r1, #1
 800db80:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800db84:	2500      	movs	r5, #0
 800db86:	1058      	asrs	r0, r3, #1
 800db88:	0fcb      	lsrs	r3, r1, #31
 800db8a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800db8e:	0049      	lsls	r1, r1, #1
 800db90:	2316      	movs	r3, #22
 800db92:	462c      	mov	r4, r5
 800db94:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800db98:	19a7      	adds	r7, r4, r6
 800db9a:	4297      	cmp	r7, r2
 800db9c:	bfde      	ittt	le
 800db9e:	19bc      	addle	r4, r7, r6
 800dba0:	1bd2      	suble	r2, r2, r7
 800dba2:	19ad      	addle	r5, r5, r6
 800dba4:	0fcf      	lsrs	r7, r1, #31
 800dba6:	3b01      	subs	r3, #1
 800dba8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800dbac:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800dbb0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800dbb4:	d1f0      	bne.n	800db98 <__ieee754_sqrt+0x94>
 800dbb6:	f04f 0c20 	mov.w	ip, #32
 800dbba:	469e      	mov	lr, r3
 800dbbc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800dbc0:	42a2      	cmp	r2, r4
 800dbc2:	eb06 070e 	add.w	r7, r6, lr
 800dbc6:	dc02      	bgt.n	800dbce <__ieee754_sqrt+0xca>
 800dbc8:	d112      	bne.n	800dbf0 <__ieee754_sqrt+0xec>
 800dbca:	428f      	cmp	r7, r1
 800dbcc:	d810      	bhi.n	800dbf0 <__ieee754_sqrt+0xec>
 800dbce:	2f00      	cmp	r7, #0
 800dbd0:	eb07 0e06 	add.w	lr, r7, r6
 800dbd4:	da42      	bge.n	800dc5c <__ieee754_sqrt+0x158>
 800dbd6:	f1be 0f00 	cmp.w	lr, #0
 800dbda:	db3f      	blt.n	800dc5c <__ieee754_sqrt+0x158>
 800dbdc:	f104 0801 	add.w	r8, r4, #1
 800dbe0:	1b12      	subs	r2, r2, r4
 800dbe2:	428f      	cmp	r7, r1
 800dbe4:	bf88      	it	hi
 800dbe6:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800dbea:	1bc9      	subs	r1, r1, r7
 800dbec:	4433      	add	r3, r6
 800dbee:	4644      	mov	r4, r8
 800dbf0:	0052      	lsls	r2, r2, #1
 800dbf2:	f1bc 0c01 	subs.w	ip, ip, #1
 800dbf6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800dbfa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800dbfe:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800dc02:	d1dd      	bne.n	800dbc0 <__ieee754_sqrt+0xbc>
 800dc04:	430a      	orrs	r2, r1
 800dc06:	d006      	beq.n	800dc16 <__ieee754_sqrt+0x112>
 800dc08:	1c5c      	adds	r4, r3, #1
 800dc0a:	bf13      	iteet	ne
 800dc0c:	3301      	addne	r3, #1
 800dc0e:	3501      	addeq	r5, #1
 800dc10:	4663      	moveq	r3, ip
 800dc12:	f023 0301 	bicne.w	r3, r3, #1
 800dc16:	106a      	asrs	r2, r5, #1
 800dc18:	085b      	lsrs	r3, r3, #1
 800dc1a:	07e9      	lsls	r1, r5, #31
 800dc1c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800dc20:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800dc24:	bf48      	it	mi
 800dc26:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800dc2a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800dc2e:	461c      	mov	r4, r3
 800dc30:	e780      	b.n	800db34 <__ieee754_sqrt+0x30>
 800dc32:	0aca      	lsrs	r2, r1, #11
 800dc34:	3815      	subs	r0, #21
 800dc36:	0549      	lsls	r1, r1, #21
 800dc38:	2a00      	cmp	r2, #0
 800dc3a:	d0fa      	beq.n	800dc32 <__ieee754_sqrt+0x12e>
 800dc3c:	02d6      	lsls	r6, r2, #11
 800dc3e:	d50a      	bpl.n	800dc56 <__ieee754_sqrt+0x152>
 800dc40:	f1c3 0420 	rsb	r4, r3, #32
 800dc44:	fa21 f404 	lsr.w	r4, r1, r4
 800dc48:	1e5d      	subs	r5, r3, #1
 800dc4a:	4099      	lsls	r1, r3
 800dc4c:	4322      	orrs	r2, r4
 800dc4e:	1b43      	subs	r3, r0, r5
 800dc50:	e78b      	b.n	800db6a <__ieee754_sqrt+0x66>
 800dc52:	4618      	mov	r0, r3
 800dc54:	e7f0      	b.n	800dc38 <__ieee754_sqrt+0x134>
 800dc56:	0052      	lsls	r2, r2, #1
 800dc58:	3301      	adds	r3, #1
 800dc5a:	e7ef      	b.n	800dc3c <__ieee754_sqrt+0x138>
 800dc5c:	46a0      	mov	r8, r4
 800dc5e:	e7bf      	b.n	800dbe0 <__ieee754_sqrt+0xdc>
 800dc60:	7ff00000 	.word	0x7ff00000

0800dc64 <matherr>:
 800dc64:	2000      	movs	r0, #0
 800dc66:	4770      	bx	lr

0800dc68 <nan>:
 800dc68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dc70 <nan+0x8>
 800dc6c:	4770      	bx	lr
 800dc6e:	bf00      	nop
 800dc70:	00000000 	.word	0x00000000
 800dc74:	7ff80000 	.word	0x7ff80000

0800dc78 <_init>:
 800dc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc7a:	bf00      	nop
 800dc7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc7e:	bc08      	pop	{r3}
 800dc80:	469e      	mov	lr, r3
 800dc82:	4770      	bx	lr

0800dc84 <_fini>:
 800dc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc86:	bf00      	nop
 800dc88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc8a:	bc08      	pop	{r3}
 800dc8c:	469e      	mov	lr, r3
 800dc8e:	4770      	bx	lr
