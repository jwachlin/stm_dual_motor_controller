
dual_motor_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f0  0800d630  0800d630  0001d630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df20  0800df20  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800df20  0800df20  0001df20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df28  0800df28  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df28  0800df28  0001df28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df2c  0800df2c  0001df2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800df30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015844  2000008c  0800dfbc  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200158d0  0800dfbc  000258d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021ad3  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000049e4  00000000  00000000  00041b8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018a8  00000000  00000000  00046578  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016f0  00000000  00000000  00047e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000256c3  00000000  00000000  00049510  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001533a  00000000  00000000  0006ebd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000db3bc  00000000  00000000  00083f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000eb  00000000  00000000  0015f2c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006844  00000000  00000000  0015f3b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000016e  00000000  00000000  00165bf8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d618 	.word	0x0800d618

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	0800d618 	.word	0x0800d618

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bac:	f000 b972 	b.w	8000e94 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9e08      	ldr	r6, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	4688      	mov	r8, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d14b      	bne.n	8000c6e <__udivmoddi4+0xa6>
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	4615      	mov	r5, r2
 8000bda:	d967      	bls.n	8000cac <__udivmoddi4+0xe4>
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b14a      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be2:	f1c2 0720 	rsb	r7, r2, #32
 8000be6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bea:	fa20 f707 	lsr.w	r7, r0, r7
 8000bee:	4095      	lsls	r5, r2
 8000bf0:	ea47 0803 	orr.w	r8, r7, r3
 8000bf4:	4094      	lsls	r4, r2
 8000bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bfa:	0c23      	lsrs	r3, r4, #16
 8000bfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c00:	fa1f fc85 	uxth.w	ip, r5
 8000c04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c10:	4299      	cmp	r1, r3
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x60>
 8000c14:	18eb      	adds	r3, r5, r3
 8000c16:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c1a:	f080 811b 	bcs.w	8000e54 <__udivmoddi4+0x28c>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 8118 	bls.w	8000e54 <__udivmoddi4+0x28c>
 8000c24:	3f02      	subs	r7, #2
 8000c26:	442b      	add	r3, r5
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c3c:	45a4      	cmp	ip, r4
 8000c3e:	d909      	bls.n	8000c54 <__udivmoddi4+0x8c>
 8000c40:	192c      	adds	r4, r5, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c46:	f080 8107 	bcs.w	8000e58 <__udivmoddi4+0x290>
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	f240 8104 	bls.w	8000e58 <__udivmoddi4+0x290>
 8000c50:	3802      	subs	r0, #2
 8000c52:	442c      	add	r4, r5
 8000c54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c58:	eba4 040c 	sub.w	r4, r4, ip
 8000c5c:	2700      	movs	r7, #0
 8000c5e:	b11e      	cbz	r6, 8000c68 <__udivmoddi4+0xa0>
 8000c60:	40d4      	lsrs	r4, r2
 8000c62:	2300      	movs	r3, #0
 8000c64:	e9c6 4300 	strd	r4, r3, [r6]
 8000c68:	4639      	mov	r1, r7
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0xbe>
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	f000 80eb 	beq.w	8000e4e <__udivmoddi4+0x286>
 8000c78:	2700      	movs	r7, #0
 8000c7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c7e:	4638      	mov	r0, r7
 8000c80:	4639      	mov	r1, r7
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	fab3 f783 	clz	r7, r3
 8000c8a:	2f00      	cmp	r7, #0
 8000c8c:	d147      	bne.n	8000d1e <__udivmoddi4+0x156>
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d302      	bcc.n	8000c98 <__udivmoddi4+0xd0>
 8000c92:	4282      	cmp	r2, r0
 8000c94:	f200 80fa 	bhi.w	8000e8c <__udivmoddi4+0x2c4>
 8000c98:	1a84      	subs	r4, r0, r2
 8000c9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	4698      	mov	r8, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d0e0      	beq.n	8000c68 <__udivmoddi4+0xa0>
 8000ca6:	e9c6 4800 	strd	r4, r8, [r6]
 8000caa:	e7dd      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000cac:	b902      	cbnz	r2, 8000cb0 <__udivmoddi4+0xe8>
 8000cae:	deff      	udf	#255	; 0xff
 8000cb0:	fab2 f282 	clz	r2, r2
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f040 808f 	bne.w	8000dd8 <__udivmoddi4+0x210>
 8000cba:	1b49      	subs	r1, r1, r5
 8000cbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc0:	fa1f f885 	uxth.w	r8, r5
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cd8:	4299      	cmp	r1, r3
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0x124>
 8000cdc:	18eb      	adds	r3, r5, r3
 8000cde:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x122>
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	f200 80cd 	bhi.w	8000e84 <__udivmoddi4+0x2bc>
 8000cea:	4684      	mov	ip, r0
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	b2a3      	uxth	r3, r4
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cf8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cfc:	fb08 f800 	mul.w	r8, r8, r0
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x14c>
 8000d04:	192c      	adds	r4, r5, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x14a>
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	f200 80b6 	bhi.w	8000e7e <__udivmoddi4+0x2b6>
 8000d12:	4618      	mov	r0, r3
 8000d14:	eba4 0408 	sub.w	r4, r4, r8
 8000d18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1c:	e79f      	b.n	8000c5e <__udivmoddi4+0x96>
 8000d1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d22:	40bb      	lsls	r3, r7
 8000d24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d3c:	4325      	orrs	r5, r4
 8000d3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d42:	0c2c      	lsrs	r4, r5, #16
 8000d44:	fb08 3319 	mls	r3, r8, r9, r3
 8000d48:	fa1f fa8e 	uxth.w	sl, lr
 8000d4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d50:	fb09 f40a 	mul.w	r4, r9, sl
 8000d54:	429c      	cmp	r4, r3
 8000d56:	fa02 f207 	lsl.w	r2, r2, r7
 8000d5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b0>
 8000d60:	eb1e 0303 	adds.w	r3, lr, r3
 8000d64:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d68:	f080 8087 	bcs.w	8000e7a <__udivmoddi4+0x2b2>
 8000d6c:	429c      	cmp	r4, r3
 8000d6e:	f240 8084 	bls.w	8000e7a <__udivmoddi4+0x2b2>
 8000d72:	f1a9 0902 	sub.w	r9, r9, #2
 8000d76:	4473      	add	r3, lr
 8000d78:	1b1b      	subs	r3, r3, r4
 8000d7a:	b2ad      	uxth	r5, r5
 8000d7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d80:	fb08 3310 	mls	r3, r8, r0, r3
 8000d84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d8c:	45a2      	cmp	sl, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1da>
 8000d90:	eb1e 0404 	adds.w	r4, lr, r4
 8000d94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d98:	d26b      	bcs.n	8000e72 <__udivmoddi4+0x2aa>
 8000d9a:	45a2      	cmp	sl, r4
 8000d9c:	d969      	bls.n	8000e72 <__udivmoddi4+0x2aa>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4474      	add	r4, lr
 8000da2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000da6:	fba0 8902 	umull	r8, r9, r0, r2
 8000daa:	eba4 040a 	sub.w	r4, r4, sl
 8000dae:	454c      	cmp	r4, r9
 8000db0:	46c2      	mov	sl, r8
 8000db2:	464b      	mov	r3, r9
 8000db4:	d354      	bcc.n	8000e60 <__udivmoddi4+0x298>
 8000db6:	d051      	beq.n	8000e5c <__udivmoddi4+0x294>
 8000db8:	2e00      	cmp	r6, #0
 8000dba:	d069      	beq.n	8000e90 <__udivmoddi4+0x2c8>
 8000dbc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dc0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dc4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dc8:	40fd      	lsrs	r5, r7
 8000dca:	40fc      	lsrs	r4, r7
 8000dcc:	ea4c 0505 	orr.w	r5, ip, r5
 8000dd0:	e9c6 5400 	strd	r5, r4, [r6]
 8000dd4:	2700      	movs	r7, #0
 8000dd6:	e747      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f703 	lsr.w	r7, r0, r3
 8000de0:	4095      	lsls	r5, r2
 8000de2:	fa01 f002 	lsl.w	r0, r1, r2
 8000de6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dee:	4338      	orrs	r0, r7
 8000df0:	0c01      	lsrs	r1, r0, #16
 8000df2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000df6:	fa1f f885 	uxth.w	r8, r5
 8000dfa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e02:	fb07 f308 	mul.w	r3, r7, r8
 8000e06:	428b      	cmp	r3, r1
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d907      	bls.n	8000e1e <__udivmoddi4+0x256>
 8000e0e:	1869      	adds	r1, r5, r1
 8000e10:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e14:	d22f      	bcs.n	8000e76 <__udivmoddi4+0x2ae>
 8000e16:	428b      	cmp	r3, r1
 8000e18:	d92d      	bls.n	8000e76 <__udivmoddi4+0x2ae>
 8000e1a:	3f02      	subs	r7, #2
 8000e1c:	4429      	add	r1, r5
 8000e1e:	1acb      	subs	r3, r1, r3
 8000e20:	b281      	uxth	r1, r0
 8000e22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e2e:	fb00 f308 	mul.w	r3, r0, r8
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x27e>
 8000e36:	1869      	adds	r1, r5, r1
 8000e38:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e3c:	d217      	bcs.n	8000e6e <__udivmoddi4+0x2a6>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d915      	bls.n	8000e6e <__udivmoddi4+0x2a6>
 8000e42:	3802      	subs	r0, #2
 8000e44:	4429      	add	r1, r5
 8000e46:	1ac9      	subs	r1, r1, r3
 8000e48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e4c:	e73b      	b.n	8000cc6 <__udivmoddi4+0xfe>
 8000e4e:	4637      	mov	r7, r6
 8000e50:	4630      	mov	r0, r6
 8000e52:	e709      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e54:	4607      	mov	r7, r0
 8000e56:	e6e7      	b.n	8000c28 <__udivmoddi4+0x60>
 8000e58:	4618      	mov	r0, r3
 8000e5a:	e6fb      	b.n	8000c54 <__udivmoddi4+0x8c>
 8000e5c:	4541      	cmp	r1, r8
 8000e5e:	d2ab      	bcs.n	8000db8 <__udivmoddi4+0x1f0>
 8000e60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e64:	eb69 020e 	sbc.w	r2, r9, lr
 8000e68:	3801      	subs	r0, #1
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	e7a4      	b.n	8000db8 <__udivmoddi4+0x1f0>
 8000e6e:	4660      	mov	r0, ip
 8000e70:	e7e9      	b.n	8000e46 <__udivmoddi4+0x27e>
 8000e72:	4618      	mov	r0, r3
 8000e74:	e795      	b.n	8000da2 <__udivmoddi4+0x1da>
 8000e76:	4667      	mov	r7, ip
 8000e78:	e7d1      	b.n	8000e1e <__udivmoddi4+0x256>
 8000e7a:	4681      	mov	r9, r0
 8000e7c:	e77c      	b.n	8000d78 <__udivmoddi4+0x1b0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	442c      	add	r4, r5
 8000e82:	e747      	b.n	8000d14 <__udivmoddi4+0x14c>
 8000e84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e88:	442b      	add	r3, r5
 8000e8a:	e72f      	b.n	8000cec <__udivmoddi4+0x124>
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	e708      	b.n	8000ca2 <__udivmoddi4+0xda>
 8000e90:	4637      	mov	r7, r6
 8000e92:	e6e9      	b.n	8000c68 <__udivmoddi4+0xa0>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <HAL_CAN_RxFifo0MsgPendingCallback>:

 static uint32_t this_device = 1;
 static CAN_HandleTypeDef can_h;

 void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *_hcan)
 {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08e      	sub	sp, #56	; 0x38
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	 // ISR
	 CAN_RxHeaderTypeDef header;
	 canbus_frame_t can_frame;
	 HAL_CAN_GetRxMessage(_hcan, 0, &header, can_frame.data);
 8000ea0:	f107 030c 	add.w	r3, r7, #12
 8000ea4:	3305      	adds	r3, #5
 8000ea6:	f107 021c 	add.w	r2, r7, #28
 8000eaa:	2100      	movs	r1, #0
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f003 ffa4 	bl	8004dfa <HAL_CAN_GetRxMessage>
	 can_frame.id = header.StdId;
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	60fb      	str	r3, [r7, #12]
	 can_frame.length = header.DLC;
 8000eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	743b      	strb	r3, [r7, #16]
	 add_can_frame_to_rx_queue_from_isr(can_frame);
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ec2:	f000 fc6b 	bl	800179c <add_can_frame_to_rx_queue_from_isr>
 }
 8000ec6:	bf00      	nop
 8000ec8:	3738      	adds	r7, #56	; 0x38
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <canbus_task_init>:

void canbus_task_init(CAN_HandleTypeDef can_handle)
{
 8000ed0:	b084      	sub	sp, #16
 8000ed2:	b5b0      	push	{r4, r5, r7, lr}
 8000ed4:	b08a      	sub	sp, #40	; 0x28
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000edc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//this_device = ((ioport_get_pin_level(INDEX_0_GPIO) ? 0 : 1) << 0);
	//this_device |= ((ioport_get_pin_level(INDEX_1_GPIO) ? 0 : 1) << 1);
	//this_device |= ((ioport_get_pin_level(INDEX_2_GPIO) ? 0 : 1) << 2);
	//this_device += 1; // Always offset by 1, the main controller is 0

	canbus_queue_set = xQueueCreateSet( 2 * CAN_QUEUE_LENGTH );
 8000ee0:	201e      	movs	r0, #30
 8000ee2:	f007 f9c3 	bl	800826c <xQueueCreateSet>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <canbus_task_init+0xc8>)
 8000eea:	601a      	str	r2, [r3, #0]
	canbus_rx_queue = xQueueCreate( CAN_QUEUE_LENGTH, sizeof(canbus_frame_t) );
 8000eec:	2200      	movs	r2, #0
 8000eee:	2110      	movs	r1, #16
 8000ef0:	200f      	movs	r0, #15
 8000ef2:	f006 fd46 	bl	8007982 <xQueueGenericCreate>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	4b28      	ldr	r3, [pc, #160]	; (8000f9c <canbus_task_init+0xcc>)
 8000efa:	601a      	str	r2, [r3, #0]
	canbus_tx_queue = xQueueCreate( CAN_QUEUE_LENGTH, sizeof(canbus_frame_t) );
 8000efc:	2200      	movs	r2, #0
 8000efe:	2110      	movs	r1, #16
 8000f00:	200f      	movs	r0, #15
 8000f02:	f006 fd3e 	bl	8007982 <xQueueGenericCreate>
 8000f06:	4602      	mov	r2, r0
 8000f08:	4b25      	ldr	r3, [pc, #148]	; (8000fa0 <canbus_task_init+0xd0>)
 8000f0a:	601a      	str	r2, [r3, #0]

	xQueueAddToSet( canbus_rx_queue, canbus_queue_set );
 8000f0c:	4b23      	ldr	r3, [pc, #140]	; (8000f9c <canbus_task_init+0xcc>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <canbus_task_init+0xc8>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	4610      	mov	r0, r2
 8000f18:	f007 f9b7 	bl	800828a <xQueueAddToSet>
	xQueueAddToSet( canbus_tx_queue, canbus_queue_set );
 8000f1c:	4b20      	ldr	r3, [pc, #128]	; (8000fa0 <canbus_task_init+0xd0>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <canbus_task_init+0xc8>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	4610      	mov	r0, r2
 8000f28:	f007 f9af 	bl	800828a <xQueueAddToSet>

	can_h = can_handle;
 8000f2c:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <canbus_task_init+0xd4>)
 8000f2e:	461c      	mov	r4, r3
 8000f30:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8000f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f3c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f40:	e884 0003 	stmia.w	r4, {r0, r1}

	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdHigh=0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow=0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh=0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow=0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //set filter scale
 8000f58:	2301      	movs	r3, #1
 8000f5a:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterActivation=ENABLE;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	623b      	str	r3, [r7, #32]

	HAL_CAN_ConfigFilter(&can_h, &sFilterConfig); //configure CAN filter
 8000f60:	463b      	mov	r3, r7
 8000f62:	4619      	mov	r1, r3
 8000f64:	480f      	ldr	r0, [pc, #60]	; (8000fa4 <canbus_task_init+0xd4>)
 8000f66:	f003 fd49 	bl	80049fc <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&can_h);
 8000f6a:	480e      	ldr	r0, [pc, #56]	; (8000fa4 <canbus_task_init+0xd4>)
 8000f6c:	f003 fe26 	bl	8004bbc <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(&can_h, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000f70:	2102      	movs	r1, #2
 8000f72:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <canbus_task_init+0xd4>)
 8000f74:	f004 f853 	bl	800501e <HAL_CAN_ActivateNotification>
	HAL_CAN_ActivateNotification(&can_h, CAN_IT_RX_FIFO1_MSG_PENDING );
 8000f78:	2110      	movs	r1, #16
 8000f7a:	480a      	ldr	r0, [pc, #40]	; (8000fa4 <canbus_task_init+0xd4>)
 8000f7c:	f004 f84f 	bl	800501e <HAL_CAN_ActivateNotification>
	HAL_CAN_ActivateNotification(&can_h, CAN_IT_TX_MAILBOX_EMPTY);
 8000f80:	2101      	movs	r1, #1
 8000f82:	4808      	ldr	r0, [pc, #32]	; (8000fa4 <canbus_task_init+0xd4>)
 8000f84:	f004 f84b 	bl	800501e <HAL_CAN_ActivateNotification>
}
 8000f88:	bf00      	nop
 8000f8a:	3728      	adds	r7, #40	; 0x28
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000f92:	b004      	add	sp, #16
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	200000b0 	.word	0x200000b0
 8000f9c:	200000a8 	.word	0x200000a8
 8000fa0:	200000ac 	.word	0x200000ac
 8000fa4:	200000b4 	.word	0x200000b4

08000fa8 <canbus_task>:

void canbus_task(void)
{
 8000fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000faa:	b0b1      	sub	sp, #196	; 0xc4
 8000fac:	af00      	add	r7, sp, #0
	QueueSetMemberHandle_t xActivatedMember;
	canbus_frame_t can_frame;

	xActivatedMember = xQueueSelectFromSet( canbus_queue_set, portMAX_DELAY);
 8000fae:	4bb0      	ldr	r3, [pc, #704]	; (8001270 <canbus_task+0x2c8>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f007 f988 	bl	80082cc <xQueueSelectFromSet>
 8000fbc:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0

	if(xActivatedMember == canbus_rx_queue)
 8000fc0:	4bac      	ldr	r3, [pc, #688]	; (8001274 <canbus_task+0x2cc>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	f040 8399 	bne.w	8001700 <canbus_task+0x758>
	{
		xQueueReceive( xActivatedMember, &can_frame, 0 );
 8000fce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8000fda:	f006 fef1 	bl	8007dc0 <xQueueReceive>
		can_message_id_t msg;
		msg.raw_id = can_frame.id;
 8000fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fe0:	65bb      	str	r3, [r7, #88]	; 0x58
		unpack_can_message(&msg);
 8000fe2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f009 fa5e 	bl	800a4a8 <unpack_can_message>

		if(msg.can_device == this_device)
 8000fec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000fee:	4ba2      	ldr	r3, [pc, #648]	; (8001278 <canbus_task+0x2d0>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	f040 83ac 	bne.w	8001750 <canbus_task+0x7a8>
		{
			if(msg.can_msg_type == CAN_MSG_TYPE_CMD)
 8000ff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f040 83a8 	bne.w	8001750 <canbus_task+0x7a8>
			{
				if(msg.can_class == CAN_MSG_CLASS_CMD_CONTROL)
 8001000:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001002:	2b00      	cmp	r3, #0
 8001004:	f040 813a 	bne.w	800127c <canbus_task+0x2d4>
				{
					if(msg.can_index == CAN_MSG_INDEX_CMD_POSITION)
 8001008:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800100a:	2b00      	cmp	r3, #0
 800100c:	d11c      	bne.n	8001048 <canbus_task+0xa0>
					{
						uint8_t motor_index = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						float position = 0;
 8001014:	f04f 0300 	mov.w	r3, #0
 8001018:	657b      	str	r3, [r7, #84]	; 0x54
						motor_index = can_frame.data[0];
 800101a:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 800101e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						memcpy(&position, &can_frame.data[1], 4);
 8001022:	f8d7 3072 	ldr.w	r3, [r7, #114]	; 0x72
 8001026:	657b      	str	r3, [r7, #84]	; 0x54
						set_control_mode(POSITION, motor_index);
 8001028:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800102c:	4619      	mov	r1, r3
 800102e:	2000      	movs	r0, #0
 8001030:	f001 ffc4 	bl	8002fbc <set_control_mode>
						set_motor_position(position, motor_index);
 8001034:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001038:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800103c:	4618      	mov	r0, r3
 800103e:	eeb0 0a67 	vmov.f32	s0, s15
 8001042:	f001 ffd3 	bl	8002fec <set_motor_position>
			header.TransmitGlobalTime = DISABLE;
			uint32_t mailbox = 0;
			HAL_CAN_AddTxMessage(&can_h, &header, can_frame.data, &mailbox);
		}
	}
}
 8001046:	e383      	b.n	8001750 <canbus_task+0x7a8>
					else if(msg.can_index == CAN_MSG_INDEX_CMD_SPEED)
 8001048:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800104a:	2b01      	cmp	r3, #1
 800104c:	d119      	bne.n	8001082 <canbus_task+0xda>
						uint8_t motor_index = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
						int32_t speed = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	653b      	str	r3, [r7, #80]	; 0x50
						motor_index = can_frame.data[0];
 8001058:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 800105c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
						memcpy(&speed, &can_frame.data[1], 4);
 8001060:	f8d7 3072 	ldr.w	r3, [r7, #114]	; 0x72
 8001064:	653b      	str	r3, [r7, #80]	; 0x50
						set_control_mode(SPEED, motor_index);
 8001066:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800106a:	4619      	mov	r1, r3
 800106c:	2001      	movs	r0, #1
 800106e:	f001 ffa5 	bl	8002fbc <set_control_mode>
						set_motor_speed(speed, motor_index);
 8001072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001074:	f897 2080 	ldrb.w	r2, [r7, #128]	; 0x80
 8001078:	4611      	mov	r1, r2
 800107a:	4618      	mov	r0, r3
 800107c:	f002 f84c 	bl	8003118 <set_motor_speed>
}
 8001080:	e366      	b.n	8001750 <canbus_task+0x7a8>
					else if(msg.can_index == CAN_MSG_INDEX_CMD_DUTY)
 8001082:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001084:	2b04      	cmp	r3, #4
 8001086:	d11c      	bne.n	80010c2 <canbus_task+0x11a>
						uint8_t motor_index = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
						float duty = 0;
 800108e:	f04f 0300 	mov.w	r3, #0
 8001092:	64fb      	str	r3, [r7, #76]	; 0x4c
						motor_index = can_frame.data[0];
 8001094:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001098:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
						memcpy(&duty, &can_frame.data[1], 4);
 800109c:	f8d7 3072 	ldr.w	r3, [r7, #114]	; 0x72
 80010a0:	64fb      	str	r3, [r7, #76]	; 0x4c
						set_control_mode(DUTY, motor_index);
 80010a2:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 80010a6:	4619      	mov	r1, r3
 80010a8:	2003      	movs	r0, #3
 80010aa:	f001 ff87 	bl	8002fbc <set_control_mode>
						set_motor_duty(duty, motor_index);
 80010ae:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80010b2:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 80010b6:	4618      	mov	r0, r3
 80010b8:	eeb0 0a67 	vmov.f32	s0, s15
 80010bc:	f002 f848 	bl	8003150 <set_motor_duty>
}
 80010c0:	e346      	b.n	8001750 <canbus_task+0x7a8>
					else if(msg.can_index == CAN_MSG_INDEX_CMD_PRIMITIVE)
 80010c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	d164      	bne.n	8001192 <canbus_task+0x1ea>
						int16_t tau_ms = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
						int16_t t_offset_ms = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
						uint8_t primitive_index = can_frame.data[0];
 80010d4:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80010d8:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
						if(primitive_index < NUMBER_PRIMITIVES)
 80010dc:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80010e0:	2b07      	cmp	r3, #7
 80010e2:	f200 8335 	bhi.w	8001750 <canbus_task+0x7a8>
							memcpy(&tau_ms, &can_frame.data[1], 2);
 80010e6:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80010ea:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
							memcpy(&t_offset_ms, &can_frame.data[3], 2);
 80010ee:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80010f2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
							uint8_t invert = can_frame.data[5];
 80010f6:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80010fa:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
							uint8_t time_reverse = can_frame.data[6];
 80010fe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001102:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
							motion_primitive_set_index(primitive_index);
 8001106:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800110a:	4618      	mov	r0, r3
 800110c:	f00a fa1e 	bl	800b54c <motion_primitive_set_index>
							motion_primitive_set_timing(primitive_index, (float) tau_ms * 0.001, (float) t_offset_ms * 0.001, invert, time_reverse);
 8001110:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001114:	ee07 3a90 	vmov	s15, r3
 8001118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800111c:	ee17 0a90 	vmov	r0, s15
 8001120:	f7ff f9ba 	bl	8000498 <__aeabi_f2d>
 8001124:	a350      	add	r3, pc, #320	; (adr r3, 8001268 <canbus_task+0x2c0>)
 8001126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112a:	f7ff fa0d 	bl	8000548 <__aeabi_dmul>
 800112e:	4603      	mov	r3, r0
 8001130:	460c      	mov	r4, r1
 8001132:	4618      	mov	r0, r3
 8001134:	4621      	mov	r1, r4
 8001136:	f7ff fcdf 	bl	8000af8 <__aeabi_d2f>
 800113a:	4605      	mov	r5, r0
 800113c:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8001140:	ee07 3a90 	vmov	s15, r3
 8001144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001148:	ee17 0a90 	vmov	r0, s15
 800114c:	f7ff f9a4 	bl	8000498 <__aeabi_f2d>
 8001150:	a345      	add	r3, pc, #276	; (adr r3, 8001268 <canbus_task+0x2c0>)
 8001152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001156:	f7ff f9f7 	bl	8000548 <__aeabi_dmul>
 800115a:	4603      	mov	r3, r0
 800115c:	460c      	mov	r4, r1
 800115e:	4618      	mov	r0, r3
 8001160:	4621      	mov	r1, r4
 8001162:	f7ff fcc9 	bl	8000af8 <__aeabi_d2f>
 8001166:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800116a:	f897 1083 	ldrb.w	r1, [r7, #131]	; 0x83
 800116e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8001172:	ee00 0a90 	vmov	s1, r0
 8001176:	ee00 5a10 	vmov	s0, r5
 800117a:	4618      	mov	r0, r3
 800117c:	f00a f9fa 	bl	800b574 <motion_primitive_set_timing>
							set_control_mode(PRIMITIVE, 0);
 8001180:	2100      	movs	r1, #0
 8001182:	2004      	movs	r0, #4
 8001184:	f001 ff1a 	bl	8002fbc <set_control_mode>
							set_control_mode(PRIMITIVE, 1);
 8001188:	2101      	movs	r1, #1
 800118a:	2004      	movs	r0, #4
 800118c:	f001 ff16 	bl	8002fbc <set_control_mode>
}
 8001190:	e2de      	b.n	8001750 <canbus_task+0x7a8>
					else if(msg.can_index == CAN_MSG_INDEX_CMD_PROPRIOCEPTIVE_PRIMITIVE)
 8001192:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001194:	2b05      	cmp	r3, #5
 8001196:	f040 82db 	bne.w	8001750 <canbus_task+0x7a8>
						int16_t tau_ms = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
						int16_t t_offset_ms = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
						uint8_t primitive_index = can_frame.data[0];
 80011a6:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80011aa:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						if(primitive_index < NUMBER_PRIMITIVES)
 80011ae:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80011b2:	2b07      	cmp	r3, #7
 80011b4:	f200 82cc 	bhi.w	8001750 <canbus_task+0x7a8>
							memcpy(&tau_ms, &can_frame.data[1], 2);
 80011b8:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80011bc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
							memcpy(&t_offset_ms, &can_frame.data[3], 2);
 80011c0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80011c4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
							uint8_t invert = can_frame.data[5];
 80011c8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80011cc:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
							uint8_t time_reverse = can_frame.data[6];
 80011d0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80011d4:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
							motion_primitive_set_index(primitive_index);
 80011d8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80011dc:	4618      	mov	r0, r3
 80011de:	f00a f9b5 	bl	800b54c <motion_primitive_set_index>
							motion_primitive_set_timing(primitive_index, (float) tau_ms * 0.001, (float) t_offset_ms * 0.001, invert, time_reverse);
 80011e2:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80011e6:	ee07 3a90 	vmov	s15, r3
 80011ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ee:	ee17 0a90 	vmov	r0, s15
 80011f2:	f7ff f951 	bl	8000498 <__aeabi_f2d>
 80011f6:	a31c      	add	r3, pc, #112	; (adr r3, 8001268 <canbus_task+0x2c0>)
 80011f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fc:	f7ff f9a4 	bl	8000548 <__aeabi_dmul>
 8001200:	4603      	mov	r3, r0
 8001202:	460c      	mov	r4, r1
 8001204:	4618      	mov	r0, r3
 8001206:	4621      	mov	r1, r4
 8001208:	f7ff fc76 	bl	8000af8 <__aeabi_d2f>
 800120c:	4605      	mov	r5, r0
 800120e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001212:	ee07 3a90 	vmov	s15, r3
 8001216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800121a:	ee17 0a90 	vmov	r0, s15
 800121e:	f7ff f93b 	bl	8000498 <__aeabi_f2d>
 8001222:	a311      	add	r3, pc, #68	; (adr r3, 8001268 <canbus_task+0x2c0>)
 8001224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001228:	f7ff f98e 	bl	8000548 <__aeabi_dmul>
 800122c:	4603      	mov	r3, r0
 800122e:	460c      	mov	r4, r1
 8001230:	4618      	mov	r0, r3
 8001232:	4621      	mov	r1, r4
 8001234:	f7ff fc60 	bl	8000af8 <__aeabi_d2f>
 8001238:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 800123c:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 8001240:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001244:	ee00 0a90 	vmov	s1, r0
 8001248:	ee00 5a10 	vmov	s0, r5
 800124c:	4618      	mov	r0, r3
 800124e:	f00a f991 	bl	800b574 <motion_primitive_set_timing>
							set_control_mode(PROPRIOCEPTIVE_PRIMITIVE, 0);
 8001252:	2100      	movs	r1, #0
 8001254:	2005      	movs	r0, #5
 8001256:	f001 feb1 	bl	8002fbc <set_control_mode>
							set_control_mode(PROPRIOCEPTIVE_PRIMITIVE, 1);
 800125a:	2101      	movs	r1, #1
 800125c:	2005      	movs	r0, #5
 800125e:	f001 fead 	bl	8002fbc <set_control_mode>
}
 8001262:	e275      	b.n	8001750 <canbus_task+0x7a8>
 8001264:	f3af 8000 	nop.w
 8001268:	d2f1a9fc 	.word	0xd2f1a9fc
 800126c:	3f50624d 	.word	0x3f50624d
 8001270:	200000b0 	.word	0x200000b0
 8001274:	200000a8 	.word	0x200000a8
 8001278:	20000000 	.word	0x20000000
				else if(msg.can_class == CAN_MSG_CLASS_CMD_SET_PARAM)
 800127c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800127e:	2b02      	cmp	r3, #2
 8001280:	f040 8223 	bne.w	80016ca <canbus_task+0x722>
					if(msg.can_index == CAN_MSG_INDEX_CMD_PARAM_PRIM_SCALE)
 8001284:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001286:	2b00      	cmp	r3, #0
 8001288:	d165      	bne.n	8001356 <canbus_task+0x3ae>
						uint8_t primitive_index = can_frame.data[0];
 800128a:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 800128e:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
						memcpy(&x_off, &can_frame.data[1], 1);
 8001292:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8001296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
						memcpy(&y_off, &can_frame.data[2], 1);
 800129a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800129e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
						float x_scale = 0.01 *  can_frame.data[3];
 80012a2:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f8e4 	bl	8000474 <__aeabi_i2d>
 80012ac:	f20f 43c4 	addw	r3, pc, #1220	; 0x4c4
 80012b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b4:	f7ff f948 	bl	8000548 <__aeabi_dmul>
 80012b8:	4603      	mov	r3, r0
 80012ba:	460c      	mov	r4, r1
 80012bc:	4618      	mov	r0, r3
 80012be:	4621      	mov	r1, r4
 80012c0:	f7ff fc1a 	bl	8000af8 <__aeabi_d2f>
 80012c4:	4603      	mov	r3, r0
 80012c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
						float y_scale = 0.01 *  can_frame.data[4];
 80012ca:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f8d0 	bl	8000474 <__aeabi_i2d>
 80012d4:	f20f 439c 	addw	r3, pc, #1180	; 0x49c
 80012d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012dc:	f7ff f934 	bl	8000548 <__aeabi_dmul>
 80012e0:	4603      	mov	r3, r0
 80012e2:	460c      	mov	r4, r1
 80012e4:	4618      	mov	r0, r3
 80012e6:	4621      	mov	r1, r4
 80012e8:	f7ff fc06 	bl	8000af8 <__aeabi_d2f>
 80012ec:	4603      	mov	r3, r0
 80012ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
						motion_primitive_set_scaling(primitive_index, 0.001*x_off,0.001*y_off, x_scale, y_scale);
 80012f2:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f8bc 	bl	8000474 <__aeabi_i2d>
 80012fc:	f20f 4358 	addw	r3, pc, #1112	; 0x458
 8001300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001304:	f7ff f920 	bl	8000548 <__aeabi_dmul>
 8001308:	4603      	mov	r3, r0
 800130a:	460c      	mov	r4, r1
 800130c:	4618      	mov	r0, r3
 800130e:	4621      	mov	r1, r4
 8001310:	f7ff fbf2 	bl	8000af8 <__aeabi_d2f>
 8001314:	4605      	mov	r5, r0
 8001316:	f997 3042 	ldrsb.w	r3, [r7, #66]	; 0x42
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f8aa 	bl	8000474 <__aeabi_i2d>
 8001320:	f20f 4334 	addw	r3, pc, #1076	; 0x434
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff f90e 	bl	8000548 <__aeabi_dmul>
 800132c:	4603      	mov	r3, r0
 800132e:	460c      	mov	r4, r1
 8001330:	4618      	mov	r0, r3
 8001332:	4621      	mov	r1, r4
 8001334:	f7ff fbe0 	bl	8000af8 <__aeabi_d2f>
 8001338:	4602      	mov	r2, r0
 800133a:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800133e:	edd7 1a22 	vldr	s3, [r7, #136]	; 0x88
 8001342:	ed97 1a23 	vldr	s2, [r7, #140]	; 0x8c
 8001346:	ee00 2a90 	vmov	s1, r2
 800134a:	ee00 5a10 	vmov	s0, r5
 800134e:	4618      	mov	r0, r3
 8001350:	f00a f94e 	bl	800b5f0 <motion_primitive_set_scaling>
}
 8001354:	e1fc      	b.n	8001750 <canbus_task+0x7a8>
					} else if(msg.can_index == CAN_MSG_INDEX_CMD_PARAM_PD_MINMAX)
 8001356:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001358:	2b01      	cmp	r3, #1
 800135a:	f040 80dc 	bne.w	8001516 <canbus_task+0x56e>
						uint8_t index_type = can_frame.data[0];
 800135e:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001362:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
						uint8_t index = (index_type & 0x01);
 8001366:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
						uint8_t ctrl_type = ((index_type & 0x06) >> 0x01);
 8001372:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 8001376:	105b      	asrs	r3, r3, #1
 8001378:	b2db      	uxtb	r3, r3
 800137a:	f003 0303 	and.w	r3, r3, #3
 800137e:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
						memcpy(&kp_temp, &can_frame.data[1], 2);
 8001382:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8001386:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
						memcpy(&kd_temp, &can_frame.data[3], 2);
 800138a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800138e:	87fb      	strh	r3, [r7, #62]	; 0x3e
						uint8_t speed_filt_pct = can_frame.data[5];
 8001390:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001394:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						uint8_t cmd_max_pct = can_frame.data[6];
 8001398:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800139c:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
						uint8_t cmd_min_pct = can_frame.data[7];
 80013a0:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80013a4:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
						float kp = kp_temp * 0.01;
 80013a8:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f861 	bl	8000474 <__aeabi_i2d>
 80013b2:	a3f0      	add	r3, pc, #960	; (adr r3, 8001774 <canbus_task+0x7cc>)
 80013b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b8:	f7ff f8c6 	bl	8000548 <__aeabi_dmul>
 80013bc:	4603      	mov	r3, r0
 80013be:	460c      	mov	r4, r1
 80013c0:	4618      	mov	r0, r3
 80013c2:	4621      	mov	r1, r4
 80013c4:	f7ff fb98 	bl	8000af8 <__aeabi_d2f>
 80013c8:	4603      	mov	r3, r0
 80013ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
						float kd = kd_temp * 1.0;
 80013ce:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f84e 	bl	8000474 <__aeabi_i2d>
 80013d8:	4603      	mov	r3, r0
 80013da:	460c      	mov	r4, r1
 80013dc:	4618      	mov	r0, r3
 80013de:	4621      	mov	r1, r4
 80013e0:	f7ff fb8a 	bl	8000af8 <__aeabi_d2f>
 80013e4:	4603      	mov	r3, r0
 80013e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
						float alpha = speed_filt_pct * 0.01;
 80013ea:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff f840 	bl	8000474 <__aeabi_i2d>
 80013f4:	a3df      	add	r3, pc, #892	; (adr r3, 8001774 <canbus_task+0x7cc>)
 80013f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fa:	f7ff f8a5 	bl	8000548 <__aeabi_dmul>
 80013fe:	4603      	mov	r3, r0
 8001400:	460c      	mov	r4, r1
 8001402:	4618      	mov	r0, r3
 8001404:	4621      	mov	r1, r4
 8001406:	f7ff fb77 	bl	8000af8 <__aeabi_d2f>
 800140a:	4603      	mov	r3, r0
 800140c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
						float cmd_max = cmd_max_pct * 0.01;
 8001410:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f82d 	bl	8000474 <__aeabi_i2d>
 800141a:	a3d6      	add	r3, pc, #856	; (adr r3, 8001774 <canbus_task+0x7cc>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	f7ff f892 	bl	8000548 <__aeabi_dmul>
 8001424:	4603      	mov	r3, r0
 8001426:	460c      	mov	r4, r1
 8001428:	4618      	mov	r0, r3
 800142a:	4621      	mov	r1, r4
 800142c:	f7ff fb64 	bl	8000af8 <__aeabi_d2f>
 8001430:	4603      	mov	r3, r0
 8001432:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
						float cmd_min = cmd_min_pct * 0.01;
 8001436:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff f81a 	bl	8000474 <__aeabi_i2d>
 8001440:	a3cc      	add	r3, pc, #816	; (adr r3, 8001774 <canbus_task+0x7cc>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	f7ff f87f 	bl	8000548 <__aeabi_dmul>
 800144a:	4603      	mov	r3, r0
 800144c:	460c      	mov	r4, r1
 800144e:	4618      	mov	r0, r3
 8001450:	4621      	mov	r1, r4
 8001452:	f7ff fb51 	bl	8000af8 <__aeabi_d2f>
 8001456:	4603      	mov	r3, r0
 8001458:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
						if(alpha > 0.99)
 800145c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001460:	f7ff f81a 	bl	8000498 <__aeabi_f2d>
 8001464:	a3c5      	add	r3, pc, #788	; (adr r3, 800177c <canbus_task+0x7d4>)
 8001466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146a:	f7ff fafd 	bl	8000a68 <__aeabi_dcmpgt>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d002      	beq.n	800147a <canbus_task+0x4d2>
							alpha = 0.99;
 8001474:	4bbc      	ldr	r3, [pc, #752]	; (8001768 <canbus_task+0x7c0>)
 8001476:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
						if(alpha < 0.0)
 800147a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800147e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001486:	d503      	bpl.n	8001490 <canbus_task+0x4e8>
							alpha = 0.0;
 8001488:	f04f 0300 	mov.w	r3, #0
 800148c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
						if(cmd_max > 1.0)
 8001490:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001494:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001498:	eef4 7ac7 	vcmpe.f32	s15, s14
 800149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a0:	dd03      	ble.n	80014aa <canbus_task+0x502>
							cmd_max = 1.0;
 80014a2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80014a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
						if(cmd_max < 0.0)
 80014aa:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80014ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b6:	d503      	bpl.n	80014c0 <canbus_task+0x518>
							cmd_max = 0.0;
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
						if(cmd_min > 1.0)
 80014c0:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80014c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d0:	dd03      	ble.n	80014da <canbus_task+0x532>
							cmd_min = 1.0;
 80014d2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80014d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
						if(cmd_min < 0.0)
 80014da:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80014de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e6:	d503      	bpl.n	80014f0 <canbus_task+0x548>
							cmd_min = 0.0;
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
						set_control_params_kp_min_max(index, ctrl_type, kp, kd, alpha, cmd_min, cmd_max);
 80014f0:	f897 20a0 	ldrb.w	r2, [r7, #160]	; 0xa0
 80014f4:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 80014f8:	ed97 2a2e 	vldr	s4, [r7, #184]	; 0xb8
 80014fc:	edd7 1a2d 	vldr	s3, [r7, #180]	; 0xb4
 8001500:	ed97 1a2f 	vldr	s2, [r7, #188]	; 0xbc
 8001504:	edd7 0a25 	vldr	s1, [r7, #148]	; 0x94
 8001508:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 800150c:	4611      	mov	r1, r2
 800150e:	4618      	mov	r0, r3
 8001510:	f001 fe54 	bl	80031bc <set_control_params_kp_min_max>
}
 8001514:	e11c      	b.n	8001750 <canbus_task+0x7a8>
					} else if(msg.can_index == CAN_MSG_INDEX_CMD_PARAM_KI)
 8001516:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001518:	2b02      	cmp	r3, #2
 800151a:	d121      	bne.n	8001560 <canbus_task+0x5b8>
						uint8_t index_type = can_frame.data[0];
 800151c:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001520:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
						uint8_t index = (index_type & 0x01);
 8001524:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
						uint8_t ctrl_type = ((index_type & 0x06) >> 0x01);
 8001530:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8001534:	105b      	asrs	r3, r3, #1
 8001536:	b2db      	uxtb	r3, r3
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
						memcpy(&ki, &can_frame.data[1], 4);
 8001540:	f8d7 3072 	ldr.w	r3, [r7, #114]	; 0x72
 8001544:	63bb      	str	r3, [r7, #56]	; 0x38
						set_control_params_ki(index, ctrl_type, ki);
 8001546:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800154a:	f897 20a3 	ldrb.w	r2, [r7, #163]	; 0xa3
 800154e:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8001552:	eeb0 0a67 	vmov.f32	s0, s15
 8001556:	4611      	mov	r1, r2
 8001558:	4618      	mov	r0, r3
 800155a:	f001 ff25 	bl	80033a8 <set_control_params_ki>
}
 800155e:	e0f7      	b.n	8001750 <canbus_task+0x7a8>
					} else if(msg.can_index == CAN_MSG_INDEX_CMD_PARAM_MAX_INTEGRAL)
 8001560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001562:	2b03      	cmp	r3, #3
 8001564:	d121      	bne.n	80015aa <canbus_task+0x602>
						uint8_t index_type = can_frame.data[0];
 8001566:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 800156a:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
						uint8_t index = (index_type & 0x01);
 800156e:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						uint8_t ctrl_type = ((index_type & 0x06) >> 0x01);
 800157a:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 800157e:	105b      	asrs	r3, r3, #1
 8001580:	b2db      	uxtb	r3, r3
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
						memcpy(&int_max, &can_frame.data[1], 4);
 800158a:	f8d7 3072 	ldr.w	r3, [r7, #114]	; 0x72
 800158e:	637b      	str	r3, [r7, #52]	; 0x34
						set_control_params_int_max(index, ctrl_type, int_max);
 8001590:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001594:	f897 20a6 	ldrb.w	r2, [r7, #166]	; 0xa6
 8001598:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800159c:	eeb0 0a67 	vmov.f32	s0, s15
 80015a0:	4611      	mov	r1, r2
 80015a2:	4618      	mov	r0, r3
 80015a4:	f001 ff48 	bl	8003438 <set_control_params_int_max>
}
 80015a8:	e0d2      	b.n	8001750 <canbus_task+0x7a8>
					} else if(msg.can_index == CAN_MSG_INDEX_CMD_PARAM_MIN_INTEGRAL)
 80015aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80015ac:	2b04      	cmp	r3, #4
 80015ae:	d121      	bne.n	80015f4 <canbus_task+0x64c>
						uint8_t index_type = can_frame.data[0];
 80015b0:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80015b4:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
						uint8_t index = (index_type & 0x01);
 80015b8:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
						uint8_t ctrl_type = ((index_type & 0x06) >> 0x01);
 80015c4:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80015c8:	105b      	asrs	r3, r3, #1
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
						memcpy(&int_min, &can_frame.data[1], 4);
 80015d4:	f8d7 3072 	ldr.w	r3, [r7, #114]	; 0x72
 80015d8:	633b      	str	r3, [r7, #48]	; 0x30
						set_control_params_int_min(index, ctrl_type, int_min);
 80015da:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80015de:	f897 20a9 	ldrb.w	r2, [r7, #169]	; 0xa9
 80015e2:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 80015e6:	eeb0 0a67 	vmov.f32	s0, s15
 80015ea:	4611      	mov	r1, r2
 80015ec:	4618      	mov	r0, r3
 80015ee:	f001 ff6b 	bl	80034c8 <set_control_params_int_min>
}
 80015f2:	e0ad      	b.n	8001750 <canbus_task+0x7a8>
					} else if(msg.can_index == CAN_MSG_INDEX_CMD_PARAM_TICKS_PER_REV)
 80015f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80015f6:	2b05      	cmp	r3, #5
 80015f8:	d10e      	bne.n	8001618 <canbus_task+0x670>
						uint8_t index = can_frame.data[0];
 80015fa:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80015fe:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
						memcpy(&ticks_per_rev, &can_frame.data[1], 4);
 8001602:	f8d7 3072 	ldr.w	r3, [r7, #114]	; 0x72
 8001606:	62fb      	str	r3, [r7, #44]	; 0x2c
						set_motor_ticks_per_rev(ticks_per_rev, index);
 8001608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160a:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 800160e:	4611      	mov	r1, r2
 8001610:	4618      	mov	r0, r3
 8001612:	f001 ffa1 	bl	8003558 <set_motor_ticks_per_rev>
}
 8001616:	e09b      	b.n	8001750 <canbus_task+0x7a8>
					} else if(msg.can_index == CAN_MSG_INDEX_CMD_PARAM_PRIM_KEYFRAME)
 8001618:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800161a:	2b06      	cmp	r3, #6
 800161c:	f040 8098 	bne.w	8001750 <canbus_task+0x7a8>
						uint8_t prim_index = can_frame.data[0];
 8001620:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001624:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
						uint8_t keyframe_index = can_frame.data[1];
 8001628:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800162c:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
						memcpy(&x_temp, &can_frame.data[2], 2);
 8001630:	f8b7 3073 	ldrh.w	r3, [r7, #115]	; 0x73
 8001634:	b29b      	uxth	r3, r3
 8001636:	857b      	strh	r3, [r7, #42]	; 0x2a
						memcpy(&y_temp, &can_frame.data[4], 2);
 8001638:	f8b7 3075 	ldrh.w	r3, [r7, #117]	; 0x75
 800163c:	b29b      	uxth	r3, r3
 800163e:	853b      	strh	r3, [r7, #40]	; 0x28
						memcpy(&t_part_temp, &can_frame.data[6], 2);
 8001640:	f8b7 3077 	ldrh.w	r3, [r7, #119]	; 0x77
 8001644:	b29b      	uxth	r3, r3
 8001646:	84fb      	strh	r3, [r7, #38]	; 0x26
						motion_primitive_set_keyframe(prim_index, keyframe_index, x_temp * 0.001, y_temp * 0.001, t_part_temp * 1.5259e-5);
 8001648:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe ff11 	bl	8000474 <__aeabi_i2d>
 8001652:	a341      	add	r3, pc, #260	; (adr r3, 8001758 <canbus_task+0x7b0>)
 8001654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001658:	f7fe ff76 	bl	8000548 <__aeabi_dmul>
 800165c:	4603      	mov	r3, r0
 800165e:	460c      	mov	r4, r1
 8001660:	4618      	mov	r0, r3
 8001662:	4621      	mov	r1, r4
 8001664:	f7ff fa48 	bl	8000af8 <__aeabi_d2f>
 8001668:	4605      	mov	r5, r0
 800166a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe ff00 	bl	8000474 <__aeabi_i2d>
 8001674:	a338      	add	r3, pc, #224	; (adr r3, 8001758 <canbus_task+0x7b0>)
 8001676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167a:	f7fe ff65 	bl	8000548 <__aeabi_dmul>
 800167e:	4603      	mov	r3, r0
 8001680:	460c      	mov	r4, r1
 8001682:	4618      	mov	r0, r3
 8001684:	4621      	mov	r1, r4
 8001686:	f7ff fa37 	bl	8000af8 <__aeabi_d2f>
 800168a:	4606      	mov	r6, r0
 800168c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe fef0 	bl	8000474 <__aeabi_i2d>
 8001694:	a332      	add	r3, pc, #200	; (adr r3, 8001760 <canbus_task+0x7b8>)
 8001696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169a:	f7fe ff55 	bl	8000548 <__aeabi_dmul>
 800169e:	4603      	mov	r3, r0
 80016a0:	460c      	mov	r4, r1
 80016a2:	4618      	mov	r0, r3
 80016a4:	4621      	mov	r1, r4
 80016a6:	f7ff fa27 	bl	8000af8 <__aeabi_d2f>
 80016aa:	4601      	mov	r1, r0
 80016ac:	f897 20ad 	ldrb.w	r2, [r7, #173]	; 0xad
 80016b0:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80016b4:	ee01 1a10 	vmov	s2, r1
 80016b8:	ee00 6a90 	vmov	s1, r6
 80016bc:	ee00 5a10 	vmov	s0, r5
 80016c0:	4611      	mov	r1, r2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f00a ff42 	bl	800c54c <motion_primitive_set_keyframe>
}
 80016c8:	e042      	b.n	8001750 <canbus_task+0x7a8>
				else if(msg.can_class == CAN_MSG_CLASS_CMD_ZERO_POS)
 80016ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	d10a      	bne.n	80016e6 <canbus_task+0x73e>
					uint8_t motor_index = can_frame.data[0];
 80016d0:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80016d4:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
					set_motor_encoder_ticks(motor_index, 0);
 80016d8:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80016dc:	2100      	movs	r1, #0
 80016de:	4618      	mov	r0, r3
 80016e0:	f008 ffe2 	bl	800a6a8 <set_motor_encoder_ticks>
}
 80016e4:	e034      	b.n	8001750 <canbus_task+0x7a8>
				else if(msg.can_class == CAN_MSG_CLASS_CMD_TIME)
 80016e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d131      	bne.n	8001750 <canbus_task+0x7a8>
					uint32_t external_time = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	623b      	str	r3, [r7, #32]
					memcpy(&external_time, &can_frame.data[0], 4);
 80016f0:	f8d7 3071 	ldr.w	r3, [r7, #113]	; 0x71
 80016f4:	623b      	str	r3, [r7, #32]
					motion_primitive_time_sync(external_time);
 80016f6:	6a3b      	ldr	r3, [r7, #32]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f009 ff15 	bl	800b528 <motion_primitive_time_sync>
}
 80016fe:	e027      	b.n	8001750 <canbus_task+0x7a8>
	else if(xActivatedMember == canbus_tx_queue)
 8001700:	4b1a      	ldr	r3, [pc, #104]	; (800176c <canbus_task+0x7c4>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001708:	429a      	cmp	r2, r3
 800170a:	d121      	bne.n	8001750 <canbus_task+0x7a8>
		if(xQueueReceive( xActivatedMember, &can_frame, 0 ) == pdTRUE)
 800170c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001710:	2200      	movs	r2, #0
 8001712:	4619      	mov	r1, r3
 8001714:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8001718:	f006 fb52 	bl	8007dc0 <xQueueReceive>
 800171c:	4603      	mov	r3, r0
 800171e:	2b01      	cmp	r3, #1
 8001720:	d116      	bne.n	8001750 <canbus_task+0x7a8>
			header.DLC = can_frame.length;
 8001722:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001726:	61bb      	str	r3, [r7, #24]
			header.StdId = can_frame.id;
 8001728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800172a:	60bb      	str	r3, [r7, #8]
			header.RTR = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
			header.IDE = CAN_ID_STD;
 8001730:	2300      	movs	r3, #0
 8001732:	613b      	str	r3, [r7, #16]
			header.TransmitGlobalTime = DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	773b      	strb	r3, [r7, #28]
			uint32_t mailbox = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	607b      	str	r3, [r7, #4]
			HAL_CAN_AddTxMessage(&can_h, &header, can_frame.data, &mailbox);
 800173c:	1d38      	adds	r0, r7, #4
 800173e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001742:	1d5a      	adds	r2, r3, #5
 8001744:	f107 0108 	add.w	r1, r7, #8
 8001748:	4603      	mov	r3, r0
 800174a:	4809      	ldr	r0, [pc, #36]	; (8001770 <canbus_task+0x7c8>)
 800174c:	f003 fa7a 	bl	8004c44 <HAL_CAN_AddTxMessage>
}
 8001750:	bf00      	nop
 8001752:	37c4      	adds	r7, #196	; 0xc4
 8001754:	46bd      	mov	sp, r7
 8001756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001758:	d2f1a9fc 	.word	0xd2f1a9fc
 800175c:	3f50624d 	.word	0x3f50624d
 8001760:	7eda0be1 	.word	0x7eda0be1
 8001764:	3ef0000e 	.word	0x3ef0000e
 8001768:	3f7d70a4 	.word	0x3f7d70a4
 800176c:	200000ac 	.word	0x200000ac
 8001770:	200000b4 	.word	0x200000b4
 8001774:	47ae147b 	.word	0x47ae147b
 8001778:	3f847ae1 	.word	0x3f847ae1
 800177c:	7ae147ae 	.word	0x7ae147ae
 8001780:	3fefae14 	.word	0x3fefae14

08001784 <get_device_index>:

/*
*	\brief Gets the device index
*/
uint32_t get_device_index(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
	return this_device;
 8001788:	4b03      	ldr	r3, [pc, #12]	; (8001798 <get_device_index+0x14>)
 800178a:	681b      	ldr	r3, [r3, #0]
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	20000000 	.word	0x20000000

0800179c <add_can_frame_to_rx_queue_from_isr>:
*	\param frame The frame to process
*
*	\return True if added to queue, false otherwise
*/
bool add_can_frame_to_rx_queue_from_isr(canbus_frame_t frame)
{
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b087      	sub	sp, #28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	463c      	mov	r4, r7
 80017a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	bool success = false;
 80017a8:	2300      	movs	r3, #0
 80017aa:	75fb      	strb	r3, [r7, #23]
	if(canbus_rx_queue)
 80017ac:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <add_can_frame_to_rx_queue_from_isr+0x3c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00c      	beq.n	80017ce <add_can_frame_to_rx_queue_from_isr+0x32>
	{
		success = (xQueueSendFromISR(canbus_rx_queue, &frame, NULL) == pdTRUE);
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <add_can_frame_to_rx_queue_from_isr+0x3c>)
 80017b6:	6818      	ldr	r0, [r3, #0]
 80017b8:	4639      	mov	r1, r7
 80017ba:	2300      	movs	r3, #0
 80017bc:	2200      	movs	r2, #0
 80017be:	f006 fa59 	bl	8007c74 <xQueueGenericSendFromISR>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	bf0c      	ite	eq
 80017c8:	2301      	moveq	r3, #1
 80017ca:	2300      	movne	r3, #0
 80017cc:	75fb      	strb	r3, [r7, #23]
	}
	return success;
 80017ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	371c      	adds	r7, #28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd90      	pop	{r4, r7, pc}
 80017d8:	200000a8 	.word	0x200000a8

080017dc <add_can_frame_to_tx_queue>:
*	\param frame The frame to send
*
*	\return True if added to queue, false otherwise
*/
bool add_can_frame_to_tx_queue(canbus_frame_t frame)
{
 80017dc:	b590      	push	{r4, r7, lr}
 80017de:	b087      	sub	sp, #28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	463c      	mov	r4, r7
 80017e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	bool success = false;
 80017e8:	2300      	movs	r3, #0
 80017ea:	75fb      	strb	r3, [r7, #23]
	if(canbus_tx_queue)
 80017ec:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <add_can_frame_to_tx_queue+0x3c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d00c      	beq.n	800180e <add_can_frame_to_tx_queue+0x32>
	{
		success = (xQueueSend(canbus_tx_queue, &frame, 0) == pdTRUE);
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <add_can_frame_to_tx_queue+0x3c>)
 80017f6:	6818      	ldr	r0, [r3, #0]
 80017f8:	4639      	mov	r1, r7
 80017fa:	2300      	movs	r3, #0
 80017fc:	2200      	movs	r2, #0
 80017fe:	f006 f921 	bl	8007a44 <xQueueGenericSend>
 8001802:	4603      	mov	r3, r0
 8001804:	2b01      	cmp	r3, #1
 8001806:	bf0c      	ite	eq
 8001808:	2301      	moveq	r3, #1
 800180a:	2300      	movne	r3, #0
 800180c:	75fb      	strb	r3, [r7, #23]
	}
	return success;
 800180e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001810:	4618      	mov	r0, r3
 8001812:	371c      	adds	r7, #28
 8001814:	46bd      	mov	sp, r7
 8001816:	bd90      	pop	{r4, r7, pc}
 8001818:	200000ac 	.word	0x200000ac

0800181c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4a07      	ldr	r2, [pc, #28]	; (8001848 <vApplicationGetIdleTaskMemory+0x2c>)
 800182c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	4a06      	ldr	r2, [pc, #24]	; (800184c <vApplicationGetIdleTaskMemory+0x30>)
 8001832:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f44f 7280 	mov.w	r2, #256	; 0x100
 800183a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	200000dc 	.word	0x200000dc
 800184c:	20000130 	.word	0x20000130

08001850 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4a07      	ldr	r2, [pc, #28]	; (800187c <vApplicationGetTimerTaskMemory+0x2c>)
 8001860:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	4a06      	ldr	r2, [pc, #24]	; (8001880 <vApplicationGetTimerTaskMemory+0x30>)
 8001866:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800186e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	20000530 	.word	0x20000530
 8001880:	20000584 	.word	0x20000584

08001884 <enable_motor_task_from_isr>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void enable_motor_task_from_isr(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
	if(motor_taskHandle)
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <enable_motor_task_from_isr+0x40>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d013      	beq.n	80018ba <enable_motor_task_from_isr+0x36>
	{
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
		vTaskNotifyGiveFromISR( motor_taskHandle, &xHigherPriorityTaskWoken);
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <enable_motor_task_from_isr+0x40>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	1d3a      	adds	r2, r7, #4
 800189c:	4611      	mov	r1, r2
 800189e:	4618      	mov	r0, r3
 80018a0:	f007 fc60 	bl	8009164 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d007      	beq.n	80018ba <enable_motor_task_from_isr+0x36>
 80018aa:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <enable_motor_task_from_isr+0x44>)
 80018ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	f3bf 8f4f 	dsb	sy
 80018b6:	f3bf 8f6f 	isb	sy
	}
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20015694 	.word	0x20015694
 80018c8:	e000ed04 	.word	0xe000ed04

080018cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ce:	b0af      	sub	sp, #188	; 0xbc
 80018d0:	af20      	add	r7, sp, #128	; 0x80
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018d2:	f002 fa33 	bl	8003d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018d6:	f000 f863 	bl	80019a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018da:	f000 fc23 	bl	8002124 <MX_GPIO_Init>
  MX_ADC1_Init();
 80018de:	f000 f8c9 	bl	8001a74 <MX_ADC1_Init>
  MX_CAN1_Init();
 80018e2:	f000 f96b 	bl	8001bbc <MX_CAN1_Init>
  MX_SPI2_Init();
 80018e6:	f000 f99f 	bl	8001c28 <MX_SPI2_Init>
  MX_TIM1_Init();
 80018ea:	f000 f9d3 	bl	8001c94 <MX_TIM1_Init>
  MX_TIM2_Init();
 80018ee:	f000 fa29 	bl	8001d44 <MX_TIM2_Init>
  MX_TIM3_Init();
 80018f2:	f000 fab3 	bl	8001e5c <MX_TIM3_Init>
  MX_TIM13_Init();
 80018f6:	f000 fb79 	bl	8001fec <MX_TIM13_Init>
  MX_TIM14_Init();
 80018fa:	f000 fbc5 	bl	8002088 <MX_TIM14_Init>
  MX_ADC2_Init();
 80018fe:	f000 f90b 	bl	8001b18 <MX_ADC2_Init>
  MX_TIM4_Init();
 8001902:	f000 faff 	bl	8001f04 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  adc_interface_init(hadc1, hadc2);
 8001906:	4e20      	ldr	r6, [pc, #128]	; (8001988 <main+0xbc>)
 8001908:	4a20      	ldr	r2, [pc, #128]	; (800198c <main+0xc0>)
 800190a:	ab0e      	add	r3, sp, #56	; 0x38
 800190c:	4611      	mov	r1, r2
 800190e:	2248      	movs	r2, #72	; 0x48
 8001910:	4618      	mov	r0, r3
 8001912:	f00a ffdd 	bl	800c8d0 <memcpy>
 8001916:	466d      	mov	r5, sp
 8001918:	f106 0410 	add.w	r4, r6, #16
 800191c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800191e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001922:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001926:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001928:	e894 0003 	ldmia.w	r4, {r0, r1}
 800192c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001930:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001934:	f008 fcaa 	bl	800a28c <adc_interface_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of canbus_task */
  osThreadDef(canbus_task, start_canbus_task, osPriorityNormal, 0, 1024);
 8001938:	4b15      	ldr	r3, [pc, #84]	; (8001990 <main+0xc4>)
 800193a:	f107 041c 	add.w	r4, r7, #28
 800193e:	461d      	mov	r5, r3
 8001940:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001942:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001944:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001948:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canbus_taskHandle = osThreadCreate(osThread(canbus_task), NULL);
 800194c:	f107 031c 	add.w	r3, r7, #28
 8001950:	2100      	movs	r1, #0
 8001952:	4618      	mov	r0, r3
 8001954:	f005 fe39 	bl	80075ca <osThreadCreate>
 8001958:	4602      	mov	r2, r0
 800195a:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <main+0xc8>)
 800195c:	601a      	str	r2, [r3, #0]

  /* definition and creation of motor_task */
  osThreadDef(motor_task, start_motor_task, osPriorityHigh, 0, 2048);
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <main+0xcc>)
 8001960:	463c      	mov	r4, r7
 8001962:	461d      	mov	r5, r3
 8001964:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001968:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800196c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motor_taskHandle = osThreadCreate(osThread(motor_task), NULL);
 8001970:	463b      	mov	r3, r7
 8001972:	2100      	movs	r1, #0
 8001974:	4618      	mov	r0, r3
 8001976:	f005 fe28 	bl	80075ca <osThreadCreate>
 800197a:	4602      	mov	r2, r0
 800197c:	4b07      	ldr	r3, [pc, #28]	; (800199c <main+0xd0>)
 800197e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001980:	f005 fe1c 	bl	80075bc <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001984:	e7fe      	b.n	8001984 <main+0xb8>
 8001986:	bf00      	nop
 8001988:	200156dc 	.word	0x200156dc
 800198c:	2001564c 	.word	0x2001564c
 8001990:	0800d63c 	.word	0x0800d63c
 8001994:	200156d8 	.word	0x200156d8
 8001998:	0800d664 	.word	0x0800d664
 800199c:	20015694 	.word	0x20015694

080019a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b094      	sub	sp, #80	; 0x50
 80019a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019a6:	f107 0320 	add.w	r3, r7, #32
 80019aa:	2230      	movs	r2, #48	; 0x30
 80019ac:	2100      	movs	r1, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f00a ff99 	bl	800c8e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b4:	f107 030c 	add.w	r3, r7, #12
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c4:	2300      	movs	r3, #0
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	4b28      	ldr	r3, [pc, #160]	; (8001a6c <SystemClock_Config+0xcc>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	4a27      	ldr	r2, [pc, #156]	; (8001a6c <SystemClock_Config+0xcc>)
 80019ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d2:	6413      	str	r3, [r2, #64]	; 0x40
 80019d4:	4b25      	ldr	r3, [pc, #148]	; (8001a6c <SystemClock_Config+0xcc>)
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019e0:	2300      	movs	r3, #0
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	4b22      	ldr	r3, [pc, #136]	; (8001a70 <SystemClock_Config+0xd0>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a21      	ldr	r2, [pc, #132]	; (8001a70 <SystemClock_Config+0xd0>)
 80019ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b1f      	ldr	r3, [pc, #124]	; (8001a70 <SystemClock_Config+0xd0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019fc:	2302      	movs	r3, #2
 80019fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a00:	2301      	movs	r3, #1
 8001a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a04:	2310      	movs	r3, #16
 8001a06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a10:	2308      	movs	r3, #8
 8001a12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a14:	23a8      	movs	r3, #168	; 0xa8
 8001a16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a1c:	2304      	movs	r3, #4
 8001a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a20:	f107 0320 	add.w	r3, r7, #32
 8001a24:	4618      	mov	r0, r3
 8001a26:	f004 f801 	bl	8005a2c <HAL_RCC_OscConfig>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a30:	f000 fc4c 	bl	80022cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a34:	230f      	movs	r3, #15
 8001a36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a4c:	f107 030c 	add.w	r3, r7, #12
 8001a50:	2105      	movs	r1, #5
 8001a52:	4618      	mov	r0, r3
 8001a54:	f004 fa5a 	bl	8005f0c <HAL_RCC_ClockConfig>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a5e:	f000 fc35 	bl	80022cc <Error_Handler>
  }
}
 8001a62:	bf00      	nop
 8001a64:	3750      	adds	r7, #80	; 0x50
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40007000 	.word	0x40007000

08001a74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a7a:	463b      	mov	r3, r7
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001a86:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <MX_ADC1_Init+0x98>)
 8001a88:	4a21      	ldr	r2, [pc, #132]	; (8001b10 <MX_ADC1_Init+0x9c>)
 8001a8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001a8c:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <MX_ADC1_Init+0x98>)
 8001a8e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a92:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a94:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <MX_ADC1_Init+0x98>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001a9a:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <MX_ADC1_Init+0x98>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001aa0:	4b1a      	ldr	r3, [pc, #104]	; (8001b0c <MX_ADC1_Init+0x98>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001aa6:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <MX_ADC1_Init+0x98>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001aae:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <MX_ADC1_Init+0x98>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ab4:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <MX_ADC1_Init+0x98>)
 8001ab6:	4a17      	ldr	r2, [pc, #92]	; (8001b14 <MX_ADC1_Init+0xa0>)
 8001ab8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001aba:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <MX_ADC1_Init+0x98>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <MX_ADC1_Init+0x98>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <MX_ADC1_Init+0x98>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001ace:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <MX_ADC1_Init+0x98>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ad4:	480d      	ldr	r0, [pc, #52]	; (8001b0c <MX_ADC1_Init+0x98>)
 8001ad6:	f002 f973 	bl	8003dc0 <HAL_ADC_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001ae0:	f000 fbf4 	bl	80022cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001ae4:	2304      	movs	r3, #4
 8001ae6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001af0:	463b      	mov	r3, r7
 8001af2:	4619      	mov	r1, r3
 8001af4:	4805      	ldr	r0, [pc, #20]	; (8001b0c <MX_ADC1_Init+0x98>)
 8001af6:	f002 fc5d 	bl	80043b4 <HAL_ADC_ConfigChannel>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b00:	f000 fbe4 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b04:	bf00      	nop
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	200156dc 	.word	0x200156dc
 8001b10:	40012000 	.word	0x40012000
 8001b14:	0f000001 	.word	0x0f000001

08001b18 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b1e:	463b      	mov	r3, r7
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8001b2a:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <MX_ADC2_Init+0x98>)
 8001b2c:	4a21      	ldr	r2, [pc, #132]	; (8001bb4 <MX_ADC2_Init+0x9c>)
 8001b2e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001b30:	4b1f      	ldr	r3, [pc, #124]	; (8001bb0 <MX_ADC2_Init+0x98>)
 8001b32:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001b36:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001b38:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <MX_ADC2_Init+0x98>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001b3e:	4b1c      	ldr	r3, [pc, #112]	; (8001bb0 <MX_ADC2_Init+0x98>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001b44:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <MX_ADC2_Init+0x98>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001b4a:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <MX_ADC2_Init+0x98>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b52:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <MX_ADC2_Init+0x98>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b58:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <MX_ADC2_Init+0x98>)
 8001b5a:	4a17      	ldr	r2, [pc, #92]	; (8001bb8 <MX_ADC2_Init+0xa0>)
 8001b5c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b5e:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <MX_ADC2_Init+0x98>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <MX_ADC2_Init+0x98>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001b6a:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <MX_ADC2_Init+0x98>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001b72:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <MX_ADC2_Init+0x98>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001b78:	480d      	ldr	r0, [pc, #52]	; (8001bb0 <MX_ADC2_Init+0x98>)
 8001b7a:	f002 f921 	bl	8003dc0 <HAL_ADC_Init>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001b84:	f000 fba2 	bl	80022cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001b88:	2305      	movs	r3, #5
 8001b8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b94:	463b      	mov	r3, r7
 8001b96:	4619      	mov	r1, r3
 8001b98:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <MX_ADC2_Init+0x98>)
 8001b9a:	f002 fc0b 	bl	80043b4 <HAL_ADC_ConfigChannel>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001ba4:	f000 fb92 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001ba8:	bf00      	nop
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	2001564c 	.word	0x2001564c
 8001bb4:	40012100 	.word	0x40012100
 8001bb8:	0f000001 	.word	0x0f000001

08001bbc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001bc0:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <MX_CAN1_Init+0x64>)
 8001bc2:	4a18      	ldr	r2, [pc, #96]	; (8001c24 <MX_CAN1_Init+0x68>)
 8001bc4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8001bc6:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <MX_CAN1_Init+0x64>)
 8001bc8:	2202      	movs	r2, #2
 8001bca:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001bcc:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <MX_CAN1_Init+0x64>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001bd2:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <MX_CAN1_Init+0x64>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <MX_CAN1_Init+0x64>)
 8001bda:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8001bde:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_7TQ;
 8001be0:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <MX_CAN1_Init+0x64>)
 8001be2:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8001be6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001be8:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <MX_CAN1_Init+0x64>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <MX_CAN1_Init+0x64>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <MX_CAN1_Init+0x64>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <MX_CAN1_Init+0x64>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001c00:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <MX_CAN1_Init+0x64>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <MX_CAN1_Init+0x64>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001c0c:	4804      	ldr	r0, [pc, #16]	; (8001c20 <MX_CAN1_Init+0x64>)
 8001c0e:	f002 fdf9 	bl	8004804 <HAL_CAN_Init>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001c18:	f000 fb58 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	200157e4 	.word	0x200157e4
 8001c24:	40006400 	.word	0x40006400

08001c28 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001c2c:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <MX_SPI2_Init+0x64>)
 8001c2e:	4a18      	ldr	r2, [pc, #96]	; (8001c90 <MX_SPI2_Init+0x68>)
 8001c30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c32:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <MX_SPI2_Init+0x64>)
 8001c34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c3a:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <MX_SPI2_Init+0x64>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <MX_SPI2_Init+0x64>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <MX_SPI2_Init+0x64>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <MX_SPI2_Init+0x64>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <MX_SPI2_Init+0x64>)
 8001c54:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001c58:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <MX_SPI2_Init+0x64>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c60:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <MX_SPI2_Init+0x64>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <MX_SPI2_Init+0x64>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c6c:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <MX_SPI2_Init+0x64>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <MX_SPI2_Init+0x64>)
 8001c74:	220a      	movs	r2, #10
 8001c76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c78:	4804      	ldr	r0, [pc, #16]	; (8001c8c <MX_SPI2_Init+0x64>)
 8001c7a:	f004 fb31 	bl	80062e0 <HAL_SPI_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001c84:	f000 fb22 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c88:	bf00      	nop
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	200155b4 	.word	0x200155b4
 8001c90:	40003800 	.word	0x40003800

08001c94 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08c      	sub	sp, #48	; 0x30
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	2224      	movs	r2, #36	; 0x24
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f00a fe1f 	bl	800c8e6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cb0:	4b22      	ldr	r3, [pc, #136]	; (8001d3c <MX_TIM1_Init+0xa8>)
 8001cb2:	4a23      	ldr	r2, [pc, #140]	; (8001d40 <MX_TIM1_Init+0xac>)
 8001cb4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001cb6:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <MX_TIM1_Init+0xa8>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cbc:	4b1f      	ldr	r3, [pc, #124]	; (8001d3c <MX_TIM1_Init+0xa8>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001cc2:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <MX_TIM1_Init+0xa8>)
 8001cc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cc8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cca:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <MX_TIM1_Init+0xa8>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <MX_TIM1_Init+0xa8>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd6:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <MX_TIM1_Init+0xa8>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001d00:	f107 030c 	add.w	r3, r7, #12
 8001d04:	4619      	mov	r1, r3
 8001d06:	480d      	ldr	r0, [pc, #52]	; (8001d3c <MX_TIM1_Init+0xa8>)
 8001d08:	f004 fd25 	bl	8006756 <HAL_TIM_Encoder_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001d12:	f000 fadb 	bl	80022cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d16:	2300      	movs	r3, #0
 8001d18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001d1a:	2380      	movs	r3, #128	; 0x80
 8001d1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	4619      	mov	r1, r3
 8001d22:	4806      	ldr	r0, [pc, #24]	; (8001d3c <MX_TIM1_Init+0xa8>)
 8001d24:	f005 fba2 	bl	800746c <HAL_TIMEx_MasterConfigSynchronization>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001d2e:	f000 facd 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d32:	bf00      	nop
 8001d34:	3730      	adds	r7, #48	; 0x30
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20015764 	.word	0x20015764
 8001d40:	40010000 	.word	0x40010000

08001d44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08e      	sub	sp, #56	; 0x38
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d58:	f107 0320 	add.w	r3, r7, #32
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d62:	1d3b      	adds	r3, r7, #4
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
 8001d70:	615a      	str	r2, [r3, #20]
 8001d72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d74:	4b38      	ldr	r3, [pc, #224]	; (8001e58 <MX_TIM2_Init+0x114>)
 8001d76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d7c:	4b36      	ldr	r3, [pc, #216]	; (8001e58 <MX_TIM2_Init+0x114>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d82:	4b35      	ldr	r3, [pc, #212]	; (8001e58 <MX_TIM2_Init+0x114>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001d88:	4b33      	ldr	r3, [pc, #204]	; (8001e58 <MX_TIM2_Init+0x114>)
 8001d8a:	f242 7210 	movw	r2, #10000	; 0x2710
 8001d8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d90:	4b31      	ldr	r3, [pc, #196]	; (8001e58 <MX_TIM2_Init+0x114>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d96:	4b30      	ldr	r3, [pc, #192]	; (8001e58 <MX_TIM2_Init+0x114>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d9c:	482e      	ldr	r0, [pc, #184]	; (8001e58 <MX_TIM2_Init+0x114>)
 8001d9e:	f004 fc21 	bl	80065e4 <HAL_TIM_Base_Init>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001da8:	f000 fa90 	bl	80022cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001db0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001db2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001db6:	4619      	mov	r1, r3
 8001db8:	4827      	ldr	r0, [pc, #156]	; (8001e58 <MX_TIM2_Init+0x114>)
 8001dba:	f004 ff8d 	bl	8006cd8 <HAL_TIM_ConfigClockSource>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001dc4:	f000 fa82 	bl	80022cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001dc8:	4823      	ldr	r0, [pc, #140]	; (8001e58 <MX_TIM2_Init+0x114>)
 8001dca:	f004 fc8f 	bl	80066ec <HAL_TIM_PWM_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001dd4:	f000 fa7a 	bl	80022cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001de0:	f107 0320 	add.w	r3, r7, #32
 8001de4:	4619      	mov	r1, r3
 8001de6:	481c      	ldr	r0, [pc, #112]	; (8001e58 <MX_TIM2_Init+0x114>)
 8001de8:	f005 fb40 	bl	800746c <HAL_TIMEx_MasterConfigSynchronization>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001df2:	f000 fa6b 	bl	80022cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001df6:	2360      	movs	r3, #96	; 0x60
 8001df8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e06:	1d3b      	adds	r3, r7, #4
 8001e08:	2204      	movs	r2, #4
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4812      	ldr	r0, [pc, #72]	; (8001e58 <MX_TIM2_Init+0x114>)
 8001e0e:	f004 fe9d 	bl	8006b4c <HAL_TIM_PWM_ConfigChannel>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001e18:	f000 fa58 	bl	80022cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e1c:	1d3b      	adds	r3, r7, #4
 8001e1e:	2208      	movs	r2, #8
 8001e20:	4619      	mov	r1, r3
 8001e22:	480d      	ldr	r0, [pc, #52]	; (8001e58 <MX_TIM2_Init+0x114>)
 8001e24:	f004 fe92 	bl	8006b4c <HAL_TIM_PWM_ConfigChannel>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001e2e:	f000 fa4d 	bl	80022cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e32:	1d3b      	adds	r3, r7, #4
 8001e34:	220c      	movs	r2, #12
 8001e36:	4619      	mov	r1, r3
 8001e38:	4807      	ldr	r0, [pc, #28]	; (8001e58 <MX_TIM2_Init+0x114>)
 8001e3a:	f004 fe87 	bl	8006b4c <HAL_TIM_PWM_ConfigChannel>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001e44:	f000 fa42 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e48:	4803      	ldr	r0, [pc, #12]	; (8001e58 <MX_TIM2_Init+0x114>)
 8001e4a:	f001 fdef 	bl	8003a2c <HAL_TIM_MspPostInit>

}
 8001e4e:	bf00      	nop
 8001e50:	3738      	adds	r7, #56	; 0x38
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	200157a4 	.word	0x200157a4

08001e5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08c      	sub	sp, #48	; 0x30
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e62:	f107 030c 	add.w	r3, r7, #12
 8001e66:	2224      	movs	r2, #36	; 0x24
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f00a fd3b 	bl	800c8e6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e70:	1d3b      	adds	r3, r7, #4
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e78:	4b20      	ldr	r3, [pc, #128]	; (8001efc <MX_TIM3_Init+0xa0>)
 8001e7a:	4a21      	ldr	r2, [pc, #132]	; (8001f00 <MX_TIM3_Init+0xa4>)
 8001e7c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e7e:	4b1f      	ldr	r3, [pc, #124]	; (8001efc <MX_TIM3_Init+0xa0>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e84:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <MX_TIM3_Init+0xa0>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e8a:	4b1c      	ldr	r3, [pc, #112]	; (8001efc <MX_TIM3_Init+0xa0>)
 8001e8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e90:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e92:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <MX_TIM3_Init+0xa0>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e98:	4b18      	ldr	r3, [pc, #96]	; (8001efc <MX_TIM3_Init+0xa0>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001ec2:	f107 030c 	add.w	r3, r7, #12
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	480c      	ldr	r0, [pc, #48]	; (8001efc <MX_TIM3_Init+0xa0>)
 8001eca:	f004 fc44 	bl	8006756 <HAL_TIM_Encoder_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001ed4:	f000 f9fa 	bl	80022cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4805      	ldr	r0, [pc, #20]	; (8001efc <MX_TIM3_Init+0xa0>)
 8001ee6:	f005 fac1 	bl	800746c <HAL_TIMEx_MasterConfigSynchronization>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001ef0:	f000 f9ec 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ef4:	bf00      	nop
 8001ef6:	3730      	adds	r7, #48	; 0x30
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20015698 	.word	0x20015698
 8001f00:	40000400 	.word	0x40000400

08001f04 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08e      	sub	sp, #56	; 0x38
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f18:	f107 0320 	add.w	r3, r7, #32
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
 8001f30:	615a      	str	r2, [r3, #20]
 8001f32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f34:	4b2b      	ldr	r3, [pc, #172]	; (8001fe4 <MX_TIM4_Init+0xe0>)
 8001f36:	4a2c      	ldr	r2, [pc, #176]	; (8001fe8 <MX_TIM4_Init+0xe4>)
 8001f38:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42-1;
 8001f3a:	4b2a      	ldr	r3, [pc, #168]	; (8001fe4 <MX_TIM4_Init+0xe0>)
 8001f3c:	2229      	movs	r2, #41	; 0x29
 8001f3e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f40:	4b28      	ldr	r3, [pc, #160]	; (8001fe4 <MX_TIM4_Init+0xe0>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500;
 8001f46:	4b27      	ldr	r3, [pc, #156]	; (8001fe4 <MX_TIM4_Init+0xe0>)
 8001f48:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f4c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f4e:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <MX_TIM4_Init+0xe0>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f54:	4b23      	ldr	r3, [pc, #140]	; (8001fe4 <MX_TIM4_Init+0xe0>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f5a:	4822      	ldr	r0, [pc, #136]	; (8001fe4 <MX_TIM4_Init+0xe0>)
 8001f5c:	f004 fb42 	bl	80065e4 <HAL_TIM_Base_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001f66:	f000 f9b1 	bl	80022cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f74:	4619      	mov	r1, r3
 8001f76:	481b      	ldr	r0, [pc, #108]	; (8001fe4 <MX_TIM4_Init+0xe0>)
 8001f78:	f004 feae 	bl	8006cd8 <HAL_TIM_ConfigClockSource>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001f82:	f000 f9a3 	bl	80022cc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001f86:	4817      	ldr	r0, [pc, #92]	; (8001fe4 <MX_TIM4_Init+0xe0>)
 8001f88:	f004 fb7b 	bl	8006682 <HAL_TIM_OC_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001f92:	f000 f99b 	bl	80022cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f96:	2300      	movs	r3, #0
 8001f98:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f9e:	f107 0320 	add.w	r3, r7, #32
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	480f      	ldr	r0, [pc, #60]	; (8001fe4 <MX_TIM4_Init+0xe0>)
 8001fa6:	f005 fa61 	bl	800746c <HAL_TIMEx_MasterConfigSynchronization>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001fb0:	f000 f98c 	bl	80022cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4806      	ldr	r0, [pc, #24]	; (8001fe4 <MX_TIM4_Init+0xe0>)
 8001fcc:	f004 fd5e 	bl	8006a8c <HAL_TIM_OC_ConfigChannel>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001fd6:	f000 f979 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001fda:	bf00      	nop
 8001fdc:	3738      	adds	r7, #56	; 0x38
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	2001560c 	.word	0x2001560c
 8001fe8:	40000800 	.word	0x40000800

08001fec <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ff2:	1d3b      	adds	r3, r7, #4
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
 8002000:	615a      	str	r2, [r3, #20]
 8002002:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002004:	4b1e      	ldr	r3, [pc, #120]	; (8002080 <MX_TIM13_Init+0x94>)
 8002006:	4a1f      	ldr	r2, [pc, #124]	; (8002084 <MX_TIM13_Init+0x98>)
 8002008:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800200a:	4b1d      	ldr	r3, [pc, #116]	; (8002080 <MX_TIM13_Init+0x94>)
 800200c:	2200      	movs	r2, #0
 800200e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002010:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <MX_TIM13_Init+0x94>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10000;
 8002016:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <MX_TIM13_Init+0x94>)
 8002018:	f242 7210 	movw	r2, #10000	; 0x2710
 800201c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800201e:	4b18      	ldr	r3, [pc, #96]	; (8002080 <MX_TIM13_Init+0x94>)
 8002020:	2200      	movs	r2, #0
 8002022:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002024:	4b16      	ldr	r3, [pc, #88]	; (8002080 <MX_TIM13_Init+0x94>)
 8002026:	2200      	movs	r2, #0
 8002028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800202a:	4815      	ldr	r0, [pc, #84]	; (8002080 <MX_TIM13_Init+0x94>)
 800202c:	f004 fada 	bl	80065e4 <HAL_TIM_Base_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002036:	f000 f949 	bl	80022cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800203a:	4811      	ldr	r0, [pc, #68]	; (8002080 <MX_TIM13_Init+0x94>)
 800203c:	f004 fb56 	bl	80066ec <HAL_TIM_PWM_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002046:	f000 f941 	bl	80022cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800204a:	2360      	movs	r3, #96	; 0x60
 800204c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	2200      	movs	r2, #0
 800205e:	4619      	mov	r1, r3
 8002060:	4807      	ldr	r0, [pc, #28]	; (8002080 <MX_TIM13_Init+0x94>)
 8002062:	f004 fd73 	bl	8006b4c <HAL_TIM_PWM_ConfigChannel>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 800206c:	f000 f92e 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002070:	4803      	ldr	r0, [pc, #12]	; (8002080 <MX_TIM13_Init+0x94>)
 8002072:	f001 fcdb 	bl	8003a2c <HAL_TIM_MspPostInit>

}
 8002076:	bf00      	nop
 8002078:	3720      	adds	r7, #32
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20015724 	.word	0x20015724
 8002084:	40001c00 	.word	0x40001c00

08002088 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b088      	sub	sp, #32
 800208c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800208e:	1d3b      	adds	r3, r7, #4
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
 800209c:	615a      	str	r2, [r3, #20]
 800209e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80020a0:	4b1e      	ldr	r3, [pc, #120]	; (800211c <MX_TIM14_Init+0x94>)
 80020a2:	4a1f      	ldr	r2, [pc, #124]	; (8002120 <MX_TIM14_Init+0x98>)
 80020a4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80020a6:	4b1d      	ldr	r3, [pc, #116]	; (800211c <MX_TIM14_Init+0x94>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ac:	4b1b      	ldr	r3, [pc, #108]	; (800211c <MX_TIM14_Init+0x94>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000;
 80020b2:	4b1a      	ldr	r3, [pc, #104]	; (800211c <MX_TIM14_Init+0x94>)
 80020b4:	f242 7210 	movw	r2, #10000	; 0x2710
 80020b8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ba:	4b18      	ldr	r3, [pc, #96]	; (800211c <MX_TIM14_Init+0x94>)
 80020bc:	2200      	movs	r2, #0
 80020be:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c0:	4b16      	ldr	r3, [pc, #88]	; (800211c <MX_TIM14_Init+0x94>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80020c6:	4815      	ldr	r0, [pc, #84]	; (800211c <MX_TIM14_Init+0x94>)
 80020c8:	f004 fa8c 	bl	80065e4 <HAL_TIM_Base_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80020d2:	f000 f8fb 	bl	80022cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80020d6:	4811      	ldr	r0, [pc, #68]	; (800211c <MX_TIM14_Init+0x94>)
 80020d8:	f004 fb08 	bl	80066ec <HAL_TIM_PWM_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80020e2:	f000 f8f3 	bl	80022cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020e6:	2360      	movs	r3, #96	; 0x60
 80020e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020f6:	1d3b      	adds	r3, r7, #4
 80020f8:	2200      	movs	r2, #0
 80020fa:	4619      	mov	r1, r3
 80020fc:	4807      	ldr	r0, [pc, #28]	; (800211c <MX_TIM14_Init+0x94>)
 80020fe:	f004 fd25 	bl	8006b4c <HAL_TIM_PWM_ConfigChannel>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8002108:	f000 f8e0 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 800210c:	4803      	ldr	r0, [pc, #12]	; (800211c <MX_TIM14_Init+0x94>)
 800210e:	f001 fc8d 	bl	8003a2c <HAL_TIM_MspPostInit>

}
 8002112:	bf00      	nop
 8002114:	3720      	adds	r7, #32
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	2001580c 	.word	0x2001580c
 8002120:	40002000 	.word	0x40002000

08002124 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08a      	sub	sp, #40	; 0x28
 8002128:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212a:	f107 0314 	add.w	r3, r7, #20
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	605a      	str	r2, [r3, #4]
 8002134:	609a      	str	r2, [r3, #8]
 8002136:	60da      	str	r2, [r3, #12]
 8002138:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	4b3d      	ldr	r3, [pc, #244]	; (8002234 <MX_GPIO_Init+0x110>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	4a3c      	ldr	r2, [pc, #240]	; (8002234 <MX_GPIO_Init+0x110>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	6313      	str	r3, [r2, #48]	; 0x30
 800214a:	4b3a      	ldr	r3, [pc, #232]	; (8002234 <MX_GPIO_Init+0x110>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b36      	ldr	r3, [pc, #216]	; (8002234 <MX_GPIO_Init+0x110>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a35      	ldr	r2, [pc, #212]	; (8002234 <MX_GPIO_Init+0x110>)
 8002160:	f043 0310 	orr.w	r3, r3, #16
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	4b33      	ldr	r3, [pc, #204]	; (8002234 <MX_GPIO_Init+0x110>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f003 0310 	and.w	r3, r3, #16
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	4b2f      	ldr	r3, [pc, #188]	; (8002234 <MX_GPIO_Init+0x110>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4a2e      	ldr	r2, [pc, #184]	; (8002234 <MX_GPIO_Init+0x110>)
 800217c:	f043 0302 	orr.w	r3, r3, #2
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
 8002182:	4b2c      	ldr	r3, [pc, #176]	; (8002234 <MX_GPIO_Init+0x110>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	607b      	str	r3, [r7, #4]
 8002192:	4b28      	ldr	r3, [pc, #160]	; (8002234 <MX_GPIO_Init+0x110>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a27      	ldr	r2, [pc, #156]	; (8002234 <MX_GPIO_Init+0x110>)
 8002198:	f043 0304 	orr.w	r3, r3, #4
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b25      	ldr	r3, [pc, #148]	; (8002234 <MX_GPIO_Init+0x110>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	607b      	str	r3, [r7, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	603b      	str	r3, [r7, #0]
 80021ae:	4b21      	ldr	r3, [pc, #132]	; (8002234 <MX_GPIO_Init+0x110>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a20      	ldr	r2, [pc, #128]	; (8002234 <MX_GPIO_Init+0x110>)
 80021b4:	f043 0308 	orr.w	r3, r3, #8
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b1e      	ldr	r3, [pc, #120]	; (8002234 <MX_GPIO_Init+0x110>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2101      	movs	r1, #1
 80021ca:	481b      	ldr	r0, [pc, #108]	; (8002238 <MX_GPIO_Init+0x114>)
 80021cc:	f003 fc14 	bl	80059f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_RS_GPIO_Port, CAN_RS_Pin, GPIO_PIN_RESET);
 80021d0:	2200      	movs	r2, #0
 80021d2:	2104      	movs	r1, #4
 80021d4:	4819      	ldr	r0, [pc, #100]	; (800223c <MX_GPIO_Init+0x118>)
 80021d6:	f003 fc0f 	bl	80059f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80021da:	2301      	movs	r3, #1
 80021dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021de:	2301      	movs	r3, #1
 80021e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021e6:	2302      	movs	r3, #2
 80021e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80021ea:	f107 0314 	add.w	r3, r7, #20
 80021ee:	4619      	mov	r1, r3
 80021f0:	4811      	ldr	r0, [pc, #68]	; (8002238 <MX_GPIO_Init+0x114>)
 80021f2:	f003 fa67 	bl	80056c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FL1_Pin */
  GPIO_InitStruct.Pin = FL1_Pin;
 80021f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002200:	2301      	movs	r3, #1
 8002202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FL1_GPIO_Port, &GPIO_InitStruct);
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	4619      	mov	r1, r3
 800220a:	480d      	ldr	r0, [pc, #52]	; (8002240 <MX_GPIO_Init+0x11c>)
 800220c:	f003 fa5a 	bl	80056c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_RS_Pin */
  GPIO_InitStruct.Pin = CAN_RS_Pin;
 8002210:	2304      	movs	r3, #4
 8002212:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002214:	2301      	movs	r3, #1
 8002216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2300      	movs	r3, #0
 800221e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_RS_GPIO_Port, &GPIO_InitStruct);
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	4619      	mov	r1, r3
 8002226:	4805      	ldr	r0, [pc, #20]	; (800223c <MX_GPIO_Init+0x118>)
 8002228:	f003 fa4c 	bl	80056c4 <HAL_GPIO_Init>

}
 800222c:	bf00      	nop
 800222e:	3728      	adds	r7, #40	; 0x28
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40023800 	.word	0x40023800
 8002238:	40020000 	.word	0x40020000
 800223c:	40020c00 	.word	0x40020c00
 8002240:	40021000 	.word	0x40021000

08002244 <start_canbus_task>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_start_canbus_task */
void start_canbus_task(void const * argument)
{
 8002244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002246:	b089      	sub	sp, #36	; 0x24
 8002248:	af06      	add	r7, sp, #24
 800224a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  canbus_task_init(hcan1);
 800224c:	4e08      	ldr	r6, [pc, #32]	; (8002270 <start_canbus_task+0x2c>)
 800224e:	466d      	mov	r5, sp
 8002250:	f106 0410 	add.w	r4, r6, #16
 8002254:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002256:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002258:	e894 0003 	ldmia.w	r4, {r0, r1}
 800225c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002260:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002264:	f7fe fe34 	bl	8000ed0 <canbus_task_init>
  for(;;)
  {
	  canbus_task();
 8002268:	f7fe fe9e 	bl	8000fa8 <canbus_task>
 800226c:	e7fc      	b.n	8002268 <start_canbus_task+0x24>
 800226e:	bf00      	nop
 8002270:	200157e4 	.word	0x200157e4

08002274 <start_motor_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_motor_task */
void start_motor_task(void const * argument)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_motor_task */
  motor_task_init();
 800227c:	f000 fca8 	bl	8002bd0 <motor_task_init>
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002280:	2201      	movs	r2, #1
 8002282:	2101      	movs	r1, #1
 8002284:	4807      	ldr	r0, [pc, #28]	; (80022a4 <start_motor_task+0x30>)
 8002286:	f003 fbb7 	bl	80059f8 <HAL_GPIO_WritePin>
	  motor_task();
 800228a:	f000 fe91 	bl	8002fb0 <motor_task>
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800228e:	2200      	movs	r2, #0
 8002290:	2101      	movs	r1, #1
 8002292:	4804      	ldr	r0, [pc, #16]	; (80022a4 <start_motor_task+0x30>)
 8002294:	f003 fbb0 	bl	80059f8 <HAL_GPIO_WritePin>
	  ulTaskNotifyTake( pdTRUE, portMAX_DELAY);
 8002298:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800229c:	2001      	movs	r0, #1
 800229e:	f006 ff19 	bl	80090d4 <ulTaskNotifyTake>
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80022a2:	e7ed      	b.n	8002280 <start_motor_task+0xc>
 80022a4:	40020000 	.word	0x40020000

080022a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d101      	bne.n	80022be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80022ba:	f001 fd61 	bl	8003d80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40010400 	.word	0x40010400

080022cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <drive_motor>:

 static impedance_control_params_t ic_params; // TODO different per motor?
 static leg_ik_t leg;

 static drive_motor(uint8_t index, float cmd)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	ed87 0a00 	vstr	s0, [r7]
 80022e8:	71fb      	strb	r3, [r7, #7]
	 if(index == 0)
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d15e      	bne.n	80023ae <drive_motor+0xd2>
	 {
		 // IN1 and IN2, TIM2_CH3/4
	 	 if(cmd > 0)
 80022f0:	edd7 7a00 	vldr	s15, [r7]
 80022f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fc:	dd29      	ble.n	8002352 <drive_motor+0x76>
	 	 {
	 		if(motors[index].reverse_direction)
 80022fe:	79fa      	ldrb	r2, [r7, #7]
 8002300:	495b      	ldr	r1, [pc, #364]	; (8002470 <drive_motor+0x194>)
 8002302:	4613      	mov	r3, r2
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	4413      	add	r3, r2
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	440b      	add	r3, r1
 800230c:	332c      	adds	r3, #44	; 0x2c
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00e      	beq.n	8002334 <drive_motor+0x58>
	 		{
	 			TIM2->CCR4 = 0;
 8002316:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800231a:	2200      	movs	r2, #0
 800231c:	641a      	str	r2, [r3, #64]	; 0x40
	 			TIM2->CCR3 = (uint16_t) cmd;
 800231e:	edd7 7a00 	vldr	s15, [r7]
 8002322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002326:	ee17 3a90 	vmov	r3, s15
 800232a:	b29a      	uxth	r2, r3
 800232c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002330:	63da      	str	r2, [r3, #60]	; 0x3c
 8002332:	e095      	b.n	8002460 <drive_motor+0x184>
	 		}
	 		else
	 		{
	 			TIM2->CCR4 = (uint16_t) cmd;
 8002334:	edd7 7a00 	vldr	s15, [r7]
 8002338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800233c:	ee17 3a90 	vmov	r3, s15
 8002340:	b29a      	uxth	r2, r3
 8002342:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002346:	641a      	str	r2, [r3, #64]	; 0x40
	 			TIM2->CCR3 = 0;
 8002348:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800234c:	2200      	movs	r2, #0
 800234e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002350:	e086      	b.n	8002460 <drive_motor+0x184>
	 		}
	 	 }
	 	 else
	 	 {
	 		 if(motors[index].reverse_direction)
 8002352:	79fa      	ldrb	r2, [r7, #7]
 8002354:	4946      	ldr	r1, [pc, #280]	; (8002470 <drive_motor+0x194>)
 8002356:	4613      	mov	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	440b      	add	r3, r1
 8002360:	332c      	adds	r3, #44	; 0x2c
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d010      	beq.n	800238c <drive_motor+0xb0>
	 		 {
	 		 	TIM2->CCR3 = 0;
 800236a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800236e:	2200      	movs	r2, #0
 8002370:	63da      	str	r2, [r3, #60]	; 0x3c
	 		 	TIM2->CCR4 = (uint16_t) -cmd;
 8002372:	edd7 7a00 	vldr	s15, [r7]
 8002376:	eef1 7a67 	vneg.f32	s15, s15
 800237a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800237e:	ee17 3a90 	vmov	r3, s15
 8002382:	b29a      	uxth	r2, r3
 8002384:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002388:	641a      	str	r2, [r3, #64]	; 0x40
 800238a:	e069      	b.n	8002460 <drive_motor+0x184>
	 		 }
	 		 else
	 		 {
	 		 	TIM2->CCR3 = (uint16_t) -cmd;
 800238c:	edd7 7a00 	vldr	s15, [r7]
 8002390:	eef1 7a67 	vneg.f32	s15, s15
 8002394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002398:	ee17 3a90 	vmov	r3, s15
 800239c:	b29a      	uxth	r2, r3
 800239e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023a2:	63da      	str	r2, [r3, #60]	; 0x3c
	 		 	TIM2->CCR4 = 0;
 80023a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023a8:	2200      	movs	r2, #0
 80023aa:	641a      	str	r2, [r3, #64]	; 0x40
 80023ac:	e058      	b.n	8002460 <drive_motor+0x184>
	 		 }
	 	 }
	  }
	 else if(index == 1)
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d155      	bne.n	8002460 <drive_motor+0x184>
	 {
		 // IN3 - TIM13_CH1
		 // IN4 - TIM14_CH1
		 if(cmd > 0)
 80023b4:	edd7 7a00 	vldr	s15, [r7]
 80023b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c0:	dd25      	ble.n	800240e <drive_motor+0x132>
		 {
			 if(motors[index].reverse_direction)
 80023c2:	79fa      	ldrb	r2, [r7, #7]
 80023c4:	492a      	ldr	r1, [pc, #168]	; (8002470 <drive_motor+0x194>)
 80023c6:	4613      	mov	r3, r2
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	4413      	add	r3, r2
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	440b      	add	r3, r1
 80023d0:	332c      	adds	r3, #44	; 0x2c
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00c      	beq.n	80023f4 <drive_motor+0x118>
		 	{
		 		TIM14->CCR1 = 0;
 80023da:	4b26      	ldr	r3, [pc, #152]	; (8002474 <drive_motor+0x198>)
 80023dc:	2200      	movs	r2, #0
 80023de:	635a      	str	r2, [r3, #52]	; 0x34
		 		TIM13->CCR1 = (uint16_t) cmd;
 80023e0:	edd7 7a00 	vldr	s15, [r7]
 80023e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023e8:	ee17 3a90 	vmov	r3, s15
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	4b22      	ldr	r3, [pc, #136]	; (8002478 <drive_motor+0x19c>)
 80023f0:	635a      	str	r2, [r3, #52]	; 0x34
 80023f2:	e035      	b.n	8002460 <drive_motor+0x184>
		 	}
		 	else
		 	{
		 		TIM14->CCR1 = (uint16_t) cmd;
 80023f4:	edd7 7a00 	vldr	s15, [r7]
 80023f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023fc:	ee17 3a90 	vmov	r3, s15
 8002400:	b29a      	uxth	r2, r3
 8002402:	4b1c      	ldr	r3, [pc, #112]	; (8002474 <drive_motor+0x198>)
 8002404:	635a      	str	r2, [r3, #52]	; 0x34
		 		TIM13->CCR1 = 0;
 8002406:	4b1c      	ldr	r3, [pc, #112]	; (8002478 <drive_motor+0x19c>)
 8002408:	2200      	movs	r2, #0
 800240a:	635a      	str	r2, [r3, #52]	; 0x34
 800240c:	e028      	b.n	8002460 <drive_motor+0x184>
		 	}
		 }
		 else
		 {
		 	 if(motors[index].reverse_direction)
 800240e:	79fa      	ldrb	r2, [r7, #7]
 8002410:	4917      	ldr	r1, [pc, #92]	; (8002470 <drive_motor+0x194>)
 8002412:	4613      	mov	r3, r2
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	4413      	add	r3, r2
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	440b      	add	r3, r1
 800241c:	332c      	adds	r3, #44	; 0x2c
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00e      	beq.n	8002444 <drive_motor+0x168>
		 	 {
		 	 	TIM13->CCR1 = 0;
 8002426:	4b14      	ldr	r3, [pc, #80]	; (8002478 <drive_motor+0x19c>)
 8002428:	2200      	movs	r2, #0
 800242a:	635a      	str	r2, [r3, #52]	; 0x34
		 	 	TIM14->CCR1 = (uint16_t) -cmd;
 800242c:	edd7 7a00 	vldr	s15, [r7]
 8002430:	eef1 7a67 	vneg.f32	s15, s15
 8002434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002438:	ee17 3a90 	vmov	r3, s15
 800243c:	b29a      	uxth	r2, r3
 800243e:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <drive_motor+0x198>)
 8002440:	635a      	str	r2, [r3, #52]	; 0x34
 8002442:	e00d      	b.n	8002460 <drive_motor+0x184>
		 	 }
		 	 else
		 	 {
		 	 	TIM13->CCR1 = (uint16_t) -cmd;
 8002444:	edd7 7a00 	vldr	s15, [r7]
 8002448:	eef1 7a67 	vneg.f32	s15, s15
 800244c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002450:	ee17 3a90 	vmov	r3, s15
 8002454:	b29a      	uxth	r2, r3
 8002456:	4b08      	ldr	r3, [pc, #32]	; (8002478 <drive_motor+0x19c>)
 8002458:	635a      	str	r2, [r3, #52]	; 0x34
		 	 	TIM14->CCR1 = 0;
 800245a:	4b06      	ldr	r3, [pc, #24]	; (8002474 <drive_motor+0x198>)
 800245c:	2200      	movs	r2, #0
 800245e:	635a      	str	r2, [r3, #52]	; 0x34
		 	 }
		 }
	 }
}
 8002460:	bf00      	nop
 8002462:	4618      	mov	r0, r3
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	20000d8c 	.word	0x20000d8c
 8002474:	40002000 	.word	0x40002000
 8002478:	40001c00 	.word	0x40001c00

0800247c <vMotorTelemetryTimerCallback>:

 static void vMotorTelemetryTimerCallback( TimerHandle_t xTimer )
  {
 800247c:	b580      	push	{r7, lr}
 800247e:	b08c      	sub	sp, #48	; 0x30
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 	 canbus_frame_t frame;
 	 can_message_id_t id_helper;

 	 id_helper.can_msg_type = CAN_MSG_TYPE_INFO;
 8002484:	2301      	movs	r3, #1
 8002486:	613b      	str	r3, [r7, #16]
 	 id_helper.can_class = CAN_MSG_CLASS_INFO_TELEMETRY;
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
 	 id_helper.can_device = get_device_index();
 800248c:	f7ff f97a 	bl	8001784 <get_device_index>
 8002490:	4603      	mov	r3, r0
 8002492:	61fb      	str	r3, [r7, #28]


 	id_helper.can_index = CAN_MSG_INDEX_INFO_POSITION;
 8002494:	2300      	movs	r3, #0
 8002496:	61bb      	str	r3, [r7, #24]
 	pack_can_message(&id_helper);
 8002498:	f107 030c 	add.w	r3, r7, #12
 800249c:	4618      	mov	r0, r3
 800249e:	f008 f828 	bl	800a4f2 <pack_can_message>

 	frame.id = id_helper.raw_id;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	623b      	str	r3, [r7, #32]
 	frame.length = 8;
 80024a6:	2308      	movs	r3, #8
 80024a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 	memcpy(&frame.data[0], &motors[0].ticks_count, 4);
 80024ac:	4b3a      	ldr	r3, [pc, #232]	; (8002598 <vMotorTelemetryTimerCallback+0x11c>)
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	f8c7 3025 	str.w	r3, [r7, #37]	; 0x25
 	memcpy(&frame.data[4], &motors[1].ticks_count, 4);
 80024b4:	4b38      	ldr	r3, [pc, #224]	; (8002598 <vMotorTelemetryTimerCallback+0x11c>)
 80024b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024b8:	f8c7 3029 	str.w	r3, [r7, #41]	; 0x29
 	add_can_frame_to_tx_queue(frame);
 80024bc:	f107 0320 	add.w	r3, r7, #32
 80024c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024c2:	f7ff f98b 	bl	80017dc <add_can_frame_to_tx_queue>

 	id_helper.can_index = CAN_MSG_INDEX_INFO_CURRENT;
 80024c6:	2301      	movs	r3, #1
 80024c8:	61bb      	str	r3, [r7, #24]
 	pack_can_message(&id_helper);
 80024ca:	f107 030c 	add.w	r3, r7, #12
 80024ce:	4618      	mov	r0, r3
 80024d0:	f008 f80f 	bl	800a4f2 <pack_can_message>

 	frame.id = id_helper.raw_id;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	623b      	str	r3, [r7, #32]
 	frame.length = 8;
 80024d8:	2308      	movs	r3, #8
 80024da:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 	memcpy(&frame.data[0], &motors[0].current_mA, 4);
 80024de:	4b2e      	ldr	r3, [pc, #184]	; (8002598 <vMotorTelemetryTimerCallback+0x11c>)
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	f8c7 3025 	str.w	r3, [r7, #37]	; 0x25
 	memcpy(&frame.data[4], &motors[1].current_mA, 4);
 80024e6:	4b2c      	ldr	r3, [pc, #176]	; (8002598 <vMotorTelemetryTimerCallback+0x11c>)
 80024e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ea:	f8c7 3029 	str.w	r3, [r7, #41]	; 0x29
 	add_can_frame_to_tx_queue(frame);
 80024ee:	f107 0320 	add.w	r3, r7, #32
 80024f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024f4:	f7ff f972 	bl	80017dc <add_can_frame_to_tx_queue>

 	id_helper.can_index = CAN_MSG_INDEX_INFO_SPEED;
 80024f8:	2302      	movs	r3, #2
 80024fa:	61bb      	str	r3, [r7, #24]
 	pack_can_message(&id_helper);
 80024fc:	f107 030c 	add.w	r3, r7, #12
 8002500:	4618      	mov	r0, r3
 8002502:	f007 fff6 	bl	800a4f2 <pack_can_message>

 	frame.id = id_helper.raw_id;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	623b      	str	r3, [r7, #32]
 	frame.length = 8;
 800250a:	2308      	movs	r3, #8
 800250c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 	memcpy(&frame.data[0], &motors[0].speed, 4);
 8002510:	4b21      	ldr	r3, [pc, #132]	; (8002598 <vMotorTelemetryTimerCallback+0x11c>)
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	f8c7 3025 	str.w	r3, [r7, #37]	; 0x25
 	memcpy(&frame.data[4], &motors[1].speed, 4);
 8002518:	4b1f      	ldr	r3, [pc, #124]	; (8002598 <vMotorTelemetryTimerCallback+0x11c>)
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	f8c7 3029 	str.w	r3, [r7, #41]	; 0x29
 	add_can_frame_to_tx_queue(frame);
 8002520:	f107 0320 	add.w	r3, r7, #32
 8002524:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002526:	f7ff f959 	bl	80017dc <add_can_frame_to_tx_queue>

 	id_helper.can_index = CAN_MSG_INDEX_INFO_POSITION_SETPOINT;
 800252a:	2303      	movs	r3, #3
 800252c:	61bb      	str	r3, [r7, #24]
 	pack_can_message(&id_helper);
 800252e:	f107 030c 	add.w	r3, r7, #12
 8002532:	4618      	mov	r0, r3
 8002534:	f007 ffdd 	bl	800a4f2 <pack_can_message>

 	frame.id = id_helper.raw_id;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	623b      	str	r3, [r7, #32]
 	frame.length = 8;
 800253c:	2308      	movs	r3, #8
 800253e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 	memcpy(&frame.data[0], &motors[0].ticks_setpoint, 4);
 8002542:	4b15      	ldr	r3, [pc, #84]	; (8002598 <vMotorTelemetryTimerCallback+0x11c>)
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	f8c7 3025 	str.w	r3, [r7, #37]	; 0x25
 	memcpy(&frame.data[4], &motors[1].ticks_setpoint, 4);
 800254a:	4b13      	ldr	r3, [pc, #76]	; (8002598 <vMotorTelemetryTimerCallback+0x11c>)
 800254c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254e:	f8c7 3029 	str.w	r3, [r7, #41]	; 0x29
 	add_can_frame_to_tx_queue(frame);
 8002552:	f107 0320 	add.w	r3, r7, #32
 8002556:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002558:	f7ff f940 	bl	80017dc <add_can_frame_to_tx_queue>

 	id_helper.can_index = CAN_MSG_INDEX_INFO_CURRENT_SETPOINT;
 800255c:	2304      	movs	r3, #4
 800255e:	61bb      	str	r3, [r7, #24]
 	pack_can_message(&id_helper);
 8002560:	f107 030c 	add.w	r3, r7, #12
 8002564:	4618      	mov	r0, r3
 8002566:	f007 ffc4 	bl	800a4f2 <pack_can_message>

 	frame.id = id_helper.raw_id;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	623b      	str	r3, [r7, #32]
 	frame.length = 8;
 800256e:	2308      	movs	r3, #8
 8002570:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 	memcpy(&frame.data[0], &motors[0].current_ma_setpoint, 4);
 8002574:	4b08      	ldr	r3, [pc, #32]	; (8002598 <vMotorTelemetryTimerCallback+0x11c>)
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	f8c7 3025 	str.w	r3, [r7, #37]	; 0x25
 	memcpy(&frame.data[4], &motors[1].current_ma_setpoint, 4);
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <vMotorTelemetryTimerCallback+0x11c>)
 800257e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002580:	f8c7 3029 	str.w	r3, [r7, #41]	; 0x29
 	add_can_frame_to_tx_queue(frame);
 8002584:	f107 0320 	add.w	r3, r7, #32
 8002588:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800258a:	f7ff f927 	bl	80017dc <add_can_frame_to_tx_queue>

 		// TODO other telemetry
  }
 800258e:	bf00      	nop
 8002590:	3730      	adds	r7, #48	; 0x30
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000d8c 	.word	0x20000d8c
 800259c:	00000000 	.word	0x00000000

080025a0 <vPrimitivesCalculation>:

 static void vPrimitivesCalculation(void)
  {
 80025a0:	b590      	push	{r4, r7, lr}
 80025a2:	b095      	sub	sp, #84	; 0x54
 80025a4:	af04      	add	r7, sp, #16
	 static uint32_t prim_count = 0;
	int32_t i;
	// Only calculate if all primitive or current primitive
	for(i=0; i < NUMBER_MOTORS; i++)
 80025a6:	2300      	movs	r3, #0
 80025a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025aa:	e011      	b.n	80025d0 <vPrimitivesCalculation+0x30>
	{
		if(control_type[i] != PRIMITIVE && control_type[i] != PROPRIOCEPTIVE_PRIMITIVE)
 80025ac:	4a8e      	ldr	r2, [pc, #568]	; (80027e8 <vPrimitivesCalculation+0x248>)
 80025ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025b0:	4413      	add	r3, r2
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d007      	beq.n	80025ca <vPrimitivesCalculation+0x2a>
 80025ba:	4a8b      	ldr	r2, [pc, #556]	; (80027e8 <vPrimitivesCalculation+0x248>)
 80025bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025be:	4413      	add	r3, r2
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b05      	cmp	r3, #5
 80025c6:	f040 8102 	bne.w	80027ce <vPrimitivesCalculation+0x22e>
	for(i=0; i < NUMBER_MOTORS; i++)
 80025ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025cc:	3301      	adds	r3, #1
 80025ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	ddea      	ble.n	80025ac <vPrimitivesCalculation+0xc>
	}

	pos_cartesian_t cart_pos;
	pos_joint_space_t js_pos;

	if(get_motion_primitive() < NUMBER_LINEAR_PRIMITIVES)
 80025d6:	f00a f805 	bl	800c5e4 <get_motion_primitive>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d809      	bhi.n	80025f4 <vPrimitivesCalculation+0x54>
	{
		motion_primitive_get_position(&cart_pos.x, &cart_pos.y);
 80025e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025e4:	1d1a      	adds	r2, r3, #4
 80025e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025ea:	4611      	mov	r1, r2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f009 f83f 	bl	800b670 <motion_primitive_get_position>
 80025f2:	e008      	b.n	8002606 <vPrimitivesCalculation+0x66>
	}
	else
	{
		motion_primitive_get_position_bezier_quadratic(&cart_pos.x, &cart_pos.y);
 80025f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025f8:	1d1a      	adds	r2, r3, #4
 80025fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025fe:	4611      	mov	r1, r2
 8002600:	4618      	mov	r0, r3
 8002602:	f009 fb75 	bl	800bcf0 <motion_primitive_get_position_bezier_quadratic>
	}

	prim_count++;
 8002606:	4b79      	ldr	r3, [pc, #484]	; (80027ec <vPrimitivesCalculation+0x24c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	3301      	adds	r3, #1
 800260c:	4a77      	ldr	r2, [pc, #476]	; (80027ec <vPrimitivesCalculation+0x24c>)
 800260e:	6013      	str	r3, [r2, #0]

	if(prim_count % 20 == 0)
 8002610:	4b76      	ldr	r3, [pc, #472]	; (80027ec <vPrimitivesCalculation+0x24c>)
 8002612:	6819      	ldr	r1, [r3, #0]
 8002614:	4b76      	ldr	r3, [pc, #472]	; (80027f0 <vPrimitivesCalculation+0x250>)
 8002616:	fba3 2301 	umull	r2, r3, r3, r1
 800261a:	091a      	lsrs	r2, r3, #4
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	1aca      	subs	r2, r1, r3
 8002626:	2a00      	cmp	r2, #0
 8002628:	d11e      	bne.n	8002668 <vPrimitivesCalculation+0xc8>
	{
		// 200 Hz output
		canbus_frame_t frame;
		can_message_id_t id_helper;

		id_helper.can_msg_type = CAN_MSG_TYPE_INFO;
 800262a:	2301      	movs	r3, #1
 800262c:	60fb      	str	r3, [r7, #12]
		id_helper.can_class = CAN_MSG_CLASS_INFO_TELEMETRY;
 800262e:	2300      	movs	r3, #0
 8002630:	613b      	str	r3, [r7, #16]
		id_helper.can_device = get_device_index();
 8002632:	f7ff f8a7 	bl	8001784 <get_device_index>
 8002636:	4603      	mov	r3, r0
 8002638:	61bb      	str	r3, [r7, #24]

		id_helper.can_index = CAN_MSG_INDEX_INFO_PRIMITIVE_SETPOINT;
 800263a:	2305      	movs	r3, #5
 800263c:	617b      	str	r3, [r7, #20]
		pack_can_message(&id_helper);
 800263e:	f107 0308 	add.w	r3, r7, #8
 8002642:	4618      	mov	r0, r3
 8002644:	f007 ff55 	bl	800a4f2 <pack_can_message>

		frame.id = id_helper.raw_id;
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	61fb      	str	r3, [r7, #28]
		frame.length = 8;
 800264c:	2308      	movs	r3, #8
 800264e:	f887 3020 	strb.w	r3, [r7, #32]
		memcpy(&frame.data[0], &cart_pos.x, 4);
 8002652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002654:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
		memcpy(&frame.data[4], &cart_pos.y, 4);
 8002658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800265a:	f8c7 3025 	str.w	r3, [r7, #37]	; 0x25
		add_can_frame_to_tx_queue(frame);
 800265e:	f107 031c 	add.w	r3, r7, #28
 8002662:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002664:	f7ff f8ba 	bl	80017dc <add_can_frame_to_tx_queue>
	}

	if(control_type[0] == PRIMITIVE)
 8002668:	4b5f      	ldr	r3, [pc, #380]	; (80027e8 <vPrimitivesCalculation+0x248>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b04      	cmp	r3, #4
 8002670:	d149      	bne.n	8002706 <vPrimitivesCalculation+0x166>
	{
		calculate_ik(&leg, &js_pos, cart_pos);
 8002672:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002676:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800267a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800267e:	eeb0 0a47 	vmov.f32	s0, s14
 8002682:	eef0 0a67 	vmov.f32	s1, s15
 8002686:	4619      	mov	r1, r3
 8002688:	485a      	ldr	r0, [pc, #360]	; (80027f4 <vPrimitivesCalculation+0x254>)
 800268a:	f008 fa87 	bl	800ab9c <calculate_ik>

		if(motion_primitive_is_inverted())
 800268e:	f009 ff41 	bl	800c514 <motion_primitive_is_inverted>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00b      	beq.n	80026b0 <vPrimitivesCalculation+0x110>
		{
			js_pos.thigh_angle_rad = -js_pos.thigh_angle_rad;
 8002698:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800269c:	eef1 7a67 	vneg.f32	s15, s15
 80026a0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			js_pos.knee_angle_rad = -js_pos.knee_angle_rad;
 80026a4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80026a8:	eef1 7a67 	vneg.f32	s15, s15
 80026ac:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		}

		set_motor_position(RAD_TO_DEG * js_pos.thigh_angle_rad, 0);
 80026b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fd fef0 	bl	8000498 <__aeabi_f2d>
 80026b8:	a347      	add	r3, pc, #284	; (adr r3, 80027d8 <vPrimitivesCalculation+0x238>)
 80026ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026be:	f7fd ff43 	bl	8000548 <__aeabi_dmul>
 80026c2:	4603      	mov	r3, r0
 80026c4:	460c      	mov	r4, r1
 80026c6:	4618      	mov	r0, r3
 80026c8:	4621      	mov	r1, r4
 80026ca:	f7fe fa15 	bl	8000af8 <__aeabi_d2f>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2000      	movs	r0, #0
 80026d2:	ee00 3a10 	vmov	s0, r3
 80026d6:	f000 fc89 	bl	8002fec <set_motor_position>
		set_motor_position(RAD_TO_DEG * js_pos.knee_angle_rad, 1);
 80026da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fd fedb 	bl	8000498 <__aeabi_f2d>
 80026e2:	a33d      	add	r3, pc, #244	; (adr r3, 80027d8 <vPrimitivesCalculation+0x238>)
 80026e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e8:	f7fd ff2e 	bl	8000548 <__aeabi_dmul>
 80026ec:	4603      	mov	r3, r0
 80026ee:	460c      	mov	r4, r1
 80026f0:	4618      	mov	r0, r3
 80026f2:	4621      	mov	r1, r4
 80026f4:	f7fe fa00 	bl	8000af8 <__aeabi_d2f>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2001      	movs	r0, #1
 80026fc:	ee00 3a10 	vmov	s0, r3
 8002700:	f000 fc74 	bl	8002fec <set_motor_position>
 8002704:	e064      	b.n	80027d0 <vPrimitivesCalculation+0x230>
	} else if(control_type[0] == PROPRIOCEPTIVE_PRIMITIVE)
 8002706:	4b38      	ldr	r3, [pc, #224]	; (80027e8 <vPrimitivesCalculation+0x248>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b05      	cmp	r3, #5
 800270e:	d15f      	bne.n	80027d0 <vPrimitivesCalculation+0x230>
	{
		impedance_control_cmds_t ic_cmds;
		js_pos.thigh_angle_rad = DEG_TO_RAD * get_motor_position(0);
 8002710:	2000      	movs	r0, #0
 8002712:	f000 fcb7 	bl	8003084 <get_motor_position>
 8002716:	ee10 3a10 	vmov	r3, s0
 800271a:	4618      	mov	r0, r3
 800271c:	f7fd febc 	bl	8000498 <__aeabi_f2d>
 8002720:	a32f      	add	r3, pc, #188	; (adr r3, 80027e0 <vPrimitivesCalculation+0x240>)
 8002722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002726:	f7fd ff0f 	bl	8000548 <__aeabi_dmul>
 800272a:	4603      	mov	r3, r0
 800272c:	460c      	mov	r4, r1
 800272e:	4618      	mov	r0, r3
 8002730:	4621      	mov	r1, r4
 8002732:	f7fe f9e1 	bl	8000af8 <__aeabi_d2f>
 8002736:	4603      	mov	r3, r0
 8002738:	62fb      	str	r3, [r7, #44]	; 0x2c
		js_pos.knee_angle_rad = DEG_TO_RAD * get_motor_position(1);
 800273a:	2001      	movs	r0, #1
 800273c:	f000 fca2 	bl	8003084 <get_motor_position>
 8002740:	ee10 3a10 	vmov	r3, s0
 8002744:	4618      	mov	r0, r3
 8002746:	f7fd fea7 	bl	8000498 <__aeabi_f2d>
 800274a:	a325      	add	r3, pc, #148	; (adr r3, 80027e0 <vPrimitivesCalculation+0x240>)
 800274c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002750:	f7fd fefa 	bl	8000548 <__aeabi_dmul>
 8002754:	4603      	mov	r3, r0
 8002756:	460c      	mov	r4, r1
 8002758:	4618      	mov	r0, r3
 800275a:	4621      	mov	r1, r4
 800275c:	f7fe f9cc 	bl	8000af8 <__aeabi_d2f>
 8002760:	4603      	mov	r3, r0
 8002762:	633b      	str	r3, [r7, #48]	; 0x30
		calculate_impedance_control(ic_params, leg, js_pos, cart_pos, &ic_cmds);
 8002764:	ed97 4a0d 	vldr	s8, [r7, #52]	; 0x34
 8002768:	edd7 4a0e 	vldr	s9, [r7, #56]	; 0x38
 800276c:	ed97 5a0b 	vldr	s10, [r7, #44]	; 0x2c
 8002770:	edd7 5a0c 	vldr	s11, [r7, #48]	; 0x30
 8002774:	4b1f      	ldr	r3, [pc, #124]	; (80027f4 <vPrimitivesCalculation+0x254>)
 8002776:	ed93 6a00 	vldr	s12, [r3]
 800277a:	edd3 6a01 	vldr	s13, [r3, #4]
 800277e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002782:	edd3 7a03 	vldr	s15, [r3, #12]
 8002786:	4b1c      	ldr	r3, [pc, #112]	; (80027f8 <vPrimitivesCalculation+0x258>)
 8002788:	463a      	mov	r2, r7
 800278a:	9202      	str	r2, [sp, #8]
 800278c:	466c      	mov	r4, sp
 800278e:	f103 0210 	add.w	r2, r3, #16
 8002792:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002796:	e884 0003 	stmia.w	r4, {r0, r1}
 800279a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800279c:	eeb0 3a44 	vmov.f32	s6, s8
 80027a0:	eef0 3a64 	vmov.f32	s7, s9
 80027a4:	eeb0 2a45 	vmov.f32	s4, s10
 80027a8:	eef0 2a65 	vmov.f32	s5, s11
 80027ac:	eeb0 0a46 	vmov.f32	s0, s12
 80027b0:	eef0 0a66 	vmov.f32	s1, s13
 80027b4:	eeb0 1a47 	vmov.f32	s2, s14
 80027b8:	eef0 1a67 	vmov.f32	s3, s15
 80027bc:	f008 f8e6 	bl	800a98c <calculate_impedance_control>
		motors[0].current_ma_setpoint = ic_cmds.hip_cmd_ma;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	4a0e      	ldr	r2, [pc, #56]	; (80027fc <vPrimitivesCalculation+0x25c>)
 80027c4:	61d3      	str	r3, [r2, #28]
		motors[1].current_ma_setpoint = ic_cmds.knee_cmd_ma;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a0c      	ldr	r2, [pc, #48]	; (80027fc <vPrimitivesCalculation+0x25c>)
 80027ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027cc:	e000      	b.n	80027d0 <vPrimitivesCalculation+0x230>
			return;
 80027ce:	bf00      	nop
	}
  }
 80027d0:	3744      	adds	r7, #68	; 0x44
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd90      	pop	{r4, r7, pc}
 80027d6:	bf00      	nop
 80027d8:	c63f1412 	.word	0xc63f1412
 80027dc:	404ca5dc 	.word	0x404ca5dc
 80027e0:	22d4405f 	.word	0x22d4405f
 80027e4:	3f91df47 	.word	0x3f91df47
 80027e8:	20000d88 	.word	0x20000d88
 80027ec:	20000f34 	.word	0x20000f34
 80027f0:	cccccccd 	.word	0xcccccccd
 80027f4:	20000f24 	.word	0x20000f24
 80027f8:	20000f0c 	.word	0x20000f0c
 80027fc:	20000d8c 	.word	0x20000d8c

08002800 <vControlTimerCallback>:

 static void vControlTimerCallback( void )
 {
 8002800:	b5b0      	push	{r4, r5, r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af00      	add	r7, sp, #0
	static uint32_t count = 0;
	static int32_t last_ticks_for_speed[NUMBER_MOTORS] = {0};

	int32_t i;
	vPrimitivesCalculation();
 8002806:	f7ff fecb 	bl	80025a0 <vPrimitivesCalculation>

	// Update data
	for(i=0; i < NUMBER_MOTORS; i++)
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
 800280e:	e1c8      	b.n	8002ba2 <vControlTimerCallback+0x3a2>
	{
		// Speed is in deg/s
		if(count % 20 == 0)
 8002810:	4bc3      	ldr	r3, [pc, #780]	; (8002b20 <vControlTimerCallback+0x320>)
 8002812:	6819      	ldr	r1, [r3, #0]
 8002814:	4bc3      	ldr	r3, [pc, #780]	; (8002b24 <vControlTimerCallback+0x324>)
 8002816:	fba3 2301 	umull	r2, r3, r3, r1
 800281a:	091a      	lsrs	r2, r3, #4
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	1aca      	subs	r2, r1, r3
 8002826:	2a00      	cmp	r2, #0
 8002828:	d172      	bne.n	8002910 <vControlTimerCallback+0x110>
		{
			// 25 Hz here
			int32_t ticks_per_40ms = (get_motor_encoder_ticks(i) - last_ticks_for_speed[i]);
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	4618      	mov	r0, r3
 8002830:	f007 fe8e 	bl	800a550 <get_motor_encoder_ticks>
 8002834:	4601      	mov	r1, r0
 8002836:	4abc      	ldr	r2, [pc, #752]	; (8002b28 <vControlTimerCallback+0x328>)
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283e:	1acb      	subs	r3, r1, r3
 8002840:	61bb      	str	r3, [r7, #24]
			int32_t deg_p_s = 25 * ticks_per_40ms * (360.0 / motors[i].ticks_per_rev);
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	009a      	lsls	r2, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	4618      	mov	r0, r3
 8002850:	f7fd fe10 	bl	8000474 <__aeabi_i2d>
 8002854:	4604      	mov	r4, r0
 8002856:	460d      	mov	r5, r1
 8002858:	49b4      	ldr	r1, [pc, #720]	; (8002b2c <vControlTimerCallback+0x32c>)
 800285a:	69fa      	ldr	r2, [r7, #28]
 800285c:	4613      	mov	r3, r2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	4413      	add	r3, r2
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	440b      	add	r3, r1
 8002866:	3328      	adds	r3, #40	; 0x28
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7fd fe02 	bl	8000474 <__aeabi_i2d>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	f04f 0000 	mov.w	r0, #0
 8002878:	49ad      	ldr	r1, [pc, #692]	; (8002b30 <vControlTimerCallback+0x330>)
 800287a:	f7fd ff8f 	bl	800079c <__aeabi_ddiv>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4620      	mov	r0, r4
 8002884:	4629      	mov	r1, r5
 8002886:	f7fd fe5f 	bl	8000548 <__aeabi_dmul>
 800288a:	4603      	mov	r3, r0
 800288c:	460c      	mov	r4, r1
 800288e:	4618      	mov	r0, r3
 8002890:	4621      	mov	r1, r4
 8002892:	f7fe f909 	bl	8000aa8 <__aeabi_d2iz>
 8002896:	4603      	mov	r3, r0
 8002898:	617b      	str	r3, [r7, #20]
			motors[i].speed = (int32_t) (0.7 * motors[i].speed) + (int32_t) (0.3 * deg_p_s); // TODO filter differently?
 800289a:	49a4      	ldr	r1, [pc, #656]	; (8002b2c <vControlTimerCallback+0x32c>)
 800289c:	69fa      	ldr	r2, [r7, #28]
 800289e:	4613      	mov	r3, r2
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	4413      	add	r3, r2
 80028a4:	011b      	lsls	r3, r3, #4
 80028a6:	440b      	add	r3, r1
 80028a8:	3310      	adds	r3, #16
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fd fde1 	bl	8000474 <__aeabi_i2d>
 80028b2:	a397      	add	r3, pc, #604	; (adr r3, 8002b10 <vControlTimerCallback+0x310>)
 80028b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b8:	f7fd fe46 	bl	8000548 <__aeabi_dmul>
 80028bc:	4603      	mov	r3, r0
 80028be:	460c      	mov	r4, r1
 80028c0:	4618      	mov	r0, r3
 80028c2:	4621      	mov	r1, r4
 80028c4:	f7fe f8f0 	bl	8000aa8 <__aeabi_d2iz>
 80028c8:	4604      	mov	r4, r0
 80028ca:	6978      	ldr	r0, [r7, #20]
 80028cc:	f7fd fdd2 	bl	8000474 <__aeabi_i2d>
 80028d0:	a391      	add	r3, pc, #580	; (adr r3, 8002b18 <vControlTimerCallback+0x318>)
 80028d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d6:	f7fd fe37 	bl	8000548 <__aeabi_dmul>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4610      	mov	r0, r2
 80028e0:	4619      	mov	r1, r3
 80028e2:	f7fe f8e1 	bl	8000aa8 <__aeabi_d2iz>
 80028e6:	4603      	mov	r3, r0
 80028e8:	18e1      	adds	r1, r4, r3
 80028ea:	4890      	ldr	r0, [pc, #576]	; (8002b2c <vControlTimerCallback+0x32c>)
 80028ec:	69fa      	ldr	r2, [r7, #28]
 80028ee:	4613      	mov	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	4413      	add	r3, r2
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	4403      	add	r3, r0
 80028f8:	3310      	adds	r3, #16
 80028fa:	6019      	str	r1, [r3, #0]

			last_ticks_for_speed[i] = get_motor_encoder_ticks(i);
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	4618      	mov	r0, r3
 8002902:	f007 fe25 	bl	800a550 <get_motor_encoder_ticks>
 8002906:	4601      	mov	r1, r0
 8002908:	4a87      	ldr	r2, [pc, #540]	; (8002b28 <vControlTimerCallback+0x328>)
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		motors[i].ticks_count = get_motor_encoder_ticks(i);
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	b2db      	uxtb	r3, r3
 8002914:	4618      	mov	r0, r3
 8002916:	f007 fe1b 	bl	800a550 <get_motor_encoder_ticks>
 800291a:	4984      	ldr	r1, [pc, #528]	; (8002b2c <vControlTimerCallback+0x32c>)
 800291c:	69fa      	ldr	r2, [r7, #28]
 800291e:	4613      	mov	r3, r2
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	4413      	add	r3, r2
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	440b      	add	r3, r1
 8002928:	3320      	adds	r3, #32
 800292a:	6018      	str	r0, [r3, #0]
		motors[i].current_mA = get_motor_current_ma(i);
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	4618      	mov	r0, r3
 8002932:	f007 fcd5 	bl	800a2e0 <get_motor_current_ma>
 8002936:	4603      	mov	r3, r0
 8002938:	4618      	mov	r0, r3
 800293a:	497c      	ldr	r1, [pc, #496]	; (8002b2c <vControlTimerCallback+0x32c>)
 800293c:	69fa      	ldr	r2, [r7, #28]
 800293e:	4613      	mov	r3, r2
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	4413      	add	r3, r2
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	440b      	add	r3, r1
 8002948:	3318      	adds	r3, #24
 800294a:	6018      	str	r0, [r3, #0]

		if(control_type[i] == POSITION || control_type[i] == PRIMITIVE)
 800294c:	4a79      	ldr	r2, [pc, #484]	; (8002b34 <vControlTimerCallback+0x334>)
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	4413      	add	r3, r2
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d006      	beq.n	8002968 <vControlTimerCallback+0x168>
 800295a:	4a76      	ldr	r2, [pc, #472]	; (8002b34 <vControlTimerCallback+0x334>)
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	4413      	add	r3, r2
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b04      	cmp	r3, #4
 8002966:	d126      	bne.n	80029b6 <vControlTimerCallback+0x1b6>
		{
			float cmd = calculate_pid(&pos_params[i], motors[i].ticks_setpoint, motors[i].ticks_count);
 8002968:	69fa      	ldr	r2, [r7, #28]
 800296a:	4613      	mov	r3, r2
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	4413      	add	r3, r2
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	4a71      	ldr	r2, [pc, #452]	; (8002b38 <vControlTimerCallback+0x338>)
 8002974:	1898      	adds	r0, r3, r2
 8002976:	496d      	ldr	r1, [pc, #436]	; (8002b2c <vControlTimerCallback+0x32c>)
 8002978:	69fa      	ldr	r2, [r7, #28]
 800297a:	4613      	mov	r3, r2
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	4413      	add	r3, r2
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	440b      	add	r3, r1
 8002984:	3324      	adds	r3, #36	; 0x24
 8002986:	681c      	ldr	r4, [r3, #0]
 8002988:	4968      	ldr	r1, [pc, #416]	; (8002b2c <vControlTimerCallback+0x32c>)
 800298a:	69fa      	ldr	r2, [r7, #28]
 800298c:	4613      	mov	r3, r2
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	4413      	add	r3, r2
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	440b      	add	r3, r1
 8002996:	3320      	adds	r3, #32
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	4621      	mov	r1, r4
 800299e:	f009 fe2d 	bl	800c5fc <calculate_pid>
 80029a2:	ed87 0a00 	vstr	s0, [r7]
			drive_motor(i, cmd);
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	ed97 0a00 	vldr	s0, [r7]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff fc94 	bl	80022dc <drive_motor>
		{
 80029b4:	e0f2      	b.n	8002b9c <vControlTimerCallback+0x39c>
		} else if(control_type[i] == SPEED)
 80029b6:	4a5f      	ldr	r2, [pc, #380]	; (8002b34 <vControlTimerCallback+0x334>)
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	4413      	add	r3, r2
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d126      	bne.n	8002a12 <vControlTimerCallback+0x212>
		{
			float cmd = calculate_pid(&speed_params[i], motors[i].speed_setpoint, motors[i].speed);
 80029c4:	69fa      	ldr	r2, [r7, #28]
 80029c6:	4613      	mov	r3, r2
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	4413      	add	r3, r2
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	4a5b      	ldr	r2, [pc, #364]	; (8002b3c <vControlTimerCallback+0x33c>)
 80029d0:	1898      	adds	r0, r3, r2
 80029d2:	4956      	ldr	r1, [pc, #344]	; (8002b2c <vControlTimerCallback+0x32c>)
 80029d4:	69fa      	ldr	r2, [r7, #28]
 80029d6:	4613      	mov	r3, r2
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	4413      	add	r3, r2
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	440b      	add	r3, r1
 80029e0:	3314      	adds	r3, #20
 80029e2:	681c      	ldr	r4, [r3, #0]
 80029e4:	4951      	ldr	r1, [pc, #324]	; (8002b2c <vControlTimerCallback+0x32c>)
 80029e6:	69fa      	ldr	r2, [r7, #28]
 80029e8:	4613      	mov	r3, r2
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	4413      	add	r3, r2
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	440b      	add	r3, r1
 80029f2:	3310      	adds	r3, #16
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	4621      	mov	r1, r4
 80029fa:	f009 fdff 	bl	800c5fc <calculate_pid>
 80029fe:	ed87 0a01 	vstr	s0, [r7, #4]
			drive_motor(i, cmd);
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	ed97 0a01 	vldr	s0, [r7, #4]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff fc66 	bl	80022dc <drive_motor>
 8002a10:	e0c4      	b.n	8002b9c <vControlTimerCallback+0x39c>
		} else if(control_type[i] == CURRENT || control_type[i] == PROPRIOCEPTIVE_PRIMITIVE)
 8002a12:	4a48      	ldr	r2, [pc, #288]	; (8002b34 <vControlTimerCallback+0x334>)
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	4413      	add	r3, r2
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d007      	beq.n	8002a30 <vControlTimerCallback+0x230>
 8002a20:	4a44      	ldr	r2, [pc, #272]	; (8002b34 <vControlTimerCallback+0x334>)
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	4413      	add	r3, r2
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b05      	cmp	r3, #5
 8002a2c:	f040 8098 	bne.w	8002b60 <vControlTimerCallback+0x360>
		{
			if(motors[i].current_ma_setpoint >= 0)
 8002a30:	493e      	ldr	r1, [pc, #248]	; (8002b2c <vControlTimerCallback+0x32c>)
 8002a32:	69fa      	ldr	r2, [r7, #28]
 8002a34:	4613      	mov	r3, r2
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	4413      	add	r3, r2
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	440b      	add	r3, r1
 8002a3e:	331c      	adds	r3, #28
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	db35      	blt.n	8002ab2 <vControlTimerCallback+0x2b2>
			{
				float cmd = calculate_pid(&cur_params[i], motors[i].current_ma_setpoint, motors[i].current_mA);
 8002a46:	69fa      	ldr	r2, [r7, #28]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	4413      	add	r3, r2
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	4a3b      	ldr	r2, [pc, #236]	; (8002b40 <vControlTimerCallback+0x340>)
 8002a52:	1898      	adds	r0, r3, r2
 8002a54:	4935      	ldr	r1, [pc, #212]	; (8002b2c <vControlTimerCallback+0x32c>)
 8002a56:	69fa      	ldr	r2, [r7, #28]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	4413      	add	r3, r2
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	440b      	add	r3, r1
 8002a62:	331c      	adds	r3, #28
 8002a64:	681c      	ldr	r4, [r3, #0]
 8002a66:	4931      	ldr	r1, [pc, #196]	; (8002b2c <vControlTimerCallback+0x32c>)
 8002a68:	69fa      	ldr	r2, [r7, #28]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	4413      	add	r3, r2
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	440b      	add	r3, r1
 8002a74:	3318      	adds	r3, #24
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	4621      	mov	r1, r4
 8002a7c:	f009 fdbe 	bl	800c5fc <calculate_pid>
 8002a80:	ed87 0a02 	vstr	s0, [r7, #8]
				// Only allow forward drive

				if(cmd > 0)
 8002a84:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a90:	dd07      	ble.n	8002aa2 <vControlTimerCallback+0x2a2>
				{
					drive_motor(i, cmd);
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	ed97 0a02 	vldr	s0, [r7, #8]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff fc1e 	bl	80022dc <drive_motor>
			if(motors[i].current_ma_setpoint >= 0)
 8002aa0:	e07c      	b.n	8002b9c <vControlTimerCallback+0x39c>
				}
				else
				{
					drive_motor(i, 0);
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8002b44 <vControlTimerCallback+0x344>
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fc16 	bl	80022dc <drive_motor>
			if(motors[i].current_ma_setpoint >= 0)
 8002ab0:	e074      	b.n	8002b9c <vControlTimerCallback+0x39c>
				}
			}
			else
			{
				// Flip direction of control and direction of setpoint
				float cmd = calculate_pid(&cur_params[i], -motors[i].current_ma_setpoint, motors[i].current_mA);
 8002ab2:	69fa      	ldr	r2, [r7, #28]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	4413      	add	r3, r2
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	4a20      	ldr	r2, [pc, #128]	; (8002b40 <vControlTimerCallback+0x340>)
 8002abe:	1898      	adds	r0, r3, r2
 8002ac0:	491a      	ldr	r1, [pc, #104]	; (8002b2c <vControlTimerCallback+0x32c>)
 8002ac2:	69fa      	ldr	r2, [r7, #28]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	4413      	add	r3, r2
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	440b      	add	r3, r1
 8002ace:	331c      	adds	r3, #28
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	425c      	negs	r4, r3
 8002ad4:	4915      	ldr	r1, [pc, #84]	; (8002b2c <vControlTimerCallback+0x32c>)
 8002ad6:	69fa      	ldr	r2, [r7, #28]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	4413      	add	r3, r2
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	440b      	add	r3, r1
 8002ae2:	3318      	adds	r3, #24
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	4621      	mov	r1, r4
 8002aea:	f009 fd87 	bl	800c5fc <calculate_pid>
 8002aee:	ed87 0a03 	vstr	s0, [r7, #12]
				// Only allow reverse drive
				if(cmd < 0)
 8002af2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002af6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002afe:	d523      	bpl.n	8002b48 <vControlTimerCallback+0x348>
				{
					drive_motor(i, 0);
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8002b44 <vControlTimerCallback+0x344>
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff fbe7 	bl	80022dc <drive_motor>
			if(motors[i].current_ma_setpoint >= 0)
 8002b0e:	e045      	b.n	8002b9c <vControlTimerCallback+0x39c>
 8002b10:	66666666 	.word	0x66666666
 8002b14:	3fe66666 	.word	0x3fe66666
 8002b18:	33333333 	.word	0x33333333
 8002b1c:	3fd33333 	.word	0x3fd33333
 8002b20:	20000f38 	.word	0x20000f38
 8002b24:	cccccccd 	.word	0xcccccccd
 8002b28:	20000f3c 	.word	0x20000f3c
 8002b2c:	20000d8c 	.word	0x20000d8c
 8002b30:	40768000 	.word	0x40768000
 8002b34:	20000d88 	.word	0x20000d88
 8002b38:	20000dec 	.word	0x20000dec
 8002b3c:	20000e4c 	.word	0x20000e4c
 8002b40:	20000eac 	.word	0x20000eac
 8002b44:	00000000 	.word	0x00000000
				}
				else
				{
					drive_motor(i, -cmd);
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b50:	eef1 7a67 	vneg.f32	s15, s15
 8002b54:	eeb0 0a67 	vmov.f32	s0, s15
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fbbf 	bl	80022dc <drive_motor>
			if(motors[i].current_ma_setpoint >= 0)
 8002b5e:	e01d      	b.n	8002b9c <vControlTimerCallback+0x39c>
				}
			}
		} else if (control_type[i] == DUTY)
 8002b60:	4a16      	ldr	r2, [pc, #88]	; (8002bbc <vControlTimerCallback+0x3bc>)
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	4413      	add	r3, r2
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	d116      	bne.n	8002b9c <vControlTimerCallback+0x39c>
		{
			float cmd = motors[i].duty * PWM_PERIOD;
 8002b6e:	4914      	ldr	r1, [pc, #80]	; (8002bc0 <vControlTimerCallback+0x3c0>)
 8002b70:	69fa      	ldr	r2, [r7, #28]
 8002b72:	4613      	mov	r3, r2
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	4413      	add	r3, r2
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	440b      	add	r3, r1
 8002b7c:	330c      	adds	r3, #12
 8002b7e:	edd3 7a00 	vldr	s15, [r3]
 8002b82:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002bc4 <vControlTimerCallback+0x3c4>
 8002b86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b8a:	edc7 7a04 	vstr	s15, [r7, #16]
			drive_motor(i, cmd);
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	ed97 0a04 	vldr	s0, [r7, #16]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fba0 	bl	80022dc <drive_motor>
	for(i=0; i < NUMBER_MOTORS; i++)
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	61fb      	str	r3, [r7, #28]
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	f77f ae33 	ble.w	8002810 <vControlTimerCallback+0x10>
		}// control type
	} // Loop through motors

	count++;
 8002baa:	4b07      	ldr	r3, [pc, #28]	; (8002bc8 <vControlTimerCallback+0x3c8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	4a05      	ldr	r2, [pc, #20]	; (8002bc8 <vControlTimerCallback+0x3c8>)
 8002bb2:	6013      	str	r3, [r2, #0]
			motors[1].ticks_setpoint = 0;
			//motors[1].duty = -0.5;
		}
		dir = !dir;
	}*/
 }
 8002bb4:	bf00      	nop
 8002bb6:	3720      	adds	r7, #32
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bdb0      	pop	{r4, r5, r7, pc}
 8002bbc:	20000d88 	.word	0x20000d88
 8002bc0:	20000d8c 	.word	0x20000d8c
 8002bc4:	461c4000 	.word	0x461c4000
 8002bc8:	20000f38 	.word	0x20000f38
 8002bcc:	00000000 	.word	0x00000000

08002bd0 <motor_task_init>:

 void motor_task_init(void)
 {
 8002bd0:	b5b0      	push	{r4, r5, r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af02      	add	r7, sp, #8
	 motion_primitive_init();
 8002bd6:	f008 f8e7 	bl	800ada8 <motion_primitive_init>
	 precalc_inverse_trig();
 8002bda:	f007 fd89 	bl	800a6f0 <precalc_inverse_trig>

	 //motion_primitive_set_index(5);
	 control_type[0] = POSITION; // TODO default position
 8002bde:	4b98      	ldr	r3, [pc, #608]	; (8002e40 <motor_task_init+0x270>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	701a      	strb	r2, [r3, #0]
	 control_type[1] = POSITION;
 8002be4:	4b96      	ldr	r3, [pc, #600]	; (8002e40 <motor_task_init+0x270>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	705a      	strb	r2, [r3, #1]

	 leg.thigh_length_m = 0.055;
 8002bea:	4b96      	ldr	r3, [pc, #600]	; (8002e44 <motor_task_init+0x274>)
 8002bec:	4a96      	ldr	r2, [pc, #600]	; (8002e48 <motor_task_init+0x278>)
 8002bee:	601a      	str	r2, [r3, #0]
	 leg.calf_length_m = 0.065;
 8002bf0:	4b94      	ldr	r3, [pc, #592]	; (8002e44 <motor_task_init+0x274>)
 8002bf2:	4a96      	ldr	r2, [pc, #600]	; (8002e4c <motor_task_init+0x27c>)
 8002bf4:	605a      	str	r2, [r3, #4]
	 init_leg_precalcs(&leg);
 8002bf6:	4893      	ldr	r0, [pc, #588]	; (8002e44 <motor_task_init+0x274>)
 8002bf8:	f007 ff84 	bl	800ab04 <init_leg_precalcs>

	 ic_params.gain_current_per_torque = 15.0; // 1.5A stall at 0.196Nm torque
 8002bfc:	4b94      	ldr	r3, [pc, #592]	; (8002e50 <motor_task_init+0x280>)
 8002bfe:	4a95      	ldr	r2, [pc, #596]	; (8002e54 <motor_task_init+0x284>)
 8002c00:	601a      	str	r2, [r3, #0]
	 ic_params.c_eff_x = -0.2;
 8002c02:	4b93      	ldr	r3, [pc, #588]	; (8002e50 <motor_task_init+0x280>)
 8002c04:	4a94      	ldr	r2, [pc, #592]	; (8002e58 <motor_task_init+0x288>)
 8002c06:	609a      	str	r2, [r3, #8]
	 ic_params.k_eff_x = 600.0; // 2 lbs/ 1.5cm = ~600N/m
 8002c08:	4b91      	ldr	r3, [pc, #580]	; (8002e50 <motor_task_init+0x280>)
 8002c0a:	4a94      	ldr	r2, [pc, #592]	; (8002e5c <motor_task_init+0x28c>)
 8002c0c:	605a      	str	r2, [r3, #4]
	 ic_params.c_eff_y = -0.2;
 8002c0e:	4b90      	ldr	r3, [pc, #576]	; (8002e50 <motor_task_init+0x280>)
 8002c10:	4a91      	ldr	r2, [pc, #580]	; (8002e58 <motor_task_init+0x288>)
 8002c12:	611a      	str	r2, [r3, #16]
	 ic_params.k_eff_y = 600.0;
 8002c14:	4b8e      	ldr	r3, [pc, #568]	; (8002e50 <motor_task_init+0x280>)
 8002c16:	4a91      	ldr	r2, [pc, #580]	; (8002e5c <motor_task_init+0x28c>)
 8002c18:	60da      	str	r2, [r3, #12]
	 ic_params.gear_ratio = 150.0;
 8002c1a:	4b8d      	ldr	r3, [pc, #564]	; (8002e50 <motor_task_init+0x280>)
 8002c1c:	4a90      	ldr	r2, [pc, #576]	; (8002e60 <motor_task_init+0x290>)
 8002c1e:	615a      	str	r2, [r3, #20]

	 // position control params
	 pos_params[0].kp = 250.0;
 8002c20:	4b90      	ldr	r3, [pc, #576]	; (8002e64 <motor_task_init+0x294>)
 8002c22:	4a91      	ldr	r2, [pc, #580]	; (8002e68 <motor_task_init+0x298>)
 8002c24:	625a      	str	r2, [r3, #36]	; 0x24
	 pos_params[0].kd = -5000.0;
 8002c26:	4b8f      	ldr	r3, [pc, #572]	; (8002e64 <motor_task_init+0x294>)
 8002c28:	4a90      	ldr	r2, [pc, #576]	; (8002e6c <motor_task_init+0x29c>)
 8002c2a:	62da      	str	r2, [r3, #44]	; 0x2c
	 pos_params[0].cmd_max = 10000.0;
 8002c2c:	4b8d      	ldr	r3, [pc, #564]	; (8002e64 <motor_task_init+0x294>)
 8002c2e:	4a90      	ldr	r2, [pc, #576]	; (8002e70 <motor_task_init+0x2a0>)
 8002c30:	619a      	str	r2, [r3, #24]
	 pos_params[0].cmd_min = -10000.0;
 8002c32:	4b8c      	ldr	r3, [pc, #560]	; (8002e64 <motor_task_init+0x294>)
 8002c34:	4a8f      	ldr	r2, [pc, #572]	; (8002e74 <motor_task_init+0x2a4>)
 8002c36:	61da      	str	r2, [r3, #28]
	 pos_params[0].speed_alpha = 0.98;
 8002c38:	4b8a      	ldr	r3, [pc, #552]	; (8002e64 <motor_task_init+0x294>)
 8002c3a:	4a8f      	ldr	r2, [pc, #572]	; (8002e78 <motor_task_init+0x2a8>)
 8002c3c:	621a      	str	r2, [r3, #32]
	 pos_params[0].integral_max = 8.0e6; // Accumulates difference of ticks at 4kHz, must be big
 8002c3e:	4b89      	ldr	r3, [pc, #548]	; (8002e64 <motor_task_init+0x294>)
 8002c40:	4a8e      	ldr	r2, [pc, #568]	; (8002e7c <motor_task_init+0x2ac>)
 8002c42:	611a      	str	r2, [r3, #16]
	 pos_params[0].integral_min = -8.0e6; // Accumulates difference of ticks at 4kHz, must be big
 8002c44:	4b87      	ldr	r3, [pc, #540]	; (8002e64 <motor_task_init+0x294>)
 8002c46:	4a8e      	ldr	r2, [pc, #568]	; (8002e80 <motor_task_init+0x2b0>)
 8002c48:	615a      	str	r2, [r3, #20]
	 pos_params[0].ki = (0.4 * pos_params[0].cmd_max) / pos_params[0].integral_max; // Maximum is 40% of command
 8002c4a:	4b86      	ldr	r3, [pc, #536]	; (8002e64 <motor_task_init+0x294>)
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fd fc22 	bl	8000498 <__aeabi_f2d>
 8002c54:	a376      	add	r3, pc, #472	; (adr r3, 8002e30 <motor_task_init+0x260>)
 8002c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5a:	f7fd fc75 	bl	8000548 <__aeabi_dmul>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	460c      	mov	r4, r1
 8002c62:	4625      	mov	r5, r4
 8002c64:	461c      	mov	r4, r3
 8002c66:	4b7f      	ldr	r3, [pc, #508]	; (8002e64 <motor_task_init+0x294>)
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fd fc14 	bl	8000498 <__aeabi_f2d>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4620      	mov	r0, r4
 8002c76:	4629      	mov	r1, r5
 8002c78:	f7fd fd90 	bl	800079c <__aeabi_ddiv>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	460c      	mov	r4, r1
 8002c80:	4618      	mov	r0, r3
 8002c82:	4621      	mov	r1, r4
 8002c84:	f7fd ff38 	bl	8000af8 <__aeabi_d2f>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	4b76      	ldr	r3, [pc, #472]	; (8002e64 <motor_task_init+0x294>)
 8002c8c:	629a      	str	r2, [r3, #40]	; 0x28

	 pos_params[1].kp = 250.0;
 8002c8e:	4b75      	ldr	r3, [pc, #468]	; (8002e64 <motor_task_init+0x294>)
 8002c90:	4a75      	ldr	r2, [pc, #468]	; (8002e68 <motor_task_init+0x298>)
 8002c92:	655a      	str	r2, [r3, #84]	; 0x54
	 pos_params[1].kd = -5000.0;
 8002c94:	4b73      	ldr	r3, [pc, #460]	; (8002e64 <motor_task_init+0x294>)
 8002c96:	4a75      	ldr	r2, [pc, #468]	; (8002e6c <motor_task_init+0x29c>)
 8002c98:	65da      	str	r2, [r3, #92]	; 0x5c
	 pos_params[1].cmd_max = 10000.0;
 8002c9a:	4b72      	ldr	r3, [pc, #456]	; (8002e64 <motor_task_init+0x294>)
 8002c9c:	4a74      	ldr	r2, [pc, #464]	; (8002e70 <motor_task_init+0x2a0>)
 8002c9e:	649a      	str	r2, [r3, #72]	; 0x48
	 pos_params[1].cmd_min = -10000.0;
 8002ca0:	4b70      	ldr	r3, [pc, #448]	; (8002e64 <motor_task_init+0x294>)
 8002ca2:	4a74      	ldr	r2, [pc, #464]	; (8002e74 <motor_task_init+0x2a4>)
 8002ca4:	64da      	str	r2, [r3, #76]	; 0x4c
	 pos_params[1].speed_alpha = 0.98;
 8002ca6:	4b6f      	ldr	r3, [pc, #444]	; (8002e64 <motor_task_init+0x294>)
 8002ca8:	4a73      	ldr	r2, [pc, #460]	; (8002e78 <motor_task_init+0x2a8>)
 8002caa:	651a      	str	r2, [r3, #80]	; 0x50
	 pos_params[1].integral_max = 8.0e6; // Accumulates difference of ticks at 4kHz, must be big
 8002cac:	4b6d      	ldr	r3, [pc, #436]	; (8002e64 <motor_task_init+0x294>)
 8002cae:	4a73      	ldr	r2, [pc, #460]	; (8002e7c <motor_task_init+0x2ac>)
 8002cb0:	641a      	str	r2, [r3, #64]	; 0x40
	 pos_params[1].integral_min = -8.0e6; // Accumulates difference of ticks at 4kHz, must be big
 8002cb2:	4b6c      	ldr	r3, [pc, #432]	; (8002e64 <motor_task_init+0x294>)
 8002cb4:	4a72      	ldr	r2, [pc, #456]	; (8002e80 <motor_task_init+0x2b0>)
 8002cb6:	645a      	str	r2, [r3, #68]	; 0x44
	 pos_params[1].ki = (0.4 * pos_params[1].cmd_max) / pos_params[1].integral_max; // Maximum is 40% of command
 8002cb8:	4b6a      	ldr	r3, [pc, #424]	; (8002e64 <motor_task_init+0x294>)
 8002cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fd fbeb 	bl	8000498 <__aeabi_f2d>
 8002cc2:	a35b      	add	r3, pc, #364	; (adr r3, 8002e30 <motor_task_init+0x260>)
 8002cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc8:	f7fd fc3e 	bl	8000548 <__aeabi_dmul>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	460c      	mov	r4, r1
 8002cd0:	4625      	mov	r5, r4
 8002cd2:	461c      	mov	r4, r3
 8002cd4:	4b63      	ldr	r3, [pc, #396]	; (8002e64 <motor_task_init+0x294>)
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fd fbdd 	bl	8000498 <__aeabi_f2d>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4620      	mov	r0, r4
 8002ce4:	4629      	mov	r1, r5
 8002ce6:	f7fd fd59 	bl	800079c <__aeabi_ddiv>
 8002cea:	4603      	mov	r3, r0
 8002cec:	460c      	mov	r4, r1
 8002cee:	4618      	mov	r0, r3
 8002cf0:	4621      	mov	r1, r4
 8002cf2:	f7fd ff01 	bl	8000af8 <__aeabi_d2f>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	4b5a      	ldr	r3, [pc, #360]	; (8002e64 <motor_task_init+0x294>)
 8002cfa:	659a      	str	r2, [r3, #88]	; 0x58

	 // speed control params
	 speed_params[0].kp = 50.0;
 8002cfc:	4b61      	ldr	r3, [pc, #388]	; (8002e84 <motor_task_init+0x2b4>)
 8002cfe:	4a62      	ldr	r2, [pc, #392]	; (8002e88 <motor_task_init+0x2b8>)
 8002d00:	625a      	str	r2, [r3, #36]	; 0x24
	 speed_params[0].kd = -100.0;
 8002d02:	4b60      	ldr	r3, [pc, #384]	; (8002e84 <motor_task_init+0x2b4>)
 8002d04:	4a61      	ldr	r2, [pc, #388]	; (8002e8c <motor_task_init+0x2bc>)
 8002d06:	62da      	str	r2, [r3, #44]	; 0x2c
	 speed_params[0].cmd_max = 10000.0;
 8002d08:	4b5e      	ldr	r3, [pc, #376]	; (8002e84 <motor_task_init+0x2b4>)
 8002d0a:	4a59      	ldr	r2, [pc, #356]	; (8002e70 <motor_task_init+0x2a0>)
 8002d0c:	619a      	str	r2, [r3, #24]
	 speed_params[0].cmd_min = -10000.0;
 8002d0e:	4b5d      	ldr	r3, [pc, #372]	; (8002e84 <motor_task_init+0x2b4>)
 8002d10:	4a58      	ldr	r2, [pc, #352]	; (8002e74 <motor_task_init+0x2a4>)
 8002d12:	61da      	str	r2, [r3, #28]
	 speed_params[0].speed_alpha = 0.95;
 8002d14:	4b5b      	ldr	r3, [pc, #364]	; (8002e84 <motor_task_init+0x2b4>)
 8002d16:	4a5e      	ldr	r2, [pc, #376]	; (8002e90 <motor_task_init+0x2c0>)
 8002d18:	621a      	str	r2, [r3, #32]
	 speed_params[0].integral_max = 8.0e6; // Accumulates difference of ticks at 4kHz, must be big
 8002d1a:	4b5a      	ldr	r3, [pc, #360]	; (8002e84 <motor_task_init+0x2b4>)
 8002d1c:	4a57      	ldr	r2, [pc, #348]	; (8002e7c <motor_task_init+0x2ac>)
 8002d1e:	611a      	str	r2, [r3, #16]
	 speed_params[0].integral_min = -8.0e6; // Accumulates difference of ticks at 4kHz, must be big
 8002d20:	4b58      	ldr	r3, [pc, #352]	; (8002e84 <motor_task_init+0x2b4>)
 8002d22:	4a57      	ldr	r2, [pc, #348]	; (8002e80 <motor_task_init+0x2b0>)
 8002d24:	615a      	str	r2, [r3, #20]
	 speed_params[0].ki = 0.0;
 8002d26:	4b57      	ldr	r3, [pc, #348]	; (8002e84 <motor_task_init+0x2b4>)
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	629a      	str	r2, [r3, #40]	; 0x28

 	 speed_params[1].kp = 50.0;
 8002d2e:	4b55      	ldr	r3, [pc, #340]	; (8002e84 <motor_task_init+0x2b4>)
 8002d30:	4a55      	ldr	r2, [pc, #340]	; (8002e88 <motor_task_init+0x2b8>)
 8002d32:	655a      	str	r2, [r3, #84]	; 0x54
	 speed_params[1].kd = -100.0;
 8002d34:	4b53      	ldr	r3, [pc, #332]	; (8002e84 <motor_task_init+0x2b4>)
 8002d36:	4a55      	ldr	r2, [pc, #340]	; (8002e8c <motor_task_init+0x2bc>)
 8002d38:	65da      	str	r2, [r3, #92]	; 0x5c
	 speed_params[1].cmd_max = 10000.0;
 8002d3a:	4b52      	ldr	r3, [pc, #328]	; (8002e84 <motor_task_init+0x2b4>)
 8002d3c:	4a4c      	ldr	r2, [pc, #304]	; (8002e70 <motor_task_init+0x2a0>)
 8002d3e:	649a      	str	r2, [r3, #72]	; 0x48
	 speed_params[1].cmd_min = -10000.0;
 8002d40:	4b50      	ldr	r3, [pc, #320]	; (8002e84 <motor_task_init+0x2b4>)
 8002d42:	4a4c      	ldr	r2, [pc, #304]	; (8002e74 <motor_task_init+0x2a4>)
 8002d44:	64da      	str	r2, [r3, #76]	; 0x4c
	 speed_params[1].speed_alpha = 0.95;
 8002d46:	4b4f      	ldr	r3, [pc, #316]	; (8002e84 <motor_task_init+0x2b4>)
 8002d48:	4a51      	ldr	r2, [pc, #324]	; (8002e90 <motor_task_init+0x2c0>)
 8002d4a:	651a      	str	r2, [r3, #80]	; 0x50
	 speed_params[1].integral_max = 8.0e6; // Accumulates difference of ticks at 4kHz, must be big
 8002d4c:	4b4d      	ldr	r3, [pc, #308]	; (8002e84 <motor_task_init+0x2b4>)
 8002d4e:	4a4b      	ldr	r2, [pc, #300]	; (8002e7c <motor_task_init+0x2ac>)
 8002d50:	641a      	str	r2, [r3, #64]	; 0x40
	 speed_params[1].integral_min = -8.0e6; // Accumulates difference of ticks at 4kHz, must be big
 8002d52:	4b4c      	ldr	r3, [pc, #304]	; (8002e84 <motor_task_init+0x2b4>)
 8002d54:	4a4a      	ldr	r2, [pc, #296]	; (8002e80 <motor_task_init+0x2b0>)
 8002d56:	645a      	str	r2, [r3, #68]	; 0x44
	 speed_params[1].ki = 0.0;
 8002d58:	4b4a      	ldr	r3, [pc, #296]	; (8002e84 <motor_task_init+0x2b4>)
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	659a      	str	r2, [r3, #88]	; 0x58

	 // current control params
	 cur_params[0].kp = 3.0;
 8002d60:	4b4c      	ldr	r3, [pc, #304]	; (8002e94 <motor_task_init+0x2c4>)
 8002d62:	4a4d      	ldr	r2, [pc, #308]	; (8002e98 <motor_task_init+0x2c8>)
 8002d64:	625a      	str	r2, [r3, #36]	; 0x24
	 cur_params[0].kd = 0.0;
 8002d66:	4b4b      	ldr	r3, [pc, #300]	; (8002e94 <motor_task_init+0x2c4>)
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	62da      	str	r2, [r3, #44]	; 0x2c
	 cur_params[0].cmd_max = 10000.0;
 8002d6e:	4b49      	ldr	r3, [pc, #292]	; (8002e94 <motor_task_init+0x2c4>)
 8002d70:	4a3f      	ldr	r2, [pc, #252]	; (8002e70 <motor_task_init+0x2a0>)
 8002d72:	619a      	str	r2, [r3, #24]
	 cur_params[0].cmd_min = -10000.0;
 8002d74:	4b47      	ldr	r3, [pc, #284]	; (8002e94 <motor_task_init+0x2c4>)
 8002d76:	4a3f      	ldr	r2, [pc, #252]	; (8002e74 <motor_task_init+0x2a4>)
 8002d78:	61da      	str	r2, [r3, #28]
	 cur_params[0].speed_alpha = 0.98;
 8002d7a:	4b46      	ldr	r3, [pc, #280]	; (8002e94 <motor_task_init+0x2c4>)
 8002d7c:	4a3e      	ldr	r2, [pc, #248]	; (8002e78 <motor_task_init+0x2a8>)
 8002d7e:	621a      	str	r2, [r3, #32]
	 cur_params[0].integral_max = 10000.0; // Accumulates difference of ticks at 4kHz, must be big
 8002d80:	4b44      	ldr	r3, [pc, #272]	; (8002e94 <motor_task_init+0x2c4>)
 8002d82:	4a3b      	ldr	r2, [pc, #236]	; (8002e70 <motor_task_init+0x2a0>)
 8002d84:	611a      	str	r2, [r3, #16]
	 cur_params[0].integral_min = -10000.0; // Accumulates difference of ticks at 4kHz, must be big
 8002d86:	4b43      	ldr	r3, [pc, #268]	; (8002e94 <motor_task_init+0x2c4>)
 8002d88:	4a3a      	ldr	r2, [pc, #232]	; (8002e74 <motor_task_init+0x2a4>)
 8002d8a:	615a      	str	r2, [r3, #20]
	 cur_params[0].ki = (0.95 * cur_params[0].cmd_max) / cur_params[0].integral_max;
 8002d8c:	4b41      	ldr	r3, [pc, #260]	; (8002e94 <motor_task_init+0x2c4>)
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fd fb81 	bl	8000498 <__aeabi_f2d>
 8002d96:	a328      	add	r3, pc, #160	; (adr r3, 8002e38 <motor_task_init+0x268>)
 8002d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9c:	f7fd fbd4 	bl	8000548 <__aeabi_dmul>
 8002da0:	4603      	mov	r3, r0
 8002da2:	460c      	mov	r4, r1
 8002da4:	4625      	mov	r5, r4
 8002da6:	461c      	mov	r4, r3
 8002da8:	4b3a      	ldr	r3, [pc, #232]	; (8002e94 <motor_task_init+0x2c4>)
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7fd fb73 	bl	8000498 <__aeabi_f2d>
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	4620      	mov	r0, r4
 8002db8:	4629      	mov	r1, r5
 8002dba:	f7fd fcef 	bl	800079c <__aeabi_ddiv>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	460c      	mov	r4, r1
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	f7fd fe97 	bl	8000af8 <__aeabi_d2f>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	4b31      	ldr	r3, [pc, #196]	; (8002e94 <motor_task_init+0x2c4>)
 8002dce:	629a      	str	r2, [r3, #40]	; 0x28

	 cur_params[1].kp = cur_params[0].kp;
 8002dd0:	4b30      	ldr	r3, [pc, #192]	; (8002e94 <motor_task_init+0x2c4>)
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	4a2f      	ldr	r2, [pc, #188]	; (8002e94 <motor_task_init+0x2c4>)
 8002dd6:	6553      	str	r3, [r2, #84]	; 0x54
	 cur_params[1].kd = cur_params[0].kd;
 8002dd8:	4b2e      	ldr	r3, [pc, #184]	; (8002e94 <motor_task_init+0x2c4>)
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ddc:	4a2d      	ldr	r2, [pc, #180]	; (8002e94 <motor_task_init+0x2c4>)
 8002dde:	65d3      	str	r3, [r2, #92]	; 0x5c
	 cur_params[1].cmd_max = cur_params[0].cmd_max;
 8002de0:	4b2c      	ldr	r3, [pc, #176]	; (8002e94 <motor_task_init+0x2c4>)
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	4a2b      	ldr	r2, [pc, #172]	; (8002e94 <motor_task_init+0x2c4>)
 8002de6:	6493      	str	r3, [r2, #72]	; 0x48
	 cur_params[1].cmd_min = cur_params[0].cmd_min;
 8002de8:	4b2a      	ldr	r3, [pc, #168]	; (8002e94 <motor_task_init+0x2c4>)
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	4a29      	ldr	r2, [pc, #164]	; (8002e94 <motor_task_init+0x2c4>)
 8002dee:	64d3      	str	r3, [r2, #76]	; 0x4c
	 cur_params[1].speed_alpha = cur_params[0].speed_alpha;
 8002df0:	4b28      	ldr	r3, [pc, #160]	; (8002e94 <motor_task_init+0x2c4>)
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	4a27      	ldr	r2, [pc, #156]	; (8002e94 <motor_task_init+0x2c4>)
 8002df6:	6513      	str	r3, [r2, #80]	; 0x50
	 cur_params[1].integral_max = cur_params[0].integral_max;
 8002df8:	4b26      	ldr	r3, [pc, #152]	; (8002e94 <motor_task_init+0x2c4>)
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	4a25      	ldr	r2, [pc, #148]	; (8002e94 <motor_task_init+0x2c4>)
 8002dfe:	6413      	str	r3, [r2, #64]	; 0x40
	 cur_params[1].integral_min = cur_params[0].integral_min;
 8002e00:	4b24      	ldr	r3, [pc, #144]	; (8002e94 <motor_task_init+0x2c4>)
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	4a23      	ldr	r2, [pc, #140]	; (8002e94 <motor_task_init+0x2c4>)
 8002e06:	6453      	str	r3, [r2, #68]	; 0x44
	 cur_params[1].ki = cur_params[0].ki;
 8002e08:	4b22      	ldr	r3, [pc, #136]	; (8002e94 <motor_task_init+0x2c4>)
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0c:	4a21      	ldr	r2, [pc, #132]	; (8002e94 <motor_task_init+0x2c4>)
 8002e0e:	6593      	str	r3, [r2, #88]	; 0x58

	 motors[0].reverse_direction = true;
 8002e10:	4b22      	ldr	r3, [pc, #136]	; (8002e9c <motor_task_init+0x2cc>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	 motors[0].duty = 0.0;
 8002e18:	4b20      	ldr	r3, [pc, #128]	; (8002e9c <motor_task_init+0x2cc>)
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	60da      	str	r2, [r3, #12]
	 motors[0].ticks_per_rev = TICKS_PER_REVOLUTION_DEFAULT;
 8002e20:	4b1e      	ldr	r3, [pc, #120]	; (8002e9c <motor_task_init+0x2cc>)
 8002e22:	f241 0268 	movw	r2, #4200	; 0x1068
 8002e26:	629a      	str	r2, [r3, #40]	; 0x28
 8002e28:	e03a      	b.n	8002ea0 <motor_task_init+0x2d0>
 8002e2a:	bf00      	nop
 8002e2c:	f3af 8000 	nop.w
 8002e30:	9999999a 	.word	0x9999999a
 8002e34:	3fd99999 	.word	0x3fd99999
 8002e38:	66666666 	.word	0x66666666
 8002e3c:	3fee6666 	.word	0x3fee6666
 8002e40:	20000d88 	.word	0x20000d88
 8002e44:	20000f24 	.word	0x20000f24
 8002e48:	3d6147ae 	.word	0x3d6147ae
 8002e4c:	3d851eb8 	.word	0x3d851eb8
 8002e50:	20000f0c 	.word	0x20000f0c
 8002e54:	41700000 	.word	0x41700000
 8002e58:	be4ccccd 	.word	0xbe4ccccd
 8002e5c:	44160000 	.word	0x44160000
 8002e60:	43160000 	.word	0x43160000
 8002e64:	20000dec 	.word	0x20000dec
 8002e68:	437a0000 	.word	0x437a0000
 8002e6c:	c59c4000 	.word	0xc59c4000
 8002e70:	461c4000 	.word	0x461c4000
 8002e74:	c61c4000 	.word	0xc61c4000
 8002e78:	3f7ae148 	.word	0x3f7ae148
 8002e7c:	4af42400 	.word	0x4af42400
 8002e80:	caf42400 	.word	0xcaf42400
 8002e84:	20000e4c 	.word	0x20000e4c
 8002e88:	42480000 	.word	0x42480000
 8002e8c:	c2c80000 	.word	0xc2c80000
 8002e90:	3f733333 	.word	0x3f733333
 8002e94:	20000eac 	.word	0x20000eac
 8002e98:	40400000 	.word	0x40400000
 8002e9c:	20000d8c 	.word	0x20000d8c
	 motors[1].reverse_direction = false;
 8002ea0:	4b3a      	ldr	r3, [pc, #232]	; (8002f8c <motor_task_init+0x3bc>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	 motors[1].duty = 0.0;
 8002ea8:	4b38      	ldr	r3, [pc, #224]	; (8002f8c <motor_task_init+0x3bc>)
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	63da      	str	r2, [r3, #60]	; 0x3c
	 motors[1].ticks_per_rev = TICKS_PER_REVOLUTION_DEFAULT;
 8002eb0:	4b36      	ldr	r3, [pc, #216]	; (8002f8c <motor_task_init+0x3bc>)
 8002eb2:	f241 0268 	movw	r2, #4200	; 0x1068
 8002eb6:	659a      	str	r2, [r3, #88]	; 0x58

	 motor_tele_timer_handle = xTimerCreate(
 8002eb8:	4b35      	ldr	r3, [pc, #212]	; (8002f90 <motor_task_init+0x3c0>)
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	2114      	movs	r1, #20
 8002ec2:	4834      	ldr	r0, [pc, #208]	; (8002f94 <motor_task_init+0x3c4>)
 8002ec4:	f006 fa8a 	bl	80093dc <xTimerCreate>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	4b33      	ldr	r3, [pc, #204]	; (8002f98 <motor_task_init+0x3c8>)
 8002ecc:	601a      	str	r2, [r3, #0]
	 		 pdMS_TO_TICKS(20),
	 		 pdTRUE,
	 		 NULL,
	 		 vMotorTelemetryTimerCallback);

	 if(motor_tele_timer_handle)
 8002ece:	4b32      	ldr	r3, [pc, #200]	; (8002f98 <motor_task_init+0x3c8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00b      	beq.n	8002eee <motor_task_init+0x31e>
	 {
	 	 xTimerStart(motor_tele_timer_handle, 10);
 8002ed6:	4b30      	ldr	r3, [pc, #192]	; (8002f98 <motor_task_init+0x3c8>)
 8002ed8:	681c      	ldr	r4, [r3, #0]
 8002eda:	f005 fd33 	bl	8008944 <xTaskGetTickCount>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	230a      	movs	r3, #10
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	4620      	mov	r0, r4
 8002eea:	f006 fad3 	bl	8009494 <xTimerGenericCommand>
	 }

	 // Enable PWM channels for lights and motor driving
	 TIM2->CR1 |= TIM_CR1_CEN;
 8002eee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	6013      	str	r3, [r2, #0]
	 TIM13->CR1 |= TIM_CR1_CEN;
 8002efe:	4b27      	ldr	r3, [pc, #156]	; (8002f9c <motor_task_init+0x3cc>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a26      	ldr	r2, [pc, #152]	; (8002f9c <motor_task_init+0x3cc>)
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	6013      	str	r3, [r2, #0]
	 TIM14->CR1 |= TIM_CR1_CEN;
 8002f0a:	4b25      	ldr	r3, [pc, #148]	; (8002fa0 <motor_task_init+0x3d0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a24      	ldr	r2, [pc, #144]	; (8002fa0 <motor_task_init+0x3d0>)
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	6013      	str	r3, [r2, #0]
	 TIM4->CR1 |= TIM_CR1_CEN; // Control loop timer
 8002f16:	4b23      	ldr	r3, [pc, #140]	; (8002fa4 <motor_task_init+0x3d4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a22      	ldr	r2, [pc, #136]	; (8002fa4 <motor_task_init+0x3d4>)
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	6013      	str	r3, [r2, #0]

	 TIM2->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E);
 8002f22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f2c:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8002f30:	f043 0311 	orr.w	r3, r3, #17
 8002f34:	6213      	str	r3, [r2, #32]
	 TIM13->CCER |= (TIM_CCER_CC1E);
 8002f36:	4b19      	ldr	r3, [pc, #100]	; (8002f9c <motor_task_init+0x3cc>)
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	4a18      	ldr	r2, [pc, #96]	; (8002f9c <motor_task_init+0x3cc>)
 8002f3c:	f043 0301 	orr.w	r3, r3, #1
 8002f40:	6213      	str	r3, [r2, #32]
	 TIM14->CCER |= (TIM_CCER_CC1E);
 8002f42:	4b17      	ldr	r3, [pc, #92]	; (8002fa0 <motor_task_init+0x3d0>)
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	4a16      	ldr	r2, [pc, #88]	; (8002fa0 <motor_task_init+0x3d0>)
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	6213      	str	r3, [r2, #32]
	 TIM4->CCER |= (TIM_CCER_CC1E);
 8002f4e:	4b15      	ldr	r3, [pc, #84]	; (8002fa4 <motor_task_init+0x3d4>)
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	4a14      	ldr	r2, [pc, #80]	; (8002fa4 <motor_task_init+0x3d4>)
 8002f54:	f043 0301 	orr.w	r3, r3, #1
 8002f58:	6213      	str	r3, [r2, #32]

	 TIM4->DIER |= (TIM_DIER_CC1IE);
 8002f5a:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <motor_task_init+0x3d4>)
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	4a11      	ldr	r2, [pc, #68]	; (8002fa4 <motor_task_init+0x3d4>)
 8002f60:	f043 0302 	orr.w	r3, r3, #2
 8002f64:	60d3      	str	r3, [r2, #12]

	 // Enable encoder timers
	 TIM1->CR1 |= TIM_CR1_CEN;
 8002f66:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <motor_task_init+0x3d8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a0f      	ldr	r2, [pc, #60]	; (8002fa8 <motor_task_init+0x3d8>)
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	6013      	str	r3, [r2, #0]
	 TIM3->CR1 |= TIM_CR1_CEN;
 8002f72:	4b0e      	ldr	r3, [pc, #56]	; (8002fac <motor_task_init+0x3dc>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a0d      	ldr	r2, [pc, #52]	; (8002fac <motor_task_init+0x3dc>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	6013      	str	r3, [r2, #0]

	  vTaskDelay(pdMS_TO_TICKS(2500));
 8002f7e:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002f82:	f005 fb9d 	bl	80086c0 <vTaskDelay>
 }
 8002f86:	bf00      	nop
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f8c:	20000d8c 	.word	0x20000d8c
 8002f90:	0800247d 	.word	0x0800247d
 8002f94:	0800d680 	.word	0x0800d680
 8002f98:	20000d84 	.word	0x20000d84
 8002f9c:	40001c00 	.word	0x40001c00
 8002fa0:	40002000 	.word	0x40002000
 8002fa4:	40000800 	.word	0x40000800
 8002fa8:	40010000 	.word	0x40010000
 8002fac:	40000400 	.word	0x40000400

08002fb0 <motor_task>:

 void motor_task(void)
 {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
	 vControlTimerCallback();
 8002fb4:	f7ff fc24 	bl	8002800 <vControlTimerCallback>
 }
 8002fb8:	bf00      	nop
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <set_control_mode>:
 *
 *	\param mode The controller mode
 *	\param index The motor index
 */
 void set_control_mode(CONTROL_TYPE mode, uint8_t index)
 {
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	460a      	mov	r2, r1
 8002fc6:	71fb      	strb	r3, [r7, #7]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	71bb      	strb	r3, [r7, #6]
	if(index >= NUMBER_MOTORS)
 8002fcc:	79bb      	ldrb	r3, [r7, #6]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d804      	bhi.n	8002fdc <set_control_mode+0x20>
	{
		return;
	}
	control_type[index] = mode;
 8002fd2:	79bb      	ldrb	r3, [r7, #6]
 8002fd4:	4904      	ldr	r1, [pc, #16]	; (8002fe8 <set_control_mode+0x2c>)
 8002fd6:	79fa      	ldrb	r2, [r7, #7]
 8002fd8:	54ca      	strb	r2, [r1, r3]
 8002fda:	e000      	b.n	8002fde <set_control_mode+0x22>
		return;
 8002fdc:	bf00      	nop
 }
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	20000d88 	.word	0x20000d88

08002fec <set_motor_position>:
 *
 *	\param rotations_deg The desired position
 *	\param index The motor index
 */
 void set_motor_position(float rotations_deg, uint8_t index)
 {
 8002fec:	b5b0      	push	{r4, r5, r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	ed87 0a01 	vstr	s0, [r7, #4]
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	70fb      	strb	r3, [r7, #3]
	if(index >= NUMBER_MOTORS)
 8002ffa:	78fb      	ldrb	r3, [r7, #3]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d838      	bhi.n	8003072 <set_motor_position+0x86>
	{
		return;
	}
	motors[index].desired_position_deg = rotations_deg;
 8003000:	78fa      	ldrb	r2, [r7, #3]
 8003002:	491e      	ldr	r1, [pc, #120]	; (800307c <set_motor_position+0x90>)
 8003004:	4613      	mov	r3, r2
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	4413      	add	r3, r2
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	440b      	add	r3, r1
 800300e:	3304      	adds	r3, #4
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	601a      	str	r2, [r3, #0]
	motors[index].ticks_setpoint = (int32_t) (motors[index].ticks_per_rev) * (rotations_deg / 360.0);
 8003014:	78fa      	ldrb	r2, [r7, #3]
 8003016:	4919      	ldr	r1, [pc, #100]	; (800307c <set_motor_position+0x90>)
 8003018:	4613      	mov	r3, r2
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	4413      	add	r3, r2
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	440b      	add	r3, r1
 8003022:	3328      	adds	r3, #40	; 0x28
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7fd fa24 	bl	8000474 <__aeabi_i2d>
 800302c:	4604      	mov	r4, r0
 800302e:	460d      	mov	r5, r1
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7fd fa31 	bl	8000498 <__aeabi_f2d>
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	4b11      	ldr	r3, [pc, #68]	; (8003080 <set_motor_position+0x94>)
 800303c:	f7fd fbae 	bl	800079c <__aeabi_ddiv>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4620      	mov	r0, r4
 8003046:	4629      	mov	r1, r5
 8003048:	f7fd fa7e 	bl	8000548 <__aeabi_dmul>
 800304c:	4603      	mov	r3, r0
 800304e:	460c      	mov	r4, r1
 8003050:	461a      	mov	r2, r3
 8003052:	4623      	mov	r3, r4
 8003054:	78fc      	ldrb	r4, [r7, #3]
 8003056:	4610      	mov	r0, r2
 8003058:	4619      	mov	r1, r3
 800305a:	f7fd fd25 	bl	8000aa8 <__aeabi_d2iz>
 800305e:	4601      	mov	r1, r0
 8003060:	4a06      	ldr	r2, [pc, #24]	; (800307c <set_motor_position+0x90>)
 8003062:	4623      	mov	r3, r4
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	4423      	add	r3, r4
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	4413      	add	r3, r2
 800306c:	3324      	adds	r3, #36	; 0x24
 800306e:	6019      	str	r1, [r3, #0]
 8003070:	e000      	b.n	8003074 <set_motor_position+0x88>
		return;
 8003072:	bf00      	nop
 }
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bdb0      	pop	{r4, r5, r7, pc}
 800307a:	bf00      	nop
 800307c:	20000d8c 	.word	0x20000d8c
 8003080:	40768000 	.word	0x40768000

08003084 <get_motor_position>:
 *	\brief Gets the motor current position
 *
 *	\param index The motor index
 */
 float get_motor_position(uint8_t index)
 {
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	71fb      	strb	r3, [r7, #7]
	if(index >= NUMBER_MOTORS)
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d902      	bls.n	800309a <get_motor_position+0x16>
	{
		return 0.0;
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	e030      	b.n	80030fc <get_motor_position+0x78>
	}
	motors[index].current_position_deg = ((float) motors[index].ticks_count / (float) motors[index].ticks_per_rev) * 360.0;
 800309a:	79fa      	ldrb	r2, [r7, #7]
 800309c:	491c      	ldr	r1, [pc, #112]	; (8003110 <get_motor_position+0x8c>)
 800309e:	4613      	mov	r3, r2
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	4413      	add	r3, r2
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	440b      	add	r3, r1
 80030a8:	3320      	adds	r3, #32
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	ee07 3a90 	vmov	s15, r3
 80030b0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80030b4:	79fa      	ldrb	r2, [r7, #7]
 80030b6:	4916      	ldr	r1, [pc, #88]	; (8003110 <get_motor_position+0x8c>)
 80030b8:	4613      	mov	r3, r2
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	4413      	add	r3, r2
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	440b      	add	r3, r1
 80030c2:	3328      	adds	r3, #40	; 0x28
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	ee07 3a90 	vmov	s15, r3
 80030ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030d2:	79fa      	ldrb	r2, [r7, #7]
 80030d4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003114 <get_motor_position+0x90>
 80030d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030dc:	490c      	ldr	r1, [pc, #48]	; (8003110 <get_motor_position+0x8c>)
 80030de:	4613      	mov	r3, r2
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	4413      	add	r3, r2
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	440b      	add	r3, r1
 80030e8:	edc3 7a00 	vstr	s15, [r3]
	return motors[index].current_position_deg;
 80030ec:	79fa      	ldrb	r2, [r7, #7]
 80030ee:	4908      	ldr	r1, [pc, #32]	; (8003110 <get_motor_position+0x8c>)
 80030f0:	4613      	mov	r3, r2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4413      	add	r3, r2
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	440b      	add	r3, r1
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	ee07 3a90 	vmov	s15, r3
 }
 8003100:	eeb0 0a67 	vmov.f32	s0, s15
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	20000d8c 	.word	0x20000d8c
 8003114:	43b40000 	.word	0x43b40000

08003118 <set_motor_speed>:
 *
 *	\param speed The desired speed TODO units?
 *	\param index The motor index
 */
 void set_motor_speed(int32_t speed, uint8_t index)
 {
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	460b      	mov	r3, r1
 8003122:	70fb      	strb	r3, [r7, #3]
	if(index >= NUMBER_MOTORS)
 8003124:	78fb      	ldrb	r3, [r7, #3]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d80a      	bhi.n	8003140 <set_motor_speed+0x28>
	{
		return;
	}
	motors[index].speed_setpoint = speed;
 800312a:	78fa      	ldrb	r2, [r7, #3]
 800312c:	4907      	ldr	r1, [pc, #28]	; (800314c <set_motor_speed+0x34>)
 800312e:	4613      	mov	r3, r2
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4413      	add	r3, r2
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	440b      	add	r3, r1
 8003138:	3314      	adds	r3, #20
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	e000      	b.n	8003142 <set_motor_speed+0x2a>
		return;
 8003140:	bf00      	nop
 }
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	20000d8c 	.word	0x20000d8c

08003150 <set_motor_duty>:
 *
 *	\param speed The duty [-1,1]
 *	\param index The motor index
 */
 void set_motor_duty(float duty, uint8_t index)
 {
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	ed87 0a01 	vstr	s0, [r7, #4]
 800315a:	4603      	mov	r3, r0
 800315c:	70fb      	strb	r3, [r7, #3]
	if(index >= NUMBER_MOTORS)
 800315e:	78fb      	ldrb	r3, [r7, #3]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d821      	bhi.n	80031a8 <set_motor_duty+0x58>
	{
		return;
	}
	if(duty > 1.0){duty = 1.0;}
 8003164:	edd7 7a01 	vldr	s15, [r7, #4]
 8003168:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800316c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003174:	dd02      	ble.n	800317c <set_motor_duty+0x2c>
 8003176:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800317a:	607b      	str	r3, [r7, #4]
	if(duty < -1.0){duty = -1.0;}
 800317c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003180:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003184:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800318c:	d501      	bpl.n	8003192 <set_motor_duty+0x42>
 800318e:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <set_motor_duty+0x64>)
 8003190:	607b      	str	r3, [r7, #4]

	motors[index].duty = duty;
 8003192:	78fa      	ldrb	r2, [r7, #3]
 8003194:	4908      	ldr	r1, [pc, #32]	; (80031b8 <set_motor_duty+0x68>)
 8003196:	4613      	mov	r3, r2
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	4413      	add	r3, r2
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	440b      	add	r3, r1
 80031a0:	330c      	adds	r3, #12
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	e000      	b.n	80031aa <set_motor_duty+0x5a>
		return;
 80031a8:	bf00      	nop
 }
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	bf800000 	.word	0xbf800000
 80031b8:	20000d8c 	.word	0x20000d8c

080031bc <set_control_params_kp_min_max>:
 *  \param alpha The speed filter parameter
 *  \param cmd_min The minimum command scaled to [0-1] of pwm period
 *  \param cmd_max The maximum command scaled to [0-1] of pwm period
 */
 void set_control_params_kp_min_max(uint8_t index, uint8_t ctrl_index, float kp, float kd, float alpha, float cmd_min, float cmd_max)
 {
 80031bc:	b480      	push	{r7}
 80031be:	b087      	sub	sp, #28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	460a      	mov	r2, r1
 80031c6:	ed87 0a04 	vstr	s0, [r7, #16]
 80031ca:	edc7 0a03 	vstr	s1, [r7, #12]
 80031ce:	ed87 1a02 	vstr	s2, [r7, #8]
 80031d2:	edc7 1a01 	vstr	s3, [r7, #4]
 80031d6:	ed87 2a00 	vstr	s4, [r7]
 80031da:	75fb      	strb	r3, [r7, #23]
 80031dc:	4613      	mov	r3, r2
 80031de:	75bb      	strb	r3, [r7, #22]
	if(index >= NUMBER_MOTORS)
 80031e0:	7dfb      	ldrb	r3, [r7, #23]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	f200 80d0 	bhi.w	8003388 <set_control_params_kp_min_max+0x1cc>
	{
		return;
	}
	if(ctrl_index > 2)
 80031e8:	7dbb      	ldrb	r3, [r7, #22]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	f200 80ce 	bhi.w	800338c <set_control_params_kp_min_max+0x1d0>
	{
		return;
	}

	if(ctrl_index == 0)
 80031f0:	7dbb      	ldrb	r3, [r7, #22]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d140      	bne.n	8003278 <set_control_params_kp_min_max+0xbc>
	{
		pos_params[index].kp = kp;
 80031f6:	7dfa      	ldrb	r2, [r7, #23]
 80031f8:	4967      	ldr	r1, [pc, #412]	; (8003398 <set_control_params_kp_min_max+0x1dc>)
 80031fa:	4613      	mov	r3, r2
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	4413      	add	r3, r2
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	440b      	add	r3, r1
 8003204:	3324      	adds	r3, #36	; 0x24
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	601a      	str	r2, [r3, #0]
		pos_params[index].kd = kd;
 800320a:	7dfa      	ldrb	r2, [r7, #23]
 800320c:	4962      	ldr	r1, [pc, #392]	; (8003398 <set_control_params_kp_min_max+0x1dc>)
 800320e:	4613      	mov	r3, r2
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	4413      	add	r3, r2
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	440b      	add	r3, r1
 8003218:	332c      	adds	r3, #44	; 0x2c
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	601a      	str	r2, [r3, #0]
		pos_params[index].cmd_max = cmd_max * PWM_PERIOD;
 800321e:	7dfa      	ldrb	r2, [r7, #23]
 8003220:	edd7 7a00 	vldr	s15, [r7]
 8003224:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800339c <set_control_params_kp_min_max+0x1e0>
 8003228:	ee67 7a87 	vmul.f32	s15, s15, s14
 800322c:	495a      	ldr	r1, [pc, #360]	; (8003398 <set_control_params_kp_min_max+0x1dc>)
 800322e:	4613      	mov	r3, r2
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	4413      	add	r3, r2
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	440b      	add	r3, r1
 8003238:	3318      	adds	r3, #24
 800323a:	edc3 7a00 	vstr	s15, [r3]
		pos_params[index].cmd_min = -cmd_min * PWM_PERIOD;
 800323e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003242:	eef1 7a67 	vneg.f32	s15, s15
 8003246:	7dfa      	ldrb	r2, [r7, #23]
 8003248:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800339c <set_control_params_kp_min_max+0x1e0>
 800324c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003250:	4951      	ldr	r1, [pc, #324]	; (8003398 <set_control_params_kp_min_max+0x1dc>)
 8003252:	4613      	mov	r3, r2
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	4413      	add	r3, r2
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	440b      	add	r3, r1
 800325c:	331c      	adds	r3, #28
 800325e:	edc3 7a00 	vstr	s15, [r3]
		pos_params[index].speed_alpha = alpha;
 8003262:	7dfa      	ldrb	r2, [r7, #23]
 8003264:	494c      	ldr	r1, [pc, #304]	; (8003398 <set_control_params_kp_min_max+0x1dc>)
 8003266:	4613      	mov	r3, r2
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	4413      	add	r3, r2
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	440b      	add	r3, r1
 8003270:	3320      	adds	r3, #32
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	e08a      	b.n	800338e <set_control_params_kp_min_max+0x1d2>
	} else if(ctrl_index == 1)
 8003278:	7dbb      	ldrb	r3, [r7, #22]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d140      	bne.n	8003300 <set_control_params_kp_min_max+0x144>
	{
		speed_params[index].kp = kp;
 800327e:	7dfa      	ldrb	r2, [r7, #23]
 8003280:	4947      	ldr	r1, [pc, #284]	; (80033a0 <set_control_params_kp_min_max+0x1e4>)
 8003282:	4613      	mov	r3, r2
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	4413      	add	r3, r2
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	440b      	add	r3, r1
 800328c:	3324      	adds	r3, #36	; 0x24
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	601a      	str	r2, [r3, #0]
		speed_params[index].kd = kd;
 8003292:	7dfa      	ldrb	r2, [r7, #23]
 8003294:	4942      	ldr	r1, [pc, #264]	; (80033a0 <set_control_params_kp_min_max+0x1e4>)
 8003296:	4613      	mov	r3, r2
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	4413      	add	r3, r2
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	440b      	add	r3, r1
 80032a0:	332c      	adds	r3, #44	; 0x2c
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	601a      	str	r2, [r3, #0]
		speed_params[index].cmd_max = cmd_max * PWM_PERIOD;
 80032a6:	7dfa      	ldrb	r2, [r7, #23]
 80032a8:	edd7 7a00 	vldr	s15, [r7]
 80032ac:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800339c <set_control_params_kp_min_max+0x1e0>
 80032b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032b4:	493a      	ldr	r1, [pc, #232]	; (80033a0 <set_control_params_kp_min_max+0x1e4>)
 80032b6:	4613      	mov	r3, r2
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	4413      	add	r3, r2
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	440b      	add	r3, r1
 80032c0:	3318      	adds	r3, #24
 80032c2:	edc3 7a00 	vstr	s15, [r3]
		speed_params[index].cmd_min = -cmd_min * PWM_PERIOD;
 80032c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80032ca:	eef1 7a67 	vneg.f32	s15, s15
 80032ce:	7dfa      	ldrb	r2, [r7, #23]
 80032d0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800339c <set_control_params_kp_min_max+0x1e0>
 80032d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032d8:	4931      	ldr	r1, [pc, #196]	; (80033a0 <set_control_params_kp_min_max+0x1e4>)
 80032da:	4613      	mov	r3, r2
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	4413      	add	r3, r2
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	440b      	add	r3, r1
 80032e4:	331c      	adds	r3, #28
 80032e6:	edc3 7a00 	vstr	s15, [r3]
		speed_params[index].speed_alpha = alpha;
 80032ea:	7dfa      	ldrb	r2, [r7, #23]
 80032ec:	492c      	ldr	r1, [pc, #176]	; (80033a0 <set_control_params_kp_min_max+0x1e4>)
 80032ee:	4613      	mov	r3, r2
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	4413      	add	r3, r2
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	440b      	add	r3, r1
 80032f8:	3320      	adds	r3, #32
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	e046      	b.n	800338e <set_control_params_kp_min_max+0x1d2>
	} else if(ctrl_index == 2)
 8003300:	7dbb      	ldrb	r3, [r7, #22]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d143      	bne.n	800338e <set_control_params_kp_min_max+0x1d2>
	{
		cur_params[index].kp = kp;
 8003306:	7dfa      	ldrb	r2, [r7, #23]
 8003308:	4926      	ldr	r1, [pc, #152]	; (80033a4 <set_control_params_kp_min_max+0x1e8>)
 800330a:	4613      	mov	r3, r2
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	4413      	add	r3, r2
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	440b      	add	r3, r1
 8003314:	3324      	adds	r3, #36	; 0x24
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	601a      	str	r2, [r3, #0]
		cur_params[index].kd = kd;
 800331a:	7dfa      	ldrb	r2, [r7, #23]
 800331c:	4921      	ldr	r1, [pc, #132]	; (80033a4 <set_control_params_kp_min_max+0x1e8>)
 800331e:	4613      	mov	r3, r2
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	4413      	add	r3, r2
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	440b      	add	r3, r1
 8003328:	332c      	adds	r3, #44	; 0x2c
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	601a      	str	r2, [r3, #0]
		cur_params[index].cmd_max = cmd_max * PWM_PERIOD;
 800332e:	7dfa      	ldrb	r2, [r7, #23]
 8003330:	edd7 7a00 	vldr	s15, [r7]
 8003334:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800339c <set_control_params_kp_min_max+0x1e0>
 8003338:	ee67 7a87 	vmul.f32	s15, s15, s14
 800333c:	4919      	ldr	r1, [pc, #100]	; (80033a4 <set_control_params_kp_min_max+0x1e8>)
 800333e:	4613      	mov	r3, r2
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	4413      	add	r3, r2
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	440b      	add	r3, r1
 8003348:	3318      	adds	r3, #24
 800334a:	edc3 7a00 	vstr	s15, [r3]
		cur_params[index].cmd_min = -cmd_min * PWM_PERIOD;
 800334e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003352:	eef1 7a67 	vneg.f32	s15, s15
 8003356:	7dfa      	ldrb	r2, [r7, #23]
 8003358:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800339c <set_control_params_kp_min_max+0x1e0>
 800335c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003360:	4910      	ldr	r1, [pc, #64]	; (80033a4 <set_control_params_kp_min_max+0x1e8>)
 8003362:	4613      	mov	r3, r2
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	4413      	add	r3, r2
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	440b      	add	r3, r1
 800336c:	331c      	adds	r3, #28
 800336e:	edc3 7a00 	vstr	s15, [r3]
		cur_params[index].speed_alpha = alpha;
 8003372:	7dfa      	ldrb	r2, [r7, #23]
 8003374:	490b      	ldr	r1, [pc, #44]	; (80033a4 <set_control_params_kp_min_max+0x1e8>)
 8003376:	4613      	mov	r3, r2
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	4413      	add	r3, r2
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	440b      	add	r3, r1
 8003380:	3320      	adds	r3, #32
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	e002      	b.n	800338e <set_control_params_kp_min_max+0x1d2>
		return;
 8003388:	bf00      	nop
 800338a:	e000      	b.n	800338e <set_control_params_kp_min_max+0x1d2>
		return;
 800338c:	bf00      	nop
	}
 }
 800338e:	371c      	adds	r7, #28
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	20000dec 	.word	0x20000dec
 800339c:	461c4000 	.word	0x461c4000
 80033a0:	20000e4c 	.word	0x20000e4c
 80033a4:	20000eac 	.word	0x20000eac

080033a8 <set_control_params_ki>:
 *	\param index The motor index
 *  \param ctrl_index Which controller to set, 0-position, 1-speed, 2-current
 *  \param ki The integral gain
 */
 void set_control_params_ki(uint8_t index, uint8_t ctrl_index, float ki)
 {
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	460a      	mov	r2, r1
 80033b2:	ed87 0a00 	vstr	s0, [r7]
 80033b6:	71fb      	strb	r3, [r7, #7]
 80033b8:	4613      	mov	r3, r2
 80033ba:	71bb      	strb	r3, [r7, #6]
	if(index >= NUMBER_MOTORS)
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d82c      	bhi.n	800341c <set_control_params_ki+0x74>
	{
		return;
	}
	if(ctrl_index > 2)
 80033c2:	79bb      	ldrb	r3, [r7, #6]
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d82b      	bhi.n	8003420 <set_control_params_ki+0x78>
	{
		return;
	}

	if(ctrl_index == 0)
 80033c8:	79bb      	ldrb	r3, [r7, #6]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10a      	bne.n	80033e4 <set_control_params_ki+0x3c>
	{
		pos_params[index].ki = ki;
 80033ce:	79fa      	ldrb	r2, [r7, #7]
 80033d0:	4916      	ldr	r1, [pc, #88]	; (800342c <set_control_params_ki+0x84>)
 80033d2:	4613      	mov	r3, r2
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	4413      	add	r3, r2
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	440b      	add	r3, r1
 80033dc:	3328      	adds	r3, #40	; 0x28
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	e01e      	b.n	8003422 <set_control_params_ki+0x7a>
	} else if(ctrl_index == 1)
 80033e4:	79bb      	ldrb	r3, [r7, #6]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d10a      	bne.n	8003400 <set_control_params_ki+0x58>
	{
		speed_params[index].ki = ki;
 80033ea:	79fa      	ldrb	r2, [r7, #7]
 80033ec:	4910      	ldr	r1, [pc, #64]	; (8003430 <set_control_params_ki+0x88>)
 80033ee:	4613      	mov	r3, r2
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	4413      	add	r3, r2
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	440b      	add	r3, r1
 80033f8:	3328      	adds	r3, #40	; 0x28
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	e010      	b.n	8003422 <set_control_params_ki+0x7a>
	} else if(ctrl_index == 2)
 8003400:	79bb      	ldrb	r3, [r7, #6]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d10d      	bne.n	8003422 <set_control_params_ki+0x7a>
	{
		cur_params[index].ki = ki;
 8003406:	79fa      	ldrb	r2, [r7, #7]
 8003408:	490a      	ldr	r1, [pc, #40]	; (8003434 <set_control_params_ki+0x8c>)
 800340a:	4613      	mov	r3, r2
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	4413      	add	r3, r2
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	440b      	add	r3, r1
 8003414:	3328      	adds	r3, #40	; 0x28
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	e002      	b.n	8003422 <set_control_params_ki+0x7a>
		return;
 800341c:	bf00      	nop
 800341e:	e000      	b.n	8003422 <set_control_params_ki+0x7a>
		return;
 8003420:	bf00      	nop
	}
 }
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	20000dec 	.word	0x20000dec
 8003430:	20000e4c 	.word	0x20000e4c
 8003434:	20000eac 	.word	0x20000eac

08003438 <set_control_params_int_max>:
 *	\param index The motor index
 *  \param ctrl_index Which controller to set, 0-position, 1-speed, 2-current
 *  \param int_max The maximum integral windup
 */
 void set_control_params_int_max(uint8_t index, uint8_t ctrl_index, float int_max)
 {
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	460a      	mov	r2, r1
 8003442:	ed87 0a00 	vstr	s0, [r7]
 8003446:	71fb      	strb	r3, [r7, #7]
 8003448:	4613      	mov	r3, r2
 800344a:	71bb      	strb	r3, [r7, #6]
	if(index >= NUMBER_MOTORS)
 800344c:	79fb      	ldrb	r3, [r7, #7]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d82c      	bhi.n	80034ac <set_control_params_int_max+0x74>
	{
		return;
	}
	if(ctrl_index > 2)
 8003452:	79bb      	ldrb	r3, [r7, #6]
 8003454:	2b02      	cmp	r3, #2
 8003456:	d82b      	bhi.n	80034b0 <set_control_params_int_max+0x78>
	{
		return;
	}

	if(ctrl_index == 0)
 8003458:	79bb      	ldrb	r3, [r7, #6]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10a      	bne.n	8003474 <set_control_params_int_max+0x3c>
	{
		pos_params[index].integral_max = int_max;
 800345e:	79fa      	ldrb	r2, [r7, #7]
 8003460:	4916      	ldr	r1, [pc, #88]	; (80034bc <set_control_params_int_max+0x84>)
 8003462:	4613      	mov	r3, r2
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	4413      	add	r3, r2
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	440b      	add	r3, r1
 800346c:	3310      	adds	r3, #16
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	e01e      	b.n	80034b2 <set_control_params_int_max+0x7a>
	} else if(ctrl_index == 1)
 8003474:	79bb      	ldrb	r3, [r7, #6]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d10a      	bne.n	8003490 <set_control_params_int_max+0x58>
	{
		speed_params[index].integral_max = int_max;
 800347a:	79fa      	ldrb	r2, [r7, #7]
 800347c:	4910      	ldr	r1, [pc, #64]	; (80034c0 <set_control_params_int_max+0x88>)
 800347e:	4613      	mov	r3, r2
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	4413      	add	r3, r2
 8003484:	011b      	lsls	r3, r3, #4
 8003486:	440b      	add	r3, r1
 8003488:	3310      	adds	r3, #16
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	e010      	b.n	80034b2 <set_control_params_int_max+0x7a>
	} else if(ctrl_index == 2)
 8003490:	79bb      	ldrb	r3, [r7, #6]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d10d      	bne.n	80034b2 <set_control_params_int_max+0x7a>
	{
		cur_params[index].integral_max = int_max;
 8003496:	79fa      	ldrb	r2, [r7, #7]
 8003498:	490a      	ldr	r1, [pc, #40]	; (80034c4 <set_control_params_int_max+0x8c>)
 800349a:	4613      	mov	r3, r2
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	4413      	add	r3, r2
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	440b      	add	r3, r1
 80034a4:	3310      	adds	r3, #16
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	e002      	b.n	80034b2 <set_control_params_int_max+0x7a>
		return;
 80034ac:	bf00      	nop
 80034ae:	e000      	b.n	80034b2 <set_control_params_int_max+0x7a>
		return;
 80034b0:	bf00      	nop
	}
 }
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	20000dec 	.word	0x20000dec
 80034c0:	20000e4c 	.word	0x20000e4c
 80034c4:	20000eac 	.word	0x20000eac

080034c8 <set_control_params_int_min>:
 *	\param index The motor index
 *  \param ctrl_index Which controller to set, 0-position, 1-speed, 2-current
 *  \param int_min The minimum integral windup
 */
 void set_control_params_int_min(uint8_t index, uint8_t ctrl_index, float int_min)
 {
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	4603      	mov	r3, r0
 80034d0:	460a      	mov	r2, r1
 80034d2:	ed87 0a00 	vstr	s0, [r7]
 80034d6:	71fb      	strb	r3, [r7, #7]
 80034d8:	4613      	mov	r3, r2
 80034da:	71bb      	strb	r3, [r7, #6]
	if(index >= NUMBER_MOTORS)
 80034dc:	79fb      	ldrb	r3, [r7, #7]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d82c      	bhi.n	800353c <set_control_params_int_min+0x74>
	{
		return;
	}
	if(ctrl_index > 2)
 80034e2:	79bb      	ldrb	r3, [r7, #6]
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d82b      	bhi.n	8003540 <set_control_params_int_min+0x78>
	{
		return;
	}

	if(ctrl_index == 0)
 80034e8:	79bb      	ldrb	r3, [r7, #6]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10a      	bne.n	8003504 <set_control_params_int_min+0x3c>
	{
		pos_params[index].integral_min = int_min;
 80034ee:	79fa      	ldrb	r2, [r7, #7]
 80034f0:	4916      	ldr	r1, [pc, #88]	; (800354c <set_control_params_int_min+0x84>)
 80034f2:	4613      	mov	r3, r2
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	4413      	add	r3, r2
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	440b      	add	r3, r1
 80034fc:	3314      	adds	r3, #20
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	e01e      	b.n	8003542 <set_control_params_int_min+0x7a>
	} else if(ctrl_index == 1)
 8003504:	79bb      	ldrb	r3, [r7, #6]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d10a      	bne.n	8003520 <set_control_params_int_min+0x58>
	{
		speed_params[index].integral_min = int_min;
 800350a:	79fa      	ldrb	r2, [r7, #7]
 800350c:	4910      	ldr	r1, [pc, #64]	; (8003550 <set_control_params_int_min+0x88>)
 800350e:	4613      	mov	r3, r2
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	4413      	add	r3, r2
 8003514:	011b      	lsls	r3, r3, #4
 8003516:	440b      	add	r3, r1
 8003518:	3314      	adds	r3, #20
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	e010      	b.n	8003542 <set_control_params_int_min+0x7a>
	} else if(ctrl_index == 2)
 8003520:	79bb      	ldrb	r3, [r7, #6]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d10d      	bne.n	8003542 <set_control_params_int_min+0x7a>
	{
		cur_params[index].integral_min = int_min;
 8003526:	79fa      	ldrb	r2, [r7, #7]
 8003528:	490a      	ldr	r1, [pc, #40]	; (8003554 <set_control_params_int_min+0x8c>)
 800352a:	4613      	mov	r3, r2
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4413      	add	r3, r2
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	440b      	add	r3, r1
 8003534:	3314      	adds	r3, #20
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	e002      	b.n	8003542 <set_control_params_int_min+0x7a>
		return;
 800353c:	bf00      	nop
 800353e:	e000      	b.n	8003542 <set_control_params_int_min+0x7a>
		return;
 8003540:	bf00      	nop
	}
 }
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	20000dec 	.word	0x20000dec
 8003550:	20000e4c 	.word	0x20000e4c
 8003554:	20000eac 	.word	0x20000eac

08003558 <set_motor_ticks_per_rev>:
 *
 *	\param ticks_per_rev The number of quadrature counts per output shaft rotation
  *	\param index The motor index
 */
 void set_motor_ticks_per_rev(int32_t ticks_per_rev, uint8_t index)
 {
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	460b      	mov	r3, r1
 8003562:	70fb      	strb	r3, [r7, #3]
	if(index >= NUMBER_MOTORS)
 8003564:	78fb      	ldrb	r3, [r7, #3]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d80a      	bhi.n	8003580 <set_motor_ticks_per_rev+0x28>
	{
		return;
	}
	motors[index].ticks_per_rev = ticks_per_rev;
 800356a:	78fa      	ldrb	r2, [r7, #3]
 800356c:	4907      	ldr	r1, [pc, #28]	; (800358c <set_motor_ticks_per_rev+0x34>)
 800356e:	4613      	mov	r3, r2
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	4413      	add	r3, r2
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	440b      	add	r3, r1
 8003578:	3328      	adds	r3, #40	; 0x28
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	e000      	b.n	8003582 <set_motor_ticks_per_rev+0x2a>
		return;
 8003580:	bf00      	nop
 }
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	20000d8c 	.word	0x20000d8c

08003590 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003596:	2300      	movs	r3, #0
 8003598:	607b      	str	r3, [r7, #4]
 800359a:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <HAL_MspInit+0x54>)
 800359c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359e:	4a11      	ldr	r2, [pc, #68]	; (80035e4 <HAL_MspInit+0x54>)
 80035a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035a4:	6453      	str	r3, [r2, #68]	; 0x44
 80035a6:	4b0f      	ldr	r3, [pc, #60]	; (80035e4 <HAL_MspInit+0x54>)
 80035a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ae:	607b      	str	r3, [r7, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	603b      	str	r3, [r7, #0]
 80035b6:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <HAL_MspInit+0x54>)
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	4a0a      	ldr	r2, [pc, #40]	; (80035e4 <HAL_MspInit+0x54>)
 80035bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c0:	6413      	str	r3, [r2, #64]	; 0x40
 80035c2:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <HAL_MspInit+0x54>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ca:	603b      	str	r3, [r7, #0]
 80035cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80035ce:	2200      	movs	r2, #0
 80035d0:	210f      	movs	r1, #15
 80035d2:	f06f 0001 	mvn.w	r0, #1
 80035d6:	f002 f829 	bl	800562c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035da:	bf00      	nop
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40023800 	.word	0x40023800

080035e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08c      	sub	sp, #48	; 0x30
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f0:	f107 031c 	add.w	r3, r7, #28
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	605a      	str	r2, [r3, #4]
 80035fa:	609a      	str	r2, [r3, #8]
 80035fc:	60da      	str	r2, [r3, #12]
 80035fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a36      	ldr	r2, [pc, #216]	; (80036e0 <HAL_ADC_MspInit+0xf8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d130      	bne.n	800366c <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800360a:	2300      	movs	r3, #0
 800360c:	61bb      	str	r3, [r7, #24]
 800360e:	4b35      	ldr	r3, [pc, #212]	; (80036e4 <HAL_ADC_MspInit+0xfc>)
 8003610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003612:	4a34      	ldr	r2, [pc, #208]	; (80036e4 <HAL_ADC_MspInit+0xfc>)
 8003614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003618:	6453      	str	r3, [r2, #68]	; 0x44
 800361a:	4b32      	ldr	r3, [pc, #200]	; (80036e4 <HAL_ADC_MspInit+0xfc>)
 800361c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003622:	61bb      	str	r3, [r7, #24]
 8003624:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003626:	2300      	movs	r3, #0
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	4b2e      	ldr	r3, [pc, #184]	; (80036e4 <HAL_ADC_MspInit+0xfc>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	4a2d      	ldr	r2, [pc, #180]	; (80036e4 <HAL_ADC_MspInit+0xfc>)
 8003630:	f043 0301 	orr.w	r3, r3, #1
 8003634:	6313      	str	r3, [r2, #48]	; 0x30
 8003636:	4b2b      	ldr	r3, [pc, #172]	; (80036e4 <HAL_ADC_MspInit+0xfc>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	617b      	str	r3, [r7, #20]
 8003640:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = SNS1_Pin;
 8003642:	2310      	movs	r3, #16
 8003644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003646:	2303      	movs	r3, #3
 8003648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364a:	2300      	movs	r3, #0
 800364c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SNS1_GPIO_Port, &GPIO_InitStruct);
 800364e:	f107 031c 	add.w	r3, r7, #28
 8003652:	4619      	mov	r1, r3
 8003654:	4824      	ldr	r0, [pc, #144]	; (80036e8 <HAL_ADC_MspInit+0x100>)
 8003656:	f002 f835 	bl	80056c4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800365a:	2200      	movs	r2, #0
 800365c:	2105      	movs	r1, #5
 800365e:	2012      	movs	r0, #18
 8003660:	f001 ffe4 	bl	800562c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003664:	2012      	movs	r0, #18
 8003666:	f001 fffd 	bl	8005664 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800366a:	e034      	b.n	80036d6 <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a1e      	ldr	r2, [pc, #120]	; (80036ec <HAL_ADC_MspInit+0x104>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d12f      	bne.n	80036d6 <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003676:	2300      	movs	r3, #0
 8003678:	613b      	str	r3, [r7, #16]
 800367a:	4b1a      	ldr	r3, [pc, #104]	; (80036e4 <HAL_ADC_MspInit+0xfc>)
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	4a19      	ldr	r2, [pc, #100]	; (80036e4 <HAL_ADC_MspInit+0xfc>)
 8003680:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003684:	6453      	str	r3, [r2, #68]	; 0x44
 8003686:	4b17      	ldr	r3, [pc, #92]	; (80036e4 <HAL_ADC_MspInit+0xfc>)
 8003688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800368e:	613b      	str	r3, [r7, #16]
 8003690:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	4b13      	ldr	r3, [pc, #76]	; (80036e4 <HAL_ADC_MspInit+0xfc>)
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	4a12      	ldr	r2, [pc, #72]	; (80036e4 <HAL_ADC_MspInit+0xfc>)
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	6313      	str	r3, [r2, #48]	; 0x30
 80036a2:	4b10      	ldr	r3, [pc, #64]	; (80036e4 <HAL_ADC_MspInit+0xfc>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SNS2_Pin;
 80036ae:	2320      	movs	r3, #32
 80036b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036b2:	2303      	movs	r3, #3
 80036b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b6:	2300      	movs	r3, #0
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SNS2_GPIO_Port, &GPIO_InitStruct);
 80036ba:	f107 031c 	add.w	r3, r7, #28
 80036be:	4619      	mov	r1, r3
 80036c0:	4809      	ldr	r0, [pc, #36]	; (80036e8 <HAL_ADC_MspInit+0x100>)
 80036c2:	f001 ffff 	bl	80056c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80036c6:	2200      	movs	r2, #0
 80036c8:	2105      	movs	r1, #5
 80036ca:	2012      	movs	r0, #18
 80036cc:	f001 ffae 	bl	800562c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80036d0:	2012      	movs	r0, #18
 80036d2:	f001 ffc7 	bl	8005664 <HAL_NVIC_EnableIRQ>
}
 80036d6:	bf00      	nop
 80036d8:	3730      	adds	r7, #48	; 0x30
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40012000 	.word	0x40012000
 80036e4:	40023800 	.word	0x40023800
 80036e8:	40020000 	.word	0x40020000
 80036ec:	40012100 	.word	0x40012100

080036f0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08a      	sub	sp, #40	; 0x28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f8:	f107 0314 	add.w	r3, r7, #20
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	605a      	str	r2, [r3, #4]
 8003702:	609a      	str	r2, [r3, #8]
 8003704:	60da      	str	r2, [r3, #12]
 8003706:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a25      	ldr	r2, [pc, #148]	; (80037a4 <HAL_CAN_MspInit+0xb4>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d143      	bne.n	800379a <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003712:	2300      	movs	r3, #0
 8003714:	613b      	str	r3, [r7, #16]
 8003716:	4b24      	ldr	r3, [pc, #144]	; (80037a8 <HAL_CAN_MspInit+0xb8>)
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	4a23      	ldr	r2, [pc, #140]	; (80037a8 <HAL_CAN_MspInit+0xb8>)
 800371c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003720:	6413      	str	r3, [r2, #64]	; 0x40
 8003722:	4b21      	ldr	r3, [pc, #132]	; (80037a8 <HAL_CAN_MspInit+0xb8>)
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800372e:	2300      	movs	r3, #0
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	4b1d      	ldr	r3, [pc, #116]	; (80037a8 <HAL_CAN_MspInit+0xb8>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	4a1c      	ldr	r2, [pc, #112]	; (80037a8 <HAL_CAN_MspInit+0xb8>)
 8003738:	f043 0308 	orr.w	r3, r3, #8
 800373c:	6313      	str	r3, [r2, #48]	; 0x30
 800373e:	4b1a      	ldr	r3, [pc, #104]	; (80037a8 <HAL_CAN_MspInit+0xb8>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 800374a:	2303      	movs	r3, #3
 800374c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374e:	2302      	movs	r3, #2
 8003750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003752:	2300      	movs	r3, #0
 8003754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003756:	2303      	movs	r3, #3
 8003758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800375a:	2309      	movs	r3, #9
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800375e:	f107 0314 	add.w	r3, r7, #20
 8003762:	4619      	mov	r1, r3
 8003764:	4811      	ldr	r0, [pc, #68]	; (80037ac <HAL_CAN_MspInit+0xbc>)
 8003766:	f001 ffad 	bl	80056c4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 800376a:	2200      	movs	r2, #0
 800376c:	2105      	movs	r1, #5
 800376e:	2013      	movs	r0, #19
 8003770:	f001 ff5c 	bl	800562c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8003774:	2013      	movs	r0, #19
 8003776:	f001 ff75 	bl	8005664 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800377a:	2200      	movs	r2, #0
 800377c:	2105      	movs	r1, #5
 800377e:	2014      	movs	r0, #20
 8003780:	f001 ff54 	bl	800562c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003784:	2014      	movs	r0, #20
 8003786:	f001 ff6d 	bl	8005664 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800378a:	2200      	movs	r2, #0
 800378c:	2105      	movs	r1, #5
 800378e:	2015      	movs	r0, #21
 8003790:	f001 ff4c 	bl	800562c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003794:	2015      	movs	r0, #21
 8003796:	f001 ff65 	bl	8005664 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800379a:	bf00      	nop
 800379c:	3728      	adds	r7, #40	; 0x28
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40006400 	.word	0x40006400
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40020c00 	.word	0x40020c00

080037b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08a      	sub	sp, #40	; 0x28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b8:	f107 0314 	add.w	r3, r7, #20
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	605a      	str	r2, [r3, #4]
 80037c2:	609a      	str	r2, [r3, #8]
 80037c4:	60da      	str	r2, [r3, #12]
 80037c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a1d      	ldr	r2, [pc, #116]	; (8003844 <HAL_SPI_MspInit+0x94>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d134      	bne.n	800383c <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	4b1c      	ldr	r3, [pc, #112]	; (8003848 <HAL_SPI_MspInit+0x98>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	4a1b      	ldr	r2, [pc, #108]	; (8003848 <HAL_SPI_MspInit+0x98>)
 80037dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037e0:	6413      	str	r3, [r2, #64]	; 0x40
 80037e2:	4b19      	ldr	r3, [pc, #100]	; (8003848 <HAL_SPI_MspInit+0x98>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ea:	613b      	str	r3, [r7, #16]
 80037ec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	4b15      	ldr	r3, [pc, #84]	; (8003848 <HAL_SPI_MspInit+0x98>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	4a14      	ldr	r2, [pc, #80]	; (8003848 <HAL_SPI_MspInit+0x98>)
 80037f8:	f043 0302 	orr.w	r3, r3, #2
 80037fc:	6313      	str	r3, [r2, #48]	; 0x30
 80037fe:	4b12      	ldr	r3, [pc, #72]	; (8003848 <HAL_SPI_MspInit+0x98>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = FRAM_CS_Pin|SCK_Pin|MISO_Pin|MOSI_Pin;
 800380a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800380e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003810:	2302      	movs	r3, #2
 8003812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003814:	2300      	movs	r3, #0
 8003816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003818:	2303      	movs	r3, #3
 800381a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800381c:	2305      	movs	r3, #5
 800381e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003820:	f107 0314 	add.w	r3, r7, #20
 8003824:	4619      	mov	r1, r3
 8003826:	4809      	ldr	r0, [pc, #36]	; (800384c <HAL_SPI_MspInit+0x9c>)
 8003828:	f001 ff4c 	bl	80056c4 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800382c:	2200      	movs	r2, #0
 800382e:	2105      	movs	r1, #5
 8003830:	2024      	movs	r0, #36	; 0x24
 8003832:	f001 fefb 	bl	800562c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003836:	2024      	movs	r0, #36	; 0x24
 8003838:	f001 ff14 	bl	8005664 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800383c:	bf00      	nop
 800383e:	3728      	adds	r7, #40	; 0x28
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40003800 	.word	0x40003800
 8003848:	40023800 	.word	0x40023800
 800384c:	40020400 	.word	0x40020400

08003850 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b08c      	sub	sp, #48	; 0x30
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003858:	f107 031c 	add.w	r3, r7, #28
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	605a      	str	r2, [r3, #4]
 8003862:	609a      	str	r2, [r3, #8]
 8003864:	60da      	str	r2, [r3, #12]
 8003866:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a32      	ldr	r2, [pc, #200]	; (8003938 <HAL_TIM_Encoder_MspInit+0xe8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d12d      	bne.n	80038ce <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003872:	2300      	movs	r3, #0
 8003874:	61bb      	str	r3, [r7, #24]
 8003876:	4b31      	ldr	r3, [pc, #196]	; (800393c <HAL_TIM_Encoder_MspInit+0xec>)
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	4a30      	ldr	r2, [pc, #192]	; (800393c <HAL_TIM_Encoder_MspInit+0xec>)
 800387c:	f043 0301 	orr.w	r3, r3, #1
 8003880:	6453      	str	r3, [r2, #68]	; 0x44
 8003882:	4b2e      	ldr	r3, [pc, #184]	; (800393c <HAL_TIM_Encoder_MspInit+0xec>)
 8003884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	61bb      	str	r3, [r7, #24]
 800388c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800388e:	2300      	movs	r3, #0
 8003890:	617b      	str	r3, [r7, #20]
 8003892:	4b2a      	ldr	r3, [pc, #168]	; (800393c <HAL_TIM_Encoder_MspInit+0xec>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	4a29      	ldr	r2, [pc, #164]	; (800393c <HAL_TIM_Encoder_MspInit+0xec>)
 8003898:	f043 0301 	orr.w	r3, r3, #1
 800389c:	6313      	str	r3, [r2, #48]	; 0x30
 800389e:	4b27      	ldr	r3, [pc, #156]	; (800393c <HAL_TIM_Encoder_MspInit+0xec>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = M2IN1_Pin|M2IN2_Pin;
 80038aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038b0:	2312      	movs	r3, #18
 80038b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038b4:	2301      	movs	r3, #1
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b8:	2300      	movs	r3, #0
 80038ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80038bc:	2301      	movs	r3, #1
 80038be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c0:	f107 031c 	add.w	r3, r7, #28
 80038c4:	4619      	mov	r1, r3
 80038c6:	481e      	ldr	r0, [pc, #120]	; (8003940 <HAL_TIM_Encoder_MspInit+0xf0>)
 80038c8:	f001 fefc 	bl	80056c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80038cc:	e030      	b.n	8003930 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM3)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a1c      	ldr	r2, [pc, #112]	; (8003944 <HAL_TIM_Encoder_MspInit+0xf4>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d12b      	bne.n	8003930 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80038d8:	2300      	movs	r3, #0
 80038da:	613b      	str	r3, [r7, #16]
 80038dc:	4b17      	ldr	r3, [pc, #92]	; (800393c <HAL_TIM_Encoder_MspInit+0xec>)
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	4a16      	ldr	r2, [pc, #88]	; (800393c <HAL_TIM_Encoder_MspInit+0xec>)
 80038e2:	f043 0302 	orr.w	r3, r3, #2
 80038e6:	6413      	str	r3, [r2, #64]	; 0x40
 80038e8:	4b14      	ldr	r3, [pc, #80]	; (800393c <HAL_TIM_Encoder_MspInit+0xec>)
 80038ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	613b      	str	r3, [r7, #16]
 80038f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038f4:	2300      	movs	r3, #0
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	4b10      	ldr	r3, [pc, #64]	; (800393c <HAL_TIM_Encoder_MspInit+0xec>)
 80038fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fc:	4a0f      	ldr	r2, [pc, #60]	; (800393c <HAL_TIM_Encoder_MspInit+0xec>)
 80038fe:	f043 0304 	orr.w	r3, r3, #4
 8003902:	6313      	str	r3, [r2, #48]	; 0x30
 8003904:	4b0d      	ldr	r3, [pc, #52]	; (800393c <HAL_TIM_Encoder_MspInit+0xec>)
 8003906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1IN1_Pin|M1IN2_Pin;
 8003910:	23c0      	movs	r3, #192	; 0xc0
 8003912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003914:	2312      	movs	r3, #18
 8003916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003918:	2301      	movs	r3, #1
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800391c:	2300      	movs	r3, #0
 800391e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003920:	2302      	movs	r3, #2
 8003922:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003924:	f107 031c 	add.w	r3, r7, #28
 8003928:	4619      	mov	r1, r3
 800392a:	4807      	ldr	r0, [pc, #28]	; (8003948 <HAL_TIM_Encoder_MspInit+0xf8>)
 800392c:	f001 feca 	bl	80056c4 <HAL_GPIO_Init>
}
 8003930:	bf00      	nop
 8003932:	3730      	adds	r7, #48	; 0x30
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40010000 	.word	0x40010000
 800393c:	40023800 	.word	0x40023800
 8003940:	40020000 	.word	0x40020000
 8003944:	40000400 	.word	0x40000400
 8003948:	40020800 	.word	0x40020800

0800394c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800395c:	d10e      	bne.n	800397c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800395e:	2300      	movs	r3, #0
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	4b2e      	ldr	r3, [pc, #184]	; (8003a1c <HAL_TIM_Base_MspInit+0xd0>)
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	4a2d      	ldr	r2, [pc, #180]	; (8003a1c <HAL_TIM_Base_MspInit+0xd0>)
 8003968:	f043 0301 	orr.w	r3, r3, #1
 800396c:	6413      	str	r3, [r2, #64]	; 0x40
 800396e:	4b2b      	ldr	r3, [pc, #172]	; (8003a1c <HAL_TIM_Base_MspInit+0xd0>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800397a:	e04a      	b.n	8003a12 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a27      	ldr	r2, [pc, #156]	; (8003a20 <HAL_TIM_Base_MspInit+0xd4>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d116      	bne.n	80039b4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003986:	2300      	movs	r3, #0
 8003988:	613b      	str	r3, [r7, #16]
 800398a:	4b24      	ldr	r3, [pc, #144]	; (8003a1c <HAL_TIM_Base_MspInit+0xd0>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	4a23      	ldr	r2, [pc, #140]	; (8003a1c <HAL_TIM_Base_MspInit+0xd0>)
 8003990:	f043 0304 	orr.w	r3, r3, #4
 8003994:	6413      	str	r3, [r2, #64]	; 0x40
 8003996:	4b21      	ldr	r3, [pc, #132]	; (8003a1c <HAL_TIM_Base_MspInit+0xd0>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	613b      	str	r3, [r7, #16]
 80039a0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80039a2:	2200      	movs	r2, #0
 80039a4:	2105      	movs	r1, #5
 80039a6:	201e      	movs	r0, #30
 80039a8:	f001 fe40 	bl	800562c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80039ac:	201e      	movs	r0, #30
 80039ae:	f001 fe59 	bl	8005664 <HAL_NVIC_EnableIRQ>
}
 80039b2:	e02e      	b.n	8003a12 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM13)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a1a      	ldr	r2, [pc, #104]	; (8003a24 <HAL_TIM_Base_MspInit+0xd8>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d116      	bne.n	80039ec <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80039be:	2300      	movs	r3, #0
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	4b16      	ldr	r3, [pc, #88]	; (8003a1c <HAL_TIM_Base_MspInit+0xd0>)
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	4a15      	ldr	r2, [pc, #84]	; (8003a1c <HAL_TIM_Base_MspInit+0xd0>)
 80039c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039cc:	6413      	str	r3, [r2, #64]	; 0x40
 80039ce:	4b13      	ldr	r3, [pc, #76]	; (8003a1c <HAL_TIM_Base_MspInit+0xd0>)
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d6:	60fb      	str	r3, [r7, #12]
 80039d8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80039da:	2200      	movs	r2, #0
 80039dc:	2100      	movs	r1, #0
 80039de:	202c      	movs	r0, #44	; 0x2c
 80039e0:	f001 fe24 	bl	800562c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80039e4:	202c      	movs	r0, #44	; 0x2c
 80039e6:	f001 fe3d 	bl	8005664 <HAL_NVIC_EnableIRQ>
}
 80039ea:	e012      	b.n	8003a12 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM14)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a0d      	ldr	r2, [pc, #52]	; (8003a28 <HAL_TIM_Base_MspInit+0xdc>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d10d      	bne.n	8003a12 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80039f6:	2300      	movs	r3, #0
 80039f8:	60bb      	str	r3, [r7, #8]
 80039fa:	4b08      	ldr	r3, [pc, #32]	; (8003a1c <HAL_TIM_Base_MspInit+0xd0>)
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	4a07      	ldr	r2, [pc, #28]	; (8003a1c <HAL_TIM_Base_MspInit+0xd0>)
 8003a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a04:	6413      	str	r3, [r2, #64]	; 0x40
 8003a06:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <HAL_TIM_Base_MspInit+0xd0>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0e:	60bb      	str	r3, [r7, #8]
 8003a10:	68bb      	ldr	r3, [r7, #8]
}
 8003a12:	bf00      	nop
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	40000800 	.word	0x40000800
 8003a24:	40001c00 	.word	0x40001c00
 8003a28:	40002000 	.word	0x40002000

08003a2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08a      	sub	sp, #40	; 0x28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a34:	f107 0314 	add.w	r3, r7, #20
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	605a      	str	r2, [r3, #4]
 8003a3e:	609a      	str	r2, [r3, #8]
 8003a40:	60da      	str	r2, [r3, #12]
 8003a42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a4c:	d11e      	bne.n	8003a8c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a4e:	2300      	movs	r3, #0
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	4b34      	ldr	r3, [pc, #208]	; (8003b24 <HAL_TIM_MspPostInit+0xf8>)
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a56:	4a33      	ldr	r2, [pc, #204]	; (8003b24 <HAL_TIM_MspPostInit+0xf8>)
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a5e:	4b31      	ldr	r3, [pc, #196]	; (8003b24 <HAL_TIM_MspPostInit+0xf8>)
 8003a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	613b      	str	r3, [r7, #16]
 8003a68:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = LED2_Pin|IN1_Pin|IN2_Pin;
 8003a6a:	230e      	movs	r3, #14
 8003a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a6e:	2302      	movs	r3, #2
 8003a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a72:	2300      	movs	r3, #0
 8003a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a76:	2300      	movs	r3, #0
 8003a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a7e:	f107 0314 	add.w	r3, r7, #20
 8003a82:	4619      	mov	r1, r3
 8003a84:	4828      	ldr	r0, [pc, #160]	; (8003b28 <HAL_TIM_MspPostInit+0xfc>)
 8003a86:	f001 fe1d 	bl	80056c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8003a8a:	e046      	b.n	8003b1a <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM13)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a26      	ldr	r2, [pc, #152]	; (8003b2c <HAL_TIM_MspPostInit+0x100>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d11e      	bne.n	8003ad4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a96:	2300      	movs	r3, #0
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	4b22      	ldr	r3, [pc, #136]	; (8003b24 <HAL_TIM_MspPostInit+0xf8>)
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9e:	4a21      	ldr	r2, [pc, #132]	; (8003b24 <HAL_TIM_MspPostInit+0xf8>)
 8003aa0:	f043 0301 	orr.w	r3, r3, #1
 8003aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8003aa6:	4b1f      	ldr	r3, [pc, #124]	; (8003b24 <HAL_TIM_MspPostInit+0xf8>)
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IN3_Pin;
 8003ab2:	2340      	movs	r3, #64	; 0x40
 8003ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003ac2:	2309      	movs	r3, #9
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IN3_GPIO_Port, &GPIO_InitStruct);
 8003ac6:	f107 0314 	add.w	r3, r7, #20
 8003aca:	4619      	mov	r1, r3
 8003acc:	4816      	ldr	r0, [pc, #88]	; (8003b28 <HAL_TIM_MspPostInit+0xfc>)
 8003ace:	f001 fdf9 	bl	80056c4 <HAL_GPIO_Init>
}
 8003ad2:	e022      	b.n	8003b1a <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM14)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a15      	ldr	r2, [pc, #84]	; (8003b30 <HAL_TIM_MspPostInit+0x104>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d11d      	bne.n	8003b1a <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	4b10      	ldr	r3, [pc, #64]	; (8003b24 <HAL_TIM_MspPostInit+0xf8>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	4a0f      	ldr	r2, [pc, #60]	; (8003b24 <HAL_TIM_MspPostInit+0xf8>)
 8003ae8:	f043 0301 	orr.w	r3, r3, #1
 8003aec:	6313      	str	r3, [r2, #48]	; 0x30
 8003aee:	4b0d      	ldr	r3, [pc, #52]	; (8003b24 <HAL_TIM_MspPostInit+0xf8>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IN4_Pin;
 8003afa:	2380      	movs	r3, #128	; 0x80
 8003afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afe:	2302      	movs	r3, #2
 8003b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b06:	2300      	movs	r3, #0
 8003b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8003b0a:	2309      	movs	r3, #9
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IN4_GPIO_Port, &GPIO_InitStruct);
 8003b0e:	f107 0314 	add.w	r3, r7, #20
 8003b12:	4619      	mov	r1, r3
 8003b14:	4804      	ldr	r0, [pc, #16]	; (8003b28 <HAL_TIM_MspPostInit+0xfc>)
 8003b16:	f001 fdd5 	bl	80056c4 <HAL_GPIO_Init>
}
 8003b1a:	bf00      	nop
 8003b1c:	3728      	adds	r7, #40	; 0x28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40023800 	.word	0x40023800
 8003b28:	40020000 	.word	0x40020000
 8003b2c:	40001c00 	.word	0x40001c00
 8003b30:	40002000 	.word	0x40002000

08003b34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b08c      	sub	sp, #48	; 0x30
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003b40:	2300      	movs	r3, #0
 8003b42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM8 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0); 
 8003b44:	2200      	movs	r2, #0
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	202c      	movs	r0, #44	; 0x2c
 8003b4a:	f001 fd6f 	bl	800562c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM8 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn); 
 8003b4e:	202c      	movs	r0, #44	; 0x2c
 8003b50:	f001 fd88 	bl	8005664 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 8003b54:	2300      	movs	r3, #0
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	4b1f      	ldr	r3, [pc, #124]	; (8003bd8 <HAL_InitTick+0xa4>)
 8003b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5c:	4a1e      	ldr	r2, [pc, #120]	; (8003bd8 <HAL_InitTick+0xa4>)
 8003b5e:	f043 0302 	orr.w	r3, r3, #2
 8003b62:	6453      	str	r3, [r2, #68]	; 0x44
 8003b64:	4b1c      	ldr	r3, [pc, #112]	; (8003bd8 <HAL_InitTick+0xa4>)
 8003b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b70:	f107 0210 	add.w	r2, r7, #16
 8003b74:	f107 0314 	add.w	r3, r7, #20
 8003b78:	4611      	mov	r1, r2
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f002 fb7e 	bl	800627c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM8 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003b80:	f002 fb68 	bl	8006254 <HAL_RCC_GetPCLK2Freq>
 8003b84:	4603      	mov	r3, r0
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8c:	4a13      	ldr	r2, [pc, #76]	; (8003bdc <HAL_InitTick+0xa8>)
 8003b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b92:	0c9b      	lsrs	r3, r3, #18
 8003b94:	3b01      	subs	r3, #1
 8003b96:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 8003b98:	4b11      	ldr	r3, [pc, #68]	; (8003be0 <HAL_InitTick+0xac>)
 8003b9a:	4a12      	ldr	r2, [pc, #72]	; (8003be4 <HAL_InitTick+0xb0>)
 8003b9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000 / 1000) - 1;
 8003b9e:	4b10      	ldr	r3, [pc, #64]	; (8003be0 <HAL_InitTick+0xac>)
 8003ba0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ba4:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 8003ba6:	4a0e      	ldr	r2, [pc, #56]	; (8003be0 <HAL_InitTick+0xac>)
 8003ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003baa:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 8003bac:	4b0c      	ldr	r3, [pc, #48]	; (8003be0 <HAL_InitTick+0xac>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bb2:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <HAL_InitTick+0xac>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim8) == HAL_OK)
 8003bb8:	4809      	ldr	r0, [pc, #36]	; (8003be0 <HAL_InitTick+0xac>)
 8003bba:	f002 fd13 	bl	80065e4 <HAL_TIM_Base_Init>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d104      	bne.n	8003bce <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim8);
 8003bc4:	4806      	ldr	r0, [pc, #24]	; (8003be0 <HAL_InitTick+0xac>)
 8003bc6:	f002 fd38 	bl	800663a <HAL_TIM_Base_Start_IT>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	e000      	b.n	8003bd0 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3730      	adds	r7, #48	; 0x30
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	431bde83 	.word	0x431bde83
 8003be0:	2001584c 	.word	0x2001584c
 8003be4:	40010400 	.word	0x40010400

08003be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003bec:	bf00      	nop
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bfa:	e7fe      	b.n	8003bfa <HardFault_Handler+0x4>

08003bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c00:	e7fe      	b.n	8003c00 <MemManage_Handler+0x4>

08003c02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c02:	b480      	push	{r7}
 8003c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c06:	e7fe      	b.n	8003c06 <BusFault_Handler+0x4>

08003c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c0c:	e7fe      	b.n	8003c0c <UsageFault_Handler+0x4>

08003c0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c12:	bf00      	nop
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003c20:	4803      	ldr	r0, [pc, #12]	; (8003c30 <ADC_IRQHandler+0x14>)
 8003c22:	f000 fa5b 	bl	80040dc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003c26:	4803      	ldr	r0, [pc, #12]	; (8003c34 <ADC_IRQHandler+0x18>)
 8003c28:	f000 fa58 	bl	80040dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003c2c:	bf00      	nop
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	200156dc 	.word	0x200156dc
 8003c34:	2001564c 	.word	0x2001564c

08003c38 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003c3c:	4802      	ldr	r0, [pc, #8]	; (8003c48 <CAN1_TX_IRQHandler+0x10>)
 8003c3e:	f001 fa14 	bl	800506a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003c42:	bf00      	nop
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	200157e4 	.word	0x200157e4

08003c4c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003c50:	4802      	ldr	r0, [pc, #8]	; (8003c5c <CAN1_RX0_IRQHandler+0x10>)
 8003c52:	f001 fa0a 	bl	800506a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003c56:	bf00      	nop
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	200157e4 	.word	0x200157e4

08003c60 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003c64:	4802      	ldr	r0, [pc, #8]	; (8003c70 <CAN1_RX1_IRQHandler+0x10>)
 8003c66:	f001 fa00 	bl	800506a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003c6a:	bf00      	nop
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	200157e4 	.word	0x200157e4

08003c74 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	enable_motor_task_from_isr();
 8003c78:	f7fd fe04 	bl	8001884 <enable_motor_task_from_isr>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003c7c:	4802      	ldr	r0, [pc, #8]	; (8003c88 <TIM4_IRQHandler+0x14>)
 8003c7e:	f002 fdfc 	bl	800687a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003c82:	bf00      	nop
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	2001560c 	.word	0x2001560c

08003c8c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003c90:	4802      	ldr	r0, [pc, #8]	; (8003c9c <SPI2_IRQHandler+0x10>)
 8003c92:	f002 fb89 	bl	80063a8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003c96:	bf00      	nop
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	200155b4 	.word	0x200155b4

08003ca0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003ca4:	4803      	ldr	r0, [pc, #12]	; (8003cb4 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8003ca6:	f002 fde8 	bl	800687a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8003caa:	4803      	ldr	r0, [pc, #12]	; (8003cb8 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8003cac:	f002 fde5 	bl	800687a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003cb0:	bf00      	nop
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	2001584c 	.word	0x2001584c
 8003cb8:	20015724 	.word	0x20015724

08003cbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cc0:	4b08      	ldr	r3, [pc, #32]	; (8003ce4 <SystemInit+0x28>)
 8003cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc6:	4a07      	ldr	r2, [pc, #28]	; (8003ce4 <SystemInit+0x28>)
 8003cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003cd0:	4b04      	ldr	r3, [pc, #16]	; (8003ce4 <SystemInit+0x28>)
 8003cd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003cd6:	609a      	str	r2, [r3, #8]
#endif
}
 8003cd8:	bf00      	nop
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	e000ed00 	.word	0xe000ed00

08003ce8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003ce8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003cec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003cee:	e003      	b.n	8003cf8 <LoopCopyDataInit>

08003cf0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003cf0:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003cf2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003cf4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003cf6:	3104      	adds	r1, #4

08003cf8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003cf8:	480b      	ldr	r0, [pc, #44]	; (8003d28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003cfa:	4b0c      	ldr	r3, [pc, #48]	; (8003d2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003cfc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003cfe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d00:	d3f6      	bcc.n	8003cf0 <CopyDataInit>
  ldr  r2, =_sbss
 8003d02:	4a0b      	ldr	r2, [pc, #44]	; (8003d30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003d04:	e002      	b.n	8003d0c <LoopFillZerobss>

08003d06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003d06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003d08:	f842 3b04 	str.w	r3, [r2], #4

08003d0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003d0c:	4b09      	ldr	r3, [pc, #36]	; (8003d34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003d0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d10:	d3f9      	bcc.n	8003d06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d12:	f7ff ffd3 	bl	8003cbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d16:	f008 fdb7 	bl	800c888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d1a:	f7fd fdd7 	bl	80018cc <main>
  bx  lr    
 8003d1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003d20:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003d24:	0800df30 	.word	0x0800df30
  ldr  r0, =_sdata
 8003d28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003d2c:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 8003d30:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 8003d34:	200158d0 	.word	0x200158d0

08003d38 <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d38:	e7fe      	b.n	8003d38 <CAN1_SCE_IRQHandler>
	...

08003d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d40:	4b0e      	ldr	r3, [pc, #56]	; (8003d7c <HAL_Init+0x40>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a0d      	ldr	r2, [pc, #52]	; (8003d7c <HAL_Init+0x40>)
 8003d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d4c:	4b0b      	ldr	r3, [pc, #44]	; (8003d7c <HAL_Init+0x40>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a0a      	ldr	r2, [pc, #40]	; (8003d7c <HAL_Init+0x40>)
 8003d52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d58:	4b08      	ldr	r3, [pc, #32]	; (8003d7c <HAL_Init+0x40>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a07      	ldr	r2, [pc, #28]	; (8003d7c <HAL_Init+0x40>)
 8003d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d64:	2003      	movs	r0, #3
 8003d66:	f001 fc56 	bl	8005616 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d6a:	2000      	movs	r0, #0
 8003d6c:	f7ff fee2 	bl	8003b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d70:	f7ff fc0e 	bl	8003590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40023c00 	.word	0x40023c00

08003d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d84:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <HAL_IncTick+0x20>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <HAL_IncTick+0x24>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4413      	add	r3, r2
 8003d90:	4a04      	ldr	r2, [pc, #16]	; (8003da4 <HAL_IncTick+0x24>)
 8003d92:	6013      	str	r3, [r2, #0]
}
 8003d94:	bf00      	nop
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	2000000c 	.word	0x2000000c
 8003da4:	2001588c 	.word	0x2001588c

08003da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  return uwTick;
 8003dac:	4b03      	ldr	r3, [pc, #12]	; (8003dbc <HAL_GetTick+0x14>)
 8003dae:	681b      	ldr	r3, [r3, #0]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	2001588c 	.word	0x2001588c

08003dc0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e033      	b.n	8003e3e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d109      	bne.n	8003df2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7ff fc02 	bl	80035e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	f003 0310 	and.w	r3, r3, #16
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d118      	bne.n	8003e30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003e06:	f023 0302 	bic.w	r3, r3, #2
 8003e0a:	f043 0202 	orr.w	r2, r3, #2
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fbf0 	bl	80045f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f023 0303 	bic.w	r3, r3, #3
 8003e26:	f043 0201 	orr.w	r2, r3, #1
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	641a      	str	r2, [r3, #64]	; 0x40
 8003e2e:	e001      	b.n	8003e34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d101      	bne.n	8003e62 <HAL_ADC_Start+0x1a>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	e0a5      	b.n	8003fae <HAL_ADC_Start+0x166>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d018      	beq.n	8003eaa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0201 	orr.w	r2, r2, #1
 8003e86:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003e88:	4b4c      	ldr	r3, [pc, #304]	; (8003fbc <HAL_ADC_Start+0x174>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a4c      	ldr	r2, [pc, #304]	; (8003fc0 <HAL_ADC_Start+0x178>)
 8003e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e92:	0c9a      	lsrs	r2, r3, #18
 8003e94:	4613      	mov	r3, r2
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	4413      	add	r3, r2
 8003e9a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003e9c:	e002      	b.n	8003ea4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1f9      	bne.n	8003e9e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d179      	bne.n	8003fac <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003ec0:	f023 0301 	bic.w	r3, r3, #1
 8003ec4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d007      	beq.n	8003eea <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ee2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef6:	d106      	bne.n	8003f06 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efc:	f023 0206 	bic.w	r2, r3, #6
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	645a      	str	r2, [r3, #68]	; 0x44
 8003f04:	e002      	b.n	8003f0c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f14:	4b2b      	ldr	r3, [pc, #172]	; (8003fc4 <HAL_ADC_Start+0x17c>)
 8003f16:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003f20:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f003 031f 	and.w	r3, r3, #31
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d12a      	bne.n	8003f84 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a25      	ldr	r2, [pc, #148]	; (8003fc8 <HAL_ADC_Start+0x180>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d015      	beq.n	8003f64 <HAL_ADC_Start+0x11c>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a23      	ldr	r2, [pc, #140]	; (8003fcc <HAL_ADC_Start+0x184>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d105      	bne.n	8003f4e <HAL_ADC_Start+0x106>
 8003f42:	4b20      	ldr	r3, [pc, #128]	; (8003fc4 <HAL_ADC_Start+0x17c>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f003 031f 	and.w	r3, r3, #31
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00a      	beq.n	8003f64 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1f      	ldr	r2, [pc, #124]	; (8003fd0 <HAL_ADC_Start+0x188>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d129      	bne.n	8003fac <HAL_ADC_Start+0x164>
 8003f58:	4b1a      	ldr	r3, [pc, #104]	; (8003fc4 <HAL_ADC_Start+0x17c>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	2b0f      	cmp	r3, #15
 8003f62:	d823      	bhi.n	8003fac <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d11c      	bne.n	8003fac <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f80:	609a      	str	r2, [r3, #8]
 8003f82:	e013      	b.n	8003fac <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a0f      	ldr	r2, [pc, #60]	; (8003fc8 <HAL_ADC_Start+0x180>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d10e      	bne.n	8003fac <HAL_ADC_Start+0x164>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d107      	bne.n	8003fac <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003faa:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	20000004 	.word	0x20000004
 8003fc0:	431bde83 	.word	0x431bde83
 8003fc4:	40012300 	.word	0x40012300
 8003fc8:	40012000 	.word	0x40012000
 8003fcc:	40012100 	.word	0x40012100
 8003fd0:	40012200 	.word	0x40012200

08003fd4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff0:	d113      	bne.n	800401a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004000:	d10b      	bne.n	800401a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	f043 0220 	orr.w	r2, r3, #32
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e05c      	b.n	80040d4 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800401a:	f7ff fec5 	bl	8003da8 <HAL_GetTick>
 800401e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004020:	e01a      	b.n	8004058 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004028:	d016      	beq.n	8004058 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d007      	beq.n	8004040 <HAL_ADC_PollForConversion+0x6c>
 8004030:	f7ff feba 	bl	8003da8 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	429a      	cmp	r2, r3
 800403e:	d20b      	bcs.n	8004058 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004044:	f043 0204 	orr.w	r2, r3, #4
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e03d      	b.n	80040d4 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b02      	cmp	r3, #2
 8004064:	d1dd      	bne.n	8004022 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f06f 0212 	mvn.w	r2, #18
 800406e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d123      	bne.n	80040d2 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800408e:	2b00      	cmp	r3, #0
 8004090:	d11f      	bne.n	80040d2 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004098:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800409c:	2b00      	cmp	r3, #0
 800409e:	d006      	beq.n	80040ae <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d111      	bne.n	80040d2 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d105      	bne.n	80040d2 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	f043 0201 	orr.w	r2, r3, #1
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	2300      	movs	r3, #0
 80040ea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	bf0c      	ite	eq
 80040fa:	2301      	moveq	r3, #1
 80040fc:	2300      	movne	r3, #0
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f003 0320 	and.w	r3, r3, #32
 800410c:	2b20      	cmp	r3, #32
 800410e:	bf0c      	ite	eq
 8004110:	2301      	moveq	r3, #1
 8004112:	2300      	movne	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d049      	beq.n	80041b2 <HAL_ADC_IRQHandler+0xd6>
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d046      	beq.n	80041b2 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	f003 0310 	and.w	r3, r3, #16
 800412c:	2b00      	cmp	r3, #0
 800412e:	d105      	bne.n	800413c <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d12b      	bne.n	80041a2 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800414e:	2b00      	cmp	r3, #0
 8004150:	d127      	bne.n	80041a2 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004158:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800415c:	2b00      	cmp	r3, #0
 800415e:	d006      	beq.n	800416e <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800416a:	2b00      	cmp	r3, #0
 800416c:	d119      	bne.n	80041a2 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0220 	bic.w	r2, r2, #32
 800417c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d105      	bne.n	80041a2 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	f043 0201 	orr.w	r2, r3, #1
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f8e8 	bl	8004378 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f06f 0212 	mvn.w	r2, #18
 80041b0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b04      	cmp	r3, #4
 80041be:	bf0c      	ite	eq
 80041c0:	2301      	moveq	r3, #1
 80041c2:	2300      	movne	r3, #0
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d2:	2b80      	cmp	r3, #128	; 0x80
 80041d4:	bf0c      	ite	eq
 80041d6:	2301      	moveq	r3, #1
 80041d8:	2300      	movne	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d057      	beq.n	8004294 <HAL_ADC_IRQHandler+0x1b8>
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d054      	beq.n	8004294 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	f003 0310 	and.w	r3, r3, #16
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d105      	bne.n	8004202 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d139      	bne.n	8004284 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004216:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800421a:	2b00      	cmp	r3, #0
 800421c:	d006      	beq.n	800422c <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004228:	2b00      	cmp	r3, #0
 800422a:	d12b      	bne.n	8004284 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004236:	2b00      	cmp	r3, #0
 8004238:	d124      	bne.n	8004284 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004244:	2b00      	cmp	r3, #0
 8004246:	d11d      	bne.n	8004284 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800424c:	2b00      	cmp	r3, #0
 800424e:	d119      	bne.n	8004284 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800425e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004264:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004274:	2b00      	cmp	r3, #0
 8004276:	d105      	bne.n	8004284 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	f043 0201 	orr.w	r2, r3, #1
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 fab3 	bl	80047f0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f06f 020c 	mvn.w	r2, #12
 8004292:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b01      	cmp	r3, #1
 80042a0:	bf0c      	ite	eq
 80042a2:	2301      	moveq	r3, #1
 80042a4:	2300      	movne	r3, #0
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b4:	2b40      	cmp	r3, #64	; 0x40
 80042b6:	bf0c      	ite	eq
 80042b8:	2301      	moveq	r3, #1
 80042ba:	2300      	movne	r3, #0
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d017      	beq.n	80042f6 <HAL_ADC_IRQHandler+0x21a>
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d014      	beq.n	80042f6 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d10d      	bne.n	80042f6 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f850 	bl	800438c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f06f 0201 	mvn.w	r2, #1
 80042f4:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b20      	cmp	r3, #32
 8004302:	bf0c      	ite	eq
 8004304:	2301      	moveq	r3, #1
 8004306:	2300      	movne	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004316:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800431a:	bf0c      	ite	eq
 800431c:	2301      	moveq	r3, #1
 800431e:	2300      	movne	r3, #0
 8004320:	b2db      	uxtb	r3, r3
 8004322:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d015      	beq.n	8004356 <HAL_ADC_IRQHandler+0x27a>
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d012      	beq.n	8004356 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004334:	f043 0202 	orr.w	r2, r3, #2
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f06f 0220 	mvn.w	r2, #32
 8004344:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f82a 	bl	80043a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f06f 0220 	mvn.w	r2, #32
 8004354:	601a      	str	r2, [r3, #0]
  }
}
 8004356:	bf00      	nop
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800436c:	4618      	mov	r0, r3
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80043be:	2300      	movs	r3, #0
 80043c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d101      	bne.n	80043d0 <HAL_ADC_ConfigChannel+0x1c>
 80043cc:	2302      	movs	r3, #2
 80043ce:	e105      	b.n	80045dc <HAL_ADC_ConfigChannel+0x228>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b09      	cmp	r3, #9
 80043de:	d925      	bls.n	800442c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68d9      	ldr	r1, [r3, #12]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	461a      	mov	r2, r3
 80043ee:	4613      	mov	r3, r2
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	4413      	add	r3, r2
 80043f4:	3b1e      	subs	r3, #30
 80043f6:	2207      	movs	r2, #7
 80043f8:	fa02 f303 	lsl.w	r3, r2, r3
 80043fc:	43da      	mvns	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	400a      	ands	r2, r1
 8004404:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68d9      	ldr	r1, [r3, #12]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	b29b      	uxth	r3, r3
 8004416:	4618      	mov	r0, r3
 8004418:	4603      	mov	r3, r0
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	4403      	add	r3, r0
 800441e:	3b1e      	subs	r3, #30
 8004420:	409a      	lsls	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	60da      	str	r2, [r3, #12]
 800442a:	e022      	b.n	8004472 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6919      	ldr	r1, [r3, #16]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	b29b      	uxth	r3, r3
 8004438:	461a      	mov	r2, r3
 800443a:	4613      	mov	r3, r2
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	4413      	add	r3, r2
 8004440:	2207      	movs	r2, #7
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	43da      	mvns	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	400a      	ands	r2, r1
 800444e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6919      	ldr	r1, [r3, #16]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	b29b      	uxth	r3, r3
 8004460:	4618      	mov	r0, r3
 8004462:	4603      	mov	r3, r0
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	4403      	add	r3, r0
 8004468:	409a      	lsls	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2b06      	cmp	r3, #6
 8004478:	d824      	bhi.n	80044c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	4613      	mov	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	3b05      	subs	r3, #5
 800448c:	221f      	movs	r2, #31
 800448e:	fa02 f303 	lsl.w	r3, r2, r3
 8004492:	43da      	mvns	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	400a      	ands	r2, r1
 800449a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	4618      	mov	r0, r3
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	4613      	mov	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4413      	add	r3, r2
 80044b4:	3b05      	subs	r3, #5
 80044b6:	fa00 f203 	lsl.w	r2, r0, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	635a      	str	r2, [r3, #52]	; 0x34
 80044c2:	e04c      	b.n	800455e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	2b0c      	cmp	r3, #12
 80044ca:	d824      	bhi.n	8004516 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	4613      	mov	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	3b23      	subs	r3, #35	; 0x23
 80044de:	221f      	movs	r2, #31
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	43da      	mvns	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	400a      	ands	r2, r1
 80044ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	4618      	mov	r0, r3
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	4613      	mov	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	3b23      	subs	r3, #35	; 0x23
 8004508:	fa00 f203 	lsl.w	r2, r0, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	631a      	str	r2, [r3, #48]	; 0x30
 8004514:	e023      	b.n	800455e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	4613      	mov	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	3b41      	subs	r3, #65	; 0x41
 8004528:	221f      	movs	r2, #31
 800452a:	fa02 f303 	lsl.w	r3, r2, r3
 800452e:	43da      	mvns	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	400a      	ands	r2, r1
 8004536:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	b29b      	uxth	r3, r3
 8004544:	4618      	mov	r0, r3
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	4613      	mov	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	3b41      	subs	r3, #65	; 0x41
 8004552:	fa00 f203 	lsl.w	r2, r0, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	430a      	orrs	r2, r1
 800455c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800455e:	4b22      	ldr	r3, [pc, #136]	; (80045e8 <HAL_ADC_ConfigChannel+0x234>)
 8004560:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a21      	ldr	r2, [pc, #132]	; (80045ec <HAL_ADC_ConfigChannel+0x238>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d109      	bne.n	8004580 <HAL_ADC_ConfigChannel+0x1cc>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b12      	cmp	r3, #18
 8004572:	d105      	bne.n	8004580 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a19      	ldr	r2, [pc, #100]	; (80045ec <HAL_ADC_ConfigChannel+0x238>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d123      	bne.n	80045d2 <HAL_ADC_ConfigChannel+0x21e>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b10      	cmp	r3, #16
 8004590:	d003      	beq.n	800459a <HAL_ADC_ConfigChannel+0x1e6>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b11      	cmp	r3, #17
 8004598:	d11b      	bne.n	80045d2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b10      	cmp	r3, #16
 80045ac:	d111      	bne.n	80045d2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80045ae:	4b10      	ldr	r3, [pc, #64]	; (80045f0 <HAL_ADC_ConfigChannel+0x23c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a10      	ldr	r2, [pc, #64]	; (80045f4 <HAL_ADC_ConfigChannel+0x240>)
 80045b4:	fba2 2303 	umull	r2, r3, r2, r3
 80045b8:	0c9a      	lsrs	r2, r3, #18
 80045ba:	4613      	mov	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80045c4:	e002      	b.n	80045cc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	3b01      	subs	r3, #1
 80045ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1f9      	bne.n	80045c6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr
 80045e8:	40012300 	.word	0x40012300
 80045ec:	40012000 	.word	0x40012000
 80045f0:	20000004 	.word	0x20000004
 80045f4:	431bde83 	.word	0x431bde83

080045f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004600:	4b79      	ldr	r3, [pc, #484]	; (80047e8 <ADC_Init+0x1f0>)
 8004602:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	431a      	orrs	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800462c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6859      	ldr	r1, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	021a      	lsls	r2, r3, #8
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004650:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6859      	ldr	r1, [r3, #4]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689a      	ldr	r2, [r3, #8]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004672:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6899      	ldr	r1, [r3, #8]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468a:	4a58      	ldr	r2, [pc, #352]	; (80047ec <ADC_Init+0x1f4>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d022      	beq.n	80046d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689a      	ldr	r2, [r3, #8]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800469e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6899      	ldr	r1, [r3, #8]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80046c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6899      	ldr	r1, [r3, #8]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	609a      	str	r2, [r3, #8]
 80046d4:	e00f      	b.n	80046f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80046f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0202 	bic.w	r2, r2, #2
 8004704:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6899      	ldr	r1, [r3, #8]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	7e1b      	ldrb	r3, [r3, #24]
 8004710:	005a      	lsls	r2, r3, #1
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d01b      	beq.n	800475c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004732:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004742:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6859      	ldr	r1, [r3, #4]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	3b01      	subs	r3, #1
 8004750:	035a      	lsls	r2, r3, #13
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	605a      	str	r2, [r3, #4]
 800475a:	e007      	b.n	800476c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800476a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800477a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	3b01      	subs	r3, #1
 8004788:	051a      	lsls	r2, r3, #20
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80047a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6899      	ldr	r1, [r3, #8]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047ae:	025a      	lsls	r2, r3, #9
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689a      	ldr	r2, [r3, #8]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6899      	ldr	r1, [r3, #8]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	029a      	lsls	r2, r3, #10
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	609a      	str	r2, [r3, #8]
}
 80047dc:	bf00      	nop
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	40012300 	.word	0x40012300
 80047ec:	0f000001 	.word	0x0f000001

080047f0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e0ed      	b.n	80049f2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 3020 	ldrb.w	r3, [r3, #32]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d102      	bne.n	8004828 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7fe ff64 	bl	80036f0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 0202 	bic.w	r2, r2, #2
 8004836:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004838:	f7ff fab6 	bl	8003da8 <HAL_GetTick>
 800483c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800483e:	e012      	b.n	8004866 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004840:	f7ff fab2 	bl	8003da8 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b0a      	cmp	r3, #10
 800484c:	d90b      	bls.n	8004866 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2205      	movs	r2, #5
 800485e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e0c5      	b.n	80049f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1e5      	bne.n	8004840 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0201 	orr.w	r2, r2, #1
 8004882:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004884:	f7ff fa90 	bl	8003da8 <HAL_GetTick>
 8004888:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800488a:	e012      	b.n	80048b2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800488c:	f7ff fa8c 	bl	8003da8 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b0a      	cmp	r3, #10
 8004898:	d90b      	bls.n	80048b2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2205      	movs	r2, #5
 80048aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e09f      	b.n	80049f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0e5      	beq.n	800488c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	7e1b      	ldrb	r3, [r3, #24]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d108      	bne.n	80048da <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	e007      	b.n	80048ea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	7e5b      	ldrb	r3, [r3, #25]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d108      	bne.n	8004904 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	e007      	b.n	8004914 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004912:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	7e9b      	ldrb	r3, [r3, #26]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d108      	bne.n	800492e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0220 	orr.w	r2, r2, #32
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	e007      	b.n	800493e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0220 	bic.w	r2, r2, #32
 800493c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	7edb      	ldrb	r3, [r3, #27]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d108      	bne.n	8004958 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0210 	bic.w	r2, r2, #16
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	e007      	b.n	8004968 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 0210 	orr.w	r2, r2, #16
 8004966:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	7f1b      	ldrb	r3, [r3, #28]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d108      	bne.n	8004982 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0208 	orr.w	r2, r2, #8
 800497e:	601a      	str	r2, [r3, #0]
 8004980:	e007      	b.n	8004992 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0208 	bic.w	r2, r2, #8
 8004990:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	7f5b      	ldrb	r3, [r3, #29]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d108      	bne.n	80049ac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f042 0204 	orr.w	r2, r2, #4
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	e007      	b.n	80049bc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0204 	bic.w	r2, r2, #4
 80049ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689a      	ldr	r2, [r3, #8]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	431a      	orrs	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	431a      	orrs	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	ea42 0103 	orr.w	r1, r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	1e5a      	subs	r2, r3, #1
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
	...

080049fc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a12:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004a14:	7cfb      	ldrb	r3, [r7, #19]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d003      	beq.n	8004a22 <HAL_CAN_ConfigFilter+0x26>
 8004a1a:	7cfb      	ldrb	r3, [r7, #19]
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	f040 80be 	bne.w	8004b9e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004a22:	4b65      	ldr	r3, [pc, #404]	; (8004bb8 <HAL_CAN_ConfigFilter+0x1bc>)
 8004a24:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004a2c:	f043 0201 	orr.w	r2, r3, #1
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004a3c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a50:	021b      	lsls	r3, r3, #8
 8004a52:	431a      	orrs	r2, r3
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f003 031f 	and.w	r3, r3, #31
 8004a62:	2201      	movs	r2, #1
 8004a64:	fa02 f303 	lsl.w	r3, r2, r3
 8004a68:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	43db      	mvns	r3, r3
 8004a74:	401a      	ands	r2, r3
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d123      	bne.n	8004acc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	401a      	ands	r2, r3
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004aa6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	3248      	adds	r2, #72	; 0x48
 8004aac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004ac0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004ac2:	6979      	ldr	r1, [r7, #20]
 8004ac4:	3348      	adds	r3, #72	; 0x48
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	440b      	add	r3, r1
 8004aca:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d122      	bne.n	8004b1a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	431a      	orrs	r2, r3
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004af4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	3248      	adds	r2, #72	; 0x48
 8004afa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004b0e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004b10:	6979      	ldr	r1, [r7, #20]
 8004b12:	3348      	adds	r3, #72	; 0x48
 8004b14:	00db      	lsls	r3, r3, #3
 8004b16:	440b      	add	r3, r1
 8004b18:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d109      	bne.n	8004b36 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	43db      	mvns	r3, r3
 8004b2c:	401a      	ands	r2, r3
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004b34:	e007      	b.n	8004b46 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d109      	bne.n	8004b62 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	43db      	mvns	r3, r3
 8004b58:	401a      	ands	r2, r3
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004b60:	e007      	b.n	8004b72 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d107      	bne.n	8004b8a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	431a      	orrs	r2, r3
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b90:	f023 0201 	bic.w	r2, r3, #1
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	e006      	b.n	8004bac <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
  }
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	371c      	adds	r7, #28
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	40006400 	.word	0x40006400

08004bbc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d12e      	bne.n	8004c2e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0201 	bic.w	r2, r2, #1
 8004be6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004be8:	f7ff f8de 	bl	8003da8 <HAL_GetTick>
 8004bec:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004bee:	e012      	b.n	8004c16 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004bf0:	f7ff f8da 	bl	8003da8 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b0a      	cmp	r3, #10
 8004bfc:	d90b      	bls.n	8004c16 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2205      	movs	r2, #5
 8004c0e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e012      	b.n	8004c3c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e5      	bne.n	8004bf0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	e006      	b.n	8004c3c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
  }
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b089      	sub	sp, #36	; 0x24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
 8004c50:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c58:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004c62:	7ffb      	ldrb	r3, [r7, #31]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d003      	beq.n	8004c70 <HAL_CAN_AddTxMessage+0x2c>
 8004c68:	7ffb      	ldrb	r3, [r7, #31]
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	f040 80b8 	bne.w	8004de0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10a      	bne.n	8004c90 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d105      	bne.n	8004c90 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 80a0 	beq.w	8004dd0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	0e1b      	lsrs	r3, r3, #24
 8004c94:	f003 0303 	and.w	r3, r3, #3
 8004c98:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d907      	bls.n	8004cb0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e09e      	b.n	8004dee <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	409a      	lsls	r2, r3
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10d      	bne.n	8004cde <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004ccc:	68f9      	ldr	r1, [r7, #12]
 8004cce:	6809      	ldr	r1, [r1, #0]
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	3318      	adds	r3, #24
 8004cd6:	011b      	lsls	r3, r3, #4
 8004cd8:	440b      	add	r3, r1
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	e00f      	b.n	8004cfe <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004ce8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004cee:	68f9      	ldr	r1, [r7, #12]
 8004cf0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004cf2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	3318      	adds	r3, #24
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	440b      	add	r3, r1
 8004cfc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6819      	ldr	r1, [r3, #0]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	691a      	ldr	r2, [r3, #16]
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	3318      	adds	r3, #24
 8004d0a:	011b      	lsls	r3, r3, #4
 8004d0c:	440b      	add	r3, r1
 8004d0e:	3304      	adds	r3, #4
 8004d10:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	7d1b      	ldrb	r3, [r3, #20]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d111      	bne.n	8004d3e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	3318      	adds	r3, #24
 8004d22:	011b      	lsls	r3, r3, #4
 8004d24:	4413      	add	r3, r2
 8004d26:	3304      	adds	r3, #4
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	6811      	ldr	r1, [r2, #0]
 8004d2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	3318      	adds	r3, #24
 8004d36:	011b      	lsls	r3, r3, #4
 8004d38:	440b      	add	r3, r1
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	3307      	adds	r3, #7
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	061a      	lsls	r2, r3, #24
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	3306      	adds	r3, #6
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	041b      	lsls	r3, r3, #16
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3305      	adds	r3, #5
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	021b      	lsls	r3, r3, #8
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	3204      	adds	r2, #4
 8004d5e:	7812      	ldrb	r2, [r2, #0]
 8004d60:	4610      	mov	r0, r2
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	6811      	ldr	r1, [r2, #0]
 8004d66:	ea43 0200 	orr.w	r2, r3, r0
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	011b      	lsls	r3, r3, #4
 8004d6e:	440b      	add	r3, r1
 8004d70:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004d74:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	3303      	adds	r3, #3
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	061a      	lsls	r2, r3, #24
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3302      	adds	r3, #2
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	041b      	lsls	r3, r3, #16
 8004d86:	431a      	orrs	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	021b      	lsls	r3, r3, #8
 8004d90:	4313      	orrs	r3, r2
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	7812      	ldrb	r2, [r2, #0]
 8004d96:	4610      	mov	r0, r2
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	6811      	ldr	r1, [r2, #0]
 8004d9c:	ea43 0200 	orr.w	r2, r3, r0
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	011b      	lsls	r3, r3, #4
 8004da4:	440b      	add	r3, r1
 8004da6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004daa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	3318      	adds	r3, #24
 8004db4:	011b      	lsls	r3, r3, #4
 8004db6:	4413      	add	r3, r2
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	6811      	ldr	r1, [r2, #0]
 8004dbe:	f043 0201 	orr.w	r2, r3, #1
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	3318      	adds	r3, #24
 8004dc6:	011b      	lsls	r3, r3, #4
 8004dc8:	440b      	add	r3, r1
 8004dca:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	e00e      	b.n	8004dee <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e006      	b.n	8004dee <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
  }
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3724      	adds	r7, #36	; 0x24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b087      	sub	sp, #28
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	60f8      	str	r0, [r7, #12]
 8004e02:	60b9      	str	r1, [r7, #8]
 8004e04:	607a      	str	r2, [r7, #4]
 8004e06:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e0e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004e10:	7dfb      	ldrb	r3, [r7, #23]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d003      	beq.n	8004e1e <HAL_CAN_GetRxMessage+0x24>
 8004e16:	7dfb      	ldrb	r3, [r7, #23]
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	f040 80f3 	bne.w	8005004 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10e      	bne.n	8004e42 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d116      	bne.n	8004e60 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e0e7      	b.n	8005012 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	f003 0303 	and.w	r3, r3, #3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d107      	bne.n	8004e60 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e0d8      	b.n	8005012 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	331b      	adds	r3, #27
 8004e68:	011b      	lsls	r3, r3, #4
 8004e6a:	4413      	add	r3, r2
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0204 	and.w	r2, r3, #4
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10c      	bne.n	8004e98 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	331b      	adds	r3, #27
 8004e86:	011b      	lsls	r3, r3, #4
 8004e88:	4413      	add	r3, r2
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	0d5b      	lsrs	r3, r3, #21
 8004e8e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	e00b      	b.n	8004eb0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	331b      	adds	r3, #27
 8004ea0:	011b      	lsls	r3, r3, #4
 8004ea2:	4413      	add	r3, r2
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	08db      	lsrs	r3, r3, #3
 8004ea8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	331b      	adds	r3, #27
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	4413      	add	r3, r2
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0202 	and.w	r2, r3, #2
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	331b      	adds	r3, #27
 8004ece:	011b      	lsls	r3, r3, #4
 8004ed0:	4413      	add	r3, r2
 8004ed2:	3304      	adds	r3, #4
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 020f 	and.w	r2, r3, #15
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	331b      	adds	r3, #27
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	4413      	add	r3, r2
 8004eea:	3304      	adds	r3, #4
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	0a1b      	lsrs	r3, r3, #8
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	331b      	adds	r3, #27
 8004efe:	011b      	lsls	r3, r3, #4
 8004f00:	4413      	add	r3, r2
 8004f02:	3304      	adds	r3, #4
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	0c1b      	lsrs	r3, r3, #16
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	011b      	lsls	r3, r3, #4
 8004f16:	4413      	add	r3, r2
 8004f18:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	b2da      	uxtb	r2, r3
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	011b      	lsls	r3, r3, #4
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	0a1a      	lsrs	r2, r3, #8
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	b2d2      	uxtb	r2, r2
 8004f3c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	011b      	lsls	r3, r3, #4
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	0c1a      	lsrs	r2, r3, #16
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	3302      	adds	r3, #2
 8004f54:	b2d2      	uxtb	r2, r2
 8004f56:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	011b      	lsls	r3, r3, #4
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	0e1a      	lsrs	r2, r3, #24
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	3303      	adds	r3, #3
 8004f6e:	b2d2      	uxtb	r2, r2
 8004f70:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	011b      	lsls	r3, r3, #4
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	3304      	adds	r3, #4
 8004f86:	b2d2      	uxtb	r2, r2
 8004f88:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	011b      	lsls	r3, r3, #4
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	0a1a      	lsrs	r2, r3, #8
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	3305      	adds	r3, #5
 8004fa0:	b2d2      	uxtb	r2, r2
 8004fa2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	0c1a      	lsrs	r2, r3, #16
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	3306      	adds	r3, #6
 8004fba:	b2d2      	uxtb	r2, r2
 8004fbc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	011b      	lsls	r3, r3, #4
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	0e1a      	lsrs	r2, r3, #24
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	3307      	adds	r3, #7
 8004fd4:	b2d2      	uxtb	r2, r2
 8004fd6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d108      	bne.n	8004ff0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68da      	ldr	r2, [r3, #12]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f042 0220 	orr.w	r2, r2, #32
 8004fec:	60da      	str	r2, [r3, #12]
 8004fee:	e007      	b.n	8005000 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	691a      	ldr	r2, [r3, #16]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f042 0220 	orr.w	r2, r2, #32
 8004ffe:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005000:	2300      	movs	r3, #0
 8005002:	e006      	b.n	8005012 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005008:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
  }
}
 8005012:	4618      	mov	r0, r3
 8005014:	371c      	adds	r7, #28
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800501e:	b480      	push	{r7}
 8005020:	b085      	sub	sp, #20
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
 8005026:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800502e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005030:	7bfb      	ldrb	r3, [r7, #15]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d002      	beq.n	800503c <HAL_CAN_ActivateNotification+0x1e>
 8005036:	7bfb      	ldrb	r3, [r7, #15]
 8005038:	2b02      	cmp	r3, #2
 800503a:	d109      	bne.n	8005050 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6959      	ldr	r1, [r3, #20]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800504c:	2300      	movs	r3, #0
 800504e:	e006      	b.n	800505e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
  }
}
 800505e:	4618      	mov	r0, r3
 8005060:	3714      	adds	r7, #20
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b08a      	sub	sp, #40	; 0x28
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005072:	2300      	movs	r3, #0
 8005074:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80050a6:	6a3b      	ldr	r3, [r7, #32]
 80050a8:	f003 0301 	and.w	r3, r3, #1
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d07c      	beq.n	80051aa <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d023      	beq.n	8005102 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2201      	movs	r2, #1
 80050c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f97d 	bl	80053cc <HAL_CAN_TxMailbox0CompleteCallback>
 80050d2:	e016      	b.n	8005102 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	f003 0304 	and.w	r3, r3, #4
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d004      	beq.n	80050e8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80050e4:	627b      	str	r3, [r7, #36]	; 0x24
 80050e6:	e00c      	b.n	8005102 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	f003 0308 	and.w	r3, r3, #8
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d004      	beq.n	80050fc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050f8:	627b      	str	r3, [r7, #36]	; 0x24
 80050fa:	e002      	b.n	8005102 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f983 	bl	8005408 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005108:	2b00      	cmp	r3, #0
 800510a:	d024      	beq.n	8005156 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005114:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800511c:	2b00      	cmp	r3, #0
 800511e:	d003      	beq.n	8005128 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f95d 	bl	80053e0 <HAL_CAN_TxMailbox1CompleteCallback>
 8005126:	e016      	b.n	8005156 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800512e:	2b00      	cmp	r3, #0
 8005130:	d004      	beq.n	800513c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005138:	627b      	str	r3, [r7, #36]	; 0x24
 800513a:	e00c      	b.n	8005156 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005142:	2b00      	cmp	r3, #0
 8005144:	d004      	beq.n	8005150 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800514c:	627b      	str	r3, [r7, #36]	; 0x24
 800514e:	e002      	b.n	8005156 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f963 	bl	800541c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d024      	beq.n	80051aa <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005168:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f93d 	bl	80053f4 <HAL_CAN_TxMailbox2CompleteCallback>
 800517a:	e016      	b.n	80051aa <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d004      	beq.n	8005190 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800518c:	627b      	str	r3, [r7, #36]	; 0x24
 800518e:	e00c      	b.n	80051aa <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d004      	beq.n	80051a4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051a0:	627b      	str	r3, [r7, #36]	; 0x24
 80051a2:	e002      	b.n	80051aa <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f943 	bl	8005430 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	f003 0308 	and.w	r3, r3, #8
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00c      	beq.n	80051ce <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f003 0310 	and.w	r3, r3, #16
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d007      	beq.n	80051ce <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051c4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2210      	movs	r2, #16
 80051cc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00b      	beq.n	80051f0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f003 0308 	and.w	r3, r3, #8
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d006      	beq.n	80051f0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2208      	movs	r2, #8
 80051e8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f92a 	bl	8005444 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d009      	beq.n	800520e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f003 0303 	and.w	r3, r3, #3
 8005204:	2b00      	cmp	r3, #0
 8005206:	d002      	beq.n	800520e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7fb fe45 	bl	8000e98 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00c      	beq.n	8005232 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f003 0310 	and.w	r3, r3, #16
 800521e:	2b00      	cmp	r3, #0
 8005220:	d007      	beq.n	8005232 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005228:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2210      	movs	r2, #16
 8005230:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	f003 0320 	and.w	r3, r3, #32
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00b      	beq.n	8005254 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	f003 0308 	and.w	r3, r3, #8
 8005242:	2b00      	cmp	r3, #0
 8005244:	d006      	beq.n	8005254 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2208      	movs	r2, #8
 800524c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f90c 	bl	800546c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	f003 0310 	and.w	r3, r3, #16
 800525a:	2b00      	cmp	r3, #0
 800525c:	d009      	beq.n	8005272 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	f003 0303 	and.w	r3, r3, #3
 8005268:	2b00      	cmp	r3, #0
 800526a:	d002      	beq.n	8005272 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f8f3 	bl	8005458 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005272:	6a3b      	ldr	r3, [r7, #32]
 8005274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00b      	beq.n	8005294 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	f003 0310 	and.w	r3, r3, #16
 8005282:	2b00      	cmp	r3, #0
 8005284:	d006      	beq.n	8005294 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2210      	movs	r2, #16
 800528c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f8f6 	bl	8005480 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00b      	beq.n	80052b6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d006      	beq.n	80052b6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2208      	movs	r2, #8
 80052ae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f8ef 	bl	8005494 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80052b6:	6a3b      	ldr	r3, [r7, #32]
 80052b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d075      	beq.n	80053ac <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	f003 0304 	and.w	r3, r3, #4
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d06c      	beq.n	80053a4 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d008      	beq.n	80052e6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	f043 0301 	orr.w	r3, r3, #1
 80052e4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80052e6:	6a3b      	ldr	r3, [r7, #32]
 80052e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d008      	beq.n	8005302 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	f043 0302 	orr.w	r3, r3, #2
 8005300:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005308:	2b00      	cmp	r3, #0
 800530a:	d008      	beq.n	800531e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	f043 0304 	orr.w	r3, r3, #4
 800531c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005324:	2b00      	cmp	r3, #0
 8005326:	d03d      	beq.n	80053a4 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800532e:	2b00      	cmp	r3, #0
 8005330:	d038      	beq.n	80053a4 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005338:	2b30      	cmp	r3, #48	; 0x30
 800533a:	d017      	beq.n	800536c <HAL_CAN_IRQHandler+0x302>
 800533c:	2b30      	cmp	r3, #48	; 0x30
 800533e:	d804      	bhi.n	800534a <HAL_CAN_IRQHandler+0x2e0>
 8005340:	2b10      	cmp	r3, #16
 8005342:	d009      	beq.n	8005358 <HAL_CAN_IRQHandler+0x2ee>
 8005344:	2b20      	cmp	r3, #32
 8005346:	d00c      	beq.n	8005362 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005348:	e024      	b.n	8005394 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800534a:	2b50      	cmp	r3, #80	; 0x50
 800534c:	d018      	beq.n	8005380 <HAL_CAN_IRQHandler+0x316>
 800534e:	2b60      	cmp	r3, #96	; 0x60
 8005350:	d01b      	beq.n	800538a <HAL_CAN_IRQHandler+0x320>
 8005352:	2b40      	cmp	r3, #64	; 0x40
 8005354:	d00f      	beq.n	8005376 <HAL_CAN_IRQHandler+0x30c>
            break;
 8005356:	e01d      	b.n	8005394 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8005358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535a:	f043 0308 	orr.w	r3, r3, #8
 800535e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005360:	e018      	b.n	8005394 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	f043 0310 	orr.w	r3, r3, #16
 8005368:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800536a:	e013      	b.n	8005394 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	f043 0320 	orr.w	r3, r3, #32
 8005372:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005374:	e00e      	b.n	8005394 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800537c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800537e:	e009      	b.n	8005394 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005386:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005388:	e004      	b.n	8005394 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005390:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005392:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	699a      	ldr	r2, [r3, #24]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80053a2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2204      	movs	r2, #4
 80053aa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d008      	beq.n	80053c4 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	431a      	orrs	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f872 	bl	80054a8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80053c4:	bf00      	nop
 80053c6:	3728      	adds	r7, #40	; 0x28
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f003 0307 	and.w	r3, r3, #7
 80054ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054cc:	4b0c      	ldr	r3, [pc, #48]	; (8005500 <__NVIC_SetPriorityGrouping+0x44>)
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80054d8:	4013      	ands	r3, r2
 80054da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80054e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80054e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054ee:	4a04      	ldr	r2, [pc, #16]	; (8005500 <__NVIC_SetPriorityGrouping+0x44>)
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	60d3      	str	r3, [r2, #12]
}
 80054f4:	bf00      	nop
 80054f6:	3714      	adds	r7, #20
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr
 8005500:	e000ed00 	.word	0xe000ed00

08005504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005504:	b480      	push	{r7}
 8005506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005508:	4b04      	ldr	r3, [pc, #16]	; (800551c <__NVIC_GetPriorityGrouping+0x18>)
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	0a1b      	lsrs	r3, r3, #8
 800550e:	f003 0307 	and.w	r3, r3, #7
}
 8005512:	4618      	mov	r0, r3
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	e000ed00 	.word	0xe000ed00

08005520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	4603      	mov	r3, r0
 8005528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800552a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800552e:	2b00      	cmp	r3, #0
 8005530:	db0b      	blt.n	800554a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005532:	79fb      	ldrb	r3, [r7, #7]
 8005534:	f003 021f 	and.w	r2, r3, #31
 8005538:	4907      	ldr	r1, [pc, #28]	; (8005558 <__NVIC_EnableIRQ+0x38>)
 800553a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800553e:	095b      	lsrs	r3, r3, #5
 8005540:	2001      	movs	r0, #1
 8005542:	fa00 f202 	lsl.w	r2, r0, r2
 8005546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800554a:	bf00      	nop
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	e000e100 	.word	0xe000e100

0800555c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	4603      	mov	r3, r0
 8005564:	6039      	str	r1, [r7, #0]
 8005566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800556c:	2b00      	cmp	r3, #0
 800556e:	db0a      	blt.n	8005586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	b2da      	uxtb	r2, r3
 8005574:	490c      	ldr	r1, [pc, #48]	; (80055a8 <__NVIC_SetPriority+0x4c>)
 8005576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800557a:	0112      	lsls	r2, r2, #4
 800557c:	b2d2      	uxtb	r2, r2
 800557e:	440b      	add	r3, r1
 8005580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005584:	e00a      	b.n	800559c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	b2da      	uxtb	r2, r3
 800558a:	4908      	ldr	r1, [pc, #32]	; (80055ac <__NVIC_SetPriority+0x50>)
 800558c:	79fb      	ldrb	r3, [r7, #7]
 800558e:	f003 030f 	and.w	r3, r3, #15
 8005592:	3b04      	subs	r3, #4
 8005594:	0112      	lsls	r2, r2, #4
 8005596:	b2d2      	uxtb	r2, r2
 8005598:	440b      	add	r3, r1
 800559a:	761a      	strb	r2, [r3, #24]
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr
 80055a8:	e000e100 	.word	0xe000e100
 80055ac:	e000ed00 	.word	0xe000ed00

080055b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b089      	sub	sp, #36	; 0x24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	f1c3 0307 	rsb	r3, r3, #7
 80055ca:	2b04      	cmp	r3, #4
 80055cc:	bf28      	it	cs
 80055ce:	2304      	movcs	r3, #4
 80055d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	3304      	adds	r3, #4
 80055d6:	2b06      	cmp	r3, #6
 80055d8:	d902      	bls.n	80055e0 <NVIC_EncodePriority+0x30>
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	3b03      	subs	r3, #3
 80055de:	e000      	b.n	80055e2 <NVIC_EncodePriority+0x32>
 80055e0:	2300      	movs	r3, #0
 80055e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	fa02 f303 	lsl.w	r3, r2, r3
 80055ee:	43da      	mvns	r2, r3
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	401a      	ands	r2, r3
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005602:	43d9      	mvns	r1, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005608:	4313      	orrs	r3, r2
         );
}
 800560a:	4618      	mov	r0, r3
 800560c:	3724      	adds	r7, #36	; 0x24
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b082      	sub	sp, #8
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7ff ff4c 	bl	80054bc <__NVIC_SetPriorityGrouping>
}
 8005624:	bf00      	nop
 8005626:	3708      	adds	r7, #8
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	4603      	mov	r3, r0
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
 8005638:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800563a:	2300      	movs	r3, #0
 800563c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800563e:	f7ff ff61 	bl	8005504 <__NVIC_GetPriorityGrouping>
 8005642:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	68b9      	ldr	r1, [r7, #8]
 8005648:	6978      	ldr	r0, [r7, #20]
 800564a:	f7ff ffb1 	bl	80055b0 <NVIC_EncodePriority>
 800564e:	4602      	mov	r2, r0
 8005650:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005654:	4611      	mov	r1, r2
 8005656:	4618      	mov	r0, r3
 8005658:	f7ff ff80 	bl	800555c <__NVIC_SetPriority>
}
 800565c:	bf00      	nop
 800565e:	3718      	adds	r7, #24
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	4603      	mov	r3, r0
 800566c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800566e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005672:	4618      	mov	r0, r3
 8005674:	f7ff ff54 	bl	8005520 <__NVIC_EnableIRQ>
}
 8005678:	bf00      	nop
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d004      	beq.n	800569e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2280      	movs	r2, #128	; 0x80
 8005698:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e00c      	b.n	80056b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2205      	movs	r2, #5
 80056a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 0201 	bic.w	r2, r2, #1
 80056b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b089      	sub	sp, #36	; 0x24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80056ce:	2300      	movs	r3, #0
 80056d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80056d6:	2300      	movs	r3, #0
 80056d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056da:	2300      	movs	r3, #0
 80056dc:	61fb      	str	r3, [r7, #28]
 80056de:	e16b      	b.n	80059b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80056e0:	2201      	movs	r2, #1
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	fa02 f303 	lsl.w	r3, r2, r3
 80056e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	4013      	ands	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	f040 815a 	bne.w	80059b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d00b      	beq.n	800571e <HAL_GPIO_Init+0x5a>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2b02      	cmp	r3, #2
 800570c:	d007      	beq.n	800571e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005712:	2b11      	cmp	r3, #17
 8005714:	d003      	beq.n	800571e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	2b12      	cmp	r3, #18
 800571c:	d130      	bne.n	8005780 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	2203      	movs	r2, #3
 800572a:	fa02 f303 	lsl.w	r3, r2, r3
 800572e:	43db      	mvns	r3, r3
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	4013      	ands	r3, r2
 8005734:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	005b      	lsls	r3, r3, #1
 800573e:	fa02 f303 	lsl.w	r3, r2, r3
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	4313      	orrs	r3, r2
 8005746:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005754:	2201      	movs	r2, #1
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	fa02 f303 	lsl.w	r3, r2, r3
 800575c:	43db      	mvns	r3, r3
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	4013      	ands	r3, r2
 8005762:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	091b      	lsrs	r3, r3, #4
 800576a:	f003 0201 	and.w	r2, r3, #1
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	fa02 f303 	lsl.w	r3, r2, r3
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	4313      	orrs	r3, r2
 8005778:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	2203      	movs	r2, #3
 800578c:	fa02 f303 	lsl.w	r3, r2, r3
 8005790:	43db      	mvns	r3, r3
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	4013      	ands	r3, r2
 8005796:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	005b      	lsls	r3, r3, #1
 80057a0:	fa02 f303 	lsl.w	r3, r2, r3
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d003      	beq.n	80057c0 <HAL_GPIO_Init+0xfc>
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	2b12      	cmp	r3, #18
 80057be:	d123      	bne.n	8005808 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	08da      	lsrs	r2, r3, #3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	3208      	adds	r2, #8
 80057c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	220f      	movs	r2, #15
 80057d8:	fa02 f303 	lsl.w	r3, r2, r3
 80057dc:	43db      	mvns	r3, r3
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	4013      	ands	r3, r2
 80057e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	691a      	ldr	r2, [r3, #16]
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	f003 0307 	and.w	r3, r3, #7
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	fa02 f303 	lsl.w	r3, r2, r3
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	08da      	lsrs	r2, r3, #3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	3208      	adds	r2, #8
 8005802:	69b9      	ldr	r1, [r7, #24]
 8005804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	2203      	movs	r2, #3
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	43db      	mvns	r3, r3
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	4013      	ands	r3, r2
 800581e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f003 0203 	and.w	r2, r3, #3
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	fa02 f303 	lsl.w	r3, r2, r3
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	4313      	orrs	r3, r2
 8005834:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 80b4 	beq.w	80059b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800584a:	2300      	movs	r3, #0
 800584c:	60fb      	str	r3, [r7, #12]
 800584e:	4b5f      	ldr	r3, [pc, #380]	; (80059cc <HAL_GPIO_Init+0x308>)
 8005850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005852:	4a5e      	ldr	r2, [pc, #376]	; (80059cc <HAL_GPIO_Init+0x308>)
 8005854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005858:	6453      	str	r3, [r2, #68]	; 0x44
 800585a:	4b5c      	ldr	r3, [pc, #368]	; (80059cc <HAL_GPIO_Init+0x308>)
 800585c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800585e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005866:	4a5a      	ldr	r2, [pc, #360]	; (80059d0 <HAL_GPIO_Init+0x30c>)
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	089b      	lsrs	r3, r3, #2
 800586c:	3302      	adds	r3, #2
 800586e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005872:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	220f      	movs	r2, #15
 800587e:	fa02 f303 	lsl.w	r3, r2, r3
 8005882:	43db      	mvns	r3, r3
 8005884:	69ba      	ldr	r2, [r7, #24]
 8005886:	4013      	ands	r3, r2
 8005888:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a51      	ldr	r2, [pc, #324]	; (80059d4 <HAL_GPIO_Init+0x310>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d02b      	beq.n	80058ea <HAL_GPIO_Init+0x226>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a50      	ldr	r2, [pc, #320]	; (80059d8 <HAL_GPIO_Init+0x314>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d025      	beq.n	80058e6 <HAL_GPIO_Init+0x222>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a4f      	ldr	r2, [pc, #316]	; (80059dc <HAL_GPIO_Init+0x318>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d01f      	beq.n	80058e2 <HAL_GPIO_Init+0x21e>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a4e      	ldr	r2, [pc, #312]	; (80059e0 <HAL_GPIO_Init+0x31c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d019      	beq.n	80058de <HAL_GPIO_Init+0x21a>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a4d      	ldr	r2, [pc, #308]	; (80059e4 <HAL_GPIO_Init+0x320>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d013      	beq.n	80058da <HAL_GPIO_Init+0x216>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a4c      	ldr	r2, [pc, #304]	; (80059e8 <HAL_GPIO_Init+0x324>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00d      	beq.n	80058d6 <HAL_GPIO_Init+0x212>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a4b      	ldr	r2, [pc, #300]	; (80059ec <HAL_GPIO_Init+0x328>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d007      	beq.n	80058d2 <HAL_GPIO_Init+0x20e>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a4a      	ldr	r2, [pc, #296]	; (80059f0 <HAL_GPIO_Init+0x32c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d101      	bne.n	80058ce <HAL_GPIO_Init+0x20a>
 80058ca:	2307      	movs	r3, #7
 80058cc:	e00e      	b.n	80058ec <HAL_GPIO_Init+0x228>
 80058ce:	2308      	movs	r3, #8
 80058d0:	e00c      	b.n	80058ec <HAL_GPIO_Init+0x228>
 80058d2:	2306      	movs	r3, #6
 80058d4:	e00a      	b.n	80058ec <HAL_GPIO_Init+0x228>
 80058d6:	2305      	movs	r3, #5
 80058d8:	e008      	b.n	80058ec <HAL_GPIO_Init+0x228>
 80058da:	2304      	movs	r3, #4
 80058dc:	e006      	b.n	80058ec <HAL_GPIO_Init+0x228>
 80058de:	2303      	movs	r3, #3
 80058e0:	e004      	b.n	80058ec <HAL_GPIO_Init+0x228>
 80058e2:	2302      	movs	r3, #2
 80058e4:	e002      	b.n	80058ec <HAL_GPIO_Init+0x228>
 80058e6:	2301      	movs	r3, #1
 80058e8:	e000      	b.n	80058ec <HAL_GPIO_Init+0x228>
 80058ea:	2300      	movs	r3, #0
 80058ec:	69fa      	ldr	r2, [r7, #28]
 80058ee:	f002 0203 	and.w	r2, r2, #3
 80058f2:	0092      	lsls	r2, r2, #2
 80058f4:	4093      	lsls	r3, r2
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058fc:	4934      	ldr	r1, [pc, #208]	; (80059d0 <HAL_GPIO_Init+0x30c>)
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	089b      	lsrs	r3, r3, #2
 8005902:	3302      	adds	r3, #2
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800590a:	4b3a      	ldr	r3, [pc, #232]	; (80059f4 <HAL_GPIO_Init+0x330>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	43db      	mvns	r3, r3
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	4013      	ands	r3, r2
 8005918:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	4313      	orrs	r3, r2
 800592c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800592e:	4a31      	ldr	r2, [pc, #196]	; (80059f4 <HAL_GPIO_Init+0x330>)
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005934:	4b2f      	ldr	r3, [pc, #188]	; (80059f4 <HAL_GPIO_Init+0x330>)
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	43db      	mvns	r3, r3
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	4013      	ands	r3, r2
 8005942:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	4313      	orrs	r3, r2
 8005956:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005958:	4a26      	ldr	r2, [pc, #152]	; (80059f4 <HAL_GPIO_Init+0x330>)
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800595e:	4b25      	ldr	r3, [pc, #148]	; (80059f4 <HAL_GPIO_Init+0x330>)
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	43db      	mvns	r3, r3
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	4013      	ands	r3, r2
 800596c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	4313      	orrs	r3, r2
 8005980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005982:	4a1c      	ldr	r2, [pc, #112]	; (80059f4 <HAL_GPIO_Init+0x330>)
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005988:	4b1a      	ldr	r3, [pc, #104]	; (80059f4 <HAL_GPIO_Init+0x330>)
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	43db      	mvns	r3, r3
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	4013      	ands	r3, r2
 8005996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d003      	beq.n	80059ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059ac:	4a11      	ldr	r2, [pc, #68]	; (80059f4 <HAL_GPIO_Init+0x330>)
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	3301      	adds	r3, #1
 80059b6:	61fb      	str	r3, [r7, #28]
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	2b0f      	cmp	r3, #15
 80059bc:	f67f ae90 	bls.w	80056e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80059c0:	bf00      	nop
 80059c2:	3724      	adds	r7, #36	; 0x24
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	40023800 	.word	0x40023800
 80059d0:	40013800 	.word	0x40013800
 80059d4:	40020000 	.word	0x40020000
 80059d8:	40020400 	.word	0x40020400
 80059dc:	40020800 	.word	0x40020800
 80059e0:	40020c00 	.word	0x40020c00
 80059e4:	40021000 	.word	0x40021000
 80059e8:	40021400 	.word	0x40021400
 80059ec:	40021800 	.word	0x40021800
 80059f0:	40021c00 	.word	0x40021c00
 80059f4:	40013c00 	.word	0x40013c00

080059f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	460b      	mov	r3, r1
 8005a02:	807b      	strh	r3, [r7, #2]
 8005a04:	4613      	mov	r3, r2
 8005a06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a08:	787b      	ldrb	r3, [r7, #1]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a0e:	887a      	ldrh	r2, [r7, #2]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a14:	e003      	b.n	8005a1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a16:	887b      	ldrh	r3, [r7, #2]
 8005a18:	041a      	lsls	r2, r3, #16
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	619a      	str	r2, [r3, #24]
}
 8005a1e:	bf00      	nop
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
	...

08005a2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e25b      	b.n	8005ef6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d075      	beq.n	8005b36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a4a:	4ba3      	ldr	r3, [pc, #652]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f003 030c 	and.w	r3, r3, #12
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	d00c      	beq.n	8005a70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a56:	4ba0      	ldr	r3, [pc, #640]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a5e:	2b08      	cmp	r3, #8
 8005a60:	d112      	bne.n	8005a88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a62:	4b9d      	ldr	r3, [pc, #628]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a6e:	d10b      	bne.n	8005a88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a70:	4b99      	ldr	r3, [pc, #612]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d05b      	beq.n	8005b34 <HAL_RCC_OscConfig+0x108>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d157      	bne.n	8005b34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e236      	b.n	8005ef6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a90:	d106      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x74>
 8005a92:	4b91      	ldr	r3, [pc, #580]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a90      	ldr	r2, [pc, #576]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a9c:	6013      	str	r3, [r2, #0]
 8005a9e:	e01d      	b.n	8005adc <HAL_RCC_OscConfig+0xb0>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005aa8:	d10c      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x98>
 8005aaa:	4b8b      	ldr	r3, [pc, #556]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a8a      	ldr	r2, [pc, #552]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	4b88      	ldr	r3, [pc, #544]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a87      	ldr	r2, [pc, #540]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac0:	6013      	str	r3, [r2, #0]
 8005ac2:	e00b      	b.n	8005adc <HAL_RCC_OscConfig+0xb0>
 8005ac4:	4b84      	ldr	r3, [pc, #528]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a83      	ldr	r2, [pc, #524]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ace:	6013      	str	r3, [r2, #0]
 8005ad0:	4b81      	ldr	r3, [pc, #516]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a80      	ldr	r2, [pc, #512]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d013      	beq.n	8005b0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae4:	f7fe f960 	bl	8003da8 <HAL_GetTick>
 8005ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aea:	e008      	b.n	8005afe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005aec:	f7fe f95c 	bl	8003da8 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b64      	cmp	r3, #100	; 0x64
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e1fb      	b.n	8005ef6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005afe:	4b76      	ldr	r3, [pc, #472]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d0f0      	beq.n	8005aec <HAL_RCC_OscConfig+0xc0>
 8005b0a:	e014      	b.n	8005b36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b0c:	f7fe f94c 	bl	8003da8 <HAL_GetTick>
 8005b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b14:	f7fe f948 	bl	8003da8 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b64      	cmp	r3, #100	; 0x64
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e1e7      	b.n	8005ef6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b26:	4b6c      	ldr	r3, [pc, #432]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1f0      	bne.n	8005b14 <HAL_RCC_OscConfig+0xe8>
 8005b32:	e000      	b.n	8005b36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d063      	beq.n	8005c0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b42:	4b65      	ldr	r3, [pc, #404]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f003 030c 	and.w	r3, r3, #12
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00b      	beq.n	8005b66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b4e:	4b62      	ldr	r3, [pc, #392]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b56:	2b08      	cmp	r3, #8
 8005b58:	d11c      	bne.n	8005b94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b5a:	4b5f      	ldr	r3, [pc, #380]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d116      	bne.n	8005b94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b66:	4b5c      	ldr	r3, [pc, #368]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0302 	and.w	r3, r3, #2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d005      	beq.n	8005b7e <HAL_RCC_OscConfig+0x152>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d001      	beq.n	8005b7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e1bb      	b.n	8005ef6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b7e:	4b56      	ldr	r3, [pc, #344]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	4952      	ldr	r1, [pc, #328]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b92:	e03a      	b.n	8005c0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d020      	beq.n	8005bde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b9c:	4b4f      	ldr	r3, [pc, #316]	; (8005cdc <HAL_RCC_OscConfig+0x2b0>)
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba2:	f7fe f901 	bl	8003da8 <HAL_GetTick>
 8005ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ba8:	e008      	b.n	8005bbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005baa:	f7fe f8fd 	bl	8003da8 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d901      	bls.n	8005bbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e19c      	b.n	8005ef6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bbc:	4b46      	ldr	r3, [pc, #280]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0302 	and.w	r3, r3, #2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d0f0      	beq.n	8005baa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bc8:	4b43      	ldr	r3, [pc, #268]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	4940      	ldr	r1, [pc, #256]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	600b      	str	r3, [r1, #0]
 8005bdc:	e015      	b.n	8005c0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bde:	4b3f      	ldr	r3, [pc, #252]	; (8005cdc <HAL_RCC_OscConfig+0x2b0>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be4:	f7fe f8e0 	bl	8003da8 <HAL_GetTick>
 8005be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bea:	e008      	b.n	8005bfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bec:	f7fe f8dc 	bl	8003da8 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e17b      	b.n	8005ef6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bfe:	4b36      	ldr	r3, [pc, #216]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1f0      	bne.n	8005bec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0308 	and.w	r3, r3, #8
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d030      	beq.n	8005c78 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d016      	beq.n	8005c4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c1e:	4b30      	ldr	r3, [pc, #192]	; (8005ce0 <HAL_RCC_OscConfig+0x2b4>)
 8005c20:	2201      	movs	r2, #1
 8005c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c24:	f7fe f8c0 	bl	8003da8 <HAL_GetTick>
 8005c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c2a:	e008      	b.n	8005c3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c2c:	f7fe f8bc 	bl	8003da8 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e15b      	b.n	8005ef6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c3e:	4b26      	ldr	r3, [pc, #152]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d0f0      	beq.n	8005c2c <HAL_RCC_OscConfig+0x200>
 8005c4a:	e015      	b.n	8005c78 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c4c:	4b24      	ldr	r3, [pc, #144]	; (8005ce0 <HAL_RCC_OscConfig+0x2b4>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c52:	f7fe f8a9 	bl	8003da8 <HAL_GetTick>
 8005c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c58:	e008      	b.n	8005c6c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c5a:	f7fe f8a5 	bl	8003da8 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d901      	bls.n	8005c6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e144      	b.n	8005ef6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c6c:	4b1a      	ldr	r3, [pc, #104]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1f0      	bne.n	8005c5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 80a0 	beq.w	8005dc6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c86:	2300      	movs	r3, #0
 8005c88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c8a:	4b13      	ldr	r3, [pc, #76]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10f      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c96:	2300      	movs	r3, #0
 8005c98:	60bb      	str	r3, [r7, #8]
 8005c9a:	4b0f      	ldr	r3, [pc, #60]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	4a0e      	ldr	r2, [pc, #56]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ca6:	4b0c      	ldr	r3, [pc, #48]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cae:	60bb      	str	r3, [r7, #8]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cb6:	4b0b      	ldr	r3, [pc, #44]	; (8005ce4 <HAL_RCC_OscConfig+0x2b8>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d121      	bne.n	8005d06 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cc2:	4b08      	ldr	r3, [pc, #32]	; (8005ce4 <HAL_RCC_OscConfig+0x2b8>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a07      	ldr	r2, [pc, #28]	; (8005ce4 <HAL_RCC_OscConfig+0x2b8>)
 8005cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cce:	f7fe f86b 	bl	8003da8 <HAL_GetTick>
 8005cd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cd4:	e011      	b.n	8005cfa <HAL_RCC_OscConfig+0x2ce>
 8005cd6:	bf00      	nop
 8005cd8:	40023800 	.word	0x40023800
 8005cdc:	42470000 	.word	0x42470000
 8005ce0:	42470e80 	.word	0x42470e80
 8005ce4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ce8:	f7fe f85e 	bl	8003da8 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e0fd      	b.n	8005ef6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cfa:	4b81      	ldr	r3, [pc, #516]	; (8005f00 <HAL_RCC_OscConfig+0x4d4>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d0f0      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d106      	bne.n	8005d1c <HAL_RCC_OscConfig+0x2f0>
 8005d0e:	4b7d      	ldr	r3, [pc, #500]	; (8005f04 <HAL_RCC_OscConfig+0x4d8>)
 8005d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d12:	4a7c      	ldr	r2, [pc, #496]	; (8005f04 <HAL_RCC_OscConfig+0x4d8>)
 8005d14:	f043 0301 	orr.w	r3, r3, #1
 8005d18:	6713      	str	r3, [r2, #112]	; 0x70
 8005d1a:	e01c      	b.n	8005d56 <HAL_RCC_OscConfig+0x32a>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	2b05      	cmp	r3, #5
 8005d22:	d10c      	bne.n	8005d3e <HAL_RCC_OscConfig+0x312>
 8005d24:	4b77      	ldr	r3, [pc, #476]	; (8005f04 <HAL_RCC_OscConfig+0x4d8>)
 8005d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d28:	4a76      	ldr	r2, [pc, #472]	; (8005f04 <HAL_RCC_OscConfig+0x4d8>)
 8005d2a:	f043 0304 	orr.w	r3, r3, #4
 8005d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8005d30:	4b74      	ldr	r3, [pc, #464]	; (8005f04 <HAL_RCC_OscConfig+0x4d8>)
 8005d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d34:	4a73      	ldr	r2, [pc, #460]	; (8005f04 <HAL_RCC_OscConfig+0x4d8>)
 8005d36:	f043 0301 	orr.w	r3, r3, #1
 8005d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8005d3c:	e00b      	b.n	8005d56 <HAL_RCC_OscConfig+0x32a>
 8005d3e:	4b71      	ldr	r3, [pc, #452]	; (8005f04 <HAL_RCC_OscConfig+0x4d8>)
 8005d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d42:	4a70      	ldr	r2, [pc, #448]	; (8005f04 <HAL_RCC_OscConfig+0x4d8>)
 8005d44:	f023 0301 	bic.w	r3, r3, #1
 8005d48:	6713      	str	r3, [r2, #112]	; 0x70
 8005d4a:	4b6e      	ldr	r3, [pc, #440]	; (8005f04 <HAL_RCC_OscConfig+0x4d8>)
 8005d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4e:	4a6d      	ldr	r2, [pc, #436]	; (8005f04 <HAL_RCC_OscConfig+0x4d8>)
 8005d50:	f023 0304 	bic.w	r3, r3, #4
 8005d54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d015      	beq.n	8005d8a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d5e:	f7fe f823 	bl	8003da8 <HAL_GetTick>
 8005d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d64:	e00a      	b.n	8005d7c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d66:	f7fe f81f 	bl	8003da8 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d901      	bls.n	8005d7c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e0bc      	b.n	8005ef6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d7c:	4b61      	ldr	r3, [pc, #388]	; (8005f04 <HAL_RCC_OscConfig+0x4d8>)
 8005d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d0ee      	beq.n	8005d66 <HAL_RCC_OscConfig+0x33a>
 8005d88:	e014      	b.n	8005db4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d8a:	f7fe f80d 	bl	8003da8 <HAL_GetTick>
 8005d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d90:	e00a      	b.n	8005da8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d92:	f7fe f809 	bl	8003da8 <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d901      	bls.n	8005da8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e0a6      	b.n	8005ef6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005da8:	4b56      	ldr	r3, [pc, #344]	; (8005f04 <HAL_RCC_OscConfig+0x4d8>)
 8005daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1ee      	bne.n	8005d92 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005db4:	7dfb      	ldrb	r3, [r7, #23]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d105      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dba:	4b52      	ldr	r3, [pc, #328]	; (8005f04 <HAL_RCC_OscConfig+0x4d8>)
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	4a51      	ldr	r2, [pc, #324]	; (8005f04 <HAL_RCC_OscConfig+0x4d8>)
 8005dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dc4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 8092 	beq.w	8005ef4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005dd0:	4b4c      	ldr	r3, [pc, #304]	; (8005f04 <HAL_RCC_OscConfig+0x4d8>)
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f003 030c 	and.w	r3, r3, #12
 8005dd8:	2b08      	cmp	r3, #8
 8005dda:	d05c      	beq.n	8005e96 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d141      	bne.n	8005e68 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005de4:	4b48      	ldr	r3, [pc, #288]	; (8005f08 <HAL_RCC_OscConfig+0x4dc>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dea:	f7fd ffdd 	bl	8003da8 <HAL_GetTick>
 8005dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005df0:	e008      	b.n	8005e04 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005df2:	f7fd ffd9 	bl	8003da8 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d901      	bls.n	8005e04 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e078      	b.n	8005ef6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e04:	4b3f      	ldr	r3, [pc, #252]	; (8005f04 <HAL_RCC_OscConfig+0x4d8>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1f0      	bne.n	8005df2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	69da      	ldr	r2, [r3, #28]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	019b      	lsls	r3, r3, #6
 8005e20:	431a      	orrs	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e26:	085b      	lsrs	r3, r3, #1
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	041b      	lsls	r3, r3, #16
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e32:	061b      	lsls	r3, r3, #24
 8005e34:	4933      	ldr	r1, [pc, #204]	; (8005f04 <HAL_RCC_OscConfig+0x4d8>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e3a:	4b33      	ldr	r3, [pc, #204]	; (8005f08 <HAL_RCC_OscConfig+0x4dc>)
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e40:	f7fd ffb2 	bl	8003da8 <HAL_GetTick>
 8005e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e46:	e008      	b.n	8005e5a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e48:	f7fd ffae 	bl	8003da8 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d901      	bls.n	8005e5a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e04d      	b.n	8005ef6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e5a:	4b2a      	ldr	r3, [pc, #168]	; (8005f04 <HAL_RCC_OscConfig+0x4d8>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d0f0      	beq.n	8005e48 <HAL_RCC_OscConfig+0x41c>
 8005e66:	e045      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e68:	4b27      	ldr	r3, [pc, #156]	; (8005f08 <HAL_RCC_OscConfig+0x4dc>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e6e:	f7fd ff9b 	bl	8003da8 <HAL_GetTick>
 8005e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e74:	e008      	b.n	8005e88 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e76:	f7fd ff97 	bl	8003da8 <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d901      	bls.n	8005e88 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e036      	b.n	8005ef6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e88:	4b1e      	ldr	r3, [pc, #120]	; (8005f04 <HAL_RCC_OscConfig+0x4d8>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1f0      	bne.n	8005e76 <HAL_RCC_OscConfig+0x44a>
 8005e94:	e02e      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d101      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e029      	b.n	8005ef6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ea2:	4b18      	ldr	r3, [pc, #96]	; (8005f04 <HAL_RCC_OscConfig+0x4d8>)
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	69db      	ldr	r3, [r3, #28]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d11c      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d115      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005eca:	4013      	ands	r3, r2
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d10d      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d106      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d001      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e000      	b.n	8005ef6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	40007000 	.word	0x40007000
 8005f04:	40023800 	.word	0x40023800
 8005f08:	42470060 	.word	0x42470060

08005f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d101      	bne.n	8005f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e0cc      	b.n	80060ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f20:	4b68      	ldr	r3, [pc, #416]	; (80060c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 030f 	and.w	r3, r3, #15
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d90c      	bls.n	8005f48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f2e:	4b65      	ldr	r3, [pc, #404]	; (80060c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f30:	683a      	ldr	r2, [r7, #0]
 8005f32:	b2d2      	uxtb	r2, r2
 8005f34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f36:	4b63      	ldr	r3, [pc, #396]	; (80060c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 030f 	and.w	r3, r3, #15
 8005f3e:	683a      	ldr	r2, [r7, #0]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d001      	beq.n	8005f48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e0b8      	b.n	80060ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0302 	and.w	r3, r3, #2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d020      	beq.n	8005f96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0304 	and.w	r3, r3, #4
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d005      	beq.n	8005f6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f60:	4b59      	ldr	r3, [pc, #356]	; (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	4a58      	ldr	r2, [pc, #352]	; (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0308 	and.w	r3, r3, #8
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d005      	beq.n	8005f84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f78:	4b53      	ldr	r3, [pc, #332]	; (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	4a52      	ldr	r2, [pc, #328]	; (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f84:	4b50      	ldr	r3, [pc, #320]	; (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	494d      	ldr	r1, [pc, #308]	; (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d044      	beq.n	800602c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d107      	bne.n	8005fba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005faa:	4b47      	ldr	r3, [pc, #284]	; (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d119      	bne.n	8005fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e07f      	b.n	80060ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d003      	beq.n	8005fca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fc6:	2b03      	cmp	r3, #3
 8005fc8:	d107      	bne.n	8005fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fca:	4b3f      	ldr	r3, [pc, #252]	; (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d109      	bne.n	8005fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e06f      	b.n	80060ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fda:	4b3b      	ldr	r3, [pc, #236]	; (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d101      	bne.n	8005fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e067      	b.n	80060ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fea:	4b37      	ldr	r3, [pc, #220]	; (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f023 0203 	bic.w	r2, r3, #3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	4934      	ldr	r1, [pc, #208]	; (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ffc:	f7fd fed4 	bl	8003da8 <HAL_GetTick>
 8006000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006002:	e00a      	b.n	800601a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006004:	f7fd fed0 	bl	8003da8 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006012:	4293      	cmp	r3, r2
 8006014:	d901      	bls.n	800601a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e04f      	b.n	80060ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800601a:	4b2b      	ldr	r3, [pc, #172]	; (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f003 020c 	and.w	r2, r3, #12
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	429a      	cmp	r2, r3
 800602a:	d1eb      	bne.n	8006004 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800602c:	4b25      	ldr	r3, [pc, #148]	; (80060c4 <HAL_RCC_ClockConfig+0x1b8>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 030f 	and.w	r3, r3, #15
 8006034:	683a      	ldr	r2, [r7, #0]
 8006036:	429a      	cmp	r2, r3
 8006038:	d20c      	bcs.n	8006054 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800603a:	4b22      	ldr	r3, [pc, #136]	; (80060c4 <HAL_RCC_ClockConfig+0x1b8>)
 800603c:	683a      	ldr	r2, [r7, #0]
 800603e:	b2d2      	uxtb	r2, r2
 8006040:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006042:	4b20      	ldr	r3, [pc, #128]	; (80060c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 030f 	and.w	r3, r3, #15
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	429a      	cmp	r2, r3
 800604e:	d001      	beq.n	8006054 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e032      	b.n	80060ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0304 	and.w	r3, r3, #4
 800605c:	2b00      	cmp	r3, #0
 800605e:	d008      	beq.n	8006072 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006060:	4b19      	ldr	r3, [pc, #100]	; (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	4916      	ldr	r1, [pc, #88]	; (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 800606e:	4313      	orrs	r3, r2
 8006070:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0308 	and.w	r3, r3, #8
 800607a:	2b00      	cmp	r3, #0
 800607c:	d009      	beq.n	8006092 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800607e:	4b12      	ldr	r3, [pc, #72]	; (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	490e      	ldr	r1, [pc, #56]	; (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 800608e:	4313      	orrs	r3, r2
 8006090:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006092:	f000 f821 	bl	80060d8 <HAL_RCC_GetSysClockFreq>
 8006096:	4601      	mov	r1, r0
 8006098:	4b0b      	ldr	r3, [pc, #44]	; (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	091b      	lsrs	r3, r3, #4
 800609e:	f003 030f 	and.w	r3, r3, #15
 80060a2:	4a0a      	ldr	r2, [pc, #40]	; (80060cc <HAL_RCC_ClockConfig+0x1c0>)
 80060a4:	5cd3      	ldrb	r3, [r2, r3]
 80060a6:	fa21 f303 	lsr.w	r3, r1, r3
 80060aa:	4a09      	ldr	r2, [pc, #36]	; (80060d0 <HAL_RCC_ClockConfig+0x1c4>)
 80060ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80060ae:	4b09      	ldr	r3, [pc, #36]	; (80060d4 <HAL_RCC_ClockConfig+0x1c8>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7fd fd3e 	bl	8003b34 <HAL_InitTick>

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	40023c00 	.word	0x40023c00
 80060c8:	40023800 	.word	0x40023800
 80060cc:	0800d6a0 	.word	0x0800d6a0
 80060d0:	20000004 	.word	0x20000004
 80060d4:	20000008 	.word	0x20000008

080060d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80060de:	2300      	movs	r3, #0
 80060e0:	607b      	str	r3, [r7, #4]
 80060e2:	2300      	movs	r3, #0
 80060e4:	60fb      	str	r3, [r7, #12]
 80060e6:	2300      	movs	r3, #0
 80060e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80060ea:	2300      	movs	r3, #0
 80060ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060ee:	4b50      	ldr	r3, [pc, #320]	; (8006230 <HAL_RCC_GetSysClockFreq+0x158>)
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f003 030c 	and.w	r3, r3, #12
 80060f6:	2b04      	cmp	r3, #4
 80060f8:	d007      	beq.n	800610a <HAL_RCC_GetSysClockFreq+0x32>
 80060fa:	2b08      	cmp	r3, #8
 80060fc:	d008      	beq.n	8006110 <HAL_RCC_GetSysClockFreq+0x38>
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f040 808d 	bne.w	800621e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006104:	4b4b      	ldr	r3, [pc, #300]	; (8006234 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006106:	60bb      	str	r3, [r7, #8]
       break;
 8006108:	e08c      	b.n	8006224 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800610a:	4b4b      	ldr	r3, [pc, #300]	; (8006238 <HAL_RCC_GetSysClockFreq+0x160>)
 800610c:	60bb      	str	r3, [r7, #8]
      break;
 800610e:	e089      	b.n	8006224 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006110:	4b47      	ldr	r3, [pc, #284]	; (8006230 <HAL_RCC_GetSysClockFreq+0x158>)
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006118:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800611a:	4b45      	ldr	r3, [pc, #276]	; (8006230 <HAL_RCC_GetSysClockFreq+0x158>)
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d023      	beq.n	800616e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006126:	4b42      	ldr	r3, [pc, #264]	; (8006230 <HAL_RCC_GetSysClockFreq+0x158>)
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	099b      	lsrs	r3, r3, #6
 800612c:	f04f 0400 	mov.w	r4, #0
 8006130:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006134:	f04f 0200 	mov.w	r2, #0
 8006138:	ea03 0501 	and.w	r5, r3, r1
 800613c:	ea04 0602 	and.w	r6, r4, r2
 8006140:	4a3d      	ldr	r2, [pc, #244]	; (8006238 <HAL_RCC_GetSysClockFreq+0x160>)
 8006142:	fb02 f106 	mul.w	r1, r2, r6
 8006146:	2200      	movs	r2, #0
 8006148:	fb02 f205 	mul.w	r2, r2, r5
 800614c:	440a      	add	r2, r1
 800614e:	493a      	ldr	r1, [pc, #232]	; (8006238 <HAL_RCC_GetSysClockFreq+0x160>)
 8006150:	fba5 0101 	umull	r0, r1, r5, r1
 8006154:	1853      	adds	r3, r2, r1
 8006156:	4619      	mov	r1, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f04f 0400 	mov.w	r4, #0
 800615e:	461a      	mov	r2, r3
 8006160:	4623      	mov	r3, r4
 8006162:	f7fa fd19 	bl	8000b98 <__aeabi_uldivmod>
 8006166:	4603      	mov	r3, r0
 8006168:	460c      	mov	r4, r1
 800616a:	60fb      	str	r3, [r7, #12]
 800616c:	e049      	b.n	8006202 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800616e:	4b30      	ldr	r3, [pc, #192]	; (8006230 <HAL_RCC_GetSysClockFreq+0x158>)
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	099b      	lsrs	r3, r3, #6
 8006174:	f04f 0400 	mov.w	r4, #0
 8006178:	f240 11ff 	movw	r1, #511	; 0x1ff
 800617c:	f04f 0200 	mov.w	r2, #0
 8006180:	ea03 0501 	and.w	r5, r3, r1
 8006184:	ea04 0602 	and.w	r6, r4, r2
 8006188:	4629      	mov	r1, r5
 800618a:	4632      	mov	r2, r6
 800618c:	f04f 0300 	mov.w	r3, #0
 8006190:	f04f 0400 	mov.w	r4, #0
 8006194:	0154      	lsls	r4, r2, #5
 8006196:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800619a:	014b      	lsls	r3, r1, #5
 800619c:	4619      	mov	r1, r3
 800619e:	4622      	mov	r2, r4
 80061a0:	1b49      	subs	r1, r1, r5
 80061a2:	eb62 0206 	sbc.w	r2, r2, r6
 80061a6:	f04f 0300 	mov.w	r3, #0
 80061aa:	f04f 0400 	mov.w	r4, #0
 80061ae:	0194      	lsls	r4, r2, #6
 80061b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80061b4:	018b      	lsls	r3, r1, #6
 80061b6:	1a5b      	subs	r3, r3, r1
 80061b8:	eb64 0402 	sbc.w	r4, r4, r2
 80061bc:	f04f 0100 	mov.w	r1, #0
 80061c0:	f04f 0200 	mov.w	r2, #0
 80061c4:	00e2      	lsls	r2, r4, #3
 80061c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80061ca:	00d9      	lsls	r1, r3, #3
 80061cc:	460b      	mov	r3, r1
 80061ce:	4614      	mov	r4, r2
 80061d0:	195b      	adds	r3, r3, r5
 80061d2:	eb44 0406 	adc.w	r4, r4, r6
 80061d6:	f04f 0100 	mov.w	r1, #0
 80061da:	f04f 0200 	mov.w	r2, #0
 80061de:	02a2      	lsls	r2, r4, #10
 80061e0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80061e4:	0299      	lsls	r1, r3, #10
 80061e6:	460b      	mov	r3, r1
 80061e8:	4614      	mov	r4, r2
 80061ea:	4618      	mov	r0, r3
 80061ec:	4621      	mov	r1, r4
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f04f 0400 	mov.w	r4, #0
 80061f4:	461a      	mov	r2, r3
 80061f6:	4623      	mov	r3, r4
 80061f8:	f7fa fcce 	bl	8000b98 <__aeabi_uldivmod>
 80061fc:	4603      	mov	r3, r0
 80061fe:	460c      	mov	r4, r1
 8006200:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006202:	4b0b      	ldr	r3, [pc, #44]	; (8006230 <HAL_RCC_GetSysClockFreq+0x158>)
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	0c1b      	lsrs	r3, r3, #16
 8006208:	f003 0303 	and.w	r3, r3, #3
 800620c:	3301      	adds	r3, #1
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	fbb2 f3f3 	udiv	r3, r2, r3
 800621a:	60bb      	str	r3, [r7, #8]
      break;
 800621c:	e002      	b.n	8006224 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800621e:	4b05      	ldr	r3, [pc, #20]	; (8006234 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006220:	60bb      	str	r3, [r7, #8]
      break;
 8006222:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006224:	68bb      	ldr	r3, [r7, #8]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800622e:	bf00      	nop
 8006230:	40023800 	.word	0x40023800
 8006234:	00f42400 	.word	0x00f42400
 8006238:	017d7840 	.word	0x017d7840

0800623c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800623c:	b480      	push	{r7}
 800623e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006240:	4b03      	ldr	r3, [pc, #12]	; (8006250 <HAL_RCC_GetHCLKFreq+0x14>)
 8006242:	681b      	ldr	r3, [r3, #0]
}
 8006244:	4618      	mov	r0, r3
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	20000004 	.word	0x20000004

08006254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006258:	f7ff fff0 	bl	800623c <HAL_RCC_GetHCLKFreq>
 800625c:	4601      	mov	r1, r0
 800625e:	4b05      	ldr	r3, [pc, #20]	; (8006274 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	0b5b      	lsrs	r3, r3, #13
 8006264:	f003 0307 	and.w	r3, r3, #7
 8006268:	4a03      	ldr	r2, [pc, #12]	; (8006278 <HAL_RCC_GetPCLK2Freq+0x24>)
 800626a:	5cd3      	ldrb	r3, [r2, r3]
 800626c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006270:	4618      	mov	r0, r3
 8006272:	bd80      	pop	{r7, pc}
 8006274:	40023800 	.word	0x40023800
 8006278:	0800d6b0 	.word	0x0800d6b0

0800627c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	220f      	movs	r2, #15
 800628a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800628c:	4b12      	ldr	r3, [pc, #72]	; (80062d8 <HAL_RCC_GetClockConfig+0x5c>)
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f003 0203 	and.w	r2, r3, #3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006298:	4b0f      	ldr	r3, [pc, #60]	; (80062d8 <HAL_RCC_GetClockConfig+0x5c>)
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80062a4:	4b0c      	ldr	r3, [pc, #48]	; (80062d8 <HAL_RCC_GetClockConfig+0x5c>)
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80062b0:	4b09      	ldr	r3, [pc, #36]	; (80062d8 <HAL_RCC_GetClockConfig+0x5c>)
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	08db      	lsrs	r3, r3, #3
 80062b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80062be:	4b07      	ldr	r3, [pc, #28]	; (80062dc <HAL_RCC_GetClockConfig+0x60>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 020f 	and.w	r2, r3, #15
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	601a      	str	r2, [r3, #0]
}
 80062ca:	bf00      	nop
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	40023800 	.word	0x40023800
 80062dc:	40023c00 	.word	0x40023c00

080062e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e056      	b.n	80063a0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b00      	cmp	r3, #0
 8006302:	d106      	bne.n	8006312 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f7fd fa4f 	bl	80037b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2202      	movs	r2, #2
 8006316:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006328:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685a      	ldr	r2, [r3, #4]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	431a      	orrs	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	431a      	orrs	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	431a      	orrs	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	431a      	orrs	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800634e:	431a      	orrs	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	69db      	ldr	r3, [r3, #28]
 8006354:	431a      	orrs	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	ea42 0103 	orr.w	r1, r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	0c1b      	lsrs	r3, r3, #16
 8006370:	f003 0104 	and.w	r1, r3, #4
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	430a      	orrs	r2, r1
 800637e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	69da      	ldr	r2, [r3, #28]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800638e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b088      	sub	sp, #32
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	099b      	lsrs	r3, r3, #6
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10f      	bne.n	80063ec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00a      	beq.n	80063ec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	099b      	lsrs	r3, r3, #6
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d004      	beq.n	80063ec <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	4798      	blx	r3
    return;
 80063ea:	e0d8      	b.n	800659e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	085b      	lsrs	r3, r3, #1
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00a      	beq.n	800640e <HAL_SPI_IRQHandler+0x66>
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	09db      	lsrs	r3, r3, #7
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	2b00      	cmp	r3, #0
 8006402:	d004      	beq.n	800640e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	4798      	blx	r3
    return;
 800640c:	e0c7      	b.n	800659e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	095b      	lsrs	r3, r3, #5
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10c      	bne.n	8006434 <HAL_SPI_IRQHandler+0x8c>
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	099b      	lsrs	r3, r3, #6
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	d106      	bne.n	8006434 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	0a1b      	lsrs	r3, r3, #8
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	2b00      	cmp	r3, #0
 8006430:	f000 80b5 	beq.w	800659e <HAL_SPI_IRQHandler+0x1f6>
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	095b      	lsrs	r3, r3, #5
 8006438:	f003 0301 	and.w	r3, r3, #1
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 80ae 	beq.w	800659e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	099b      	lsrs	r3, r3, #6
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	2b00      	cmp	r3, #0
 800644c:	d023      	beq.n	8006496 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b03      	cmp	r3, #3
 8006458:	d011      	beq.n	800647e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800645e:	f043 0204 	orr.w	r2, r3, #4
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006466:	2300      	movs	r3, #0
 8006468:	617b      	str	r3, [r7, #20]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	617b      	str	r3, [r7, #20]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	617b      	str	r3, [r7, #20]
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	e00b      	b.n	8006496 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800647e:	2300      	movs	r3, #0
 8006480:	613b      	str	r3, [r7, #16]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	613b      	str	r3, [r7, #16]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	613b      	str	r3, [r7, #16]
 8006492:	693b      	ldr	r3, [r7, #16]
        return;
 8006494:	e083      	b.n	800659e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	095b      	lsrs	r3, r3, #5
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d014      	beq.n	80064cc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a6:	f043 0201 	orr.w	r2, r3, #1
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80064ae:	2300      	movs	r3, #0
 80064b0:	60fb      	str	r3, [r7, #12]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	60fb      	str	r3, [r7, #12]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	0a1b      	lsrs	r3, r3, #8
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00c      	beq.n	80064f2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064dc:	f043 0208 	orr.w	r2, r3, #8
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80064e4:	2300      	movs	r3, #0
 80064e6:	60bb      	str	r3, [r7, #8]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	60bb      	str	r3, [r7, #8]
 80064f0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d050      	beq.n	800659c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006508:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	f003 0302 	and.w	r3, r3, #2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d104      	bne.n	8006526 <HAL_SPI_IRQHandler+0x17e>
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b00      	cmp	r3, #0
 8006524:	d034      	beq.n	8006590 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f022 0203 	bic.w	r2, r2, #3
 8006534:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800653a:	2b00      	cmp	r3, #0
 800653c:	d011      	beq.n	8006562 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006542:	4a18      	ldr	r2, [pc, #96]	; (80065a4 <HAL_SPI_IRQHandler+0x1fc>)
 8006544:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800654a:	4618      	mov	r0, r3
 800654c:	f7ff f898 	bl	8005680 <HAL_DMA_Abort_IT>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d005      	beq.n	8006562 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006566:	2b00      	cmp	r3, #0
 8006568:	d016      	beq.n	8006598 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800656e:	4a0d      	ldr	r2, [pc, #52]	; (80065a4 <HAL_SPI_IRQHandler+0x1fc>)
 8006570:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006576:	4618      	mov	r0, r3
 8006578:	f7ff f882 	bl	8005680 <HAL_DMA_Abort_IT>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00a      	beq.n	8006598 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006586:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800658e:	e003      	b.n	8006598 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f809 	bl	80065a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006596:	e000      	b.n	800659a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006598:	bf00      	nop
    return;
 800659a:	bf00      	nop
 800659c:	bf00      	nop
  }
}
 800659e:	3720      	adds	r7, #32
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	080065bd 	.word	0x080065bd

080065a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f7ff ffe6 	bl	80065a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80065dc:	bf00      	nop
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e01d      	b.n	8006632 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d106      	bne.n	8006610 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7fd f99e 	bl	800394c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	3304      	adds	r3, #4
 8006620:	4619      	mov	r1, r3
 8006622:	4610      	mov	r0, r2
 8006624:	f000 fc38 	bl	8006e98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3708      	adds	r7, #8
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800663a:	b480      	push	{r7}
 800663c:	b085      	sub	sp, #20
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68da      	ldr	r2, [r3, #12]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f042 0201 	orr.w	r2, r2, #1
 8006650:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f003 0307 	and.w	r3, r3, #7
 800665c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2b06      	cmp	r3, #6
 8006662:	d007      	beq.n	8006674 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f042 0201 	orr.w	r2, r2, #1
 8006672:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b082      	sub	sp, #8
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d101      	bne.n	8006694 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e01d      	b.n	80066d0 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	d106      	bne.n	80066ae <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f815 	bl	80066d8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2202      	movs	r2, #2
 80066b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	3304      	adds	r3, #4
 80066be:	4619      	mov	r1, r3
 80066c0:	4610      	mov	r0, r2
 80066c2:	f000 fbe9 	bl	8006e98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d101      	bne.n	80066fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e01d      	b.n	800673a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	d106      	bne.n	8006718 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f815 	bl	8006742 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2202      	movs	r2, #2
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	3304      	adds	r3, #4
 8006728:	4619      	mov	r1, r3
 800672a:	4610      	mov	r0, r2
 800672c:	f000 fbb4 	bl	8006e98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006742:	b480      	push	{r7}
 8006744:	b083      	sub	sp, #12
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800674a:	bf00      	nop
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b086      	sub	sp, #24
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
 800675e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e083      	b.n	8006872 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d106      	bne.n	8006784 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7fd f866 	bl	8003850 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2202      	movs	r2, #2
 8006788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	6812      	ldr	r2, [r2, #0]
 8006796:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800679a:	f023 0307 	bic.w	r3, r3, #7
 800679e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	3304      	adds	r3, #4
 80067a8:	4619      	mov	r1, r3
 80067aa:	4610      	mov	r0, r2
 80067ac:	f000 fb74 	bl	8006e98 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067d8:	f023 0303 	bic.w	r3, r3, #3
 80067dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	689a      	ldr	r2, [r3, #8]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	021b      	lsls	r3, r3, #8
 80067e8:	4313      	orrs	r3, r2
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80067f6:	f023 030c 	bic.w	r3, r3, #12
 80067fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006802:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006806:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	68da      	ldr	r2, [r3, #12]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	021b      	lsls	r3, r3, #8
 8006812:	4313      	orrs	r3, r2
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	4313      	orrs	r3, r2
 8006818:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	011a      	lsls	r2, r3, #4
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	031b      	lsls	r3, r3, #12
 8006826:	4313      	orrs	r3, r2
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	4313      	orrs	r3, r2
 800682c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006834:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800683c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	011b      	lsls	r3, r3, #4
 8006848:	4313      	orrs	r3, r2
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	4313      	orrs	r3, r2
 800684e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3718      	adds	r7, #24
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b082      	sub	sp, #8
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	f003 0302 	and.w	r3, r3, #2
 800688c:	2b02      	cmp	r3, #2
 800688e:	d122      	bne.n	80068d6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	f003 0302 	and.w	r3, r3, #2
 800689a:	2b02      	cmp	r3, #2
 800689c:	d11b      	bne.n	80068d6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f06f 0202 	mvn.w	r2, #2
 80068a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	f003 0303 	and.w	r3, r3, #3
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d003      	beq.n	80068c4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 facc 	bl	8006e5a <HAL_TIM_IC_CaptureCallback>
 80068c2:	e005      	b.n	80068d0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 fabe 	bl	8006e46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 facf 	bl	8006e6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	f003 0304 	and.w	r3, r3, #4
 80068e0:	2b04      	cmp	r3, #4
 80068e2:	d122      	bne.n	800692a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	f003 0304 	and.w	r3, r3, #4
 80068ee:	2b04      	cmp	r3, #4
 80068f0:	d11b      	bne.n	800692a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f06f 0204 	mvn.w	r2, #4
 80068fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2202      	movs	r2, #2
 8006900:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800690c:	2b00      	cmp	r3, #0
 800690e:	d003      	beq.n	8006918 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 faa2 	bl	8006e5a <HAL_TIM_IC_CaptureCallback>
 8006916:	e005      	b.n	8006924 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 fa94 	bl	8006e46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 faa5 	bl	8006e6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	f003 0308 	and.w	r3, r3, #8
 8006934:	2b08      	cmp	r3, #8
 8006936:	d122      	bne.n	800697e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	f003 0308 	and.w	r3, r3, #8
 8006942:	2b08      	cmp	r3, #8
 8006944:	d11b      	bne.n	800697e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f06f 0208 	mvn.w	r2, #8
 800694e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2204      	movs	r2, #4
 8006954:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	69db      	ldr	r3, [r3, #28]
 800695c:	f003 0303 	and.w	r3, r3, #3
 8006960:	2b00      	cmp	r3, #0
 8006962:	d003      	beq.n	800696c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fa78 	bl	8006e5a <HAL_TIM_IC_CaptureCallback>
 800696a:	e005      	b.n	8006978 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 fa6a 	bl	8006e46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 fa7b 	bl	8006e6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	f003 0310 	and.w	r3, r3, #16
 8006988:	2b10      	cmp	r3, #16
 800698a:	d122      	bne.n	80069d2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	f003 0310 	and.w	r3, r3, #16
 8006996:	2b10      	cmp	r3, #16
 8006998:	d11b      	bne.n	80069d2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f06f 0210 	mvn.w	r2, #16
 80069a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2208      	movs	r2, #8
 80069a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	69db      	ldr	r3, [r3, #28]
 80069b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d003      	beq.n	80069c0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fa4e 	bl	8006e5a <HAL_TIM_IC_CaptureCallback>
 80069be:	e005      	b.n	80069cc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fa40 	bl	8006e46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fa51 	bl	8006e6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d10e      	bne.n	80069fe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d107      	bne.n	80069fe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f06f 0201 	mvn.w	r2, #1
 80069f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f7fb fc55 	bl	80022a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a08:	2b80      	cmp	r3, #128	; 0x80
 8006a0a:	d10e      	bne.n	8006a2a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a16:	2b80      	cmp	r3, #128	; 0x80
 8006a18:	d107      	bne.n	8006a2a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fda7 	bl	8007578 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a34:	2b40      	cmp	r3, #64	; 0x40
 8006a36:	d10e      	bne.n	8006a56 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a42:	2b40      	cmp	r3, #64	; 0x40
 8006a44:	d107      	bne.n	8006a56 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fa16 	bl	8006e82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	f003 0320 	and.w	r3, r3, #32
 8006a60:	2b20      	cmp	r3, #32
 8006a62:	d10e      	bne.n	8006a82 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	f003 0320 	and.w	r3, r3, #32
 8006a6e:	2b20      	cmp	r3, #32
 8006a70:	d107      	bne.n	8006a82 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f06f 0220 	mvn.w	r2, #32
 8006a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fd71 	bl	8007564 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a82:	bf00      	nop
 8006a84:	3708      	adds	r7, #8
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
	...

08006a8c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d101      	bne.n	8006aa6 <HAL_TIM_OC_ConfigChannel+0x1a>
 8006aa2:	2302      	movs	r3, #2
 8006aa4:	e04e      	b.n	8006b44 <HAL_TIM_OC_ConfigChannel+0xb8>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2202      	movs	r2, #2
 8006ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2b0c      	cmp	r3, #12
 8006aba:	d839      	bhi.n	8006b30 <HAL_TIM_OC_ConfigChannel+0xa4>
 8006abc:	a201      	add	r2, pc, #4	; (adr r2, 8006ac4 <HAL_TIM_OC_ConfigChannel+0x38>)
 8006abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac2:	bf00      	nop
 8006ac4:	08006af9 	.word	0x08006af9
 8006ac8:	08006b31 	.word	0x08006b31
 8006acc:	08006b31 	.word	0x08006b31
 8006ad0:	08006b31 	.word	0x08006b31
 8006ad4:	08006b07 	.word	0x08006b07
 8006ad8:	08006b31 	.word	0x08006b31
 8006adc:	08006b31 	.word	0x08006b31
 8006ae0:	08006b31 	.word	0x08006b31
 8006ae4:	08006b15 	.word	0x08006b15
 8006ae8:	08006b31 	.word	0x08006b31
 8006aec:	08006b31 	.word	0x08006b31
 8006af0:	08006b31 	.word	0x08006b31
 8006af4:	08006b23 	.word	0x08006b23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68b9      	ldr	r1, [r7, #8]
 8006afe:	4618      	mov	r0, r3
 8006b00:	f000 fa6a 	bl	8006fd8 <TIM_OC1_SetConfig>
      break;
 8006b04:	e015      	b.n	8006b32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68b9      	ldr	r1, [r7, #8]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f000 fad3 	bl	80070b8 <TIM_OC2_SetConfig>
      break;
 8006b12:	e00e      	b.n	8006b32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68b9      	ldr	r1, [r7, #8]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 fb42 	bl	80071a4 <TIM_OC3_SetConfig>
      break;
 8006b20:	e007      	b.n	8006b32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68b9      	ldr	r1, [r7, #8]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 fbaf 	bl	800728c <TIM_OC4_SetConfig>
      break;
 8006b2e:	e000      	b.n	8006b32 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8006b30:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d101      	bne.n	8006b66 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006b62:	2302      	movs	r3, #2
 8006b64:	e0b4      	b.n	8006cd0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2202      	movs	r2, #2
 8006b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2b0c      	cmp	r3, #12
 8006b7a:	f200 809f 	bhi.w	8006cbc <HAL_TIM_PWM_ConfigChannel+0x170>
 8006b7e:	a201      	add	r2, pc, #4	; (adr r2, 8006b84 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b84:	08006bb9 	.word	0x08006bb9
 8006b88:	08006cbd 	.word	0x08006cbd
 8006b8c:	08006cbd 	.word	0x08006cbd
 8006b90:	08006cbd 	.word	0x08006cbd
 8006b94:	08006bf9 	.word	0x08006bf9
 8006b98:	08006cbd 	.word	0x08006cbd
 8006b9c:	08006cbd 	.word	0x08006cbd
 8006ba0:	08006cbd 	.word	0x08006cbd
 8006ba4:	08006c3b 	.word	0x08006c3b
 8006ba8:	08006cbd 	.word	0x08006cbd
 8006bac:	08006cbd 	.word	0x08006cbd
 8006bb0:	08006cbd 	.word	0x08006cbd
 8006bb4:	08006c7b 	.word	0x08006c7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68b9      	ldr	r1, [r7, #8]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 fa0a 	bl	8006fd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	699a      	ldr	r2, [r3, #24]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f042 0208 	orr.w	r2, r2, #8
 8006bd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	699a      	ldr	r2, [r3, #24]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f022 0204 	bic.w	r2, r2, #4
 8006be2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6999      	ldr	r1, [r3, #24]
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	691a      	ldr	r2, [r3, #16]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	619a      	str	r2, [r3, #24]
      break;
 8006bf6:	e062      	b.n	8006cbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68b9      	ldr	r1, [r7, #8]
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f000 fa5a 	bl	80070b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	699a      	ldr	r2, [r3, #24]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	699a      	ldr	r2, [r3, #24]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6999      	ldr	r1, [r3, #24]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	021a      	lsls	r2, r3, #8
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	430a      	orrs	r2, r1
 8006c36:	619a      	str	r2, [r3, #24]
      break;
 8006c38:	e041      	b.n	8006cbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68b9      	ldr	r1, [r7, #8]
 8006c40:	4618      	mov	r0, r3
 8006c42:	f000 faaf 	bl	80071a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	69da      	ldr	r2, [r3, #28]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f042 0208 	orr.w	r2, r2, #8
 8006c54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	69da      	ldr	r2, [r3, #28]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f022 0204 	bic.w	r2, r2, #4
 8006c64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	69d9      	ldr	r1, [r3, #28]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	691a      	ldr	r2, [r3, #16]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	430a      	orrs	r2, r1
 8006c76:	61da      	str	r2, [r3, #28]
      break;
 8006c78:	e021      	b.n	8006cbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68b9      	ldr	r1, [r7, #8]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 fb03 	bl	800728c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	69da      	ldr	r2, [r3, #28]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	69da      	ldr	r2, [r3, #28]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	69d9      	ldr	r1, [r3, #28]
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	021a      	lsls	r2, r3, #8
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	61da      	str	r2, [r3, #28]
      break;
 8006cba:	e000      	b.n	8006cbe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006cbc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d101      	bne.n	8006cf0 <HAL_TIM_ConfigClockSource+0x18>
 8006cec:	2302      	movs	r3, #2
 8006cee:	e0a6      	b.n	8006e3e <HAL_TIM_ConfigClockSource+0x166>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d16:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2b40      	cmp	r3, #64	; 0x40
 8006d26:	d067      	beq.n	8006df8 <HAL_TIM_ConfigClockSource+0x120>
 8006d28:	2b40      	cmp	r3, #64	; 0x40
 8006d2a:	d80b      	bhi.n	8006d44 <HAL_TIM_ConfigClockSource+0x6c>
 8006d2c:	2b10      	cmp	r3, #16
 8006d2e:	d073      	beq.n	8006e18 <HAL_TIM_ConfigClockSource+0x140>
 8006d30:	2b10      	cmp	r3, #16
 8006d32:	d802      	bhi.n	8006d3a <HAL_TIM_ConfigClockSource+0x62>
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d06f      	beq.n	8006e18 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006d38:	e078      	b.n	8006e2c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006d3a:	2b20      	cmp	r3, #32
 8006d3c:	d06c      	beq.n	8006e18 <HAL_TIM_ConfigClockSource+0x140>
 8006d3e:	2b30      	cmp	r3, #48	; 0x30
 8006d40:	d06a      	beq.n	8006e18 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006d42:	e073      	b.n	8006e2c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006d44:	2b70      	cmp	r3, #112	; 0x70
 8006d46:	d00d      	beq.n	8006d64 <HAL_TIM_ConfigClockSource+0x8c>
 8006d48:	2b70      	cmp	r3, #112	; 0x70
 8006d4a:	d804      	bhi.n	8006d56 <HAL_TIM_ConfigClockSource+0x7e>
 8006d4c:	2b50      	cmp	r3, #80	; 0x50
 8006d4e:	d033      	beq.n	8006db8 <HAL_TIM_ConfigClockSource+0xe0>
 8006d50:	2b60      	cmp	r3, #96	; 0x60
 8006d52:	d041      	beq.n	8006dd8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006d54:	e06a      	b.n	8006e2c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d5a:	d066      	beq.n	8006e2a <HAL_TIM_ConfigClockSource+0x152>
 8006d5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d60:	d017      	beq.n	8006d92 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006d62:	e063      	b.n	8006e2c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6818      	ldr	r0, [r3, #0]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	6899      	ldr	r1, [r3, #8]
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	f000 fb5a 	bl	800742c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d86:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	609a      	str	r2, [r3, #8]
      break;
 8006d90:	e04c      	b.n	8006e2c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6818      	ldr	r0, [r3, #0]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	6899      	ldr	r1, [r3, #8]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	685a      	ldr	r2, [r3, #4]
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	f000 fb43 	bl	800742c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	689a      	ldr	r2, [r3, #8]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006db4:	609a      	str	r2, [r3, #8]
      break;
 8006db6:	e039      	b.n	8006e2c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6818      	ldr	r0, [r3, #0]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	6859      	ldr	r1, [r3, #4]
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	f000 fab7 	bl	8007338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2150      	movs	r1, #80	; 0x50
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f000 fb10 	bl	80073f6 <TIM_ITRx_SetConfig>
      break;
 8006dd6:	e029      	b.n	8006e2c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6818      	ldr	r0, [r3, #0]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	6859      	ldr	r1, [r3, #4]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	461a      	mov	r2, r3
 8006de6:	f000 fad6 	bl	8007396 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2160      	movs	r1, #96	; 0x60
 8006df0:	4618      	mov	r0, r3
 8006df2:	f000 fb00 	bl	80073f6 <TIM_ITRx_SetConfig>
      break;
 8006df6:	e019      	b.n	8006e2c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6818      	ldr	r0, [r3, #0]
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	6859      	ldr	r1, [r3, #4]
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	461a      	mov	r2, r3
 8006e06:	f000 fa97 	bl	8007338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2140      	movs	r1, #64	; 0x40
 8006e10:	4618      	mov	r0, r3
 8006e12:	f000 faf0 	bl	80073f6 <TIM_ITRx_SetConfig>
      break;
 8006e16:	e009      	b.n	8006e2c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4619      	mov	r1, r3
 8006e22:	4610      	mov	r0, r2
 8006e24:	f000 fae7 	bl	80073f6 <TIM_ITRx_SetConfig>
      break;
 8006e28:	e000      	b.n	8006e2c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006e2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b083      	sub	sp, #12
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e4e:	bf00      	nop
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b083      	sub	sp, #12
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e62:	bf00      	nop
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b083      	sub	sp, #12
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e76:	bf00      	nop
 8006e78:	370c      	adds	r7, #12
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b083      	sub	sp, #12
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e8a:	bf00      	nop
 8006e8c:	370c      	adds	r7, #12
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
	...

08006e98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a40      	ldr	r2, [pc, #256]	; (8006fac <TIM_Base_SetConfig+0x114>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d013      	beq.n	8006ed8 <TIM_Base_SetConfig+0x40>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eb6:	d00f      	beq.n	8006ed8 <TIM_Base_SetConfig+0x40>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a3d      	ldr	r2, [pc, #244]	; (8006fb0 <TIM_Base_SetConfig+0x118>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d00b      	beq.n	8006ed8 <TIM_Base_SetConfig+0x40>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a3c      	ldr	r2, [pc, #240]	; (8006fb4 <TIM_Base_SetConfig+0x11c>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d007      	beq.n	8006ed8 <TIM_Base_SetConfig+0x40>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a3b      	ldr	r2, [pc, #236]	; (8006fb8 <TIM_Base_SetConfig+0x120>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d003      	beq.n	8006ed8 <TIM_Base_SetConfig+0x40>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a3a      	ldr	r2, [pc, #232]	; (8006fbc <TIM_Base_SetConfig+0x124>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d108      	bne.n	8006eea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a2f      	ldr	r2, [pc, #188]	; (8006fac <TIM_Base_SetConfig+0x114>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d02b      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ef8:	d027      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a2c      	ldr	r2, [pc, #176]	; (8006fb0 <TIM_Base_SetConfig+0x118>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d023      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a2b      	ldr	r2, [pc, #172]	; (8006fb4 <TIM_Base_SetConfig+0x11c>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d01f      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a2a      	ldr	r2, [pc, #168]	; (8006fb8 <TIM_Base_SetConfig+0x120>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d01b      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a29      	ldr	r2, [pc, #164]	; (8006fbc <TIM_Base_SetConfig+0x124>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d017      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a28      	ldr	r2, [pc, #160]	; (8006fc0 <TIM_Base_SetConfig+0x128>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d013      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a27      	ldr	r2, [pc, #156]	; (8006fc4 <TIM_Base_SetConfig+0x12c>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d00f      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a26      	ldr	r2, [pc, #152]	; (8006fc8 <TIM_Base_SetConfig+0x130>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d00b      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a25      	ldr	r2, [pc, #148]	; (8006fcc <TIM_Base_SetConfig+0x134>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d007      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a24      	ldr	r2, [pc, #144]	; (8006fd0 <TIM_Base_SetConfig+0x138>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d003      	beq.n	8006f4a <TIM_Base_SetConfig+0xb2>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a23      	ldr	r2, [pc, #140]	; (8006fd4 <TIM_Base_SetConfig+0x13c>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d108      	bne.n	8006f5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	695b      	ldr	r3, [r3, #20]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	689a      	ldr	r2, [r3, #8]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a0a      	ldr	r2, [pc, #40]	; (8006fac <TIM_Base_SetConfig+0x114>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d003      	beq.n	8006f90 <TIM_Base_SetConfig+0xf8>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a0c      	ldr	r2, [pc, #48]	; (8006fbc <TIM_Base_SetConfig+0x124>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d103      	bne.n	8006f98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	691a      	ldr	r2, [r3, #16]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	615a      	str	r2, [r3, #20]
}
 8006f9e:	bf00      	nop
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	40010000 	.word	0x40010000
 8006fb0:	40000400 	.word	0x40000400
 8006fb4:	40000800 	.word	0x40000800
 8006fb8:	40000c00 	.word	0x40000c00
 8006fbc:	40010400 	.word	0x40010400
 8006fc0:	40014000 	.word	0x40014000
 8006fc4:	40014400 	.word	0x40014400
 8006fc8:	40014800 	.word	0x40014800
 8006fcc:	40001800 	.word	0x40001800
 8006fd0:	40001c00 	.word	0x40001c00
 8006fd4:	40002000 	.word	0x40002000

08006fd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b087      	sub	sp, #28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	f023 0201 	bic.w	r2, r3, #1
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f023 0303 	bic.w	r3, r3, #3
 800700e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	4313      	orrs	r3, r2
 8007018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f023 0302 	bic.w	r3, r3, #2
 8007020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	4313      	orrs	r3, r2
 800702a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a20      	ldr	r2, [pc, #128]	; (80070b0 <TIM_OC1_SetConfig+0xd8>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d003      	beq.n	800703c <TIM_OC1_SetConfig+0x64>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a1f      	ldr	r2, [pc, #124]	; (80070b4 <TIM_OC1_SetConfig+0xdc>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d10c      	bne.n	8007056 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	f023 0308 	bic.w	r3, r3, #8
 8007042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	697a      	ldr	r2, [r7, #20]
 800704a:	4313      	orrs	r3, r2
 800704c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	f023 0304 	bic.w	r3, r3, #4
 8007054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a15      	ldr	r2, [pc, #84]	; (80070b0 <TIM_OC1_SetConfig+0xd8>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d003      	beq.n	8007066 <TIM_OC1_SetConfig+0x8e>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a14      	ldr	r2, [pc, #80]	; (80070b4 <TIM_OC1_SetConfig+0xdc>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d111      	bne.n	800708a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800706c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	4313      	orrs	r3, r2
 800707e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	4313      	orrs	r3, r2
 8007088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	621a      	str	r2, [r3, #32]
}
 80070a4:	bf00      	nop
 80070a6:	371c      	adds	r7, #28
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	40010000 	.word	0x40010000
 80070b4:	40010400 	.word	0x40010400

080070b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	f023 0210 	bic.w	r2, r3, #16
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	021b      	lsls	r3, r3, #8
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	f023 0320 	bic.w	r3, r3, #32
 8007102:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	011b      	lsls	r3, r3, #4
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	4313      	orrs	r3, r2
 800710e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a22      	ldr	r2, [pc, #136]	; (800719c <TIM_OC2_SetConfig+0xe4>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d003      	beq.n	8007120 <TIM_OC2_SetConfig+0x68>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a21      	ldr	r2, [pc, #132]	; (80071a0 <TIM_OC2_SetConfig+0xe8>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d10d      	bne.n	800713c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	011b      	lsls	r3, r3, #4
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	4313      	orrs	r3, r2
 8007132:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800713a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a17      	ldr	r2, [pc, #92]	; (800719c <TIM_OC2_SetConfig+0xe4>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d003      	beq.n	800714c <TIM_OC2_SetConfig+0x94>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a16      	ldr	r2, [pc, #88]	; (80071a0 <TIM_OC2_SetConfig+0xe8>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d113      	bne.n	8007174 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007152:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800715a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	695b      	ldr	r3, [r3, #20]
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	693a      	ldr	r2, [r7, #16]
 8007164:	4313      	orrs	r3, r2
 8007166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	693a      	ldr	r2, [r7, #16]
 8007170:	4313      	orrs	r3, r2
 8007172:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	621a      	str	r2, [r3, #32]
}
 800718e:	bf00      	nop
 8007190:	371c      	adds	r7, #28
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	40010000 	.word	0x40010000
 80071a0:	40010400 	.word	0x40010400

080071a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b087      	sub	sp, #28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	69db      	ldr	r3, [r3, #28]
 80071ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f023 0303 	bic.w	r3, r3, #3
 80071da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	021b      	lsls	r3, r3, #8
 80071f4:	697a      	ldr	r2, [r7, #20]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a21      	ldr	r2, [pc, #132]	; (8007284 <TIM_OC3_SetConfig+0xe0>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d003      	beq.n	800720a <TIM_OC3_SetConfig+0x66>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a20      	ldr	r2, [pc, #128]	; (8007288 <TIM_OC3_SetConfig+0xe4>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d10d      	bne.n	8007226 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007210:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	021b      	lsls	r3, r3, #8
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	4313      	orrs	r3, r2
 800721c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a16      	ldr	r2, [pc, #88]	; (8007284 <TIM_OC3_SetConfig+0xe0>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d003      	beq.n	8007236 <TIM_OC3_SetConfig+0x92>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a15      	ldr	r2, [pc, #84]	; (8007288 <TIM_OC3_SetConfig+0xe4>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d113      	bne.n	800725e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800723c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	011b      	lsls	r3, r3, #4
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	4313      	orrs	r3, r2
 8007250:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	011b      	lsls	r3, r3, #4
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	4313      	orrs	r3, r2
 800725c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	693a      	ldr	r2, [r7, #16]
 8007262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	621a      	str	r2, [r3, #32]
}
 8007278:	bf00      	nop
 800727a:	371c      	adds	r7, #28
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr
 8007284:	40010000 	.word	0x40010000
 8007288:	40010400 	.word	0x40010400

0800728c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800728c:	b480      	push	{r7}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	021b      	lsls	r3, r3, #8
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	031b      	lsls	r3, r3, #12
 80072de:	693a      	ldr	r2, [r7, #16]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a12      	ldr	r2, [pc, #72]	; (8007330 <TIM_OC4_SetConfig+0xa4>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d003      	beq.n	80072f4 <TIM_OC4_SetConfig+0x68>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a11      	ldr	r2, [pc, #68]	; (8007334 <TIM_OC4_SetConfig+0xa8>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d109      	bne.n	8007308 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	019b      	lsls	r3, r3, #6
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	4313      	orrs	r3, r2
 8007306:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	621a      	str	r2, [r3, #32]
}
 8007322:	bf00      	nop
 8007324:	371c      	adds	r7, #28
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	40010000 	.word	0x40010000
 8007334:	40010400 	.word	0x40010400

08007338 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007338:	b480      	push	{r7}
 800733a:	b087      	sub	sp, #28
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6a1b      	ldr	r3, [r3, #32]
 8007348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6a1b      	ldr	r3, [r3, #32]
 800734e:	f023 0201 	bic.w	r2, r3, #1
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	011b      	lsls	r3, r3, #4
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	4313      	orrs	r3, r2
 800736c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	f023 030a 	bic.w	r3, r3, #10
 8007374:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	4313      	orrs	r3, r2
 800737c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	621a      	str	r2, [r3, #32]
}
 800738a:	bf00      	nop
 800738c:	371c      	adds	r7, #28
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr

08007396 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007396:	b480      	push	{r7}
 8007398:	b087      	sub	sp, #28
 800739a:	af00      	add	r7, sp, #0
 800739c:	60f8      	str	r0, [r7, #12]
 800739e:	60b9      	str	r1, [r7, #8]
 80073a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	f023 0210 	bic.w	r2, r3, #16
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6a1b      	ldr	r3, [r3, #32]
 80073b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	031b      	lsls	r3, r3, #12
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	011b      	lsls	r3, r3, #4
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	4313      	orrs	r3, r2
 80073dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	693a      	ldr	r2, [r7, #16]
 80073e8:	621a      	str	r2, [r3, #32]
}
 80073ea:	bf00      	nop
 80073ec:	371c      	adds	r7, #28
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b085      	sub	sp, #20
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
 80073fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800740c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	4313      	orrs	r3, r2
 8007414:	f043 0307 	orr.w	r3, r3, #7
 8007418:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	609a      	str	r2, [r3, #8]
}
 8007420:	bf00      	nop
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800742c:	b480      	push	{r7}
 800742e:	b087      	sub	sp, #28
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
 8007438:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007446:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	021a      	lsls	r2, r3, #8
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	431a      	orrs	r2, r3
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	4313      	orrs	r3, r2
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	4313      	orrs	r3, r2
 8007458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	697a      	ldr	r2, [r7, #20]
 800745e:	609a      	str	r2, [r3, #8]
}
 8007460:	bf00      	nop
 8007462:	371c      	adds	r7, #28
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800747c:	2b01      	cmp	r3, #1
 800747e:	d101      	bne.n	8007484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007480:	2302      	movs	r3, #2
 8007482:	e05a      	b.n	800753a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2202      	movs	r2, #2
 8007490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a21      	ldr	r2, [pc, #132]	; (8007548 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d022      	beq.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074d0:	d01d      	beq.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a1d      	ldr	r2, [pc, #116]	; (800754c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d018      	beq.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a1b      	ldr	r2, [pc, #108]	; (8007550 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d013      	beq.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a1a      	ldr	r2, [pc, #104]	; (8007554 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d00e      	beq.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a18      	ldr	r2, [pc, #96]	; (8007558 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d009      	beq.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a17      	ldr	r2, [pc, #92]	; (800755c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d004      	beq.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a15      	ldr	r2, [pc, #84]	; (8007560 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d10c      	bne.n	8007528 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007514:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	4313      	orrs	r3, r2
 800751e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	40010000 	.word	0x40010000
 800754c:	40000400 	.word	0x40000400
 8007550:	40000800 	.word	0x40000800
 8007554:	40000c00 	.word	0x40000c00
 8007558:	40010400 	.word	0x40010400
 800755c:	40014000 	.word	0x40014000
 8007560:	40001800 	.word	0x40001800

08007564 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	4603      	mov	r3, r0
 8007594:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007596:	2300      	movs	r3, #0
 8007598:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800759a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800759e:	2b84      	cmp	r3, #132	; 0x84
 80075a0:	d005      	beq.n	80075ae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80075a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	4413      	add	r3, r2
 80075aa:	3303      	adds	r3, #3
 80075ac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80075ae:	68fb      	ldr	r3, [r7, #12]
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3714      	adds	r7, #20
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80075c0:	f001 f8b2 	bl	8008728 <vTaskStartScheduler>
  
  return osOK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	bd80      	pop	{r7, pc}

080075ca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80075ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075cc:	b089      	sub	sp, #36	; 0x24
 80075ce:	af04      	add	r7, sp, #16
 80075d0:	6078      	str	r0, [r7, #4]
 80075d2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d020      	beq.n	800761e <osThreadCreate+0x54>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d01c      	beq.n	800761e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685c      	ldr	r4, [r3, #4]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681d      	ldr	r5, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	691e      	ldr	r6, [r3, #16]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7ff ffc8 	bl	800758c <makeFreeRtosPriority>
 80075fc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007606:	9202      	str	r2, [sp, #8]
 8007608:	9301      	str	r3, [sp, #4]
 800760a:	9100      	str	r1, [sp, #0]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	4632      	mov	r2, r6
 8007610:	4629      	mov	r1, r5
 8007612:	4620      	mov	r0, r4
 8007614:	f000 fec5 	bl	80083a2 <xTaskCreateStatic>
 8007618:	4603      	mov	r3, r0
 800761a:	60fb      	str	r3, [r7, #12]
 800761c:	e01c      	b.n	8007658 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685c      	ldr	r4, [r3, #4]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800762a:	b29e      	uxth	r6, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007632:	4618      	mov	r0, r3
 8007634:	f7ff ffaa 	bl	800758c <makeFreeRtosPriority>
 8007638:	4602      	mov	r2, r0
 800763a:	f107 030c 	add.w	r3, r7, #12
 800763e:	9301      	str	r3, [sp, #4]
 8007640:	9200      	str	r2, [sp, #0]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	4632      	mov	r2, r6
 8007646:	4629      	mov	r1, r5
 8007648:	4620      	mov	r0, r4
 800764a:	f000 ff04 	bl	8008456 <xTaskCreate>
 800764e:	4603      	mov	r3, r0
 8007650:	2b01      	cmp	r3, #1
 8007652:	d001      	beq.n	8007658 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007654:	2300      	movs	r3, #0
 8007656:	e000      	b.n	800765a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007658:	68fb      	ldr	r3, [r7, #12]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007662 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007662:	b480      	push	{r7}
 8007664:	b083      	sub	sp, #12
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f103 0208 	add.w	r2, r3, #8
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800767a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f103 0208 	add.w	r2, r3, #8
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f103 0208 	add.w	r2, r3, #8
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007696:	bf00      	nop
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80076a2:	b480      	push	{r7}
 80076a4:	b083      	sub	sp, #12
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	689a      	ldr	r2, [r3, #8]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	683a      	ldr	r2, [r7, #0]
 80076e6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	1c5a      	adds	r2, r3, #1
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	601a      	str	r2, [r3, #0]
}
 80076f8:	bf00      	nop
 80076fa:	3714      	adds	r7, #20
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800771a:	d103      	bne.n	8007724 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	60fb      	str	r3, [r7, #12]
 8007722:	e00c      	b.n	800773e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	3308      	adds	r3, #8
 8007728:	60fb      	str	r3, [r7, #12]
 800772a:	e002      	b.n	8007732 <vListInsert+0x2e>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	60fb      	str	r3, [r7, #12]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	429a      	cmp	r2, r3
 800773c:	d2f6      	bcs.n	800772c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	685a      	ldr	r2, [r3, #4]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	683a      	ldr	r2, [r7, #0]
 8007758:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	1c5a      	adds	r2, r3, #1
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	601a      	str	r2, [r3, #0]
}
 800776a:	bf00      	nop
 800776c:	3714      	adds	r7, #20
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr

08007776 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007776:	b480      	push	{r7}
 8007778:	b085      	sub	sp, #20
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	6892      	ldr	r2, [r2, #8]
 800778c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	6852      	ldr	r2, [r2, #4]
 8007796:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d103      	bne.n	80077aa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	689a      	ldr	r2, [r3, #8]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	1e5a      	subs	r2, r3, #1
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
	...

080077cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d109      	bne.n	80077f4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80077e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e4:	f383 8811 	msr	BASEPRI, r3
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	f3bf 8f4f 	dsb	sy
 80077f0:	60bb      	str	r3, [r7, #8]
 80077f2:	e7fe      	b.n	80077f2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80077f4:	f002 fa5a 	bl	8009cac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007800:	68f9      	ldr	r1, [r7, #12]
 8007802:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007804:	fb01 f303 	mul.w	r3, r1, r3
 8007808:	441a      	add	r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2200      	movs	r2, #0
 8007812:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007824:	3b01      	subs	r3, #1
 8007826:	68f9      	ldr	r1, [r7, #12]
 8007828:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800782a:	fb01 f303 	mul.w	r3, r1, r3
 800782e:	441a      	add	r2, r3
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	22ff      	movs	r2, #255	; 0xff
 8007838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	22ff      	movs	r2, #255	; 0xff
 8007840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d114      	bne.n	8007874 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d01a      	beq.n	8007888 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	3310      	adds	r3, #16
 8007856:	4618      	mov	r0, r3
 8007858:	f001 f9e4 	bl	8008c24 <xTaskRemoveFromEventList>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d012      	beq.n	8007888 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007862:	4b0d      	ldr	r3, [pc, #52]	; (8007898 <xQueueGenericReset+0xcc>)
 8007864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007868:	601a      	str	r2, [r3, #0]
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	e009      	b.n	8007888 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	3310      	adds	r3, #16
 8007878:	4618      	mov	r0, r3
 800787a:	f7ff fef2 	bl	8007662 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	3324      	adds	r3, #36	; 0x24
 8007882:	4618      	mov	r0, r3
 8007884:	f7ff feed 	bl	8007662 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007888:	f002 fa3e 	bl	8009d08 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800788c:	2301      	movs	r3, #1
}
 800788e:	4618      	mov	r0, r3
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	e000ed04 	.word	0xe000ed04

0800789c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800789c:	b580      	push	{r7, lr}
 800789e:	b08e      	sub	sp, #56	; 0x38
 80078a0:	af02      	add	r7, sp, #8
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
 80078a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d109      	bne.n	80078c4 <xQueueGenericCreateStatic+0x28>
 80078b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b4:	f383 8811 	msr	BASEPRI, r3
 80078b8:	f3bf 8f6f 	isb	sy
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80078c2:	e7fe      	b.n	80078c2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d109      	bne.n	80078de <xQueueGenericCreateStatic+0x42>
 80078ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ce:	f383 8811 	msr	BASEPRI, r3
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	627b      	str	r3, [r7, #36]	; 0x24
 80078dc:	e7fe      	b.n	80078dc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d002      	beq.n	80078ea <xQueueGenericCreateStatic+0x4e>
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d001      	beq.n	80078ee <xQueueGenericCreateStatic+0x52>
 80078ea:	2301      	movs	r3, #1
 80078ec:	e000      	b.n	80078f0 <xQueueGenericCreateStatic+0x54>
 80078ee:	2300      	movs	r3, #0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d109      	bne.n	8007908 <xQueueGenericCreateStatic+0x6c>
 80078f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f8:	f383 8811 	msr	BASEPRI, r3
 80078fc:	f3bf 8f6f 	isb	sy
 8007900:	f3bf 8f4f 	dsb	sy
 8007904:	623b      	str	r3, [r7, #32]
 8007906:	e7fe      	b.n	8007906 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d102      	bne.n	8007914 <xQueueGenericCreateStatic+0x78>
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d101      	bne.n	8007918 <xQueueGenericCreateStatic+0x7c>
 8007914:	2301      	movs	r3, #1
 8007916:	e000      	b.n	800791a <xQueueGenericCreateStatic+0x7e>
 8007918:	2300      	movs	r3, #0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d109      	bne.n	8007932 <xQueueGenericCreateStatic+0x96>
 800791e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	61fb      	str	r3, [r7, #28]
 8007930:	e7fe      	b.n	8007930 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007932:	234c      	movs	r3, #76	; 0x4c
 8007934:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	2b4c      	cmp	r3, #76	; 0x4c
 800793a:	d009      	beq.n	8007950 <xQueueGenericCreateStatic+0xb4>
 800793c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007940:	f383 8811 	msr	BASEPRI, r3
 8007944:	f3bf 8f6f 	isb	sy
 8007948:	f3bf 8f4f 	dsb	sy
 800794c:	61bb      	str	r3, [r7, #24]
 800794e:	e7fe      	b.n	800794e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007950:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00d      	beq.n	8007978 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800795c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007964:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796a:	9300      	str	r3, [sp, #0]
 800796c:	4613      	mov	r3, r2
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	68b9      	ldr	r1, [r7, #8]
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	f000 f844 	bl	8007a00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800797a:	4618      	mov	r0, r3
 800797c:	3730      	adds	r7, #48	; 0x30
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007982:	b580      	push	{r7, lr}
 8007984:	b08a      	sub	sp, #40	; 0x28
 8007986:	af02      	add	r7, sp, #8
 8007988:	60f8      	str	r0, [r7, #12]
 800798a:	60b9      	str	r1, [r7, #8]
 800798c:	4613      	mov	r3, r2
 800798e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d109      	bne.n	80079aa <xQueueGenericCreate+0x28>
 8007996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799a:	f383 8811 	msr	BASEPRI, r3
 800799e:	f3bf 8f6f 	isb	sy
 80079a2:	f3bf 8f4f 	dsb	sy
 80079a6:	613b      	str	r3, [r7, #16]
 80079a8:	e7fe      	b.n	80079a8 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d102      	bne.n	80079b6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80079b0:	2300      	movs	r3, #0
 80079b2:	61fb      	str	r3, [r7, #28]
 80079b4:	e004      	b.n	80079c0 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	fb02 f303 	mul.w	r3, r2, r3
 80079be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	334c      	adds	r3, #76	; 0x4c
 80079c4:	4618      	mov	r0, r3
 80079c6:	f002 fa8b 	bl	8009ee0 <pvPortMalloc>
 80079ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d011      	beq.n	80079f6 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	334c      	adds	r3, #76	; 0x4c
 80079da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	2200      	movs	r2, #0
 80079e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80079e4:	79fa      	ldrb	r2, [r7, #7]
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	4613      	mov	r3, r2
 80079ec:	697a      	ldr	r2, [r7, #20]
 80079ee:	68b9      	ldr	r1, [r7, #8]
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f000 f805 	bl	8007a00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80079f6:	69bb      	ldr	r3, [r7, #24]
	}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3720      	adds	r7, #32
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
 8007a0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d103      	bne.n	8007a1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	69ba      	ldr	r2, [r7, #24]
 8007a18:	601a      	str	r2, [r3, #0]
 8007a1a:	e002      	b.n	8007a22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007a2e:	2101      	movs	r1, #1
 8007a30:	69b8      	ldr	r0, [r7, #24]
 8007a32:	f7ff fecb 	bl	80077cc <xQueueGenericReset>
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007a3c:	bf00      	nop
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b08e      	sub	sp, #56	; 0x38
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
 8007a50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007a52:	2300      	movs	r3, #0
 8007a54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d109      	bne.n	8007a74 <xQueueGenericSend+0x30>
 8007a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	627b      	str	r3, [r7, #36]	; 0x24
 8007a72:	e7fe      	b.n	8007a72 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d103      	bne.n	8007a82 <xQueueGenericSend+0x3e>
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d101      	bne.n	8007a86 <xQueueGenericSend+0x42>
 8007a82:	2301      	movs	r3, #1
 8007a84:	e000      	b.n	8007a88 <xQueueGenericSend+0x44>
 8007a86:	2300      	movs	r3, #0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d109      	bne.n	8007aa0 <xQueueGenericSend+0x5c>
 8007a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a90:	f383 8811 	msr	BASEPRI, r3
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	623b      	str	r3, [r7, #32]
 8007a9e:	e7fe      	b.n	8007a9e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	d103      	bne.n	8007aae <xQueueGenericSend+0x6a>
 8007aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d101      	bne.n	8007ab2 <xQueueGenericSend+0x6e>
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e000      	b.n	8007ab4 <xQueueGenericSend+0x70>
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d109      	bne.n	8007acc <xQueueGenericSend+0x88>
 8007ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abc:	f383 8811 	msr	BASEPRI, r3
 8007ac0:	f3bf 8f6f 	isb	sy
 8007ac4:	f3bf 8f4f 	dsb	sy
 8007ac8:	61fb      	str	r3, [r7, #28]
 8007aca:	e7fe      	b.n	8007aca <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007acc:	f001 fa60 	bl	8008f90 <xTaskGetSchedulerState>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d102      	bne.n	8007adc <xQueueGenericSend+0x98>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <xQueueGenericSend+0x9c>
 8007adc:	2301      	movs	r3, #1
 8007ade:	e000      	b.n	8007ae2 <xQueueGenericSend+0x9e>
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d109      	bne.n	8007afa <xQueueGenericSend+0xb6>
 8007ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aea:	f383 8811 	msr	BASEPRI, r3
 8007aee:	f3bf 8f6f 	isb	sy
 8007af2:	f3bf 8f4f 	dsb	sy
 8007af6:	61bb      	str	r3, [r7, #24]
 8007af8:	e7fe      	b.n	8007af8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007afa:	f002 f8d7 	bl	8009cac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d302      	bcc.n	8007b10 <xQueueGenericSend+0xcc>
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d146      	bne.n	8007b9e <xQueueGenericSend+0x15a>
			{
				traceQUEUE_SEND( pxQueue );

				#if ( configUSE_QUEUE_SETS == 1 )
				{
				UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b14:	62fb      	str	r3, [r7, #44]	; 0x2c

					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b16:	683a      	ldr	r2, [r7, #0]
 8007b18:	68b9      	ldr	r1, [r7, #8]
 8007b1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b1c:	f000 fa2c 	bl	8007f78 <prvCopyDataToQueue>
 8007b20:	62b8      	str	r0, [r7, #40]	; 0x28

					if( pxQueue->pxQueueSetContainer != NULL )
 8007b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d015      	beq.n	8007b56 <xQueueGenericSend+0x112>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d102      	bne.n	8007b36 <xQueueGenericSend+0xf2>
 8007b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d12f      	bne.n	8007b96 <xQueueGenericSend+0x152>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8007b36:	6839      	ldr	r1, [r7, #0]
 8007b38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b3a:	f000 fbda 	bl	80082f2 <prvNotifyQueueSetContainer>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d028      	beq.n	8007b96 <xQueueGenericSend+0x152>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 8007b44:	4b4a      	ldr	r3, [pc, #296]	; (8007c70 <xQueueGenericSend+0x22c>)
 8007b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b4a:	601a      	str	r2, [r3, #0]
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	f3bf 8f6f 	isb	sy
 8007b54:	e01f      	b.n	8007b96 <xQueueGenericSend+0x152>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d010      	beq.n	8007b80 <xQueueGenericSend+0x13c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b60:	3324      	adds	r3, #36	; 0x24
 8007b62:	4618      	mov	r0, r3
 8007b64:	f001 f85e 	bl	8008c24 <xTaskRemoveFromEventList>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d013      	beq.n	8007b96 <xQueueGenericSend+0x152>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8007b6e:	4b40      	ldr	r3, [pc, #256]	; (8007c70 <xQueueGenericSend+0x22c>)
 8007b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b74:	601a      	str	r2, [r3, #0]
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	f3bf 8f6f 	isb	sy
 8007b7e:	e00a      	b.n	8007b96 <xQueueGenericSend+0x152>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8007b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d007      	beq.n	8007b96 <xQueueGenericSend+0x152>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 8007b86:	4b3a      	ldr	r3, [pc, #232]	; (8007c70 <xQueueGenericSend+0x22c>)
 8007b88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b8c:	601a      	str	r2, [r3, #0]
 8007b8e:	f3bf 8f4f 	dsb	sy
 8007b92:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007b96:	f002 f8b7 	bl	8009d08 <vPortExitCritical>
				return pdPASS;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e063      	b.n	8007c66 <xQueueGenericSend+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d103      	bne.n	8007bac <xQueueGenericSend+0x168>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ba4:	f002 f8b0 	bl	8009d08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	e05c      	b.n	8007c66 <xQueueGenericSend+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d106      	bne.n	8007bc0 <xQueueGenericSend+0x17c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007bb2:	f107 0310 	add.w	r3, r7, #16
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f001 f896 	bl	8008ce8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007bc0:	f002 f8a2 	bl	8009d08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007bc4:	f000 fe14 	bl	80087f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007bc8:	f002 f870 	bl	8009cac <vPortEnterCritical>
 8007bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bd2:	b25b      	sxtb	r3, r3
 8007bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bd8:	d103      	bne.n	8007be2 <xQueueGenericSend+0x19e>
 8007bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007be8:	b25b      	sxtb	r3, r3
 8007bea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bee:	d103      	bne.n	8007bf8 <xQueueGenericSend+0x1b4>
 8007bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bf8:	f002 f886 	bl	8009d08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007bfc:	1d3a      	adds	r2, r7, #4
 8007bfe:	f107 0310 	add.w	r3, r7, #16
 8007c02:	4611      	mov	r1, r2
 8007c04:	4618      	mov	r0, r3
 8007c06:	f001 f885 	bl	8008d14 <xTaskCheckForTimeOut>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d124      	bne.n	8007c5a <xQueueGenericSend+0x216>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007c10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c12:	f000 fab7 	bl	8008184 <prvIsQueueFull>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d018      	beq.n	8007c4e <xQueueGenericSend+0x20a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1e:	3310      	adds	r3, #16
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	4611      	mov	r1, r2
 8007c24:	4618      	mov	r0, r3
 8007c26:	f000 ffaf 	bl	8008b88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007c2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c2c:	f000 fa34 	bl	8008098 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007c30:	f000 fdec 	bl	800880c <xTaskResumeAll>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f47f af5f 	bne.w	8007afa <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007c3c:	4b0c      	ldr	r3, [pc, #48]	; (8007c70 <xQueueGenericSend+0x22c>)
 8007c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c42:	601a      	str	r2, [r3, #0]
 8007c44:	f3bf 8f4f 	dsb	sy
 8007c48:	f3bf 8f6f 	isb	sy
 8007c4c:	e755      	b.n	8007afa <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007c4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c50:	f000 fa22 	bl	8008098 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c54:	f000 fdda 	bl	800880c <xTaskResumeAll>
 8007c58:	e74f      	b.n	8007afa <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007c5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c5c:	f000 fa1c 	bl	8008098 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c60:	f000 fdd4 	bl	800880c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007c64:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3738      	adds	r7, #56	; 0x38
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	e000ed04 	.word	0xe000ed04

08007c74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b08e      	sub	sp, #56	; 0x38
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]
 8007c80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d109      	bne.n	8007ca0 <xQueueGenericSendFromISR+0x2c>
 8007c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c90:	f383 8811 	msr	BASEPRI, r3
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c9e:	e7fe      	b.n	8007c9e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d103      	bne.n	8007cae <xQueueGenericSendFromISR+0x3a>
 8007ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d101      	bne.n	8007cb2 <xQueueGenericSendFromISR+0x3e>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e000      	b.n	8007cb4 <xQueueGenericSendFromISR+0x40>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d109      	bne.n	8007ccc <xQueueGenericSendFromISR+0x58>
 8007cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	623b      	str	r3, [r7, #32]
 8007cca:	e7fe      	b.n	8007cca <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d103      	bne.n	8007cda <xQueueGenericSendFromISR+0x66>
 8007cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d101      	bne.n	8007cde <xQueueGenericSendFromISR+0x6a>
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e000      	b.n	8007ce0 <xQueueGenericSendFromISR+0x6c>
 8007cde:	2300      	movs	r3, #0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d109      	bne.n	8007cf8 <xQueueGenericSendFromISR+0x84>
 8007ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	61fb      	str	r3, [r7, #28]
 8007cf6:	e7fe      	b.n	8007cf6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007cf8:	f002 f8b4 	bl	8009e64 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007cfc:	f3ef 8211 	mrs	r2, BASEPRI
 8007d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	61ba      	str	r2, [r7, #24]
 8007d12:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007d14:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d16:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d302      	bcc.n	8007d2a <xQueueGenericSendFromISR+0xb6>
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	d13e      	bne.n	8007da8 <xQueueGenericSendFromISR+0x134>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d34:	683a      	ldr	r2, [r7, #0]
 8007d36:	68b9      	ldr	r1, [r7, #8]
 8007d38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d3a:	f000 f91d 	bl	8007f78 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007d3e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007d42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d46:	d124      	bne.n	8007d92 <xQueueGenericSendFromISR+0x11e>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8007d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00d      	beq.n	8007d6c <xQueueGenericSendFromISR+0xf8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8007d50:	6839      	ldr	r1, [r7, #0]
 8007d52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d54:	f000 facd 	bl	80082f2 <prvNotifyQueueSetContainer>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d021      	beq.n	8007da2 <xQueueGenericSendFromISR+0x12e>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d01e      	beq.n	8007da2 <xQueueGenericSendFromISR+0x12e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	601a      	str	r2, [r3, #0]
 8007d6a:	e01a      	b.n	8007da2 <xQueueGenericSendFromISR+0x12e>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d016      	beq.n	8007da2 <xQueueGenericSendFromISR+0x12e>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d76:	3324      	adds	r3, #36	; 0x24
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f000 ff53 	bl	8008c24 <xTaskRemoveFromEventList>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00e      	beq.n	8007da2 <xQueueGenericSendFromISR+0x12e>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00b      	beq.n	8007da2 <xQueueGenericSendFromISR+0x12e>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	601a      	str	r2, [r3, #0]
 8007d90:	e007      	b.n	8007da2 <xQueueGenericSendFromISR+0x12e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007d96:	3301      	adds	r3, #1
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	b25a      	sxtb	r2, r3
 8007d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007da2:	2301      	movs	r3, #1
 8007da4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007da6:	e001      	b.n	8007dac <xQueueGenericSendFromISR+0x138>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007da8:	2300      	movs	r3, #0
 8007daa:	637b      	str	r3, [r7, #52]	; 0x34
 8007dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dae:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3738      	adds	r7, #56	; 0x38
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b08c      	sub	sp, #48	; 0x30
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d109      	bne.n	8007dee <xQueueReceive+0x2e>
	__asm volatile
 8007dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dde:	f383 8811 	msr	BASEPRI, r3
 8007de2:	f3bf 8f6f 	isb	sy
 8007de6:	f3bf 8f4f 	dsb	sy
 8007dea:	623b      	str	r3, [r7, #32]
 8007dec:	e7fe      	b.n	8007dec <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d103      	bne.n	8007dfc <xQueueReceive+0x3c>
 8007df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d101      	bne.n	8007e00 <xQueueReceive+0x40>
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e000      	b.n	8007e02 <xQueueReceive+0x42>
 8007e00:	2300      	movs	r3, #0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d109      	bne.n	8007e1a <xQueueReceive+0x5a>
 8007e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0a:	f383 8811 	msr	BASEPRI, r3
 8007e0e:	f3bf 8f6f 	isb	sy
 8007e12:	f3bf 8f4f 	dsb	sy
 8007e16:	61fb      	str	r3, [r7, #28]
 8007e18:	e7fe      	b.n	8007e18 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e1a:	f001 f8b9 	bl	8008f90 <xTaskGetSchedulerState>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d102      	bne.n	8007e2a <xQueueReceive+0x6a>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <xQueueReceive+0x6e>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e000      	b.n	8007e30 <xQueueReceive+0x70>
 8007e2e:	2300      	movs	r3, #0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d109      	bne.n	8007e48 <xQueueReceive+0x88>
 8007e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e38:	f383 8811 	msr	BASEPRI, r3
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	f3bf 8f4f 	dsb	sy
 8007e44:	61bb      	str	r3, [r7, #24]
 8007e46:	e7fe      	b.n	8007e46 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e48:	f001 ff30 	bl	8009cac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e50:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d01f      	beq.n	8007e98 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e58:	68b9      	ldr	r1, [r7, #8]
 8007e5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e5c:	f000 f8f6 	bl	800804c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e62:	1e5a      	subs	r2, r3, #1
 8007e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e66:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00f      	beq.n	8007e90 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e72:	3310      	adds	r3, #16
 8007e74:	4618      	mov	r0, r3
 8007e76:	f000 fed5 	bl	8008c24 <xTaskRemoveFromEventList>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d007      	beq.n	8007e90 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e80:	4b3c      	ldr	r3, [pc, #240]	; (8007f74 <xQueueReceive+0x1b4>)
 8007e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e86:	601a      	str	r2, [r3, #0]
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e90:	f001 ff3a 	bl	8009d08 <vPortExitCritical>
				return pdPASS;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e069      	b.n	8007f6c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d103      	bne.n	8007ea6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e9e:	f001 ff33 	bl	8009d08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	e062      	b.n	8007f6c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d106      	bne.n	8007eba <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007eac:	f107 0310 	add.w	r3, r7, #16
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f000 ff19 	bl	8008ce8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007eba:	f001 ff25 	bl	8009d08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ebe:	f000 fc97 	bl	80087f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ec2:	f001 fef3 	bl	8009cac <vPortEnterCritical>
 8007ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ecc:	b25b      	sxtb	r3, r3
 8007ece:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ed2:	d103      	bne.n	8007edc <xQueueReceive+0x11c>
 8007ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ede:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ee2:	b25b      	sxtb	r3, r3
 8007ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ee8:	d103      	bne.n	8007ef2 <xQueueReceive+0x132>
 8007eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ef2:	f001 ff09 	bl	8009d08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ef6:	1d3a      	adds	r2, r7, #4
 8007ef8:	f107 0310 	add.w	r3, r7, #16
 8007efc:	4611      	mov	r1, r2
 8007efe:	4618      	mov	r0, r3
 8007f00:	f000 ff08 	bl	8008d14 <xTaskCheckForTimeOut>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d123      	bne.n	8007f52 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f0c:	f000 f924 	bl	8008158 <prvIsQueueEmpty>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d017      	beq.n	8007f46 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f18:	3324      	adds	r3, #36	; 0x24
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	4611      	mov	r1, r2
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f000 fe32 	bl	8008b88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f26:	f000 f8b7 	bl	8008098 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f2a:	f000 fc6f 	bl	800880c <xTaskResumeAll>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d189      	bne.n	8007e48 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007f34:	4b0f      	ldr	r3, [pc, #60]	; (8007f74 <xQueueReceive+0x1b4>)
 8007f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f3a:	601a      	str	r2, [r3, #0]
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	f3bf 8f6f 	isb	sy
 8007f44:	e780      	b.n	8007e48 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007f46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f48:	f000 f8a6 	bl	8008098 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f4c:	f000 fc5e 	bl	800880c <xTaskResumeAll>
 8007f50:	e77a      	b.n	8007e48 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007f52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f54:	f000 f8a0 	bl	8008098 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f58:	f000 fc58 	bl	800880c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f5e:	f000 f8fb 	bl	8008158 <prvIsQueueEmpty>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f43f af6f 	beq.w	8007e48 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f6a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3730      	adds	r7, #48	; 0x30
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	e000ed04 	.word	0xe000ed04

08007f78 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f84:	2300      	movs	r3, #0
 8007f86:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f8c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d10d      	bne.n	8007fb2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d14d      	bne.n	800803a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f001 f812 	bl	8008fcc <xTaskPriorityDisinherit>
 8007fa8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	609a      	str	r2, [r3, #8]
 8007fb0:	e043      	b.n	800803a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d119      	bne.n	8007fec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6858      	ldr	r0, [r3, #4]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	68b9      	ldr	r1, [r7, #8]
 8007fc4:	f004 fc84 	bl	800c8d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	685a      	ldr	r2, [r3, #4]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd0:	441a      	add	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	685a      	ldr	r2, [r3, #4]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d32b      	bcc.n	800803a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	605a      	str	r2, [r3, #4]
 8007fea:	e026      	b.n	800803a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	68d8      	ldr	r0, [r3, #12]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	68b9      	ldr	r1, [r7, #8]
 8007ff8:	f004 fc6a 	bl	800c8d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	68da      	ldr	r2, [r3, #12]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008004:	425b      	negs	r3, r3
 8008006:	441a      	add	r2, r3
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	68da      	ldr	r2, [r3, #12]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	429a      	cmp	r2, r3
 8008016:	d207      	bcs.n	8008028 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	689a      	ldr	r2, [r3, #8]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008020:	425b      	negs	r3, r3
 8008022:	441a      	add	r2, r3
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2b02      	cmp	r3, #2
 800802c:	d105      	bne.n	800803a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d002      	beq.n	800803a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	3b01      	subs	r3, #1
 8008038:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	1c5a      	adds	r2, r3, #1
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008042:	697b      	ldr	r3, [r7, #20]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3718      	adds	r7, #24
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800805a:	2b00      	cmp	r3, #0
 800805c:	d018      	beq.n	8008090 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	68da      	ldr	r2, [r3, #12]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008066:	441a      	add	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	68da      	ldr	r2, [r3, #12]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	429a      	cmp	r2, r3
 8008076:	d303      	bcc.n	8008080 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	68d9      	ldr	r1, [r3, #12]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008088:	461a      	mov	r2, r3
 800808a:	6838      	ldr	r0, [r7, #0]
 800808c:	f004 fc20 	bl	800c8d0 <memcpy>
	}
}
 8008090:	bf00      	nop
 8008092:	3708      	adds	r7, #8
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80080a0:	f001 fe04 	bl	8009cac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080ac:	e01f      	b.n	80080ee <prvUnlockQueue+0x56>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d009      	beq.n	80080ca <prvUnlockQueue+0x32>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
 80080b6:	2100      	movs	r1, #0
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f91a 	bl	80082f2 <prvNotifyQueueSetContainer>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d010      	beq.n	80080e6 <prvUnlockQueue+0x4e>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 80080c4:	f000 fe86 	bl	8008dd4 <vTaskMissedYield>
 80080c8:	e00d      	b.n	80080e6 <prvUnlockQueue+0x4e>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d012      	beq.n	80080f8 <prvUnlockQueue+0x60>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	3324      	adds	r3, #36	; 0x24
 80080d6:	4618      	mov	r0, r3
 80080d8:	f000 fda4 	bl	8008c24 <xTaskRemoveFromEventList>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d001      	beq.n	80080e6 <prvUnlockQueue+0x4e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 80080e2:	f000 fe77 	bl	8008dd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80080e6:	7bfb      	ldrb	r3, [r7, #15]
 80080e8:	3b01      	subs	r3, #1
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	dcdb      	bgt.n	80080ae <prvUnlockQueue+0x16>
 80080f6:	e000      	b.n	80080fa <prvUnlockQueue+0x62>
						break;
 80080f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	22ff      	movs	r2, #255	; 0xff
 80080fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008102:	f001 fe01 	bl	8009d08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008106:	f001 fdd1 	bl	8009cac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008110:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008112:	e011      	b.n	8008138 <prvUnlockQueue+0xa0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	691b      	ldr	r3, [r3, #16]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d012      	beq.n	8008142 <prvUnlockQueue+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	3310      	adds	r3, #16
 8008120:	4618      	mov	r0, r3
 8008122:	f000 fd7f 	bl	8008c24 <xTaskRemoveFromEventList>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d001      	beq.n	8008130 <prvUnlockQueue+0x98>
				{
					vTaskMissedYield();
 800812c:	f000 fe52 	bl	8008dd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008130:	7bbb      	ldrb	r3, [r7, #14]
 8008132:	3b01      	subs	r3, #1
 8008134:	b2db      	uxtb	r3, r3
 8008136:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008138:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800813c:	2b00      	cmp	r3, #0
 800813e:	dce9      	bgt.n	8008114 <prvUnlockQueue+0x7c>
 8008140:	e000      	b.n	8008144 <prvUnlockQueue+0xac>
			}
			else
			{
				break;
 8008142:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	22ff      	movs	r2, #255	; 0xff
 8008148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800814c:	f001 fddc 	bl	8009d08 <vPortExitCritical>
}
 8008150:	bf00      	nop
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008160:	f001 fda4 	bl	8009cac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008168:	2b00      	cmp	r3, #0
 800816a:	d102      	bne.n	8008172 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800816c:	2301      	movs	r3, #1
 800816e:	60fb      	str	r3, [r7, #12]
 8008170:	e001      	b.n	8008176 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008172:	2300      	movs	r3, #0
 8008174:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008176:	f001 fdc7 	bl	8009d08 <vPortExitCritical>

	return xReturn;
 800817a:	68fb      	ldr	r3, [r7, #12]
}
 800817c:	4618      	mov	r0, r3
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800818c:	f001 fd8e 	bl	8009cac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008198:	429a      	cmp	r2, r3
 800819a:	d102      	bne.n	80081a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800819c:	2301      	movs	r3, #1
 800819e:	60fb      	str	r3, [r7, #12]
 80081a0:	e001      	b.n	80081a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80081a2:	2300      	movs	r3, #0
 80081a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80081a6:	f001 fdaf 	bl	8009d08 <vPortExitCritical>

	return xReturn;
 80081aa:	68fb      	ldr	r3, [r7, #12]
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80081b4:	b480      	push	{r7}
 80081b6:	b085      	sub	sp, #20
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081be:	2300      	movs	r3, #0
 80081c0:	60fb      	str	r3, [r7, #12]
 80081c2:	e014      	b.n	80081ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80081c4:	4a0e      	ldr	r2, [pc, #56]	; (8008200 <vQueueAddToRegistry+0x4c>)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d10b      	bne.n	80081e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80081d0:	490b      	ldr	r1, [pc, #44]	; (8008200 <vQueueAddToRegistry+0x4c>)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	683a      	ldr	r2, [r7, #0]
 80081d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80081da:	4a09      	ldr	r2, [pc, #36]	; (8008200 <vQueueAddToRegistry+0x4c>)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	00db      	lsls	r3, r3, #3
 80081e0:	4413      	add	r3, r2
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80081e6:	e005      	b.n	80081f4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	3301      	adds	r3, #1
 80081ec:	60fb      	str	r3, [r7, #12]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2b07      	cmp	r3, #7
 80081f2:	d9e7      	bls.n	80081c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80081f4:	bf00      	nop
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr
 8008200:	20015890 	.word	0x20015890

08008204 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008214:	f001 fd4a 	bl	8009cac <vPortEnterCritical>
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800821e:	b25b      	sxtb	r3, r3
 8008220:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008224:	d103      	bne.n	800822e <vQueueWaitForMessageRestricted+0x2a>
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	2200      	movs	r2, #0
 800822a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008234:	b25b      	sxtb	r3, r3
 8008236:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800823a:	d103      	bne.n	8008244 <vQueueWaitForMessageRestricted+0x40>
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008244:	f001 fd60 	bl	8009d08 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824c:	2b00      	cmp	r3, #0
 800824e:	d106      	bne.n	800825e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	3324      	adds	r3, #36	; 0x24
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	68b9      	ldr	r1, [r7, #8]
 8008258:	4618      	mov	r0, r3
 800825a:	f000 fcb9 	bl	8008bd0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800825e:	6978      	ldr	r0, [r7, #20]
 8008260:	f7ff ff1a 	bl	8008098 <prvUnlockQueue>
	}
 8008264:	bf00      	nop
 8008266:	3718      	adds	r7, #24
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <xQueueCreateSet>:
/*-----------------------------------------------------------*/

#if( ( configUSE_QUEUE_SETS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )
	{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
	QueueSetHandle_t pxQueue;

		pxQueue = xQueueGenericCreate( uxEventQueueLength, ( UBaseType_t ) sizeof( Queue_t * ), queueQUEUE_TYPE_SET );
 8008274:	2200      	movs	r2, #0
 8008276:	2104      	movs	r1, #4
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f7ff fb82 	bl	8007982 <xQueueGenericCreate>
 800827e:	60f8      	str	r0, [r7, #12]

		return pxQueue;
 8008280:	68fb      	ldr	r3, [r7, #12]
	}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <xQueueAddToSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet )
	{
 800828a:	b580      	push	{r7, lr}
 800828c:	b084      	sub	sp, #16
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8008294:	f001 fd0a 	bl	8009cac <vPortEnterCritical>
		{
			if( ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer != NULL )
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800829c:	2b00      	cmp	r3, #0
 800829e:	d002      	beq.n	80082a6 <xQueueAddToSet+0x1c>
			{
				/* Cannot add a queue/semaphore to more than one queue set. */
				xReturn = pdFAIL;
 80082a0:	2300      	movs	r3, #0
 80082a2:	60fb      	str	r3, [r7, #12]
 80082a4:	e00b      	b.n	80082be <xQueueAddToSet+0x34>
			}
			else if( ( ( Queue_t * ) xQueueOrSemaphore )->uxMessagesWaiting != ( UBaseType_t ) 0 )
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d002      	beq.n	80082b4 <xQueueAddToSet+0x2a>
			{
				/* Cannot add a queue/semaphore to a queue set if there are already
				items in the queue/semaphore. */
				xReturn = pdFAIL;
 80082ae:	2300      	movs	r3, #0
 80082b0:	60fb      	str	r3, [r7, #12]
 80082b2:	e004      	b.n	80082be <xQueueAddToSet+0x34>
			}
			else
			{
				( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer = xQueueSet;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	649a      	str	r2, [r3, #72]	; 0x48
				xReturn = pdPASS;
 80082ba:	2301      	movs	r3, #1
 80082bc:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 80082be:	f001 fd23 	bl	8009d08 <vPortExitCritical>

		return xReturn;
 80082c2:	68fb      	ldr	r3, [r7, #12]
	}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3710      	adds	r7, #16
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <xQueueSelectFromSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet, TickType_t const xTicksToWait )
	{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
	QueueSetMemberHandle_t xReturn = NULL;
 80082d6:	2300      	movs	r3, #0
 80082d8:	60fb      	str	r3, [r7, #12]

		( void ) xQueueReceive( ( QueueHandle_t ) xQueueSet, &xReturn, xTicksToWait ); /*lint !e961 Casting from one typedef to another is not redundant. */
 80082da:	f107 030c 	add.w	r3, r7, #12
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	4619      	mov	r1, r3
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f7ff fd6c 	bl	8007dc0 <xQueueReceive>
		return xReturn;
 80082e8:	68fb      	ldr	r3, [r7, #12]
	}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b088      	sub	sp, #32
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
 80082fa:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008300:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 8008302:	2300      	movs	r3, #0
 8008304:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d109      	bne.n	8008320 <prvNotifyQueueSetContainer+0x2e>
 800830c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008310:	f383 8811 	msr	BASEPRI, r3
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	613b      	str	r3, [r7, #16]
 800831e:	e7fe      	b.n	800831e <prvNotifyQueueSetContainer+0x2c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008328:	429a      	cmp	r2, r3
 800832a:	d309      	bcc.n	8008340 <prvNotifyQueueSetContainer+0x4e>
 800832c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008330:	f383 8811 	msr	BASEPRI, r3
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	60fb      	str	r3, [r7, #12]
 800833e:	e7fe      	b.n	800833e <prvNotifyQueueSetContainer+0x4c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008348:	429a      	cmp	r2, r3
 800834a:	d225      	bcs.n	8008398 <prvNotifyQueueSetContainer+0xa6>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008352:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 8008354:	1d3b      	adds	r3, r7, #4
 8008356:	683a      	ldr	r2, [r7, #0]
 8008358:	4619      	mov	r1, r3
 800835a:	69b8      	ldr	r0, [r7, #24]
 800835c:	f7ff fe0c 	bl	8007f78 <prvCopyDataToQueue>
 8008360:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 8008362:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008366:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800836a:	d10e      	bne.n	800838a <prvNotifyQueueSetContainer+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008370:	2b00      	cmp	r3, #0
 8008372:	d011      	beq.n	8008398 <prvNotifyQueueSetContainer+0xa6>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	3324      	adds	r3, #36	; 0x24
 8008378:	4618      	mov	r0, r3
 800837a:	f000 fc53 	bl	8008c24 <xTaskRemoveFromEventList>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d009      	beq.n	8008398 <prvNotifyQueueSetContainer+0xa6>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 8008384:	2301      	movs	r3, #1
 8008386:	61fb      	str	r3, [r7, #28]
 8008388:	e006      	b.n	8008398 <prvNotifyQueueSetContainer+0xa6>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800838a:	7dfb      	ldrb	r3, [r7, #23]
 800838c:	3301      	adds	r3, #1
 800838e:	b2db      	uxtb	r3, r3
 8008390:	b25a      	sxtb	r2, r3
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008398:	69fb      	ldr	r3, [r7, #28]
	}
 800839a:	4618      	mov	r0, r3
 800839c:	3720      	adds	r7, #32
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b08e      	sub	sp, #56	; 0x38
 80083a6:	af04      	add	r7, sp, #16
 80083a8:	60f8      	str	r0, [r7, #12]
 80083aa:	60b9      	str	r1, [r7, #8]
 80083ac:	607a      	str	r2, [r7, #4]
 80083ae:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80083b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d109      	bne.n	80083ca <xTaskCreateStatic+0x28>
 80083b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ba:	f383 8811 	msr	BASEPRI, r3
 80083be:	f3bf 8f6f 	isb	sy
 80083c2:	f3bf 8f4f 	dsb	sy
 80083c6:	623b      	str	r3, [r7, #32]
 80083c8:	e7fe      	b.n	80083c8 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80083ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d109      	bne.n	80083e4 <xTaskCreateStatic+0x42>
 80083d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	61fb      	str	r3, [r7, #28]
 80083e2:	e7fe      	b.n	80083e2 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80083e4:	2354      	movs	r3, #84	; 0x54
 80083e6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	2b54      	cmp	r3, #84	; 0x54
 80083ec:	d009      	beq.n	8008402 <xTaskCreateStatic+0x60>
 80083ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f2:	f383 8811 	msr	BASEPRI, r3
 80083f6:	f3bf 8f6f 	isb	sy
 80083fa:	f3bf 8f4f 	dsb	sy
 80083fe:	61bb      	str	r3, [r7, #24]
 8008400:	e7fe      	b.n	8008400 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008402:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008406:	2b00      	cmp	r3, #0
 8008408:	d01e      	beq.n	8008448 <xTaskCreateStatic+0xa6>
 800840a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800840c:	2b00      	cmp	r3, #0
 800840e:	d01b      	beq.n	8008448 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008412:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008416:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008418:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841c:	2202      	movs	r2, #2
 800841e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008422:	2300      	movs	r3, #0
 8008424:	9303      	str	r3, [sp, #12]
 8008426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008428:	9302      	str	r3, [sp, #8]
 800842a:	f107 0314 	add.w	r3, r7, #20
 800842e:	9301      	str	r3, [sp, #4]
 8008430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	68b9      	ldr	r1, [r7, #8]
 800843a:	68f8      	ldr	r0, [r7, #12]
 800843c:	f000 f850 	bl	80084e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008440:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008442:	f000 f8d3 	bl	80085ec <prvAddNewTaskToReadyList>
 8008446:	e001      	b.n	800844c <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8008448:	2300      	movs	r3, #0
 800844a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800844c:	697b      	ldr	r3, [r7, #20]
	}
 800844e:	4618      	mov	r0, r3
 8008450:	3728      	adds	r7, #40	; 0x28
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008456:	b580      	push	{r7, lr}
 8008458:	b08c      	sub	sp, #48	; 0x30
 800845a:	af04      	add	r7, sp, #16
 800845c:	60f8      	str	r0, [r7, #12]
 800845e:	60b9      	str	r1, [r7, #8]
 8008460:	603b      	str	r3, [r7, #0]
 8008462:	4613      	mov	r3, r2
 8008464:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008466:	88fb      	ldrh	r3, [r7, #6]
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4618      	mov	r0, r3
 800846c:	f001 fd38 	bl	8009ee0 <pvPortMalloc>
 8008470:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d00e      	beq.n	8008496 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008478:	2054      	movs	r0, #84	; 0x54
 800847a:	f001 fd31 	bl	8009ee0 <pvPortMalloc>
 800847e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d003      	beq.n	800848e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	631a      	str	r2, [r3, #48]	; 0x30
 800848c:	e005      	b.n	800849a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800848e:	6978      	ldr	r0, [r7, #20]
 8008490:	f001 fde8 	bl	800a064 <vPortFree>
 8008494:	e001      	b.n	800849a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008496:	2300      	movs	r3, #0
 8008498:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d017      	beq.n	80084d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80084a8:	88fa      	ldrh	r2, [r7, #6]
 80084aa:	2300      	movs	r3, #0
 80084ac:	9303      	str	r3, [sp, #12]
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	9302      	str	r3, [sp, #8]
 80084b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b4:	9301      	str	r3, [sp, #4]
 80084b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b8:	9300      	str	r3, [sp, #0]
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	68b9      	ldr	r1, [r7, #8]
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	f000 f80e 	bl	80084e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084c4:	69f8      	ldr	r0, [r7, #28]
 80084c6:	f000 f891 	bl	80085ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80084ca:	2301      	movs	r3, #1
 80084cc:	61bb      	str	r3, [r7, #24]
 80084ce:	e002      	b.n	80084d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80084d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80084d6:	69bb      	ldr	r3, [r7, #24]
	}
 80084d8:	4618      	mov	r0, r3
 80084da:	3720      	adds	r7, #32
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b088      	sub	sp, #32
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
 80084ec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80084ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80084f8:	3b01      	subs	r3, #1
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	f023 0307 	bic.w	r3, r3, #7
 8008506:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008508:	69bb      	ldr	r3, [r7, #24]
 800850a:	f003 0307 	and.w	r3, r3, #7
 800850e:	2b00      	cmp	r3, #0
 8008510:	d009      	beq.n	8008526 <prvInitialiseNewTask+0x46>
 8008512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	617b      	str	r3, [r7, #20]
 8008524:	e7fe      	b.n	8008524 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d01f      	beq.n	800856c <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800852c:	2300      	movs	r3, #0
 800852e:	61fb      	str	r3, [r7, #28]
 8008530:	e012      	b.n	8008558 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	4413      	add	r3, r2
 8008538:	7819      	ldrb	r1, [r3, #0]
 800853a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	4413      	add	r3, r2
 8008540:	3334      	adds	r3, #52	; 0x34
 8008542:	460a      	mov	r2, r1
 8008544:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008546:	68ba      	ldr	r2, [r7, #8]
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	4413      	add	r3, r2
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d006      	beq.n	8008560 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	3301      	adds	r3, #1
 8008556:	61fb      	str	r3, [r7, #28]
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	2b0f      	cmp	r3, #15
 800855c:	d9e9      	bls.n	8008532 <prvInitialiseNewTask+0x52>
 800855e:	e000      	b.n	8008562 <prvInitialiseNewTask+0x82>
			{
				break;
 8008560:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008564:	2200      	movs	r2, #0
 8008566:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800856a:	e003      	b.n	8008574 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800856c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856e:	2200      	movs	r2, #0
 8008570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008576:	2b06      	cmp	r3, #6
 8008578:	d901      	bls.n	800857e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800857a:	2306      	movs	r3, #6
 800857c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800857e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008582:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008588:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800858a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858c:	2200      	movs	r2, #0
 800858e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008592:	3304      	adds	r3, #4
 8008594:	4618      	mov	r0, r3
 8008596:	f7ff f884 	bl	80076a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800859a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859c:	3318      	adds	r3, #24
 800859e:	4618      	mov	r0, r3
 80085a0:	f7ff f87f 	bl	80076a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80085a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085a8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ac:	f1c3 0207 	rsb	r2, r3, #7
 80085b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80085b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085b8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80085ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085bc:	2200      	movs	r2, #0
 80085be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80085c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80085c8:	683a      	ldr	r2, [r7, #0]
 80085ca:	68f9      	ldr	r1, [r7, #12]
 80085cc:	69b8      	ldr	r0, [r7, #24]
 80085ce:	f001 fa47 	bl	8009a60 <pxPortInitialiseStack>
 80085d2:	4602      	mov	r2, r0
 80085d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80085d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d002      	beq.n	80085e4 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80085de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085e4:	bf00      	nop
 80085e6:	3720      	adds	r7, #32
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80085f4:	f001 fb5a 	bl	8009cac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80085f8:	4b2a      	ldr	r3, [pc, #168]	; (80086a4 <prvAddNewTaskToReadyList+0xb8>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	3301      	adds	r3, #1
 80085fe:	4a29      	ldr	r2, [pc, #164]	; (80086a4 <prvAddNewTaskToReadyList+0xb8>)
 8008600:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008602:	4b29      	ldr	r3, [pc, #164]	; (80086a8 <prvAddNewTaskToReadyList+0xbc>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d109      	bne.n	800861e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800860a:	4a27      	ldr	r2, [pc, #156]	; (80086a8 <prvAddNewTaskToReadyList+0xbc>)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008610:	4b24      	ldr	r3, [pc, #144]	; (80086a4 <prvAddNewTaskToReadyList+0xb8>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2b01      	cmp	r3, #1
 8008616:	d110      	bne.n	800863a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008618:	f000 fc00 	bl	8008e1c <prvInitialiseTaskLists>
 800861c:	e00d      	b.n	800863a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800861e:	4b23      	ldr	r3, [pc, #140]	; (80086ac <prvAddNewTaskToReadyList+0xc0>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d109      	bne.n	800863a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008626:	4b20      	ldr	r3, [pc, #128]	; (80086a8 <prvAddNewTaskToReadyList+0xbc>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008630:	429a      	cmp	r2, r3
 8008632:	d802      	bhi.n	800863a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008634:	4a1c      	ldr	r2, [pc, #112]	; (80086a8 <prvAddNewTaskToReadyList+0xbc>)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800863a:	4b1d      	ldr	r3, [pc, #116]	; (80086b0 <prvAddNewTaskToReadyList+0xc4>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	3301      	adds	r3, #1
 8008640:	4a1b      	ldr	r2, [pc, #108]	; (80086b0 <prvAddNewTaskToReadyList+0xc4>)
 8008642:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008648:	2201      	movs	r2, #1
 800864a:	409a      	lsls	r2, r3
 800864c:	4b19      	ldr	r3, [pc, #100]	; (80086b4 <prvAddNewTaskToReadyList+0xc8>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4313      	orrs	r3, r2
 8008652:	4a18      	ldr	r2, [pc, #96]	; (80086b4 <prvAddNewTaskToReadyList+0xc8>)
 8008654:	6013      	str	r3, [r2, #0]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800865a:	4613      	mov	r3, r2
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4413      	add	r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	4a15      	ldr	r2, [pc, #84]	; (80086b8 <prvAddNewTaskToReadyList+0xcc>)
 8008664:	441a      	add	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	3304      	adds	r3, #4
 800866a:	4619      	mov	r1, r3
 800866c:	4610      	mov	r0, r2
 800866e:	f7ff f825 	bl	80076bc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008672:	f001 fb49 	bl	8009d08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008676:	4b0d      	ldr	r3, [pc, #52]	; (80086ac <prvAddNewTaskToReadyList+0xc0>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00e      	beq.n	800869c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800867e:	4b0a      	ldr	r3, [pc, #40]	; (80086a8 <prvAddNewTaskToReadyList+0xbc>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008688:	429a      	cmp	r2, r3
 800868a:	d207      	bcs.n	800869c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800868c:	4b0b      	ldr	r3, [pc, #44]	; (80086bc <prvAddNewTaskToReadyList+0xd0>)
 800868e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008692:	601a      	str	r2, [r3, #0]
 8008694:	f3bf 8f4f 	dsb	sy
 8008698:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800869c:	bf00      	nop
 800869e:	3708      	adds	r7, #8
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	20001044 	.word	0x20001044
 80086a8:	20000f44 	.word	0x20000f44
 80086ac:	20001050 	.word	0x20001050
 80086b0:	20001060 	.word	0x20001060
 80086b4:	2000104c 	.word	0x2000104c
 80086b8:	20000f48 	.word	0x20000f48
 80086bc:	e000ed04 	.word	0xe000ed04

080086c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80086c8:	2300      	movs	r3, #0
 80086ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d016      	beq.n	8008700 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80086d2:	4b13      	ldr	r3, [pc, #76]	; (8008720 <vTaskDelay+0x60>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d009      	beq.n	80086ee <vTaskDelay+0x2e>
 80086da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086de:	f383 8811 	msr	BASEPRI, r3
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	60bb      	str	r3, [r7, #8]
 80086ec:	e7fe      	b.n	80086ec <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80086ee:	f000 f87f 	bl	80087f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80086f2:	2100      	movs	r1, #0
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 fdc3 	bl	8009280 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80086fa:	f000 f887 	bl	800880c <xTaskResumeAll>
 80086fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d107      	bne.n	8008716 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008706:	4b07      	ldr	r3, [pc, #28]	; (8008724 <vTaskDelay+0x64>)
 8008708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800870c:	601a      	str	r2, [r3, #0]
 800870e:	f3bf 8f4f 	dsb	sy
 8008712:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008716:	bf00      	nop
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	2000106c 	.word	0x2000106c
 8008724:	e000ed04 	.word	0xe000ed04

08008728 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b08a      	sub	sp, #40	; 0x28
 800872c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800872e:	2300      	movs	r3, #0
 8008730:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008732:	2300      	movs	r3, #0
 8008734:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008736:	463a      	mov	r2, r7
 8008738:	1d39      	adds	r1, r7, #4
 800873a:	f107 0308 	add.w	r3, r7, #8
 800873e:	4618      	mov	r0, r3
 8008740:	f7f9 f86c 	bl	800181c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008744:	6839      	ldr	r1, [r7, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	9202      	str	r2, [sp, #8]
 800874c:	9301      	str	r3, [sp, #4]
 800874e:	2300      	movs	r3, #0
 8008750:	9300      	str	r3, [sp, #0]
 8008752:	2300      	movs	r3, #0
 8008754:	460a      	mov	r2, r1
 8008756:	4920      	ldr	r1, [pc, #128]	; (80087d8 <vTaskStartScheduler+0xb0>)
 8008758:	4820      	ldr	r0, [pc, #128]	; (80087dc <vTaskStartScheduler+0xb4>)
 800875a:	f7ff fe22 	bl	80083a2 <xTaskCreateStatic>
 800875e:	4602      	mov	r2, r0
 8008760:	4b1f      	ldr	r3, [pc, #124]	; (80087e0 <vTaskStartScheduler+0xb8>)
 8008762:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008764:	4b1e      	ldr	r3, [pc, #120]	; (80087e0 <vTaskStartScheduler+0xb8>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d002      	beq.n	8008772 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800876c:	2301      	movs	r3, #1
 800876e:	617b      	str	r3, [r7, #20]
 8008770:	e001      	b.n	8008776 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008772:	2300      	movs	r3, #0
 8008774:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d102      	bne.n	8008782 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800877c:	f000 fde6 	bl	800934c <xTimerCreateTimerTask>
 8008780:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d115      	bne.n	80087b4 <vTaskStartScheduler+0x8c>
 8008788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878c:	f383 8811 	msr	BASEPRI, r3
 8008790:	f3bf 8f6f 	isb	sy
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800879a:	4b12      	ldr	r3, [pc, #72]	; (80087e4 <vTaskStartScheduler+0xbc>)
 800879c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80087a2:	4b11      	ldr	r3, [pc, #68]	; (80087e8 <vTaskStartScheduler+0xc0>)
 80087a4:	2201      	movs	r2, #1
 80087a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80087a8:	4b10      	ldr	r3, [pc, #64]	; (80087ec <vTaskStartScheduler+0xc4>)
 80087aa:	2200      	movs	r2, #0
 80087ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80087ae:	f001 f9df 	bl	8009b70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80087b2:	e00d      	b.n	80087d0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087ba:	d109      	bne.n	80087d0 <vTaskStartScheduler+0xa8>
 80087bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c0:	f383 8811 	msr	BASEPRI, r3
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	60fb      	str	r3, [r7, #12]
 80087ce:	e7fe      	b.n	80087ce <vTaskStartScheduler+0xa6>
}
 80087d0:	bf00      	nop
 80087d2:	3718      	adds	r7, #24
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	0800d688 	.word	0x0800d688
 80087dc:	08008ded 	.word	0x08008ded
 80087e0:	20001068 	.word	0x20001068
 80087e4:	20001064 	.word	0x20001064
 80087e8:	20001050 	.word	0x20001050
 80087ec:	20001048 	.word	0x20001048

080087f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80087f0:	b480      	push	{r7}
 80087f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80087f4:	4b04      	ldr	r3, [pc, #16]	; (8008808 <vTaskSuspendAll+0x18>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	3301      	adds	r3, #1
 80087fa:	4a03      	ldr	r2, [pc, #12]	; (8008808 <vTaskSuspendAll+0x18>)
 80087fc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80087fe:	bf00      	nop
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr
 8008808:	2000106c 	.word	0x2000106c

0800880c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008812:	2300      	movs	r3, #0
 8008814:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008816:	2300      	movs	r3, #0
 8008818:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800881a:	4b41      	ldr	r3, [pc, #260]	; (8008920 <xTaskResumeAll+0x114>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d109      	bne.n	8008836 <xTaskResumeAll+0x2a>
 8008822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008826:	f383 8811 	msr	BASEPRI, r3
 800882a:	f3bf 8f6f 	isb	sy
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	603b      	str	r3, [r7, #0]
 8008834:	e7fe      	b.n	8008834 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008836:	f001 fa39 	bl	8009cac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800883a:	4b39      	ldr	r3, [pc, #228]	; (8008920 <xTaskResumeAll+0x114>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	3b01      	subs	r3, #1
 8008840:	4a37      	ldr	r2, [pc, #220]	; (8008920 <xTaskResumeAll+0x114>)
 8008842:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008844:	4b36      	ldr	r3, [pc, #216]	; (8008920 <xTaskResumeAll+0x114>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d161      	bne.n	8008910 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800884c:	4b35      	ldr	r3, [pc, #212]	; (8008924 <xTaskResumeAll+0x118>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d05d      	beq.n	8008910 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008854:	e02e      	b.n	80088b4 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008856:	4b34      	ldr	r3, [pc, #208]	; (8008928 <xTaskResumeAll+0x11c>)
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3318      	adds	r3, #24
 8008862:	4618      	mov	r0, r3
 8008864:	f7fe ff87 	bl	8007776 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	3304      	adds	r3, #4
 800886c:	4618      	mov	r0, r3
 800886e:	f7fe ff82 	bl	8007776 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008876:	2201      	movs	r2, #1
 8008878:	409a      	lsls	r2, r3
 800887a:	4b2c      	ldr	r3, [pc, #176]	; (800892c <xTaskResumeAll+0x120>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4313      	orrs	r3, r2
 8008880:	4a2a      	ldr	r2, [pc, #168]	; (800892c <xTaskResumeAll+0x120>)
 8008882:	6013      	str	r3, [r2, #0]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008888:	4613      	mov	r3, r2
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	4413      	add	r3, r2
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	4a27      	ldr	r2, [pc, #156]	; (8008930 <xTaskResumeAll+0x124>)
 8008892:	441a      	add	r2, r3
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	3304      	adds	r3, #4
 8008898:	4619      	mov	r1, r3
 800889a:	4610      	mov	r0, r2
 800889c:	f7fe ff0e 	bl	80076bc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088a4:	4b23      	ldr	r3, [pc, #140]	; (8008934 <xTaskResumeAll+0x128>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d302      	bcc.n	80088b4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80088ae:	4b22      	ldr	r3, [pc, #136]	; (8008938 <xTaskResumeAll+0x12c>)
 80088b0:	2201      	movs	r2, #1
 80088b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088b4:	4b1c      	ldr	r3, [pc, #112]	; (8008928 <xTaskResumeAll+0x11c>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1cc      	bne.n	8008856 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d001      	beq.n	80088c6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80088c2:	f000 fb45 	bl	8008f50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80088c6:	4b1d      	ldr	r3, [pc, #116]	; (800893c <xTaskResumeAll+0x130>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d010      	beq.n	80088f4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80088d2:	f000 f847 	bl	8008964 <xTaskIncrementTick>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d002      	beq.n	80088e2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80088dc:	4b16      	ldr	r3, [pc, #88]	; (8008938 <xTaskResumeAll+0x12c>)
 80088de:	2201      	movs	r2, #1
 80088e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	3b01      	subs	r3, #1
 80088e6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1f1      	bne.n	80088d2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80088ee:	4b13      	ldr	r3, [pc, #76]	; (800893c <xTaskResumeAll+0x130>)
 80088f0:	2200      	movs	r2, #0
 80088f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80088f4:	4b10      	ldr	r3, [pc, #64]	; (8008938 <xTaskResumeAll+0x12c>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d009      	beq.n	8008910 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80088fc:	2301      	movs	r3, #1
 80088fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008900:	4b0f      	ldr	r3, [pc, #60]	; (8008940 <xTaskResumeAll+0x134>)
 8008902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008906:	601a      	str	r2, [r3, #0]
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008910:	f001 f9fa 	bl	8009d08 <vPortExitCritical>

	return xAlreadyYielded;
 8008914:	68bb      	ldr	r3, [r7, #8]
}
 8008916:	4618      	mov	r0, r3
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	2000106c 	.word	0x2000106c
 8008924:	20001044 	.word	0x20001044
 8008928:	20001004 	.word	0x20001004
 800892c:	2000104c 	.word	0x2000104c
 8008930:	20000f48 	.word	0x20000f48
 8008934:	20000f44 	.word	0x20000f44
 8008938:	20001058 	.word	0x20001058
 800893c:	20001054 	.word	0x20001054
 8008940:	e000ed04 	.word	0xe000ed04

08008944 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800894a:	4b05      	ldr	r3, [pc, #20]	; (8008960 <xTaskGetTickCount+0x1c>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008950:	687b      	ldr	r3, [r7, #4]
}
 8008952:	4618      	mov	r0, r3
 8008954:	370c      	adds	r7, #12
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	20001048 	.word	0x20001048

08008964 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b086      	sub	sp, #24
 8008968:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800896a:	2300      	movs	r3, #0
 800896c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800896e:	4b4e      	ldr	r3, [pc, #312]	; (8008aa8 <xTaskIncrementTick+0x144>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	f040 8087 	bne.w	8008a86 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008978:	4b4c      	ldr	r3, [pc, #304]	; (8008aac <xTaskIncrementTick+0x148>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	3301      	adds	r3, #1
 800897e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008980:	4a4a      	ldr	r2, [pc, #296]	; (8008aac <xTaskIncrementTick+0x148>)
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d11f      	bne.n	80089cc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800898c:	4b48      	ldr	r3, [pc, #288]	; (8008ab0 <xTaskIncrementTick+0x14c>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d009      	beq.n	80089aa <xTaskIncrementTick+0x46>
 8008996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899a:	f383 8811 	msr	BASEPRI, r3
 800899e:	f3bf 8f6f 	isb	sy
 80089a2:	f3bf 8f4f 	dsb	sy
 80089a6:	603b      	str	r3, [r7, #0]
 80089a8:	e7fe      	b.n	80089a8 <xTaskIncrementTick+0x44>
 80089aa:	4b41      	ldr	r3, [pc, #260]	; (8008ab0 <xTaskIncrementTick+0x14c>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	60fb      	str	r3, [r7, #12]
 80089b0:	4b40      	ldr	r3, [pc, #256]	; (8008ab4 <xTaskIncrementTick+0x150>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a3e      	ldr	r2, [pc, #248]	; (8008ab0 <xTaskIncrementTick+0x14c>)
 80089b6:	6013      	str	r3, [r2, #0]
 80089b8:	4a3e      	ldr	r2, [pc, #248]	; (8008ab4 <xTaskIncrementTick+0x150>)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	6013      	str	r3, [r2, #0]
 80089be:	4b3e      	ldr	r3, [pc, #248]	; (8008ab8 <xTaskIncrementTick+0x154>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	3301      	adds	r3, #1
 80089c4:	4a3c      	ldr	r2, [pc, #240]	; (8008ab8 <xTaskIncrementTick+0x154>)
 80089c6:	6013      	str	r3, [r2, #0]
 80089c8:	f000 fac2 	bl	8008f50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80089cc:	4b3b      	ldr	r3, [pc, #236]	; (8008abc <xTaskIncrementTick+0x158>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	693a      	ldr	r2, [r7, #16]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d348      	bcc.n	8008a68 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089d6:	4b36      	ldr	r3, [pc, #216]	; (8008ab0 <xTaskIncrementTick+0x14c>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d104      	bne.n	80089ea <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089e0:	4b36      	ldr	r3, [pc, #216]	; (8008abc <xTaskIncrementTick+0x158>)
 80089e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089e6:	601a      	str	r2, [r3, #0]
					break;
 80089e8:	e03e      	b.n	8008a68 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089ea:	4b31      	ldr	r3, [pc, #196]	; (8008ab0 <xTaskIncrementTick+0x14c>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80089fa:	693a      	ldr	r2, [r7, #16]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d203      	bcs.n	8008a0a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008a02:	4a2e      	ldr	r2, [pc, #184]	; (8008abc <xTaskIncrementTick+0x158>)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008a08:	e02e      	b.n	8008a68 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	3304      	adds	r3, #4
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f7fe feb1 	bl	8007776 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d004      	beq.n	8008a26 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	3318      	adds	r3, #24
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7fe fea8 	bl	8007776 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	409a      	lsls	r2, r3
 8008a2e:	4b24      	ldr	r3, [pc, #144]	; (8008ac0 <xTaskIncrementTick+0x15c>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	4a22      	ldr	r2, [pc, #136]	; (8008ac0 <xTaskIncrementTick+0x15c>)
 8008a36:	6013      	str	r3, [r2, #0]
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	4413      	add	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4a1f      	ldr	r2, [pc, #124]	; (8008ac4 <xTaskIncrementTick+0x160>)
 8008a46:	441a      	add	r2, r3
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	3304      	adds	r3, #4
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	4610      	mov	r0, r2
 8008a50:	f7fe fe34 	bl	80076bc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a58:	4b1b      	ldr	r3, [pc, #108]	; (8008ac8 <xTaskIncrementTick+0x164>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d3b9      	bcc.n	80089d6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008a62:	2301      	movs	r3, #1
 8008a64:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a66:	e7b6      	b.n	80089d6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008a68:	4b17      	ldr	r3, [pc, #92]	; (8008ac8 <xTaskIncrementTick+0x164>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a6e:	4915      	ldr	r1, [pc, #84]	; (8008ac4 <xTaskIncrementTick+0x160>)
 8008a70:	4613      	mov	r3, r2
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	4413      	add	r3, r2
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	440b      	add	r3, r1
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d907      	bls.n	8008a90 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8008a80:	2301      	movs	r3, #1
 8008a82:	617b      	str	r3, [r7, #20]
 8008a84:	e004      	b.n	8008a90 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008a86:	4b11      	ldr	r3, [pc, #68]	; (8008acc <xTaskIncrementTick+0x168>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	4a0f      	ldr	r2, [pc, #60]	; (8008acc <xTaskIncrementTick+0x168>)
 8008a8e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008a90:	4b0f      	ldr	r3, [pc, #60]	; (8008ad0 <xTaskIncrementTick+0x16c>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d001      	beq.n	8008a9c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008a9c:	697b      	ldr	r3, [r7, #20]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3718      	adds	r7, #24
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	2000106c 	.word	0x2000106c
 8008aac:	20001048 	.word	0x20001048
 8008ab0:	20000ffc 	.word	0x20000ffc
 8008ab4:	20001000 	.word	0x20001000
 8008ab8:	2000105c 	.word	0x2000105c
 8008abc:	20001064 	.word	0x20001064
 8008ac0:	2000104c 	.word	0x2000104c
 8008ac4:	20000f48 	.word	0x20000f48
 8008ac8:	20000f44 	.word	0x20000f44
 8008acc:	20001054 	.word	0x20001054
 8008ad0:	20001058 	.word	0x20001058

08008ad4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b087      	sub	sp, #28
 8008ad8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008ada:	4b26      	ldr	r3, [pc, #152]	; (8008b74 <vTaskSwitchContext+0xa0>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d003      	beq.n	8008aea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008ae2:	4b25      	ldr	r3, [pc, #148]	; (8008b78 <vTaskSwitchContext+0xa4>)
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008ae8:	e03e      	b.n	8008b68 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8008aea:	4b23      	ldr	r3, [pc, #140]	; (8008b78 <vTaskSwitchContext+0xa4>)
 8008aec:	2200      	movs	r2, #0
 8008aee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008af0:	4b22      	ldr	r3, [pc, #136]	; (8008b7c <vTaskSwitchContext+0xa8>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	fab3 f383 	clz	r3, r3
 8008afc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008afe:	7afb      	ldrb	r3, [r7, #11]
 8008b00:	f1c3 031f 	rsb	r3, r3, #31
 8008b04:	617b      	str	r3, [r7, #20]
 8008b06:	491e      	ldr	r1, [pc, #120]	; (8008b80 <vTaskSwitchContext+0xac>)
 8008b08:	697a      	ldr	r2, [r7, #20]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	4413      	add	r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	440b      	add	r3, r1
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d109      	bne.n	8008b2e <vTaskSwitchContext+0x5a>
	__asm volatile
 8008b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1e:	f383 8811 	msr	BASEPRI, r3
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	f3bf 8f4f 	dsb	sy
 8008b2a:	607b      	str	r3, [r7, #4]
 8008b2c:	e7fe      	b.n	8008b2c <vTaskSwitchContext+0x58>
 8008b2e:	697a      	ldr	r2, [r7, #20]
 8008b30:	4613      	mov	r3, r2
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	4413      	add	r3, r2
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4a11      	ldr	r2, [pc, #68]	; (8008b80 <vTaskSwitchContext+0xac>)
 8008b3a:	4413      	add	r3, r2
 8008b3c:	613b      	str	r3, [r7, #16]
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	685a      	ldr	r2, [r3, #4]
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	605a      	str	r2, [r3, #4]
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	685a      	ldr	r2, [r3, #4]
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	3308      	adds	r3, #8
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d104      	bne.n	8008b5e <vTaskSwitchContext+0x8a>
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	685a      	ldr	r2, [r3, #4]
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	605a      	str	r2, [r3, #4]
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	4a07      	ldr	r2, [pc, #28]	; (8008b84 <vTaskSwitchContext+0xb0>)
 8008b66:	6013      	str	r3, [r2, #0]
}
 8008b68:	bf00      	nop
 8008b6a:	371c      	adds	r7, #28
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr
 8008b74:	2000106c 	.word	0x2000106c
 8008b78:	20001058 	.word	0x20001058
 8008b7c:	2000104c 	.word	0x2000104c
 8008b80:	20000f48 	.word	0x20000f48
 8008b84:	20000f44 	.word	0x20000f44

08008b88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d109      	bne.n	8008bac <vTaskPlaceOnEventList+0x24>
 8008b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9c:	f383 8811 	msr	BASEPRI, r3
 8008ba0:	f3bf 8f6f 	isb	sy
 8008ba4:	f3bf 8f4f 	dsb	sy
 8008ba8:	60fb      	str	r3, [r7, #12]
 8008baa:	e7fe      	b.n	8008baa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008bac:	4b07      	ldr	r3, [pc, #28]	; (8008bcc <vTaskPlaceOnEventList+0x44>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	3318      	adds	r3, #24
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f7fe fda5 	bl	8007704 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008bba:	2101      	movs	r1, #1
 8008bbc:	6838      	ldr	r0, [r7, #0]
 8008bbe:	f000 fb5f 	bl	8009280 <prvAddCurrentTaskToDelayedList>
}
 8008bc2:	bf00      	nop
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	20000f44 	.word	0x20000f44

08008bd0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b086      	sub	sp, #24
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d109      	bne.n	8008bf6 <vTaskPlaceOnEventListRestricted+0x26>
 8008be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be6:	f383 8811 	msr	BASEPRI, r3
 8008bea:	f3bf 8f6f 	isb	sy
 8008bee:	f3bf 8f4f 	dsb	sy
 8008bf2:	617b      	str	r3, [r7, #20]
 8008bf4:	e7fe      	b.n	8008bf4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008bf6:	4b0a      	ldr	r3, [pc, #40]	; (8008c20 <vTaskPlaceOnEventListRestricted+0x50>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	3318      	adds	r3, #24
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f7fe fd5c 	bl	80076bc <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d002      	beq.n	8008c10 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8008c0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c0e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008c10:	6879      	ldr	r1, [r7, #4]
 8008c12:	68b8      	ldr	r0, [r7, #8]
 8008c14:	f000 fb34 	bl	8009280 <prvAddCurrentTaskToDelayedList>
	}
 8008c18:	bf00      	nop
 8008c1a:	3718      	adds	r7, #24
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	20000f44 	.word	0x20000f44

08008c24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b086      	sub	sp, #24
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d109      	bne.n	8008c4e <xTaskRemoveFromEventList+0x2a>
 8008c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3e:	f383 8811 	msr	BASEPRI, r3
 8008c42:	f3bf 8f6f 	isb	sy
 8008c46:	f3bf 8f4f 	dsb	sy
 8008c4a:	60fb      	str	r3, [r7, #12]
 8008c4c:	e7fe      	b.n	8008c4c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	3318      	adds	r3, #24
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7fe fd8f 	bl	8007776 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c58:	4b1d      	ldr	r3, [pc, #116]	; (8008cd0 <xTaskRemoveFromEventList+0xac>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d11c      	bne.n	8008c9a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	3304      	adds	r3, #4
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7fe fd86 	bl	8007776 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6e:	2201      	movs	r2, #1
 8008c70:	409a      	lsls	r2, r3
 8008c72:	4b18      	ldr	r3, [pc, #96]	; (8008cd4 <xTaskRemoveFromEventList+0xb0>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	4a16      	ldr	r2, [pc, #88]	; (8008cd4 <xTaskRemoveFromEventList+0xb0>)
 8008c7a:	6013      	str	r3, [r2, #0]
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c80:	4613      	mov	r3, r2
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	4413      	add	r3, r2
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	4a13      	ldr	r2, [pc, #76]	; (8008cd8 <xTaskRemoveFromEventList+0xb4>)
 8008c8a:	441a      	add	r2, r3
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	3304      	adds	r3, #4
 8008c90:	4619      	mov	r1, r3
 8008c92:	4610      	mov	r0, r2
 8008c94:	f7fe fd12 	bl	80076bc <vListInsertEnd>
 8008c98:	e005      	b.n	8008ca6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	3318      	adds	r3, #24
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	480e      	ldr	r0, [pc, #56]	; (8008cdc <xTaskRemoveFromEventList+0xb8>)
 8008ca2:	f7fe fd0b 	bl	80076bc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008caa:	4b0d      	ldr	r3, [pc, #52]	; (8008ce0 <xTaskRemoveFromEventList+0xbc>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d905      	bls.n	8008cc0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008cb8:	4b0a      	ldr	r3, [pc, #40]	; (8008ce4 <xTaskRemoveFromEventList+0xc0>)
 8008cba:	2201      	movs	r2, #1
 8008cbc:	601a      	str	r2, [r3, #0]
 8008cbe:	e001      	b.n	8008cc4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008cc4:	697b      	ldr	r3, [r7, #20]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3718      	adds	r7, #24
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	2000106c 	.word	0x2000106c
 8008cd4:	2000104c 	.word	0x2000104c
 8008cd8:	20000f48 	.word	0x20000f48
 8008cdc:	20001004 	.word	0x20001004
 8008ce0:	20000f44 	.word	0x20000f44
 8008ce4:	20001058 	.word	0x20001058

08008ce8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008cf0:	4b06      	ldr	r3, [pc, #24]	; (8008d0c <vTaskInternalSetTimeOutState+0x24>)
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008cf8:	4b05      	ldr	r3, [pc, #20]	; (8008d10 <vTaskInternalSetTimeOutState+0x28>)
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	605a      	str	r2, [r3, #4]
}
 8008d00:	bf00      	nop
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	2000105c 	.word	0x2000105c
 8008d10:	20001048 	.word	0x20001048

08008d14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b088      	sub	sp, #32
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d109      	bne.n	8008d38 <xTaskCheckForTimeOut+0x24>
 8008d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d28:	f383 8811 	msr	BASEPRI, r3
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	f3bf 8f4f 	dsb	sy
 8008d34:	613b      	str	r3, [r7, #16]
 8008d36:	e7fe      	b.n	8008d36 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d109      	bne.n	8008d52 <xTaskCheckForTimeOut+0x3e>
 8008d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d42:	f383 8811 	msr	BASEPRI, r3
 8008d46:	f3bf 8f6f 	isb	sy
 8008d4a:	f3bf 8f4f 	dsb	sy
 8008d4e:	60fb      	str	r3, [r7, #12]
 8008d50:	e7fe      	b.n	8008d50 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008d52:	f000 ffab 	bl	8009cac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008d56:	4b1d      	ldr	r3, [pc, #116]	; (8008dcc <xTaskCheckForTimeOut+0xb8>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	69ba      	ldr	r2, [r7, #24]
 8008d62:	1ad3      	subs	r3, r2, r3
 8008d64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d6e:	d102      	bne.n	8008d76 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008d70:	2300      	movs	r3, #0
 8008d72:	61fb      	str	r3, [r7, #28]
 8008d74:	e023      	b.n	8008dbe <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	4b15      	ldr	r3, [pc, #84]	; (8008dd0 <xTaskCheckForTimeOut+0xbc>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d007      	beq.n	8008d92 <xTaskCheckForTimeOut+0x7e>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	69ba      	ldr	r2, [r7, #24]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d302      	bcc.n	8008d92 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	61fb      	str	r3, [r7, #28]
 8008d90:	e015      	b.n	8008dbe <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	697a      	ldr	r2, [r7, #20]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d20b      	bcs.n	8008db4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	1ad2      	subs	r2, r2, r3
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f7ff ff9d 	bl	8008ce8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008dae:	2300      	movs	r3, #0
 8008db0:	61fb      	str	r3, [r7, #28]
 8008db2:	e004      	b.n	8008dbe <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	2200      	movs	r2, #0
 8008db8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008dbe:	f000 ffa3 	bl	8009d08 <vPortExitCritical>

	return xReturn;
 8008dc2:	69fb      	ldr	r3, [r7, #28]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3720      	adds	r7, #32
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	20001048 	.word	0x20001048
 8008dd0:	2000105c 	.word	0x2000105c

08008dd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008dd8:	4b03      	ldr	r3, [pc, #12]	; (8008de8 <vTaskMissedYield+0x14>)
 8008dda:	2201      	movs	r2, #1
 8008ddc:	601a      	str	r2, [r3, #0]
}
 8008dde:	bf00      	nop
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr
 8008de8:	20001058 	.word	0x20001058

08008dec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008df4:	f000 f852 	bl	8008e9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008df8:	4b06      	ldr	r3, [pc, #24]	; (8008e14 <prvIdleTask+0x28>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d9f9      	bls.n	8008df4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008e00:	4b05      	ldr	r3, [pc, #20]	; (8008e18 <prvIdleTask+0x2c>)
 8008e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e06:	601a      	str	r2, [r3, #0]
 8008e08:	f3bf 8f4f 	dsb	sy
 8008e0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008e10:	e7f0      	b.n	8008df4 <prvIdleTask+0x8>
 8008e12:	bf00      	nop
 8008e14:	20000f48 	.word	0x20000f48
 8008e18:	e000ed04 	.word	0xe000ed04

08008e1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e22:	2300      	movs	r3, #0
 8008e24:	607b      	str	r3, [r7, #4]
 8008e26:	e00c      	b.n	8008e42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	4413      	add	r3, r2
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	4a12      	ldr	r2, [pc, #72]	; (8008e7c <prvInitialiseTaskLists+0x60>)
 8008e34:	4413      	add	r3, r2
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fe fc13 	bl	8007662 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	3301      	adds	r3, #1
 8008e40:	607b      	str	r3, [r7, #4]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2b06      	cmp	r3, #6
 8008e46:	d9ef      	bls.n	8008e28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e48:	480d      	ldr	r0, [pc, #52]	; (8008e80 <prvInitialiseTaskLists+0x64>)
 8008e4a:	f7fe fc0a 	bl	8007662 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e4e:	480d      	ldr	r0, [pc, #52]	; (8008e84 <prvInitialiseTaskLists+0x68>)
 8008e50:	f7fe fc07 	bl	8007662 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e54:	480c      	ldr	r0, [pc, #48]	; (8008e88 <prvInitialiseTaskLists+0x6c>)
 8008e56:	f7fe fc04 	bl	8007662 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e5a:	480c      	ldr	r0, [pc, #48]	; (8008e8c <prvInitialiseTaskLists+0x70>)
 8008e5c:	f7fe fc01 	bl	8007662 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e60:	480b      	ldr	r0, [pc, #44]	; (8008e90 <prvInitialiseTaskLists+0x74>)
 8008e62:	f7fe fbfe 	bl	8007662 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e66:	4b0b      	ldr	r3, [pc, #44]	; (8008e94 <prvInitialiseTaskLists+0x78>)
 8008e68:	4a05      	ldr	r2, [pc, #20]	; (8008e80 <prvInitialiseTaskLists+0x64>)
 8008e6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e6c:	4b0a      	ldr	r3, [pc, #40]	; (8008e98 <prvInitialiseTaskLists+0x7c>)
 8008e6e:	4a05      	ldr	r2, [pc, #20]	; (8008e84 <prvInitialiseTaskLists+0x68>)
 8008e70:	601a      	str	r2, [r3, #0]
}
 8008e72:	bf00      	nop
 8008e74:	3708      	adds	r7, #8
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	20000f48 	.word	0x20000f48
 8008e80:	20000fd4 	.word	0x20000fd4
 8008e84:	20000fe8 	.word	0x20000fe8
 8008e88:	20001004 	.word	0x20001004
 8008e8c:	20001018 	.word	0x20001018
 8008e90:	20001030 	.word	0x20001030
 8008e94:	20000ffc 	.word	0x20000ffc
 8008e98:	20001000 	.word	0x20001000

08008e9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ea2:	e019      	b.n	8008ed8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ea4:	f000 ff02 	bl	8009cac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ea8:	4b0f      	ldr	r3, [pc, #60]	; (8008ee8 <prvCheckTasksWaitingTermination+0x4c>)
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	3304      	adds	r3, #4
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fe fc5e 	bl	8007776 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008eba:	4b0c      	ldr	r3, [pc, #48]	; (8008eec <prvCheckTasksWaitingTermination+0x50>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	4a0a      	ldr	r2, [pc, #40]	; (8008eec <prvCheckTasksWaitingTermination+0x50>)
 8008ec2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008ec4:	4b0a      	ldr	r3, [pc, #40]	; (8008ef0 <prvCheckTasksWaitingTermination+0x54>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	3b01      	subs	r3, #1
 8008eca:	4a09      	ldr	r2, [pc, #36]	; (8008ef0 <prvCheckTasksWaitingTermination+0x54>)
 8008ecc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ece:	f000 ff1b 	bl	8009d08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 f80e 	bl	8008ef4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ed8:	4b05      	ldr	r3, [pc, #20]	; (8008ef0 <prvCheckTasksWaitingTermination+0x54>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d1e1      	bne.n	8008ea4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ee0:	bf00      	nop
 8008ee2:	3708      	adds	r7, #8
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	20001018 	.word	0x20001018
 8008eec:	20001044 	.word	0x20001044
 8008ef0:	2000102c 	.word	0x2000102c

08008ef4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d108      	bne.n	8008f18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f001 f8aa 	bl	800a064 <vPortFree>
				vPortFree( pxTCB );
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f001 f8a7 	bl	800a064 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f16:	e017      	b.n	8008f48 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d103      	bne.n	8008f2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f001 f89e 	bl	800a064 <vPortFree>
	}
 8008f28:	e00e      	b.n	8008f48 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	d009      	beq.n	8008f48 <prvDeleteTCB+0x54>
 8008f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f38:	f383 8811 	msr	BASEPRI, r3
 8008f3c:	f3bf 8f6f 	isb	sy
 8008f40:	f3bf 8f4f 	dsb	sy
 8008f44:	60fb      	str	r3, [r7, #12]
 8008f46:	e7fe      	b.n	8008f46 <prvDeleteTCB+0x52>
	}
 8008f48:	bf00      	nop
 8008f4a:	3710      	adds	r7, #16
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f56:	4b0c      	ldr	r3, [pc, #48]	; (8008f88 <prvResetNextTaskUnblockTime+0x38>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d104      	bne.n	8008f6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f60:	4b0a      	ldr	r3, [pc, #40]	; (8008f8c <prvResetNextTaskUnblockTime+0x3c>)
 8008f62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008f68:	e008      	b.n	8008f7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f6a:	4b07      	ldr	r3, [pc, #28]	; (8008f88 <prvResetNextTaskUnblockTime+0x38>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	4a04      	ldr	r2, [pc, #16]	; (8008f8c <prvResetNextTaskUnblockTime+0x3c>)
 8008f7a:	6013      	str	r3, [r2, #0]
}
 8008f7c:	bf00      	nop
 8008f7e:	370c      	adds	r7, #12
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr
 8008f88:	20000ffc 	.word	0x20000ffc
 8008f8c:	20001064 	.word	0x20001064

08008f90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008f96:	4b0b      	ldr	r3, [pc, #44]	; (8008fc4 <xTaskGetSchedulerState+0x34>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d102      	bne.n	8008fa4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	607b      	str	r3, [r7, #4]
 8008fa2:	e008      	b.n	8008fb6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fa4:	4b08      	ldr	r3, [pc, #32]	; (8008fc8 <xTaskGetSchedulerState+0x38>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d102      	bne.n	8008fb2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008fac:	2302      	movs	r3, #2
 8008fae:	607b      	str	r3, [r7, #4]
 8008fb0:	e001      	b.n	8008fb6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008fb6:	687b      	ldr	r3, [r7, #4]
	}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr
 8008fc4:	20001050 	.word	0x20001050
 8008fc8:	2000106c 	.word	0x2000106c

08008fcc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b086      	sub	sp, #24
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d06c      	beq.n	80090bc <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008fe2:	4b39      	ldr	r3, [pc, #228]	; (80090c8 <xTaskPriorityDisinherit+0xfc>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	693a      	ldr	r2, [r7, #16]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d009      	beq.n	8009000 <xTaskPriorityDisinherit+0x34>
 8008fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff0:	f383 8811 	msr	BASEPRI, r3
 8008ff4:	f3bf 8f6f 	isb	sy
 8008ff8:	f3bf 8f4f 	dsb	sy
 8008ffc:	60fb      	str	r3, [r7, #12]
 8008ffe:	e7fe      	b.n	8008ffe <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009004:	2b00      	cmp	r3, #0
 8009006:	d109      	bne.n	800901c <xTaskPriorityDisinherit+0x50>
 8009008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900c:	f383 8811 	msr	BASEPRI, r3
 8009010:	f3bf 8f6f 	isb	sy
 8009014:	f3bf 8f4f 	dsb	sy
 8009018:	60bb      	str	r3, [r7, #8]
 800901a:	e7fe      	b.n	800901a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009020:	1e5a      	subs	r2, r3, #1
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800902e:	429a      	cmp	r2, r3
 8009030:	d044      	beq.n	80090bc <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009036:	2b00      	cmp	r3, #0
 8009038:	d140      	bne.n	80090bc <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	3304      	adds	r3, #4
 800903e:	4618      	mov	r0, r3
 8009040:	f7fe fb99 	bl	8007776 <uxListRemove>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d115      	bne.n	8009076 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800904e:	491f      	ldr	r1, [pc, #124]	; (80090cc <xTaskPriorityDisinherit+0x100>)
 8009050:	4613      	mov	r3, r2
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	4413      	add	r3, r2
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	440b      	add	r3, r1
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d10a      	bne.n	8009076 <xTaskPriorityDisinherit+0xaa>
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009064:	2201      	movs	r2, #1
 8009066:	fa02 f303 	lsl.w	r3, r2, r3
 800906a:	43da      	mvns	r2, r3
 800906c:	4b18      	ldr	r3, [pc, #96]	; (80090d0 <xTaskPriorityDisinherit+0x104>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4013      	ands	r3, r2
 8009072:	4a17      	ldr	r2, [pc, #92]	; (80090d0 <xTaskPriorityDisinherit+0x104>)
 8009074:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009082:	f1c3 0207 	rsb	r2, r3, #7
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800908e:	2201      	movs	r2, #1
 8009090:	409a      	lsls	r2, r3
 8009092:	4b0f      	ldr	r3, [pc, #60]	; (80090d0 <xTaskPriorityDisinherit+0x104>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4313      	orrs	r3, r2
 8009098:	4a0d      	ldr	r2, [pc, #52]	; (80090d0 <xTaskPriorityDisinherit+0x104>)
 800909a:	6013      	str	r3, [r2, #0]
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a0:	4613      	mov	r3, r2
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	4413      	add	r3, r2
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	4a08      	ldr	r2, [pc, #32]	; (80090cc <xTaskPriorityDisinherit+0x100>)
 80090aa:	441a      	add	r2, r3
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	3304      	adds	r3, #4
 80090b0:	4619      	mov	r1, r3
 80090b2:	4610      	mov	r0, r2
 80090b4:	f7fe fb02 	bl	80076bc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80090b8:	2301      	movs	r3, #1
 80090ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80090bc:	697b      	ldr	r3, [r7, #20]
	}
 80090be:	4618      	mov	r0, r3
 80090c0:	3718      	adds	r7, #24
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	20000f44 	.word	0x20000f44
 80090cc:	20000f48 	.word	0x20000f48
 80090d0:	2000104c 	.word	0x2000104c

080090d4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80090de:	f000 fde5 	bl	8009cac <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80090e2:	4b1e      	ldr	r3, [pc, #120]	; (800915c <ulTaskNotifyTake+0x88>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d113      	bne.n	8009114 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80090ec:	4b1b      	ldr	r3, [pc, #108]	; (800915c <ulTaskNotifyTake+0x88>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2201      	movs	r2, #1
 80090f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d00b      	beq.n	8009114 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80090fc:	2101      	movs	r1, #1
 80090fe:	6838      	ldr	r0, [r7, #0]
 8009100:	f000 f8be 	bl	8009280 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009104:	4b16      	ldr	r3, [pc, #88]	; (8009160 <ulTaskNotifyTake+0x8c>)
 8009106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800910a:	601a      	str	r2, [r3, #0]
 800910c:	f3bf 8f4f 	dsb	sy
 8009110:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009114:	f000 fdf8 	bl	8009d08 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009118:	f000 fdc8 	bl	8009cac <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800911c:	4b0f      	ldr	r3, [pc, #60]	; (800915c <ulTaskNotifyTake+0x88>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009122:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00c      	beq.n	8009144 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d004      	beq.n	800913a <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8009130:	4b0a      	ldr	r3, [pc, #40]	; (800915c <ulTaskNotifyTake+0x88>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2200      	movs	r2, #0
 8009136:	64da      	str	r2, [r3, #76]	; 0x4c
 8009138:	e004      	b.n	8009144 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800913a:	4b08      	ldr	r3, [pc, #32]	; (800915c <ulTaskNotifyTake+0x88>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	68fa      	ldr	r2, [r7, #12]
 8009140:	3a01      	subs	r2, #1
 8009142:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009144:	4b05      	ldr	r3, [pc, #20]	; (800915c <ulTaskNotifyTake+0x88>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 800914e:	f000 fddb 	bl	8009d08 <vPortExitCritical>

		return ulReturn;
 8009152:	68fb      	ldr	r3, [r7, #12]
	}
 8009154:	4618      	mov	r0, r3
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}
 800915c:	20000f44 	.word	0x20000f44
 8009160:	e000ed04 	.word	0xe000ed04

08009164 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009164:	b580      	push	{r7, lr}
 8009166:	b08a      	sub	sp, #40	; 0x28
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d109      	bne.n	8009188 <vTaskNotifyGiveFromISR+0x24>
 8009174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009178:	f383 8811 	msr	BASEPRI, r3
 800917c:	f3bf 8f6f 	isb	sy
 8009180:	f3bf 8f4f 	dsb	sy
 8009184:	61bb      	str	r3, [r7, #24]
 8009186:	e7fe      	b.n	8009186 <vTaskNotifyGiveFromISR+0x22>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009188:	f000 fe6c 	bl	8009e64 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 8009190:	f3ef 8211 	mrs	r2, BASEPRI
 8009194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009198:	f383 8811 	msr	BASEPRI, r3
 800919c:	f3bf 8f6f 	isb	sy
 80091a0:	f3bf 8f4f 	dsb	sy
 80091a4:	617a      	str	r2, [r7, #20]
 80091a6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80091a8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80091aa:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80091ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80091b2:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80091b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b6:	2202      	movs	r2, #2
 80091b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80091bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091c0:	1c5a      	adds	r2, r3, #1
 80091c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c4:	64da      	str	r2, [r3, #76]	; 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80091c6:	7ffb      	ldrb	r3, [r7, #31]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d144      	bne.n	8009256 <vTaskNotifyGiveFromISR+0xf2>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80091cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d009      	beq.n	80091e8 <vTaskNotifyGiveFromISR+0x84>
	__asm volatile
 80091d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d8:	f383 8811 	msr	BASEPRI, r3
 80091dc:	f3bf 8f6f 	isb	sy
 80091e0:	f3bf 8f4f 	dsb	sy
 80091e4:	60fb      	str	r3, [r7, #12]
 80091e6:	e7fe      	b.n	80091e6 <vTaskNotifyGiveFromISR+0x82>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091e8:	4b1f      	ldr	r3, [pc, #124]	; (8009268 <vTaskNotifyGiveFromISR+0x104>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d11c      	bne.n	800922a <vTaskNotifyGiveFromISR+0xc6>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f2:	3304      	adds	r3, #4
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7fe fabe 	bl	8007776 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80091fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fe:	2201      	movs	r2, #1
 8009200:	409a      	lsls	r2, r3
 8009202:	4b1a      	ldr	r3, [pc, #104]	; (800926c <vTaskNotifyGiveFromISR+0x108>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4313      	orrs	r3, r2
 8009208:	4a18      	ldr	r2, [pc, #96]	; (800926c <vTaskNotifyGiveFromISR+0x108>)
 800920a:	6013      	str	r3, [r2, #0]
 800920c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009210:	4613      	mov	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4413      	add	r3, r2
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	4a15      	ldr	r2, [pc, #84]	; (8009270 <vTaskNotifyGiveFromISR+0x10c>)
 800921a:	441a      	add	r2, r3
 800921c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921e:	3304      	adds	r3, #4
 8009220:	4619      	mov	r1, r3
 8009222:	4610      	mov	r0, r2
 8009224:	f7fe fa4a 	bl	80076bc <vListInsertEnd>
 8009228:	e005      	b.n	8009236 <vTaskNotifyGiveFromISR+0xd2>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800922a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922c:	3318      	adds	r3, #24
 800922e:	4619      	mov	r1, r3
 8009230:	4810      	ldr	r0, [pc, #64]	; (8009274 <vTaskNotifyGiveFromISR+0x110>)
 8009232:	f7fe fa43 	bl	80076bc <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800923a:	4b0f      	ldr	r3, [pc, #60]	; (8009278 <vTaskNotifyGiveFromISR+0x114>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009240:	429a      	cmp	r2, r3
 8009242:	d908      	bls.n	8009256 <vTaskNotifyGiveFromISR+0xf2>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d002      	beq.n	8009250 <vTaskNotifyGiveFromISR+0xec>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	2201      	movs	r2, #1
 800924e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8009250:	4b0a      	ldr	r3, [pc, #40]	; (800927c <vTaskNotifyGiveFromISR+0x118>)
 8009252:	2201      	movs	r2, #1
 8009254:	601a      	str	r2, [r3, #0]
 8009256:	6a3b      	ldr	r3, [r7, #32]
 8009258:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8009260:	bf00      	nop
 8009262:	3728      	adds	r7, #40	; 0x28
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	2000106c 	.word	0x2000106c
 800926c:	2000104c 	.word	0x2000104c
 8009270:	20000f48 	.word	0x20000f48
 8009274:	20001004 	.word	0x20001004
 8009278:	20000f44 	.word	0x20000f44
 800927c:	20001058 	.word	0x20001058

08009280 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800928a:	4b29      	ldr	r3, [pc, #164]	; (8009330 <prvAddCurrentTaskToDelayedList+0xb0>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009290:	4b28      	ldr	r3, [pc, #160]	; (8009334 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	3304      	adds	r3, #4
 8009296:	4618      	mov	r0, r3
 8009298:	f7fe fa6d 	bl	8007776 <uxListRemove>
 800929c:	4603      	mov	r3, r0
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d10b      	bne.n	80092ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80092a2:	4b24      	ldr	r3, [pc, #144]	; (8009334 <prvAddCurrentTaskToDelayedList+0xb4>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a8:	2201      	movs	r2, #1
 80092aa:	fa02 f303 	lsl.w	r3, r2, r3
 80092ae:	43da      	mvns	r2, r3
 80092b0:	4b21      	ldr	r3, [pc, #132]	; (8009338 <prvAddCurrentTaskToDelayedList+0xb8>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4013      	ands	r3, r2
 80092b6:	4a20      	ldr	r2, [pc, #128]	; (8009338 <prvAddCurrentTaskToDelayedList+0xb8>)
 80092b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092c0:	d10a      	bne.n	80092d8 <prvAddCurrentTaskToDelayedList+0x58>
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d007      	beq.n	80092d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092c8:	4b1a      	ldr	r3, [pc, #104]	; (8009334 <prvAddCurrentTaskToDelayedList+0xb4>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	3304      	adds	r3, #4
 80092ce:	4619      	mov	r1, r3
 80092d0:	481a      	ldr	r0, [pc, #104]	; (800933c <prvAddCurrentTaskToDelayedList+0xbc>)
 80092d2:	f7fe f9f3 	bl	80076bc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80092d6:	e026      	b.n	8009326 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	4413      	add	r3, r2
 80092de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80092e0:	4b14      	ldr	r3, [pc, #80]	; (8009334 <prvAddCurrentTaskToDelayedList+0xb4>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	68ba      	ldr	r2, [r7, #8]
 80092e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80092e8:	68ba      	ldr	r2, [r7, #8]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d209      	bcs.n	8009304 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092f0:	4b13      	ldr	r3, [pc, #76]	; (8009340 <prvAddCurrentTaskToDelayedList+0xc0>)
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	4b0f      	ldr	r3, [pc, #60]	; (8009334 <prvAddCurrentTaskToDelayedList+0xb4>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	3304      	adds	r3, #4
 80092fa:	4619      	mov	r1, r3
 80092fc:	4610      	mov	r0, r2
 80092fe:	f7fe fa01 	bl	8007704 <vListInsert>
}
 8009302:	e010      	b.n	8009326 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009304:	4b0f      	ldr	r3, [pc, #60]	; (8009344 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	4b0a      	ldr	r3, [pc, #40]	; (8009334 <prvAddCurrentTaskToDelayedList+0xb4>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	3304      	adds	r3, #4
 800930e:	4619      	mov	r1, r3
 8009310:	4610      	mov	r0, r2
 8009312:	f7fe f9f7 	bl	8007704 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009316:	4b0c      	ldr	r3, [pc, #48]	; (8009348 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	68ba      	ldr	r2, [r7, #8]
 800931c:	429a      	cmp	r2, r3
 800931e:	d202      	bcs.n	8009326 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009320:	4a09      	ldr	r2, [pc, #36]	; (8009348 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	6013      	str	r3, [r2, #0]
}
 8009326:	bf00      	nop
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	20001048 	.word	0x20001048
 8009334:	20000f44 	.word	0x20000f44
 8009338:	2000104c 	.word	0x2000104c
 800933c:	20001030 	.word	0x20001030
 8009340:	20001000 	.word	0x20001000
 8009344:	20000ffc 	.word	0x20000ffc
 8009348:	20001064 	.word	0x20001064

0800934c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b08a      	sub	sp, #40	; 0x28
 8009350:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009352:	2300      	movs	r3, #0
 8009354:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009356:	f000 fb43 	bl	80099e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800935a:	4b1c      	ldr	r3, [pc, #112]	; (80093cc <xTimerCreateTimerTask+0x80>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d021      	beq.n	80093a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009362:	2300      	movs	r3, #0
 8009364:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009366:	2300      	movs	r3, #0
 8009368:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800936a:	1d3a      	adds	r2, r7, #4
 800936c:	f107 0108 	add.w	r1, r7, #8
 8009370:	f107 030c 	add.w	r3, r7, #12
 8009374:	4618      	mov	r0, r3
 8009376:	f7f8 fa6b 	bl	8001850 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800937a:	6879      	ldr	r1, [r7, #4]
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	68fa      	ldr	r2, [r7, #12]
 8009380:	9202      	str	r2, [sp, #8]
 8009382:	9301      	str	r3, [sp, #4]
 8009384:	2302      	movs	r3, #2
 8009386:	9300      	str	r3, [sp, #0]
 8009388:	2300      	movs	r3, #0
 800938a:	460a      	mov	r2, r1
 800938c:	4910      	ldr	r1, [pc, #64]	; (80093d0 <xTimerCreateTimerTask+0x84>)
 800938e:	4811      	ldr	r0, [pc, #68]	; (80093d4 <xTimerCreateTimerTask+0x88>)
 8009390:	f7ff f807 	bl	80083a2 <xTaskCreateStatic>
 8009394:	4602      	mov	r2, r0
 8009396:	4b10      	ldr	r3, [pc, #64]	; (80093d8 <xTimerCreateTimerTask+0x8c>)
 8009398:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800939a:	4b0f      	ldr	r3, [pc, #60]	; (80093d8 <xTimerCreateTimerTask+0x8c>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d001      	beq.n	80093a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80093a2:	2301      	movs	r3, #1
 80093a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d109      	bne.n	80093c0 <xTimerCreateTimerTask+0x74>
	__asm volatile
 80093ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b0:	f383 8811 	msr	BASEPRI, r3
 80093b4:	f3bf 8f6f 	isb	sy
 80093b8:	f3bf 8f4f 	dsb	sy
 80093bc:	613b      	str	r3, [r7, #16]
 80093be:	e7fe      	b.n	80093be <xTimerCreateTimerTask+0x72>
	return xReturn;
 80093c0:	697b      	ldr	r3, [r7, #20]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3718      	adds	r7, #24
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	200010a0 	.word	0x200010a0
 80093d0:	0800d690 	.word	0x0800d690
 80093d4:	080095c5 	.word	0x080095c5
 80093d8:	200010a4 	.word	0x200010a4

080093dc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b088      	sub	sp, #32
 80093e0:	af02      	add	r7, sp, #8
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	607a      	str	r2, [r7, #4]
 80093e8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80093ea:	2028      	movs	r0, #40	; 0x28
 80093ec:	f000 fd78 	bl	8009ee0 <pvPortMalloc>
 80093f0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00d      	beq.n	8009414 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	2200      	movs	r2, #0
 80093fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	9301      	str	r3, [sp, #4]
 8009404:	6a3b      	ldr	r3, [r7, #32]
 8009406:	9300      	str	r3, [sp, #0]
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	68b9      	ldr	r1, [r7, #8]
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f000 f805 	bl	800941e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009414:	697b      	ldr	r3, [r7, #20]
	}
 8009416:	4618      	mov	r0, r3
 8009418:	3718      	adds	r7, #24
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800941e:	b580      	push	{r7, lr}
 8009420:	b086      	sub	sp, #24
 8009422:	af00      	add	r7, sp, #0
 8009424:	60f8      	str	r0, [r7, #12]
 8009426:	60b9      	str	r1, [r7, #8]
 8009428:	607a      	str	r2, [r7, #4]
 800942a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d109      	bne.n	8009446 <prvInitialiseNewTimer+0x28>
 8009432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009436:	f383 8811 	msr	BASEPRI, r3
 800943a:	f3bf 8f6f 	isb	sy
 800943e:	f3bf 8f4f 	dsb	sy
 8009442:	617b      	str	r3, [r7, #20]
 8009444:	e7fe      	b.n	8009444 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8009446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009448:	2b00      	cmp	r3, #0
 800944a:	d01e      	beq.n	800948a <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800944c:	f000 fac8 	bl	80099e0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009452:	68fa      	ldr	r2, [r7, #12]
 8009454:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009458:	68ba      	ldr	r2, [r7, #8]
 800945a:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945e:	683a      	ldr	r2, [r7, #0]
 8009460:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009464:	6a3a      	ldr	r2, [r7, #32]
 8009466:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946a:	3304      	adds	r3, #4
 800946c:	4618      	mov	r0, r3
 800946e:	f7fe f918 	bl	80076a2 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d008      	beq.n	800948a <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8009478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800947e:	f043 0304 	orr.w	r3, r3, #4
 8009482:	b2da      	uxtb	r2, r3
 8009484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009486:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800948a:	bf00      	nop
 800948c:	3718      	adds	r7, #24
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
	...

08009494 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b08a      	sub	sp, #40	; 0x28
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	607a      	str	r2, [r7, #4]
 80094a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80094a2:	2300      	movs	r3, #0
 80094a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d109      	bne.n	80094c0 <xTimerGenericCommand+0x2c>
 80094ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b0:	f383 8811 	msr	BASEPRI, r3
 80094b4:	f3bf 8f6f 	isb	sy
 80094b8:	f3bf 8f4f 	dsb	sy
 80094bc:	623b      	str	r3, [r7, #32]
 80094be:	e7fe      	b.n	80094be <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80094c0:	4b19      	ldr	r3, [pc, #100]	; (8009528 <xTimerGenericCommand+0x94>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d02a      	beq.n	800951e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	2b05      	cmp	r3, #5
 80094d8:	dc18      	bgt.n	800950c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80094da:	f7ff fd59 	bl	8008f90 <xTaskGetSchedulerState>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b02      	cmp	r3, #2
 80094e2:	d109      	bne.n	80094f8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80094e4:	4b10      	ldr	r3, [pc, #64]	; (8009528 <xTimerGenericCommand+0x94>)
 80094e6:	6818      	ldr	r0, [r3, #0]
 80094e8:	f107 0114 	add.w	r1, r7, #20
 80094ec:	2300      	movs	r3, #0
 80094ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094f0:	f7fe faa8 	bl	8007a44 <xQueueGenericSend>
 80094f4:	6278      	str	r0, [r7, #36]	; 0x24
 80094f6:	e012      	b.n	800951e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80094f8:	4b0b      	ldr	r3, [pc, #44]	; (8009528 <xTimerGenericCommand+0x94>)
 80094fa:	6818      	ldr	r0, [r3, #0]
 80094fc:	f107 0114 	add.w	r1, r7, #20
 8009500:	2300      	movs	r3, #0
 8009502:	2200      	movs	r2, #0
 8009504:	f7fe fa9e 	bl	8007a44 <xQueueGenericSend>
 8009508:	6278      	str	r0, [r7, #36]	; 0x24
 800950a:	e008      	b.n	800951e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800950c:	4b06      	ldr	r3, [pc, #24]	; (8009528 <xTimerGenericCommand+0x94>)
 800950e:	6818      	ldr	r0, [r3, #0]
 8009510:	f107 0114 	add.w	r1, r7, #20
 8009514:	2300      	movs	r3, #0
 8009516:	683a      	ldr	r2, [r7, #0]
 8009518:	f7fe fbac 	bl	8007c74 <xQueueGenericSendFromISR>
 800951c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800951e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009520:	4618      	mov	r0, r3
 8009522:	3728      	adds	r7, #40	; 0x28
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}
 8009528:	200010a0 	.word	0x200010a0

0800952c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b088      	sub	sp, #32
 8009530:	af02      	add	r7, sp, #8
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009536:	4b22      	ldr	r3, [pc, #136]	; (80095c0 <prvProcessExpiredTimer+0x94>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	3304      	adds	r3, #4
 8009544:	4618      	mov	r0, r3
 8009546:	f7fe f916 	bl	8007776 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009550:	f003 0304 	and.w	r3, r3, #4
 8009554:	2b00      	cmp	r3, #0
 8009556:	d021      	beq.n	800959c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	699a      	ldr	r2, [r3, #24]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	18d1      	adds	r1, r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	683a      	ldr	r2, [r7, #0]
 8009564:	6978      	ldr	r0, [r7, #20]
 8009566:	f000 f8d1 	bl	800970c <prvInsertTimerInActiveList>
 800956a:	4603      	mov	r3, r0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d01e      	beq.n	80095ae <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009570:	2300      	movs	r3, #0
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	2300      	movs	r3, #0
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	2100      	movs	r1, #0
 800957a:	6978      	ldr	r0, [r7, #20]
 800957c:	f7ff ff8a 	bl	8009494 <xTimerGenericCommand>
 8009580:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d112      	bne.n	80095ae <prvProcessExpiredTimer+0x82>
 8009588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958c:	f383 8811 	msr	BASEPRI, r3
 8009590:	f3bf 8f6f 	isb	sy
 8009594:	f3bf 8f4f 	dsb	sy
 8009598:	60fb      	str	r3, [r7, #12]
 800959a:	e7fe      	b.n	800959a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80095a2:	f023 0301 	bic.w	r3, r3, #1
 80095a6:	b2da      	uxtb	r2, r3
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	6a1b      	ldr	r3, [r3, #32]
 80095b2:	6978      	ldr	r0, [r7, #20]
 80095b4:	4798      	blx	r3
}
 80095b6:	bf00      	nop
 80095b8:	3718      	adds	r7, #24
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	20001098 	.word	0x20001098

080095c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80095cc:	f107 0308 	add.w	r3, r7, #8
 80095d0:	4618      	mov	r0, r3
 80095d2:	f000 f857 	bl	8009684 <prvGetNextExpireTime>
 80095d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	4619      	mov	r1, r3
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	f000 f803 	bl	80095e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80095e2:	f000 f8d5 	bl	8009790 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80095e6:	e7f1      	b.n	80095cc <prvTimerTask+0x8>

080095e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80095f2:	f7ff f8fd 	bl	80087f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80095f6:	f107 0308 	add.w	r3, r7, #8
 80095fa:	4618      	mov	r0, r3
 80095fc:	f000 f866 	bl	80096cc <prvSampleTimeNow>
 8009600:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d130      	bne.n	800966a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d10a      	bne.n	8009624 <prvProcessTimerOrBlockTask+0x3c>
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	429a      	cmp	r2, r3
 8009614:	d806      	bhi.n	8009624 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009616:	f7ff f8f9 	bl	800880c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800961a:	68f9      	ldr	r1, [r7, #12]
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f7ff ff85 	bl	800952c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009622:	e024      	b.n	800966e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d008      	beq.n	800963c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800962a:	4b13      	ldr	r3, [pc, #76]	; (8009678 <prvProcessTimerOrBlockTask+0x90>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d101      	bne.n	8009638 <prvProcessTimerOrBlockTask+0x50>
 8009634:	2301      	movs	r3, #1
 8009636:	e000      	b.n	800963a <prvProcessTimerOrBlockTask+0x52>
 8009638:	2300      	movs	r3, #0
 800963a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800963c:	4b0f      	ldr	r3, [pc, #60]	; (800967c <prvProcessTimerOrBlockTask+0x94>)
 800963e:	6818      	ldr	r0, [r3, #0]
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	1ad3      	subs	r3, r2, r3
 8009646:	683a      	ldr	r2, [r7, #0]
 8009648:	4619      	mov	r1, r3
 800964a:	f7fe fddb 	bl	8008204 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800964e:	f7ff f8dd 	bl	800880c <xTaskResumeAll>
 8009652:	4603      	mov	r3, r0
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10a      	bne.n	800966e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009658:	4b09      	ldr	r3, [pc, #36]	; (8009680 <prvProcessTimerOrBlockTask+0x98>)
 800965a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800965e:	601a      	str	r2, [r3, #0]
 8009660:	f3bf 8f4f 	dsb	sy
 8009664:	f3bf 8f6f 	isb	sy
}
 8009668:	e001      	b.n	800966e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800966a:	f7ff f8cf 	bl	800880c <xTaskResumeAll>
}
 800966e:	bf00      	nop
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	2000109c 	.word	0x2000109c
 800967c:	200010a0 	.word	0x200010a0
 8009680:	e000ed04 	.word	0xe000ed04

08009684 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800968c:	4b0e      	ldr	r3, [pc, #56]	; (80096c8 <prvGetNextExpireTime+0x44>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d101      	bne.n	800969a <prvGetNextExpireTime+0x16>
 8009696:	2201      	movs	r2, #1
 8009698:	e000      	b.n	800969c <prvGetNextExpireTime+0x18>
 800969a:	2200      	movs	r2, #0
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d105      	bne.n	80096b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096a8:	4b07      	ldr	r3, [pc, #28]	; (80096c8 <prvGetNextExpireTime+0x44>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	60fb      	str	r3, [r7, #12]
 80096b2:	e001      	b.n	80096b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80096b4:	2300      	movs	r3, #0
 80096b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80096b8:	68fb      	ldr	r3, [r7, #12]
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3714      	adds	r7, #20
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr
 80096c6:	bf00      	nop
 80096c8:	20001098 	.word	0x20001098

080096cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80096d4:	f7ff f936 	bl	8008944 <xTaskGetTickCount>
 80096d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80096da:	4b0b      	ldr	r3, [pc, #44]	; (8009708 <prvSampleTimeNow+0x3c>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	68fa      	ldr	r2, [r7, #12]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d205      	bcs.n	80096f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80096e4:	f000 f918 	bl	8009918 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2201      	movs	r2, #1
 80096ec:	601a      	str	r2, [r3, #0]
 80096ee:	e002      	b.n	80096f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2200      	movs	r2, #0
 80096f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80096f6:	4a04      	ldr	r2, [pc, #16]	; (8009708 <prvSampleTimeNow+0x3c>)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80096fc:	68fb      	ldr	r3, [r7, #12]
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3710      	adds	r7, #16
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	200010a8 	.word	0x200010a8

0800970c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b086      	sub	sp, #24
 8009710:	af00      	add	r7, sp, #0
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	607a      	str	r2, [r7, #4]
 8009718:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800971a:	2300      	movs	r3, #0
 800971c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	68ba      	ldr	r2, [r7, #8]
 8009722:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800972a:	68ba      	ldr	r2, [r7, #8]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	429a      	cmp	r2, r3
 8009730:	d812      	bhi.n	8009758 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	1ad2      	subs	r2, r2, r3
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	699b      	ldr	r3, [r3, #24]
 800973c:	429a      	cmp	r2, r3
 800973e:	d302      	bcc.n	8009746 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009740:	2301      	movs	r3, #1
 8009742:	617b      	str	r3, [r7, #20]
 8009744:	e01b      	b.n	800977e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009746:	4b10      	ldr	r3, [pc, #64]	; (8009788 <prvInsertTimerInActiveList+0x7c>)
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	3304      	adds	r3, #4
 800974e:	4619      	mov	r1, r3
 8009750:	4610      	mov	r0, r2
 8009752:	f7fd ffd7 	bl	8007704 <vListInsert>
 8009756:	e012      	b.n	800977e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	429a      	cmp	r2, r3
 800975e:	d206      	bcs.n	800976e <prvInsertTimerInActiveList+0x62>
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	429a      	cmp	r2, r3
 8009766:	d302      	bcc.n	800976e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009768:	2301      	movs	r3, #1
 800976a:	617b      	str	r3, [r7, #20]
 800976c:	e007      	b.n	800977e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800976e:	4b07      	ldr	r3, [pc, #28]	; (800978c <prvInsertTimerInActiveList+0x80>)
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	3304      	adds	r3, #4
 8009776:	4619      	mov	r1, r3
 8009778:	4610      	mov	r0, r2
 800977a:	f7fd ffc3 	bl	8007704 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800977e:	697b      	ldr	r3, [r7, #20]
}
 8009780:	4618      	mov	r0, r3
 8009782:	3718      	adds	r7, #24
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}
 8009788:	2000109c 	.word	0x2000109c
 800978c:	20001098 	.word	0x20001098

08009790 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b08c      	sub	sp, #48	; 0x30
 8009794:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009796:	e0ac      	b.n	80098f2 <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	2b00      	cmp	r3, #0
 800979c:	f2c0 80a8 	blt.w	80098f0 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80097a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a6:	695b      	ldr	r3, [r3, #20]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d004      	beq.n	80097b6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ae:	3304      	adds	r3, #4
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7fd ffe0 	bl	8007776 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80097b6:	1d3b      	adds	r3, r7, #4
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7ff ff87 	bl	80096cc <prvSampleTimeNow>
 80097be:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	2b09      	cmp	r3, #9
 80097c4:	f200 8095 	bhi.w	80098f2 <prvProcessReceivedCommands+0x162>
 80097c8:	a201      	add	r2, pc, #4	; (adr r2, 80097d0 <prvProcessReceivedCommands+0x40>)
 80097ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ce:	bf00      	nop
 80097d0:	080097f9 	.word	0x080097f9
 80097d4:	080097f9 	.word	0x080097f9
 80097d8:	080097f9 	.word	0x080097f9
 80097dc:	0800986b 	.word	0x0800986b
 80097e0:	0800987f 	.word	0x0800987f
 80097e4:	080098c7 	.word	0x080098c7
 80097e8:	080097f9 	.word	0x080097f9
 80097ec:	080097f9 	.word	0x080097f9
 80097f0:	0800986b 	.word	0x0800986b
 80097f4:	0800987f 	.word	0x0800987f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80097f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80097fe:	f043 0301 	orr.w	r3, r3, #1
 8009802:	b2da      	uxtb	r2, r3
 8009804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009806:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800980a:	68fa      	ldr	r2, [r7, #12]
 800980c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980e:	699b      	ldr	r3, [r3, #24]
 8009810:	18d1      	adds	r1, r2, r3
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6a3a      	ldr	r2, [r7, #32]
 8009816:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009818:	f7ff ff78 	bl	800970c <prvInsertTimerInActiveList>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d067      	beq.n	80098f2 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009824:	6a1b      	ldr	r3, [r3, #32]
 8009826:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009828:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800982a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009830:	f003 0304 	and.w	r3, r3, #4
 8009834:	2b00      	cmp	r3, #0
 8009836:	d05c      	beq.n	80098f2 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983c:	699b      	ldr	r3, [r3, #24]
 800983e:	441a      	add	r2, r3
 8009840:	2300      	movs	r3, #0
 8009842:	9300      	str	r3, [sp, #0]
 8009844:	2300      	movs	r3, #0
 8009846:	2100      	movs	r1, #0
 8009848:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800984a:	f7ff fe23 	bl	8009494 <xTimerGenericCommand>
 800984e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d14d      	bne.n	80098f2 <prvProcessReceivedCommands+0x162>
 8009856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985a:	f383 8811 	msr	BASEPRI, r3
 800985e:	f3bf 8f6f 	isb	sy
 8009862:	f3bf 8f4f 	dsb	sy
 8009866:	61bb      	str	r3, [r7, #24]
 8009868:	e7fe      	b.n	8009868 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800986a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009870:	f023 0301 	bic.w	r3, r3, #1
 8009874:	b2da      	uxtb	r2, r3
 8009876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800987c:	e039      	b.n	80098f2 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800987e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009880:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009884:	f043 0301 	orr.w	r3, r3, #1
 8009888:	b2da      	uxtb	r2, r3
 800988a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009894:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009898:	699b      	ldr	r3, [r3, #24]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d109      	bne.n	80098b2 <prvProcessReceivedCommands+0x122>
 800989e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a2:	f383 8811 	msr	BASEPRI, r3
 80098a6:	f3bf 8f6f 	isb	sy
 80098aa:	f3bf 8f4f 	dsb	sy
 80098ae:	617b      	str	r3, [r7, #20]
 80098b0:	e7fe      	b.n	80098b0 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80098b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b4:	699a      	ldr	r2, [r3, #24]
 80098b6:	6a3b      	ldr	r3, [r7, #32]
 80098b8:	18d1      	adds	r1, r2, r3
 80098ba:	6a3b      	ldr	r3, [r7, #32]
 80098bc:	6a3a      	ldr	r2, [r7, #32]
 80098be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80098c0:	f7ff ff24 	bl	800970c <prvInsertTimerInActiveList>
					break;
 80098c4:	e015      	b.n	80098f2 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80098c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80098cc:	f003 0302 	and.w	r3, r3, #2
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d103      	bne.n	80098dc <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 80098d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80098d6:	f000 fbc5 	bl	800a064 <vPortFree>
 80098da:	e00a      	b.n	80098f2 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80098dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80098e2:	f023 0301 	bic.w	r3, r3, #1
 80098e6:	b2da      	uxtb	r2, r3
 80098e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80098ee:	e000      	b.n	80098f2 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80098f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80098f2:	4b08      	ldr	r3, [pc, #32]	; (8009914 <prvProcessReceivedCommands+0x184>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f107 0108 	add.w	r1, r7, #8
 80098fa:	2200      	movs	r2, #0
 80098fc:	4618      	mov	r0, r3
 80098fe:	f7fe fa5f 	bl	8007dc0 <xQueueReceive>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	f47f af47 	bne.w	8009798 <prvProcessReceivedCommands+0x8>
	}
}
 800990a:	bf00      	nop
 800990c:	3728      	adds	r7, #40	; 0x28
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	200010a0 	.word	0x200010a0

08009918 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b088      	sub	sp, #32
 800991c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800991e:	e047      	b.n	80099b0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009920:	4b2d      	ldr	r3, [pc, #180]	; (80099d8 <prvSwitchTimerLists+0xc0>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800992a:	4b2b      	ldr	r3, [pc, #172]	; (80099d8 <prvSwitchTimerLists+0xc0>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	68db      	ldr	r3, [r3, #12]
 8009930:	68db      	ldr	r3, [r3, #12]
 8009932:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	3304      	adds	r3, #4
 8009938:	4618      	mov	r0, r3
 800993a:	f7fd ff1c 	bl	8007776 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	6a1b      	ldr	r3, [r3, #32]
 8009942:	68f8      	ldr	r0, [r7, #12]
 8009944:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800994c:	f003 0304 	and.w	r3, r3, #4
 8009950:	2b00      	cmp	r3, #0
 8009952:	d02d      	beq.n	80099b0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	699b      	ldr	r3, [r3, #24]
 8009958:	693a      	ldr	r2, [r7, #16]
 800995a:	4413      	add	r3, r2
 800995c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	429a      	cmp	r2, r3
 8009964:	d90e      	bls.n	8009984 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	68ba      	ldr	r2, [r7, #8]
 800996a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009972:	4b19      	ldr	r3, [pc, #100]	; (80099d8 <prvSwitchTimerLists+0xc0>)
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	3304      	adds	r3, #4
 800997a:	4619      	mov	r1, r3
 800997c:	4610      	mov	r0, r2
 800997e:	f7fd fec1 	bl	8007704 <vListInsert>
 8009982:	e015      	b.n	80099b0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009984:	2300      	movs	r3, #0
 8009986:	9300      	str	r3, [sp, #0]
 8009988:	2300      	movs	r3, #0
 800998a:	693a      	ldr	r2, [r7, #16]
 800998c:	2100      	movs	r1, #0
 800998e:	68f8      	ldr	r0, [r7, #12]
 8009990:	f7ff fd80 	bl	8009494 <xTimerGenericCommand>
 8009994:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d109      	bne.n	80099b0 <prvSwitchTimerLists+0x98>
 800999c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a0:	f383 8811 	msr	BASEPRI, r3
 80099a4:	f3bf 8f6f 	isb	sy
 80099a8:	f3bf 8f4f 	dsb	sy
 80099ac:	603b      	str	r3, [r7, #0]
 80099ae:	e7fe      	b.n	80099ae <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80099b0:	4b09      	ldr	r3, [pc, #36]	; (80099d8 <prvSwitchTimerLists+0xc0>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d1b2      	bne.n	8009920 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80099ba:	4b07      	ldr	r3, [pc, #28]	; (80099d8 <prvSwitchTimerLists+0xc0>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80099c0:	4b06      	ldr	r3, [pc, #24]	; (80099dc <prvSwitchTimerLists+0xc4>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a04      	ldr	r2, [pc, #16]	; (80099d8 <prvSwitchTimerLists+0xc0>)
 80099c6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80099c8:	4a04      	ldr	r2, [pc, #16]	; (80099dc <prvSwitchTimerLists+0xc4>)
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	6013      	str	r3, [r2, #0]
}
 80099ce:	bf00      	nop
 80099d0:	3718      	adds	r7, #24
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	bf00      	nop
 80099d8:	20001098 	.word	0x20001098
 80099dc:	2000109c 	.word	0x2000109c

080099e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80099e6:	f000 f961 	bl	8009cac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80099ea:	4b15      	ldr	r3, [pc, #84]	; (8009a40 <prvCheckForValidListAndQueue+0x60>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d120      	bne.n	8009a34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80099f2:	4814      	ldr	r0, [pc, #80]	; (8009a44 <prvCheckForValidListAndQueue+0x64>)
 80099f4:	f7fd fe35 	bl	8007662 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80099f8:	4813      	ldr	r0, [pc, #76]	; (8009a48 <prvCheckForValidListAndQueue+0x68>)
 80099fa:	f7fd fe32 	bl	8007662 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80099fe:	4b13      	ldr	r3, [pc, #76]	; (8009a4c <prvCheckForValidListAndQueue+0x6c>)
 8009a00:	4a10      	ldr	r2, [pc, #64]	; (8009a44 <prvCheckForValidListAndQueue+0x64>)
 8009a02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009a04:	4b12      	ldr	r3, [pc, #72]	; (8009a50 <prvCheckForValidListAndQueue+0x70>)
 8009a06:	4a10      	ldr	r2, [pc, #64]	; (8009a48 <prvCheckForValidListAndQueue+0x68>)
 8009a08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	9300      	str	r3, [sp, #0]
 8009a0e:	4b11      	ldr	r3, [pc, #68]	; (8009a54 <prvCheckForValidListAndQueue+0x74>)
 8009a10:	4a11      	ldr	r2, [pc, #68]	; (8009a58 <prvCheckForValidListAndQueue+0x78>)
 8009a12:	210c      	movs	r1, #12
 8009a14:	200a      	movs	r0, #10
 8009a16:	f7fd ff41 	bl	800789c <xQueueGenericCreateStatic>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	4b08      	ldr	r3, [pc, #32]	; (8009a40 <prvCheckForValidListAndQueue+0x60>)
 8009a1e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009a20:	4b07      	ldr	r3, [pc, #28]	; (8009a40 <prvCheckForValidListAndQueue+0x60>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d005      	beq.n	8009a34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009a28:	4b05      	ldr	r3, [pc, #20]	; (8009a40 <prvCheckForValidListAndQueue+0x60>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	490b      	ldr	r1, [pc, #44]	; (8009a5c <prvCheckForValidListAndQueue+0x7c>)
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7fe fbc0 	bl	80081b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a34:	f000 f968 	bl	8009d08 <vPortExitCritical>
}
 8009a38:	bf00      	nop
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	200010a0 	.word	0x200010a0
 8009a44:	20001070 	.word	0x20001070
 8009a48:	20001084 	.word	0x20001084
 8009a4c:	20001098 	.word	0x20001098
 8009a50:	2000109c 	.word	0x2000109c
 8009a54:	20001124 	.word	0x20001124
 8009a58:	200010ac 	.word	0x200010ac
 8009a5c:	0800d698 	.word	0x0800d698

08009a60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009a60:	b480      	push	{r7}
 8009a62:	b085      	sub	sp, #20
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	3b04      	subs	r3, #4
 8009a70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009a78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	3b04      	subs	r3, #4
 8009a7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	f023 0201 	bic.w	r2, r3, #1
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	3b04      	subs	r3, #4
 8009a8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009a90:	4a0c      	ldr	r2, [pc, #48]	; (8009ac4 <pxPortInitialiseStack+0x64>)
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	3b14      	subs	r3, #20
 8009a9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	3b04      	subs	r3, #4
 8009aa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f06f 0202 	mvn.w	r2, #2
 8009aae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	3b20      	subs	r3, #32
 8009ab4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3714      	adds	r7, #20
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr
 8009ac4:	08009ac9 	.word	0x08009ac9

08009ac8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009ad2:	4b11      	ldr	r3, [pc, #68]	; (8009b18 <prvTaskExitError+0x50>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ada:	d009      	beq.n	8009af0 <prvTaskExitError+0x28>
 8009adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae0:	f383 8811 	msr	BASEPRI, r3
 8009ae4:	f3bf 8f6f 	isb	sy
 8009ae8:	f3bf 8f4f 	dsb	sy
 8009aec:	60fb      	str	r3, [r7, #12]
 8009aee:	e7fe      	b.n	8009aee <prvTaskExitError+0x26>
 8009af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af4:	f383 8811 	msr	BASEPRI, r3
 8009af8:	f3bf 8f6f 	isb	sy
 8009afc:	f3bf 8f4f 	dsb	sy
 8009b00:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009b02:	bf00      	nop
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d0fc      	beq.n	8009b04 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009b0a:	bf00      	nop
 8009b0c:	3714      	adds	r7, #20
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr
 8009b16:	bf00      	nop
 8009b18:	20000010 	.word	0x20000010
 8009b1c:	00000000 	.word	0x00000000

08009b20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009b20:	4b07      	ldr	r3, [pc, #28]	; (8009b40 <pxCurrentTCBConst2>)
 8009b22:	6819      	ldr	r1, [r3, #0]
 8009b24:	6808      	ldr	r0, [r1, #0]
 8009b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b2a:	f380 8809 	msr	PSP, r0
 8009b2e:	f3bf 8f6f 	isb	sy
 8009b32:	f04f 0000 	mov.w	r0, #0
 8009b36:	f380 8811 	msr	BASEPRI, r0
 8009b3a:	4770      	bx	lr
 8009b3c:	f3af 8000 	nop.w

08009b40 <pxCurrentTCBConst2>:
 8009b40:	20000f44 	.word	0x20000f44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009b44:	bf00      	nop
 8009b46:	bf00      	nop

08009b48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009b48:	4808      	ldr	r0, [pc, #32]	; (8009b6c <prvPortStartFirstTask+0x24>)
 8009b4a:	6800      	ldr	r0, [r0, #0]
 8009b4c:	6800      	ldr	r0, [r0, #0]
 8009b4e:	f380 8808 	msr	MSP, r0
 8009b52:	f04f 0000 	mov.w	r0, #0
 8009b56:	f380 8814 	msr	CONTROL, r0
 8009b5a:	b662      	cpsie	i
 8009b5c:	b661      	cpsie	f
 8009b5e:	f3bf 8f4f 	dsb	sy
 8009b62:	f3bf 8f6f 	isb	sy
 8009b66:	df00      	svc	0
 8009b68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009b6a:	bf00      	nop
 8009b6c:	e000ed08 	.word	0xe000ed08

08009b70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b086      	sub	sp, #24
 8009b74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009b76:	4b44      	ldr	r3, [pc, #272]	; (8009c88 <xPortStartScheduler+0x118>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a44      	ldr	r2, [pc, #272]	; (8009c8c <xPortStartScheduler+0x11c>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d109      	bne.n	8009b94 <xPortStartScheduler+0x24>
 8009b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b84:	f383 8811 	msr	BASEPRI, r3
 8009b88:	f3bf 8f6f 	isb	sy
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	613b      	str	r3, [r7, #16]
 8009b92:	e7fe      	b.n	8009b92 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009b94:	4b3c      	ldr	r3, [pc, #240]	; (8009c88 <xPortStartScheduler+0x118>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a3d      	ldr	r2, [pc, #244]	; (8009c90 <xPortStartScheduler+0x120>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d109      	bne.n	8009bb2 <xPortStartScheduler+0x42>
 8009b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba2:	f383 8811 	msr	BASEPRI, r3
 8009ba6:	f3bf 8f6f 	isb	sy
 8009baa:	f3bf 8f4f 	dsb	sy
 8009bae:	60fb      	str	r3, [r7, #12]
 8009bb0:	e7fe      	b.n	8009bb0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009bb2:	4b38      	ldr	r3, [pc, #224]	; (8009c94 <xPortStartScheduler+0x124>)
 8009bb4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	b2db      	uxtb	r3, r3
 8009bbc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	22ff      	movs	r2, #255	; 0xff
 8009bc2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	b2db      	uxtb	r3, r3
 8009bca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009bcc:	78fb      	ldrb	r3, [r7, #3]
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009bd4:	b2da      	uxtb	r2, r3
 8009bd6:	4b30      	ldr	r3, [pc, #192]	; (8009c98 <xPortStartScheduler+0x128>)
 8009bd8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009bda:	4b30      	ldr	r3, [pc, #192]	; (8009c9c <xPortStartScheduler+0x12c>)
 8009bdc:	2207      	movs	r2, #7
 8009bde:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009be0:	e009      	b.n	8009bf6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009be2:	4b2e      	ldr	r3, [pc, #184]	; (8009c9c <xPortStartScheduler+0x12c>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	3b01      	subs	r3, #1
 8009be8:	4a2c      	ldr	r2, [pc, #176]	; (8009c9c <xPortStartScheduler+0x12c>)
 8009bea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009bec:	78fb      	ldrb	r3, [r7, #3]
 8009bee:	b2db      	uxtb	r3, r3
 8009bf0:	005b      	lsls	r3, r3, #1
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009bf6:	78fb      	ldrb	r3, [r7, #3]
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bfe:	2b80      	cmp	r3, #128	; 0x80
 8009c00:	d0ef      	beq.n	8009be2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009c02:	4b26      	ldr	r3, [pc, #152]	; (8009c9c <xPortStartScheduler+0x12c>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f1c3 0307 	rsb	r3, r3, #7
 8009c0a:	2b04      	cmp	r3, #4
 8009c0c:	d009      	beq.n	8009c22 <xPortStartScheduler+0xb2>
 8009c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c12:	f383 8811 	msr	BASEPRI, r3
 8009c16:	f3bf 8f6f 	isb	sy
 8009c1a:	f3bf 8f4f 	dsb	sy
 8009c1e:	60bb      	str	r3, [r7, #8]
 8009c20:	e7fe      	b.n	8009c20 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009c22:	4b1e      	ldr	r3, [pc, #120]	; (8009c9c <xPortStartScheduler+0x12c>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	021b      	lsls	r3, r3, #8
 8009c28:	4a1c      	ldr	r2, [pc, #112]	; (8009c9c <xPortStartScheduler+0x12c>)
 8009c2a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009c2c:	4b1b      	ldr	r3, [pc, #108]	; (8009c9c <xPortStartScheduler+0x12c>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c34:	4a19      	ldr	r2, [pc, #100]	; (8009c9c <xPortStartScheduler+0x12c>)
 8009c36:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	b2da      	uxtb	r2, r3
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009c40:	4b17      	ldr	r3, [pc, #92]	; (8009ca0 <xPortStartScheduler+0x130>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a16      	ldr	r2, [pc, #88]	; (8009ca0 <xPortStartScheduler+0x130>)
 8009c46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009c4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009c4c:	4b14      	ldr	r3, [pc, #80]	; (8009ca0 <xPortStartScheduler+0x130>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a13      	ldr	r2, [pc, #76]	; (8009ca0 <xPortStartScheduler+0x130>)
 8009c52:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009c56:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009c58:	f000 f8d6 	bl	8009e08 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009c5c:	4b11      	ldr	r3, [pc, #68]	; (8009ca4 <xPortStartScheduler+0x134>)
 8009c5e:	2200      	movs	r2, #0
 8009c60:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009c62:	f000 f8f5 	bl	8009e50 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009c66:	4b10      	ldr	r3, [pc, #64]	; (8009ca8 <xPortStartScheduler+0x138>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a0f      	ldr	r2, [pc, #60]	; (8009ca8 <xPortStartScheduler+0x138>)
 8009c6c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009c70:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009c72:	f7ff ff69 	bl	8009b48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009c76:	f7fe ff2d 	bl	8008ad4 <vTaskSwitchContext>
	prvTaskExitError();
 8009c7a:	f7ff ff25 	bl	8009ac8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009c7e:	2300      	movs	r3, #0
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3718      	adds	r7, #24
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	e000ed00 	.word	0xe000ed00
 8009c8c:	410fc271 	.word	0x410fc271
 8009c90:	410fc270 	.word	0x410fc270
 8009c94:	e000e400 	.word	0xe000e400
 8009c98:	20001170 	.word	0x20001170
 8009c9c:	20001174 	.word	0x20001174
 8009ca0:	e000ed20 	.word	0xe000ed20
 8009ca4:	20000010 	.word	0x20000010
 8009ca8:	e000ef34 	.word	0xe000ef34

08009cac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb6:	f383 8811 	msr	BASEPRI, r3
 8009cba:	f3bf 8f6f 	isb	sy
 8009cbe:	f3bf 8f4f 	dsb	sy
 8009cc2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009cc4:	4b0e      	ldr	r3, [pc, #56]	; (8009d00 <vPortEnterCritical+0x54>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	3301      	adds	r3, #1
 8009cca:	4a0d      	ldr	r2, [pc, #52]	; (8009d00 <vPortEnterCritical+0x54>)
 8009ccc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009cce:	4b0c      	ldr	r3, [pc, #48]	; (8009d00 <vPortEnterCritical+0x54>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d10e      	bne.n	8009cf4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009cd6:	4b0b      	ldr	r3, [pc, #44]	; (8009d04 <vPortEnterCritical+0x58>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d009      	beq.n	8009cf4 <vPortEnterCritical+0x48>
 8009ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	603b      	str	r3, [r7, #0]
 8009cf2:	e7fe      	b.n	8009cf2 <vPortEnterCritical+0x46>
	}
}
 8009cf4:	bf00      	nop
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr
 8009d00:	20000010 	.word	0x20000010
 8009d04:	e000ed04 	.word	0xe000ed04

08009d08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b083      	sub	sp, #12
 8009d0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009d0e:	4b11      	ldr	r3, [pc, #68]	; (8009d54 <vPortExitCritical+0x4c>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d109      	bne.n	8009d2a <vPortExitCritical+0x22>
 8009d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1a:	f383 8811 	msr	BASEPRI, r3
 8009d1e:	f3bf 8f6f 	isb	sy
 8009d22:	f3bf 8f4f 	dsb	sy
 8009d26:	607b      	str	r3, [r7, #4]
 8009d28:	e7fe      	b.n	8009d28 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009d2a:	4b0a      	ldr	r3, [pc, #40]	; (8009d54 <vPortExitCritical+0x4c>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	3b01      	subs	r3, #1
 8009d30:	4a08      	ldr	r2, [pc, #32]	; (8009d54 <vPortExitCritical+0x4c>)
 8009d32:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009d34:	4b07      	ldr	r3, [pc, #28]	; (8009d54 <vPortExitCritical+0x4c>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d104      	bne.n	8009d46 <vPortExitCritical+0x3e>
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009d46:	bf00      	nop
 8009d48:	370c      	adds	r7, #12
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr
 8009d52:	bf00      	nop
 8009d54:	20000010 	.word	0x20000010
	...

08009d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009d60:	f3ef 8009 	mrs	r0, PSP
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	4b15      	ldr	r3, [pc, #84]	; (8009dc0 <pxCurrentTCBConst>)
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	f01e 0f10 	tst.w	lr, #16
 8009d70:	bf08      	it	eq
 8009d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d7a:	6010      	str	r0, [r2, #0]
 8009d7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009d80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009d84:	f380 8811 	msr	BASEPRI, r0
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	f3bf 8f6f 	isb	sy
 8009d90:	f7fe fea0 	bl	8008ad4 <vTaskSwitchContext>
 8009d94:	f04f 0000 	mov.w	r0, #0
 8009d98:	f380 8811 	msr	BASEPRI, r0
 8009d9c:	bc09      	pop	{r0, r3}
 8009d9e:	6819      	ldr	r1, [r3, #0]
 8009da0:	6808      	ldr	r0, [r1, #0]
 8009da2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da6:	f01e 0f10 	tst.w	lr, #16
 8009daa:	bf08      	it	eq
 8009dac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009db0:	f380 8809 	msr	PSP, r0
 8009db4:	f3bf 8f6f 	isb	sy
 8009db8:	4770      	bx	lr
 8009dba:	bf00      	nop
 8009dbc:	f3af 8000 	nop.w

08009dc0 <pxCurrentTCBConst>:
 8009dc0:	20000f44 	.word	0x20000f44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009dc4:	bf00      	nop
 8009dc6:	bf00      	nop

08009dc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8009dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd2:	f383 8811 	msr	BASEPRI, r3
 8009dd6:	f3bf 8f6f 	isb	sy
 8009dda:	f3bf 8f4f 	dsb	sy
 8009dde:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009de0:	f7fe fdc0 	bl	8008964 <xTaskIncrementTick>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d003      	beq.n	8009df2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009dea:	4b06      	ldr	r3, [pc, #24]	; (8009e04 <SysTick_Handler+0x3c>)
 8009dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009df0:	601a      	str	r2, [r3, #0]
 8009df2:	2300      	movs	r3, #0
 8009df4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009dfc:	bf00      	nop
 8009dfe:	3708      	adds	r7, #8
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	e000ed04 	.word	0xe000ed04

08009e08 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009e08:	b480      	push	{r7}
 8009e0a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e0c:	4b0b      	ldr	r3, [pc, #44]	; (8009e3c <vPortSetupTimerInterrupt+0x34>)
 8009e0e:	2200      	movs	r2, #0
 8009e10:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009e12:	4b0b      	ldr	r3, [pc, #44]	; (8009e40 <vPortSetupTimerInterrupt+0x38>)
 8009e14:	2200      	movs	r2, #0
 8009e16:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e18:	4b0a      	ldr	r3, [pc, #40]	; (8009e44 <vPortSetupTimerInterrupt+0x3c>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a0a      	ldr	r2, [pc, #40]	; (8009e48 <vPortSetupTimerInterrupt+0x40>)
 8009e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8009e22:	099b      	lsrs	r3, r3, #6
 8009e24:	4a09      	ldr	r2, [pc, #36]	; (8009e4c <vPortSetupTimerInterrupt+0x44>)
 8009e26:	3b01      	subs	r3, #1
 8009e28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e2a:	4b04      	ldr	r3, [pc, #16]	; (8009e3c <vPortSetupTimerInterrupt+0x34>)
 8009e2c:	2207      	movs	r2, #7
 8009e2e:	601a      	str	r2, [r3, #0]
}
 8009e30:	bf00      	nop
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	e000e010 	.word	0xe000e010
 8009e40:	e000e018 	.word	0xe000e018
 8009e44:	20000004 	.word	0x20000004
 8009e48:	10624dd3 	.word	0x10624dd3
 8009e4c:	e000e014 	.word	0xe000e014

08009e50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009e50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009e60 <vPortEnableVFP+0x10>
 8009e54:	6801      	ldr	r1, [r0, #0]
 8009e56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009e5a:	6001      	str	r1, [r0, #0]
 8009e5c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009e5e:	bf00      	nop
 8009e60:	e000ed88 	.word	0xe000ed88

08009e64 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009e64:	b480      	push	{r7}
 8009e66:	b085      	sub	sp, #20
 8009e68:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009e6a:	f3ef 8305 	mrs	r3, IPSR
 8009e6e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2b0f      	cmp	r3, #15
 8009e74:	d913      	bls.n	8009e9e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e76:	4a16      	ldr	r2, [pc, #88]	; (8009ed0 <vPortValidateInterruptPriority+0x6c>)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	4413      	add	r3, r2
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e80:	4b14      	ldr	r3, [pc, #80]	; (8009ed4 <vPortValidateInterruptPriority+0x70>)
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	7afa      	ldrb	r2, [r7, #11]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d209      	bcs.n	8009e9e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8e:	f383 8811 	msr	BASEPRI, r3
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	f3bf 8f4f 	dsb	sy
 8009e9a:	607b      	str	r3, [r7, #4]
 8009e9c:	e7fe      	b.n	8009e9c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009e9e:	4b0e      	ldr	r3, [pc, #56]	; (8009ed8 <vPortValidateInterruptPriority+0x74>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009ea6:	4b0d      	ldr	r3, [pc, #52]	; (8009edc <vPortValidateInterruptPriority+0x78>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d909      	bls.n	8009ec2 <vPortValidateInterruptPriority+0x5e>
 8009eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb2:	f383 8811 	msr	BASEPRI, r3
 8009eb6:	f3bf 8f6f 	isb	sy
 8009eba:	f3bf 8f4f 	dsb	sy
 8009ebe:	603b      	str	r3, [r7, #0]
 8009ec0:	e7fe      	b.n	8009ec0 <vPortValidateInterruptPriority+0x5c>
	}
 8009ec2:	bf00      	nop
 8009ec4:	3714      	adds	r7, #20
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr
 8009ece:	bf00      	nop
 8009ed0:	e000e3f0 	.word	0xe000e3f0
 8009ed4:	20001170 	.word	0x20001170
 8009ed8:	e000ed0c 	.word	0xe000ed0c
 8009edc:	20001174 	.word	0x20001174

08009ee0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b08a      	sub	sp, #40	; 0x28
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009eec:	f7fe fc80 	bl	80087f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ef0:	4b57      	ldr	r3, [pc, #348]	; (800a050 <pvPortMalloc+0x170>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d101      	bne.n	8009efc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ef8:	f000 f90c 	bl	800a114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009efc:	4b55      	ldr	r3, [pc, #340]	; (800a054 <pvPortMalloc+0x174>)
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	4013      	ands	r3, r2
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f040 808c 	bne.w	800a022 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d01c      	beq.n	8009f4a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009f10:	2208      	movs	r2, #8
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	4413      	add	r3, r2
 8009f16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f003 0307 	and.w	r3, r3, #7
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d013      	beq.n	8009f4a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f023 0307 	bic.w	r3, r3, #7
 8009f28:	3308      	adds	r3, #8
 8009f2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f003 0307 	and.w	r3, r3, #7
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d009      	beq.n	8009f4a <pvPortMalloc+0x6a>
 8009f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3a:	f383 8811 	msr	BASEPRI, r3
 8009f3e:	f3bf 8f6f 	isb	sy
 8009f42:	f3bf 8f4f 	dsb	sy
 8009f46:	617b      	str	r3, [r7, #20]
 8009f48:	e7fe      	b.n	8009f48 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d068      	beq.n	800a022 <pvPortMalloc+0x142>
 8009f50:	4b41      	ldr	r3, [pc, #260]	; (800a058 <pvPortMalloc+0x178>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d863      	bhi.n	800a022 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009f5a:	4b40      	ldr	r3, [pc, #256]	; (800a05c <pvPortMalloc+0x17c>)
 8009f5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009f5e:	4b3f      	ldr	r3, [pc, #252]	; (800a05c <pvPortMalloc+0x17c>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f64:	e004      	b.n	8009f70 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d903      	bls.n	8009f82 <pvPortMalloc+0xa2>
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1f1      	bne.n	8009f66 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009f82:	4b33      	ldr	r3, [pc, #204]	; (800a050 <pvPortMalloc+0x170>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d04a      	beq.n	800a022 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009f8c:	6a3b      	ldr	r3, [r7, #32]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	2208      	movs	r2, #8
 8009f92:	4413      	add	r3, r2
 8009f94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	6a3b      	ldr	r3, [r7, #32]
 8009f9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa0:	685a      	ldr	r2, [r3, #4]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	1ad2      	subs	r2, r2, r3
 8009fa6:	2308      	movs	r3, #8
 8009fa8:	005b      	lsls	r3, r3, #1
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d91e      	bls.n	8009fec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fb6:	69bb      	ldr	r3, [r7, #24]
 8009fb8:	f003 0307 	and.w	r3, r3, #7
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d009      	beq.n	8009fd4 <pvPortMalloc+0xf4>
 8009fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc4:	f383 8811 	msr	BASEPRI, r3
 8009fc8:	f3bf 8f6f 	isb	sy
 8009fcc:	f3bf 8f4f 	dsb	sy
 8009fd0:	613b      	str	r3, [r7, #16]
 8009fd2:	e7fe      	b.n	8009fd2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd6:	685a      	ldr	r2, [r3, #4]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	1ad2      	subs	r2, r2, r3
 8009fdc:	69bb      	ldr	r3, [r7, #24]
 8009fde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009fe6:	69b8      	ldr	r0, [r7, #24]
 8009fe8:	f000 f8f6 	bl	800a1d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009fec:	4b1a      	ldr	r3, [pc, #104]	; (800a058 <pvPortMalloc+0x178>)
 8009fee:	681a      	ldr	r2, [r3, #0]
 8009ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	1ad3      	subs	r3, r2, r3
 8009ff6:	4a18      	ldr	r2, [pc, #96]	; (800a058 <pvPortMalloc+0x178>)
 8009ff8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009ffa:	4b17      	ldr	r3, [pc, #92]	; (800a058 <pvPortMalloc+0x178>)
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	4b18      	ldr	r3, [pc, #96]	; (800a060 <pvPortMalloc+0x180>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	429a      	cmp	r2, r3
 800a004:	d203      	bcs.n	800a00e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a006:	4b14      	ldr	r3, [pc, #80]	; (800a058 <pvPortMalloc+0x178>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a15      	ldr	r2, [pc, #84]	; (800a060 <pvPortMalloc+0x180>)
 800a00c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a010:	685a      	ldr	r2, [r3, #4]
 800a012:	4b10      	ldr	r3, [pc, #64]	; (800a054 <pvPortMalloc+0x174>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	431a      	orrs	r2, r3
 800a018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01e:	2200      	movs	r2, #0
 800a020:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a022:	f7fe fbf3 	bl	800880c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a026:	69fb      	ldr	r3, [r7, #28]
 800a028:	f003 0307 	and.w	r3, r3, #7
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d009      	beq.n	800a044 <pvPortMalloc+0x164>
 800a030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a034:	f383 8811 	msr	BASEPRI, r3
 800a038:	f3bf 8f6f 	isb	sy
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	60fb      	str	r3, [r7, #12]
 800a042:	e7fe      	b.n	800a042 <pvPortMalloc+0x162>
	return pvReturn;
 800a044:	69fb      	ldr	r3, [r7, #28]
}
 800a046:	4618      	mov	r0, r3
 800a048:	3728      	adds	r7, #40	; 0x28
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	2000d4d0 	.word	0x2000d4d0
 800a054:	2000d4dc 	.word	0x2000d4dc
 800a058:	2000d4d4 	.word	0x2000d4d4
 800a05c:	2000d4c8 	.word	0x2000d4c8
 800a060:	2000d4d8 	.word	0x2000d4d8

0800a064 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b086      	sub	sp, #24
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d046      	beq.n	800a104 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a076:	2308      	movs	r3, #8
 800a078:	425b      	negs	r3, r3
 800a07a:	697a      	ldr	r2, [r7, #20]
 800a07c:	4413      	add	r3, r2
 800a07e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	685a      	ldr	r2, [r3, #4]
 800a088:	4b20      	ldr	r3, [pc, #128]	; (800a10c <vPortFree+0xa8>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4013      	ands	r3, r2
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d109      	bne.n	800a0a6 <vPortFree+0x42>
 800a092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a096:	f383 8811 	msr	BASEPRI, r3
 800a09a:	f3bf 8f6f 	isb	sy
 800a09e:	f3bf 8f4f 	dsb	sy
 800a0a2:	60fb      	str	r3, [r7, #12]
 800a0a4:	e7fe      	b.n	800a0a4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d009      	beq.n	800a0c2 <vPortFree+0x5e>
 800a0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	60bb      	str	r3, [r7, #8]
 800a0c0:	e7fe      	b.n	800a0c0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	685a      	ldr	r2, [r3, #4]
 800a0c6:	4b11      	ldr	r3, [pc, #68]	; (800a10c <vPortFree+0xa8>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4013      	ands	r3, r2
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d019      	beq.n	800a104 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d115      	bne.n	800a104 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	685a      	ldr	r2, [r3, #4]
 800a0dc:	4b0b      	ldr	r3, [pc, #44]	; (800a10c <vPortFree+0xa8>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	43db      	mvns	r3, r3
 800a0e2:	401a      	ands	r2, r3
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a0e8:	f7fe fb82 	bl	80087f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	685a      	ldr	r2, [r3, #4]
 800a0f0:	4b07      	ldr	r3, [pc, #28]	; (800a110 <vPortFree+0xac>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4413      	add	r3, r2
 800a0f6:	4a06      	ldr	r2, [pc, #24]	; (800a110 <vPortFree+0xac>)
 800a0f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a0fa:	6938      	ldr	r0, [r7, #16]
 800a0fc:	f000 f86c 	bl	800a1d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a100:	f7fe fb84 	bl	800880c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a104:	bf00      	nop
 800a106:	3718      	adds	r7, #24
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	2000d4dc 	.word	0x2000d4dc
 800a110:	2000d4d4 	.word	0x2000d4d4

0800a114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a114:	b480      	push	{r7}
 800a116:	b085      	sub	sp, #20
 800a118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a11a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a11e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a120:	4b27      	ldr	r3, [pc, #156]	; (800a1c0 <prvHeapInit+0xac>)
 800a122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f003 0307 	and.w	r3, r3, #7
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d00c      	beq.n	800a148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	3307      	adds	r3, #7
 800a132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f023 0307 	bic.w	r3, r3, #7
 800a13a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a13c:	68ba      	ldr	r2, [r7, #8]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	1ad3      	subs	r3, r2, r3
 800a142:	4a1f      	ldr	r2, [pc, #124]	; (800a1c0 <prvHeapInit+0xac>)
 800a144:	4413      	add	r3, r2
 800a146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a14c:	4a1d      	ldr	r2, [pc, #116]	; (800a1c4 <prvHeapInit+0xb0>)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a152:	4b1c      	ldr	r3, [pc, #112]	; (800a1c4 <prvHeapInit+0xb0>)
 800a154:	2200      	movs	r2, #0
 800a156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	68ba      	ldr	r2, [r7, #8]
 800a15c:	4413      	add	r3, r2
 800a15e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a160:	2208      	movs	r2, #8
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	1a9b      	subs	r3, r3, r2
 800a166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f023 0307 	bic.w	r3, r3, #7
 800a16e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	4a15      	ldr	r2, [pc, #84]	; (800a1c8 <prvHeapInit+0xb4>)
 800a174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a176:	4b14      	ldr	r3, [pc, #80]	; (800a1c8 <prvHeapInit+0xb4>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2200      	movs	r2, #0
 800a17c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a17e:	4b12      	ldr	r3, [pc, #72]	; (800a1c8 <prvHeapInit+0xb4>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2200      	movs	r2, #0
 800a184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	1ad2      	subs	r2, r2, r3
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a194:	4b0c      	ldr	r3, [pc, #48]	; (800a1c8 <prvHeapInit+0xb4>)
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	4a0a      	ldr	r2, [pc, #40]	; (800a1cc <prvHeapInit+0xb8>)
 800a1a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	4a09      	ldr	r2, [pc, #36]	; (800a1d0 <prvHeapInit+0xbc>)
 800a1aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a1ac:	4b09      	ldr	r3, [pc, #36]	; (800a1d4 <prvHeapInit+0xc0>)
 800a1ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a1b2:	601a      	str	r2, [r3, #0]
}
 800a1b4:	bf00      	nop
 800a1b6:	3714      	adds	r7, #20
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr
 800a1c0:	20001178 	.word	0x20001178
 800a1c4:	2000d4c8 	.word	0x2000d4c8
 800a1c8:	2000d4d0 	.word	0x2000d4d0
 800a1cc:	2000d4d8 	.word	0x2000d4d8
 800a1d0:	2000d4d4 	.word	0x2000d4d4
 800a1d4:	2000d4dc 	.word	0x2000d4dc

0800a1d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b085      	sub	sp, #20
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a1e0:	4b28      	ldr	r3, [pc, #160]	; (800a284 <prvInsertBlockIntoFreeList+0xac>)
 800a1e2:	60fb      	str	r3, [r7, #12]
 800a1e4:	e002      	b.n	800a1ec <prvInsertBlockIntoFreeList+0x14>
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	60fb      	str	r3, [r7, #12]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d8f7      	bhi.n	800a1e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	68ba      	ldr	r2, [r7, #8]
 800a200:	4413      	add	r3, r2
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	429a      	cmp	r2, r3
 800a206:	d108      	bne.n	800a21a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	685a      	ldr	r2, [r3, #4]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	441a      	add	r2, r3
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	68ba      	ldr	r2, [r7, #8]
 800a224:	441a      	add	r2, r3
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d118      	bne.n	800a260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	4b15      	ldr	r3, [pc, #84]	; (800a288 <prvInsertBlockIntoFreeList+0xb0>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	429a      	cmp	r2, r3
 800a238:	d00d      	beq.n	800a256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	685a      	ldr	r2, [r3, #4]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	441a      	add	r2, r3
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	601a      	str	r2, [r3, #0]
 800a254:	e008      	b.n	800a268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a256:	4b0c      	ldr	r3, [pc, #48]	; (800a288 <prvInsertBlockIntoFreeList+0xb0>)
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	601a      	str	r2, [r3, #0]
 800a25e:	e003      	b.n	800a268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a268:	68fa      	ldr	r2, [r7, #12]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d002      	beq.n	800a276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a276:	bf00      	nop
 800a278:	3714      	adds	r7, #20
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr
 800a282:	bf00      	nop
 800a284:	2000d4c8 	.word	0x2000d4c8
 800a288:	2000d4d0 	.word	0x2000d4d0

0800a28c <adc_interface_init>:
static ADC_HandleTypeDef m2;
static float current_ma_filt[2];
static float alpha = 0.997;

void adc_interface_init(ADC_HandleTypeDef ch1, ADC_HandleTypeDef ch2)
{
 800a28c:	b084      	sub	sp, #16
 800a28e:	b580      	push	{r7, lr}
 800a290:	af00      	add	r7, sp, #0
 800a292:	f107 0c08 	add.w	ip, r7, #8
 800a296:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	m1 = ch1;
 800a29a:	4b0e      	ldr	r3, [pc, #56]	; (800a2d4 <adc_interface_init+0x48>)
 800a29c:	4618      	mov	r0, r3
 800a29e:	f107 0108 	add.w	r1, r7, #8
 800a2a2:	2348      	movs	r3, #72	; 0x48
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	f002 fb13 	bl	800c8d0 <memcpy>
	m2 = ch2;
 800a2aa:	4b0b      	ldr	r3, [pc, #44]	; (800a2d8 <adc_interface_init+0x4c>)
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a2b2:	2248      	movs	r2, #72	; 0x48
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	f002 fb0b 	bl	800c8d0 <memcpy>
	HAL_ADC_Start(&m1);
 800a2ba:	4806      	ldr	r0, [pc, #24]	; (800a2d4 <adc_interface_init+0x48>)
 800a2bc:	f7f9 fdc4 	bl	8003e48 <HAL_ADC_Start>
	HAL_ADC_Start(&m2);
 800a2c0:	4805      	ldr	r0, [pc, #20]	; (800a2d8 <adc_interface_init+0x4c>)
 800a2c2:	f7f9 fdc1 	bl	8003e48 <HAL_ADC_Start>
}
 800a2c6:	bf00      	nop
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a2ce:	b004      	add	sp, #16
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop
 800a2d4:	2000d4e0 	.word	0x2000d4e0
 800a2d8:	2000d528 	.word	0x2000d528
 800a2dc:	00000000 	.word	0x00000000

0800a2e0 <get_motor_current_ma>:

uint32_t get_motor_current_ma(uint8_t channel)
{
 800a2e0:	b590      	push	{r4, r7, lr}
 800a2e2:	b089      	sub	sp, #36	; 0x24
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	71fb      	strb	r3, [r7, #7]
	if(channel == 0)
 800a2ea:	79fb      	ldrb	r3, [r7, #7]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d15f      	bne.n	800a3b0 <get_motor_current_ma+0xd0>
	{
		HAL_ADC_PollForConversion(&m1, 5);
 800a2f0:	2105      	movs	r1, #5
 800a2f2:	4867      	ldr	r0, [pc, #412]	; (800a490 <get_motor_current_ma+0x1b0>)
 800a2f4:	f7f9 fe6e 	bl	8003fd4 <HAL_ADC_PollForConversion>
		uint16_t raw = HAL_ADC_GetValue(&m1);
 800a2f8:	4865      	ldr	r0, [pc, #404]	; (800a490 <get_motor_current_ma+0x1b0>)
 800a2fa:	f7fa f830 	bl	800435e <HAL_ADC_GetValue>
 800a2fe:	4603      	mov	r3, r0
 800a300:	827b      	strh	r3, [r7, #18]
		float current_ma_f = ((((raw / 4095.0) * 3.0)/2.15) * 1000.0);
 800a302:	8a7b      	ldrh	r3, [r7, #18]
 800a304:	4618      	mov	r0, r3
 800a306:	f7f6 f8b5 	bl	8000474 <__aeabi_i2d>
 800a30a:	a35d      	add	r3, pc, #372	; (adr r3, 800a480 <get_motor_current_ma+0x1a0>)
 800a30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a310:	f7f6 fa44 	bl	800079c <__aeabi_ddiv>
 800a314:	4603      	mov	r3, r0
 800a316:	460c      	mov	r4, r1
 800a318:	4618      	mov	r0, r3
 800a31a:	4621      	mov	r1, r4
 800a31c:	f04f 0200 	mov.w	r2, #0
 800a320:	4b5c      	ldr	r3, [pc, #368]	; (800a494 <get_motor_current_ma+0x1b4>)
 800a322:	f7f6 f911 	bl	8000548 <__aeabi_dmul>
 800a326:	4603      	mov	r3, r0
 800a328:	460c      	mov	r4, r1
 800a32a:	4618      	mov	r0, r3
 800a32c:	4621      	mov	r1, r4
 800a32e:	a356      	add	r3, pc, #344	; (adr r3, 800a488 <get_motor_current_ma+0x1a8>)
 800a330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a334:	f7f6 fa32 	bl	800079c <__aeabi_ddiv>
 800a338:	4603      	mov	r3, r0
 800a33a:	460c      	mov	r4, r1
 800a33c:	4618      	mov	r0, r3
 800a33e:	4621      	mov	r1, r4
 800a340:	f04f 0200 	mov.w	r2, #0
 800a344:	4b54      	ldr	r3, [pc, #336]	; (800a498 <get_motor_current_ma+0x1b8>)
 800a346:	f7f6 f8ff 	bl	8000548 <__aeabi_dmul>
 800a34a:	4603      	mov	r3, r0
 800a34c:	460c      	mov	r4, r1
 800a34e:	4618      	mov	r0, r3
 800a350:	4621      	mov	r1, r4
 800a352:	f7f6 fbd1 	bl	8000af8 <__aeabi_d2f>
 800a356:	4603      	mov	r3, r0
 800a358:	60fb      	str	r3, [r7, #12]
		current_ma_filt[channel] = alpha * current_ma_filt[channel] + (1.0f-alpha) * current_ma_f;
 800a35a:	79fb      	ldrb	r3, [r7, #7]
 800a35c:	4a4f      	ldr	r2, [pc, #316]	; (800a49c <get_motor_current_ma+0x1bc>)
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	4413      	add	r3, r2
 800a362:	ed93 7a00 	vldr	s14, [r3]
 800a366:	4b4e      	ldr	r3, [pc, #312]	; (800a4a0 <get_motor_current_ma+0x1c0>)
 800a368:	edd3 7a00 	vldr	s15, [r3]
 800a36c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a370:	4b4b      	ldr	r3, [pc, #300]	; (800a4a0 <get_motor_current_ma+0x1c0>)
 800a372:	edd3 7a00 	vldr	s15, [r3]
 800a376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a37a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a37e:	edd7 7a03 	vldr	s15, [r7, #12]
 800a382:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a386:	79fb      	ldrb	r3, [r7, #7]
 800a388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a38c:	4a43      	ldr	r2, [pc, #268]	; (800a49c <get_motor_current_ma+0x1bc>)
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	4413      	add	r3, r2
 800a392:	edc3 7a00 	vstr	s15, [r3]
		uint32_t current_ma = (uint32_t) current_ma_filt[channel];
 800a396:	79fb      	ldrb	r3, [r7, #7]
 800a398:	4a40      	ldr	r2, [pc, #256]	; (800a49c <get_motor_current_ma+0x1bc>)
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	4413      	add	r3, r2
 800a39e:	edd3 7a00 	vldr	s15, [r3]
 800a3a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3a6:	ee17 3a90 	vmov	r3, s15
 800a3aa:	60bb      	str	r3, [r7, #8]
		return current_ma;
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	e063      	b.n	800a478 <get_motor_current_ma+0x198>
	}
	else if(channel == 1)
 800a3b0:	79fb      	ldrb	r3, [r7, #7]
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d15f      	bne.n	800a476 <get_motor_current_ma+0x196>
	{
		HAL_ADC_PollForConversion(&m2, 5);
 800a3b6:	2105      	movs	r1, #5
 800a3b8:	483a      	ldr	r0, [pc, #232]	; (800a4a4 <get_motor_current_ma+0x1c4>)
 800a3ba:	f7f9 fe0b 	bl	8003fd4 <HAL_ADC_PollForConversion>
		uint16_t raw = HAL_ADC_GetValue(&m2);
 800a3be:	4839      	ldr	r0, [pc, #228]	; (800a4a4 <get_motor_current_ma+0x1c4>)
 800a3c0:	f7f9 ffcd 	bl	800435e <HAL_ADC_GetValue>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	83fb      	strh	r3, [r7, #30]
		float current_ma_f = ((((raw / 4095.0) * 3.0)/2.15) * 1000.0);
 800a3c8:	8bfb      	ldrh	r3, [r7, #30]
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7f6 f852 	bl	8000474 <__aeabi_i2d>
 800a3d0:	a32b      	add	r3, pc, #172	; (adr r3, 800a480 <get_motor_current_ma+0x1a0>)
 800a3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d6:	f7f6 f9e1 	bl	800079c <__aeabi_ddiv>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	460c      	mov	r4, r1
 800a3de:	4618      	mov	r0, r3
 800a3e0:	4621      	mov	r1, r4
 800a3e2:	f04f 0200 	mov.w	r2, #0
 800a3e6:	4b2b      	ldr	r3, [pc, #172]	; (800a494 <get_motor_current_ma+0x1b4>)
 800a3e8:	f7f6 f8ae 	bl	8000548 <__aeabi_dmul>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	460c      	mov	r4, r1
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	4621      	mov	r1, r4
 800a3f4:	a324      	add	r3, pc, #144	; (adr r3, 800a488 <get_motor_current_ma+0x1a8>)
 800a3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fa:	f7f6 f9cf 	bl	800079c <__aeabi_ddiv>
 800a3fe:	4603      	mov	r3, r0
 800a400:	460c      	mov	r4, r1
 800a402:	4618      	mov	r0, r3
 800a404:	4621      	mov	r1, r4
 800a406:	f04f 0200 	mov.w	r2, #0
 800a40a:	4b23      	ldr	r3, [pc, #140]	; (800a498 <get_motor_current_ma+0x1b8>)
 800a40c:	f7f6 f89c 	bl	8000548 <__aeabi_dmul>
 800a410:	4603      	mov	r3, r0
 800a412:	460c      	mov	r4, r1
 800a414:	4618      	mov	r0, r3
 800a416:	4621      	mov	r1, r4
 800a418:	f7f6 fb6e 	bl	8000af8 <__aeabi_d2f>
 800a41c:	4603      	mov	r3, r0
 800a41e:	61bb      	str	r3, [r7, #24]
		current_ma_filt[channel] = alpha * current_ma_filt[channel] + (1.0f-alpha) * current_ma_f;
 800a420:	79fb      	ldrb	r3, [r7, #7]
 800a422:	4a1e      	ldr	r2, [pc, #120]	; (800a49c <get_motor_current_ma+0x1bc>)
 800a424:	009b      	lsls	r3, r3, #2
 800a426:	4413      	add	r3, r2
 800a428:	ed93 7a00 	vldr	s14, [r3]
 800a42c:	4b1c      	ldr	r3, [pc, #112]	; (800a4a0 <get_motor_current_ma+0x1c0>)
 800a42e:	edd3 7a00 	vldr	s15, [r3]
 800a432:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a436:	4b1a      	ldr	r3, [pc, #104]	; (800a4a0 <get_motor_current_ma+0x1c0>)
 800a438:	edd3 7a00 	vldr	s15, [r3]
 800a43c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a440:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a444:	edd7 7a06 	vldr	s15, [r7, #24]
 800a448:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a44c:	79fb      	ldrb	r3, [r7, #7]
 800a44e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a452:	4a12      	ldr	r2, [pc, #72]	; (800a49c <get_motor_current_ma+0x1bc>)
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	4413      	add	r3, r2
 800a458:	edc3 7a00 	vstr	s15, [r3]
		uint32_t current_ma = (uint32_t) current_ma_filt[channel];
 800a45c:	79fb      	ldrb	r3, [r7, #7]
 800a45e:	4a0f      	ldr	r2, [pc, #60]	; (800a49c <get_motor_current_ma+0x1bc>)
 800a460:	009b      	lsls	r3, r3, #2
 800a462:	4413      	add	r3, r2
 800a464:	edd3 7a00 	vldr	s15, [r3]
 800a468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a46c:	ee17 3a90 	vmov	r3, s15
 800a470:	617b      	str	r3, [r7, #20]
		return current_ma;
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	e000      	b.n	800a478 <get_motor_current_ma+0x198>
	}
	else
	{
		return 0;
 800a476:	2300      	movs	r3, #0
	}
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3724      	adds	r7, #36	; 0x24
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd90      	pop	{r4, r7, pc}
 800a480:	00000000 	.word	0x00000000
 800a484:	40affe00 	.word	0x40affe00
 800a488:	33333333 	.word	0x33333333
 800a48c:	40013333 	.word	0x40013333
 800a490:	2000d4e0 	.word	0x2000d4e0
 800a494:	40080000 	.word	0x40080000
 800a498:	408f4000 	.word	0x408f4000
 800a49c:	2000d570 	.word	0x2000d570
 800a4a0:	20000014 	.word	0x20000014
 800a4a4:	2000d528 	.word	0x2000d528

0800a4a8 <unpack_can_message>:
 */

#include "can_messages.h"

 void unpack_can_message(can_message_id_t * msg)
 {
 800a4a8:	b480      	push	{r7}
 800a4aa:	b083      	sub	sp, #12
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
	msg->can_msg_type = ((msg->raw_id & CAN_MSG_TYPE_MASK) >> CAN_MSG_TYPE_SHIFT);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	0a9b      	lsrs	r3, r3, #10
 800a4b6:	f003 0201 	and.w	r2, r3, #1
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	605a      	str	r2, [r3, #4]
	msg->can_class = ((msg->raw_id & CAN_MSG_CLASS_MASK) >> CAN_MSG_CLASS_SHIFT);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	09db      	lsrs	r3, r3, #7
 800a4c4:	f003 0207 	and.w	r2, r3, #7
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	609a      	str	r2, [r3, #8]
	msg->can_index = ((msg->raw_id & CAN_MSG_INDEX_MASK) >> CAN_MSG_INDEX_SHIFT);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	091b      	lsrs	r3, r3, #4
 800a4d2:	f003 0207 	and.w	r2, r3, #7
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	60da      	str	r2, [r3, #12]
	msg->can_device = ((msg->raw_id & CAN_MSG_DEVICE_MASK) >> CAN_MSG_DEVICE_SHIFT);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f003 020f 	and.w	r2, r3, #15
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	611a      	str	r2, [r3, #16]
 }
 800a4e6:	bf00      	nop
 800a4e8:	370c      	adds	r7, #12
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr

0800a4f2 <pack_can_message>:

 void pack_can_message(can_message_id_t * msg)
 {
 800a4f2:	b480      	push	{r7}
 800a4f4:	b083      	sub	sp, #12
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
	msg->raw_id = ((msg->can_msg_type << CAN_MSG_TYPE_SHIFT) & CAN_MSG_TYPE_MASK);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	029b      	lsls	r3, r3, #10
 800a500:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	601a      	str	r2, [r3, #0]
	msg->raw_id |= ((msg->can_class << CAN_MSG_CLASS_SHIFT) & CAN_MSG_CLASS_MASK);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	01db      	lsls	r3, r3, #7
 800a512:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800a516:	431a      	orrs	r2, r3
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	601a      	str	r2, [r3, #0]
	msg->raw_id |= ((msg->can_index << CAN_MSG_INDEX_SHIFT) & CAN_MSG_INDEX_MASK);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	68db      	ldr	r3, [r3, #12]
 800a524:	011b      	lsls	r3, r3, #4
 800a526:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a52a:	431a      	orrs	r2, r3
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	601a      	str	r2, [r3, #0]
	msg->raw_id |= ((msg->can_device << CAN_MSG_DEVICE_SHIFT) & CAN_MSG_DEVICE_MASK);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	691b      	ldr	r3, [r3, #16]
 800a538:	f003 030f 	and.w	r3, r3, #15
 800a53c:	431a      	orrs	r2, r3
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	601a      	str	r2, [r3, #0]
 }
 800a542:	bf00      	nop
 800a544:	370c      	adds	r7, #12
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr
	...

0800a550 <get_motor_encoder_ticks>:
 static volatile int32_t ticks_offset[NUMBER_MOTORS] = {0};
 static volatile int32_t ticks_count[NUMBER_MOTORS] = {0};
 static volatile uint16_t last_cnt[NUMBER_MOTORS] = {0};

 int32_t get_motor_encoder_ticks(uint8_t channel)
 {
 800a550:	b480      	push	{r7}
 800a552:	b085      	sub	sp, #20
 800a554:	af00      	add	r7, sp, #0
 800a556:	4603      	mov	r3, r0
 800a558:	71fb      	strb	r3, [r7, #7]
	 if(channel == 0)
 800a55a:	79fb      	ldrb	r3, [r7, #7]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d143      	bne.n	800a5e8 <get_motor_encoder_ticks+0x98>
	 {
		 uint16_t current_count =  TIM1->CNT;
 800a560:	4b4c      	ldr	r3, [pc, #304]	; (800a694 <get_motor_encoder_ticks+0x144>)
 800a562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a564:	81bb      	strh	r3, [r7, #12]
		 // Check for rollover
		 if(current_count < 5000 && last_cnt[channel] > 60000)
 800a566:	89bb      	ldrh	r3, [r7, #12]
 800a568:	f241 3287 	movw	r2, #4999	; 0x1387
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d813      	bhi.n	800a598 <get_motor_encoder_ticks+0x48>
 800a570:	79fb      	ldrb	r3, [r7, #7]
 800a572:	4a49      	ldr	r2, [pc, #292]	; (800a698 <get_motor_encoder_ticks+0x148>)
 800a574:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a578:	b29b      	uxth	r3, r3
 800a57a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800a57e:	4293      	cmp	r3, r2
 800a580:	d90a      	bls.n	800a598 <get_motor_encoder_ticks+0x48>
		 {
			 // Overflow
			 ticks_offset[channel] += 65536;
 800a582:	79fb      	ldrb	r3, [r7, #7]
 800a584:	4a45      	ldr	r2, [pc, #276]	; (800a69c <get_motor_encoder_ticks+0x14c>)
 800a586:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a58a:	79fb      	ldrb	r3, [r7, #7]
 800a58c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800a590:	4942      	ldr	r1, [pc, #264]	; (800a69c <get_motor_encoder_ticks+0x14c>)
 800a592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a596:	e017      	b.n	800a5c8 <get_motor_encoder_ticks+0x78>
		 }
		 else if(current_count > 60000 && last_cnt[channel] < 5000)
 800a598:	89bb      	ldrh	r3, [r7, #12]
 800a59a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d912      	bls.n	800a5c8 <get_motor_encoder_ticks+0x78>
 800a5a2:	79fb      	ldrb	r3, [r7, #7]
 800a5a4:	4a3c      	ldr	r2, [pc, #240]	; (800a698 <get_motor_encoder_ticks+0x148>)
 800a5a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	f241 3287 	movw	r2, #4999	; 0x1387
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d809      	bhi.n	800a5c8 <get_motor_encoder_ticks+0x78>
		 {
			 // Underflow
			 ticks_offset[channel] -= 65536;
 800a5b4:	79fb      	ldrb	r3, [r7, #7]
 800a5b6:	4a39      	ldr	r2, [pc, #228]	; (800a69c <get_motor_encoder_ticks+0x14c>)
 800a5b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a5bc:	79fb      	ldrb	r3, [r7, #7]
 800a5be:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 800a5c2:	4936      	ldr	r1, [pc, #216]	; (800a69c <get_motor_encoder_ticks+0x14c>)
 800a5c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		 }

		 last_cnt[channel] = current_count;
 800a5c8:	79fb      	ldrb	r3, [r7, #7]
 800a5ca:	4933      	ldr	r1, [pc, #204]	; (800a698 <get_motor_encoder_ticks+0x148>)
 800a5cc:	89ba      	ldrh	r2, [r7, #12]
 800a5ce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		 ticks_count[channel] = current_count + ticks_offset[channel];
 800a5d2:	89b9      	ldrh	r1, [r7, #12]
 800a5d4:	79fb      	ldrb	r3, [r7, #7]
 800a5d6:	4a31      	ldr	r2, [pc, #196]	; (800a69c <get_motor_encoder_ticks+0x14c>)
 800a5d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a5dc:	79fb      	ldrb	r3, [r7, #7]
 800a5de:	440a      	add	r2, r1
 800a5e0:	492f      	ldr	r1, [pc, #188]	; (800a6a0 <get_motor_encoder_ticks+0x150>)
 800a5e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a5e6:	e04b      	b.n	800a680 <get_motor_encoder_ticks+0x130>
	 }
	 else if(channel == 1)
 800a5e8:	79fb      	ldrb	r3, [r7, #7]
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d143      	bne.n	800a676 <get_motor_encoder_ticks+0x126>
	 {
		 uint16_t current_count =  TIM3->CNT;
 800a5ee:	4b2d      	ldr	r3, [pc, #180]	; (800a6a4 <get_motor_encoder_ticks+0x154>)
 800a5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f2:	81fb      	strh	r3, [r7, #14]
		 // Check for rollover
		 if(current_count < 5000 && last_cnt[channel] > 60000)
 800a5f4:	89fb      	ldrh	r3, [r7, #14]
 800a5f6:	f241 3287 	movw	r2, #4999	; 0x1387
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d813      	bhi.n	800a626 <get_motor_encoder_ticks+0xd6>
 800a5fe:	79fb      	ldrb	r3, [r7, #7]
 800a600:	4a25      	ldr	r2, [pc, #148]	; (800a698 <get_motor_encoder_ticks+0x148>)
 800a602:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a606:	b29b      	uxth	r3, r3
 800a608:	f64e 2260 	movw	r2, #60000	; 0xea60
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d90a      	bls.n	800a626 <get_motor_encoder_ticks+0xd6>
		 {
			 // Overflow
			 ticks_offset[channel] += 65536;
 800a610:	79fb      	ldrb	r3, [r7, #7]
 800a612:	4a22      	ldr	r2, [pc, #136]	; (800a69c <get_motor_encoder_ticks+0x14c>)
 800a614:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a618:	79fb      	ldrb	r3, [r7, #7]
 800a61a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800a61e:	491f      	ldr	r1, [pc, #124]	; (800a69c <get_motor_encoder_ticks+0x14c>)
 800a620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a624:	e017      	b.n	800a656 <get_motor_encoder_ticks+0x106>
		 }
		 else if(current_count > 60000 && last_cnt[channel] < 5000)
 800a626:	89fb      	ldrh	r3, [r7, #14]
 800a628:	f64e 2260 	movw	r2, #60000	; 0xea60
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d912      	bls.n	800a656 <get_motor_encoder_ticks+0x106>
 800a630:	79fb      	ldrb	r3, [r7, #7]
 800a632:	4a19      	ldr	r2, [pc, #100]	; (800a698 <get_motor_encoder_ticks+0x148>)
 800a634:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a638:	b29b      	uxth	r3, r3
 800a63a:	f241 3287 	movw	r2, #4999	; 0x1387
 800a63e:	4293      	cmp	r3, r2
 800a640:	d809      	bhi.n	800a656 <get_motor_encoder_ticks+0x106>
		 {
			 // Underflow
			 ticks_offset[channel] -= 65536;
 800a642:	79fb      	ldrb	r3, [r7, #7]
 800a644:	4a15      	ldr	r2, [pc, #84]	; (800a69c <get_motor_encoder_ticks+0x14c>)
 800a646:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a64a:	79fb      	ldrb	r3, [r7, #7]
 800a64c:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 800a650:	4912      	ldr	r1, [pc, #72]	; (800a69c <get_motor_encoder_ticks+0x14c>)
 800a652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		 }

		 last_cnt[channel] = current_count;
 800a656:	79fb      	ldrb	r3, [r7, #7]
 800a658:	490f      	ldr	r1, [pc, #60]	; (800a698 <get_motor_encoder_ticks+0x148>)
 800a65a:	89fa      	ldrh	r2, [r7, #14]
 800a65c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		 ticks_count[channel] = current_count + ticks_offset[channel];
 800a660:	89f9      	ldrh	r1, [r7, #14]
 800a662:	79fb      	ldrb	r3, [r7, #7]
 800a664:	4a0d      	ldr	r2, [pc, #52]	; (800a69c <get_motor_encoder_ticks+0x14c>)
 800a666:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a66a:	79fb      	ldrb	r3, [r7, #7]
 800a66c:	440a      	add	r2, r1
 800a66e:	490c      	ldr	r1, [pc, #48]	; (800a6a0 <get_motor_encoder_ticks+0x150>)
 800a670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a674:	e004      	b.n	800a680 <get_motor_encoder_ticks+0x130>
	 }
	 else if(channel >= NUMBER_MOTORS)
 800a676:	79fb      	ldrb	r3, [r7, #7]
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d901      	bls.n	800a680 <get_motor_encoder_ticks+0x130>
	 {
		return 0;
 800a67c:	2300      	movs	r3, #0
 800a67e:	e003      	b.n	800a688 <get_motor_encoder_ticks+0x138>
	 }
	 return ticks_count[channel];
 800a680:	79fb      	ldrb	r3, [r7, #7]
 800a682:	4a07      	ldr	r2, [pc, #28]	; (800a6a0 <get_motor_encoder_ticks+0x150>)
 800a684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 }
 800a688:	4618      	mov	r0, r3
 800a68a:	3714      	adds	r7, #20
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr
 800a694:	40010000 	.word	0x40010000
 800a698:	2000d588 	.word	0x2000d588
 800a69c:	2000d578 	.word	0x2000d578
 800a6a0:	2000d580 	.word	0x2000d580
 800a6a4:	40000400 	.word	0x40000400

0800a6a8 <set_motor_encoder_ticks>:

 void set_motor_encoder_ticks(uint8_t channel, int32_t ticks)
 {
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	6039      	str	r1, [r7, #0]
 800a6b2:	71fb      	strb	r3, [r7, #7]
	if(channel >= NUMBER_MOTORS)
 800a6b4:	79fb      	ldrb	r3, [r7, #7]
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d80f      	bhi.n	800a6da <set_motor_encoder_ticks+0x32>
	{
		return;
	}
	// TODO check this
	ticks_offset[channel] += (ticks - ticks_count[channel]);
 800a6ba:	79fb      	ldrb	r3, [r7, #7]
 800a6bc:	4a0a      	ldr	r2, [pc, #40]	; (800a6e8 <set_motor_encoder_ticks+0x40>)
 800a6be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6c2:	683a      	ldr	r2, [r7, #0]
 800a6c4:	1ad1      	subs	r1, r2, r3
 800a6c6:	79fb      	ldrb	r3, [r7, #7]
 800a6c8:	4a08      	ldr	r2, [pc, #32]	; (800a6ec <set_motor_encoder_ticks+0x44>)
 800a6ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a6ce:	79fb      	ldrb	r3, [r7, #7]
 800a6d0:	440a      	add	r2, r1
 800a6d2:	4906      	ldr	r1, [pc, #24]	; (800a6ec <set_motor_encoder_ticks+0x44>)
 800a6d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a6d8:	e000      	b.n	800a6dc <set_motor_encoder_ticks+0x34>
		return;
 800a6da:	bf00      	nop
 }
 800a6dc:	370c      	adds	r7, #12
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop
 800a6e8:	2000d580 	.word	0x2000d580
 800a6ec:	2000d578 	.word	0x2000d578

0800a6f0 <precalc_inverse_trig>:
static float acos_div = 0.1;
static float atan_div = 0.1;
int32_t half_range = 10;

void precalc_inverse_trig(void)
{
 800a6f0:	b590      	push	{r4, r7, lr}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
	int32_t i;
	// acos domain from -1 to 1
	float darg = 2.0 / NUM_ELEMENTS_IT;
 800a6f6:	4b42      	ldr	r3, [pc, #264]	; (800a800 <precalc_inverse_trig+0x110>)
 800a6f8:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < NUM_ELEMENTS_IT; i++)
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	60fb      	str	r3, [r7, #12]
 800a6fe:	e031      	b.n	800a764 <precalc_inverse_trig+0x74>
	{
		float arg = -1.0 + i*darg;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	ee07 3a90 	vmov	s15, r3
 800a706:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a70a:	edd7 7a02 	vldr	s15, [r7, #8]
 800a70e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a712:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a716:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a71a:	edc7 7a00 	vstr	s15, [r7]
		acos_arg_table[i] = arg;
 800a71e:	4a39      	ldr	r2, [pc, #228]	; (800a804 <precalc_inverse_trig+0x114>)
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	009b      	lsls	r3, r3, #2
 800a724:	4413      	add	r3, r2
 800a726:	683a      	ldr	r2, [r7, #0]
 800a728:	601a      	str	r2, [r3, #0]
		acos_out_table[i] = acos(acos_arg_table[i]);
 800a72a:	4a36      	ldr	r2, [pc, #216]	; (800a804 <precalc_inverse_trig+0x114>)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	4413      	add	r3, r2
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4618      	mov	r0, r3
 800a736:	f7f5 feaf 	bl	8000498 <__aeabi_f2d>
 800a73a:	4603      	mov	r3, r0
 800a73c:	460c      	mov	r4, r1
 800a73e:	ec44 3b10 	vmov	d0, r3, r4
 800a742:	f002 fa83 	bl	800cc4c <acos>
 800a746:	ec54 3b10 	vmov	r3, r4, d0
 800a74a:	4618      	mov	r0, r3
 800a74c:	4621      	mov	r1, r4
 800a74e:	f7f6 f9d3 	bl	8000af8 <__aeabi_d2f>
 800a752:	4601      	mov	r1, r0
 800a754:	4a2c      	ldr	r2, [pc, #176]	; (800a808 <precalc_inverse_trig+0x118>)
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	4413      	add	r3, r2
 800a75c:	6019      	str	r1, [r3, #0]
	for(i = 0; i < NUM_ELEMENTS_IT; i++)
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	3301      	adds	r3, #1
 800a762:	60fb      	str	r3, [r7, #12]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a76a:	dbc9      	blt.n	800a700 <precalc_inverse_trig+0x10>
	}
	acos_div = 1.0f / (1.0f / (NUM_ELEMENTS_IT/2));
 800a76c:	4b27      	ldr	r3, [pc, #156]	; (800a80c <precalc_inverse_trig+0x11c>)
 800a76e:	4a28      	ldr	r2, [pc, #160]	; (800a810 <precalc_inverse_trig+0x120>)
 800a770:	601a      	str	r2, [r3, #0]
	half_range = NUM_ELEMENTS_IT / 2;
 800a772:	4b28      	ldr	r3, [pc, #160]	; (800a814 <precalc_inverse_trig+0x124>)
 800a774:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a778:	601a      	str	r2, [r3, #0]

	// atan domain all real numbers, but asymptotic to +-pi/2 outside of roughly +-20.0
	darg = (2.0 * ATAN_ARG_RANGE) / NUM_ELEMENTS_IT;
 800a77a:	4b27      	ldr	r3, [pc, #156]	; (800a818 <precalc_inverse_trig+0x128>)
 800a77c:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < NUM_ELEMENTS_IT; i++)
 800a77e:	2300      	movs	r3, #0
 800a780:	60fb      	str	r3, [r7, #12]
 800a782:	e031      	b.n	800a7e8 <precalc_inverse_trig+0xf8>
	{
		float arg = -ATAN_ARG_RANGE + i*darg;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	ee07 3a90 	vmov	s15, r3
 800a78a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a78e:	edd7 7a02 	vldr	s15, [r7, #8]
 800a792:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a796:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800a79a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a79e:	edc7 7a01 	vstr	s15, [r7, #4]
		atan_arg_table[i] = arg;
 800a7a2:	4a1e      	ldr	r2, [pc, #120]	; (800a81c <precalc_inverse_trig+0x12c>)
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	4413      	add	r3, r2
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	601a      	str	r2, [r3, #0]
		atan_out_table[i] = atan(atan_arg_table[i]);
 800a7ae:	4a1b      	ldr	r2, [pc, #108]	; (800a81c <precalc_inverse_trig+0x12c>)
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	009b      	lsls	r3, r3, #2
 800a7b4:	4413      	add	r3, r2
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f7f5 fe6d 	bl	8000498 <__aeabi_f2d>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	460c      	mov	r4, r1
 800a7c2:	ec44 3b10 	vmov	d0, r3, r4
 800a7c6:	f002 f897 	bl	800c8f8 <atan>
 800a7ca:	ec54 3b10 	vmov	r3, r4, d0
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	4621      	mov	r1, r4
 800a7d2:	f7f6 f991 	bl	8000af8 <__aeabi_d2f>
 800a7d6:	4601      	mov	r1, r0
 800a7d8:	4a11      	ldr	r2, [pc, #68]	; (800a820 <precalc_inverse_trig+0x130>)
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	009b      	lsls	r3, r3, #2
 800a7de:	4413      	add	r3, r2
 800a7e0:	6019      	str	r1, [r3, #0]
	for(i = 0; i < NUM_ELEMENTS_IT; i++)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	60fb      	str	r3, [r7, #12]
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a7ee:	dbc9      	blt.n	800a784 <precalc_inverse_trig+0x94>
	}
	atan_div = 1.0f / ((1.0f * ATAN_ARG_RANGE) / (NUM_ELEMENTS_IT/2));
 800a7f0:	4b0c      	ldr	r3, [pc, #48]	; (800a824 <precalc_inverse_trig+0x134>)
 800a7f2:	4a0d      	ldr	r2, [pc, #52]	; (800a828 <precalc_inverse_trig+0x138>)
 800a7f4:	601a      	str	r2, [r3, #0]
}
 800a7f6:	bf00      	nop
 800a7f8:	3714      	adds	r7, #20
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd90      	pop	{r4, r7, pc}
 800a7fe:	bf00      	nop
 800a800:	3a83126f 	.word	0x3a83126f
 800a804:	2000d58c 	.word	0x2000d58c
 800a808:	2000f4cc 	.word	0x2000f4cc
 800a80c:	20000018 	.word	0x20000018
 800a810:	4479ffff 	.word	0x4479ffff
 800a814:	20000020 	.word	0x20000020
 800a818:	3c23d70a 	.word	0x3c23d70a
 800a81c:	2001140c 	.word	0x2001140c
 800a820:	2001334c 	.word	0x2001334c
 800a824:	2000001c 	.word	0x2000001c
 800a828:	42c80000 	.word	0x42c80000

0800a82c <fast_acos>:

float fast_acos(float x)
{
 800a82c:	b590      	push	{r4, r7, lr}
 800a82e:	b087      	sub	sp, #28
 800a830:	af00      	add	r7, sp, #0
 800a832:	ed87 0a01 	vstr	s0, [r7, #4]
	// Wrap to +-1
	if(x > 1.0 || x < -1.0)
 800a836:	edd7 7a01 	vldr	s15, [r7, #4]
 800a83a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a83e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a846:	dc08      	bgt.n	800a85a <fast_acos+0x2e>
 800a848:	edd7 7a01 	vldr	s15, [r7, #4]
 800a84c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a850:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a858:	d510      	bpl.n	800a87c <fast_acos+0x50>
	{
		return acos(x); // TODO
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f7f5 fe1c 	bl	8000498 <__aeabi_f2d>
 800a860:	4603      	mov	r3, r0
 800a862:	460c      	mov	r4, r1
 800a864:	ec44 3b10 	vmov	d0, r3, r4
 800a868:	f002 f9f0 	bl	800cc4c <acos>
 800a86c:	ec54 3b10 	vmov	r3, r4, d0
 800a870:	4618      	mov	r0, r3
 800a872:	4621      	mov	r1, r4
 800a874:	f7f6 f940 	bl	8000af8 <__aeabi_d2f>
 800a878:	4603      	mov	r3, r0
 800a87a:	e025      	b.n	800a8c8 <fast_acos+0x9c>
	}
	// Fast search
	float temp = x * acos_div; // Divided by 1.0 / NUM_ELEMENTS/2. E.g. 0.5 /( 1.0/ 10 ) goes to 5, -0.5 goes to -5
 800a87c:	4b16      	ldr	r3, [pc, #88]	; (800a8d8 <fast_acos+0xac>)
 800a87e:	edd3 7a00 	vldr	s15, [r3]
 800a882:	ed97 7a01 	vldr	s14, [r7, #4]
 800a886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a88a:	edc7 7a04 	vstr	s15, [r7, #16]
	int32_t offset = half_range + (int32_t) temp;
 800a88e:	edd7 7a04 	vldr	s15, [r7, #16]
 800a892:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a896:	ee17 2a90 	vmov	r2, s15
 800a89a:	4b10      	ldr	r3, [pc, #64]	; (800a8dc <fast_acos+0xb0>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4413      	add	r3, r2
 800a8a0:	617b      	str	r3, [r7, #20]
	if(offset < 0){offset = 0;}
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	da01      	bge.n	800a8ac <fast_acos+0x80>
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	617b      	str	r3, [r7, #20]
	if(offset >= NUM_ELEMENTS_IT){offset = NUM_ELEMENTS_IT-1;}
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a8b2:	db02      	blt.n	800a8ba <fast_acos+0x8e>
 800a8b4:	f240 73cf 	movw	r3, #1999	; 0x7cf
 800a8b8:	617b      	str	r3, [r7, #20]
	float val = acos_out_table[offset];
 800a8ba:	4a09      	ldr	r2, [pc, #36]	; (800a8e0 <fast_acos+0xb4>)
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	4413      	add	r3, r2
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	60fb      	str	r3, [r7, #12]
	return val;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	ee07 3a90 	vmov	s15, r3
}
 800a8cc:	eeb0 0a67 	vmov.f32	s0, s15
 800a8d0:	371c      	adds	r7, #28
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd90      	pop	{r4, r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	20000018 	.word	0x20000018
 800a8dc:	20000020 	.word	0x20000020
 800a8e0:	2000f4cc 	.word	0x2000f4cc

0800a8e4 <fast_atan>:

float fast_atan(float x)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b087      	sub	sp, #28
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x > ATAN_ARG_RANGE)
 800a8ee:	edd7 7a01 	vldr	s15, [r7, #4]
 800a8f2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800a8f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a8fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8fe:	dd01      	ble.n	800a904 <fast_atan+0x20>
	{
		return M_PI_2; // TODO interpolate?
 800a900:	4b1d      	ldr	r3, [pc, #116]	; (800a978 <fast_atan+0x94>)
 800a902:	e030      	b.n	800a966 <fast_atan+0x82>
	}
	else if(x < -ATAN_ARG_RANGE)
 800a904:	edd7 7a01 	vldr	s15, [r7, #4]
 800a908:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800a90c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a914:	d501      	bpl.n	800a91a <fast_atan+0x36>
	{
		return -M_PI_2; // TODO interpolate?
 800a916:	4b19      	ldr	r3, [pc, #100]	; (800a97c <fast_atan+0x98>)
 800a918:	e025      	b.n	800a966 <fast_atan+0x82>
	}
	else
	{
		// Search through
		// Fast search
		float temp = x * atan_div; // Divided by RANGE / NUM_ELEMENTS/2. E.g. 10.0 /( 20.0/ 10 ) goes to 5, -10 goes to -5
 800a91a:	4b19      	ldr	r3, [pc, #100]	; (800a980 <fast_atan+0x9c>)
 800a91c:	edd3 7a00 	vldr	s15, [r3]
 800a920:	ed97 7a01 	vldr	s14, [r7, #4]
 800a924:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a928:	edc7 7a04 	vstr	s15, [r7, #16]
		int32_t offset = half_range + (int32_t) temp;
 800a92c:	edd7 7a04 	vldr	s15, [r7, #16]
 800a930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a934:	ee17 2a90 	vmov	r2, s15
 800a938:	4b12      	ldr	r3, [pc, #72]	; (800a984 <fast_atan+0xa0>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4413      	add	r3, r2
 800a93e:	617b      	str	r3, [r7, #20]
		if(offset < 0){offset = 0;}
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	2b00      	cmp	r3, #0
 800a944:	da01      	bge.n	800a94a <fast_atan+0x66>
 800a946:	2300      	movs	r3, #0
 800a948:	617b      	str	r3, [r7, #20]
		if(offset >= NUM_ELEMENTS_IT){offset = NUM_ELEMENTS_IT-1;}
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a950:	db02      	blt.n	800a958 <fast_atan+0x74>
 800a952:	f240 73cf 	movw	r3, #1999	; 0x7cf
 800a956:	617b      	str	r3, [r7, #20]
		float val = atan_out_table[offset];
 800a958:	4a0b      	ldr	r2, [pc, #44]	; (800a988 <fast_atan+0xa4>)
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	009b      	lsls	r3, r3, #2
 800a95e:	4413      	add	r3, r2
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	60fb      	str	r3, [r7, #12]
		return val;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	ee07 3a90 	vmov	s15, r3
	}
}
 800a96a:	eeb0 0a67 	vmov.f32	s0, s15
 800a96e:	371c      	adds	r7, #28
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr
 800a978:	3fc90fdb 	.word	0x3fc90fdb
 800a97c:	bfc90fdb 	.word	0xbfc90fdb
 800a980:	2000001c 	.word	0x2000001c
 800a984:	20000020 	.word	0x20000020
 800a988:	2001334c 	.word	0x2001334c

0800a98c <calculate_impedance_control>:
 #include "inverse_kinematics.h"

 #include "impedance_controller.h"

 void calculate_impedance_control(const impedance_control_params_t params, const leg_ik_t leg, const pos_joint_space_t current_pos, const pos_cartesian_t desired_pos, impedance_control_cmds_t * cmds)
 {
 800a98c:	b084      	sub	sp, #16
 800a98e:	b590      	push	{r4, r7, lr}
 800a990:	b095      	sub	sp, #84	; 0x54
 800a992:	af00      	add	r7, sp, #0
 800a994:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800a998:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a99c:	eeb0 4a40 	vmov.f32	s8, s0
 800a9a0:	eef0 4a60 	vmov.f32	s9, s1
 800a9a4:	eeb0 5a41 	vmov.f32	s10, s2
 800a9a8:	eef0 5a61 	vmov.f32	s11, s3
 800a9ac:	eeb0 6a42 	vmov.f32	s12, s4
 800a9b0:	eef0 6a62 	vmov.f32	s13, s5
 800a9b4:	eeb0 7a43 	vmov.f32	s14, s6
 800a9b8:	eef0 7a63 	vmov.f32	s15, s7
 800a9bc:	ed87 4a04 	vstr	s8, [r7, #16]
 800a9c0:	edc7 4a05 	vstr	s9, [r7, #20]
 800a9c4:	ed87 5a06 	vstr	s10, [r7, #24]
 800a9c8:	edc7 5a07 	vstr	s11, [r7, #28]
 800a9cc:	ed87 6a02 	vstr	s12, [r7, #8]
 800a9d0:	edc7 6a03 	vstr	s13, [r7, #12]
 800a9d4:	ed87 7a00 	vstr	s14, [r7]
 800a9d8:	edc7 7a01 	vstr	s15, [r7, #4]
	static pos_cartesian_t des_cart_speed_mps;
	pos_cartesian_t current_pos_cart;
	jacobian_t jac;

	//calculate_fk(&leg, &current_pos_cart, current_pos);
	calculate_fk_and_jacobian(&leg, &current_pos_cart, current_pos, &jac);
 800a9dc:	f107 0220 	add.w	r2, r7, #32
 800a9e0:	ed97 7a02 	vldr	s14, [r7, #8]
 800a9e4:	edd7 7a03 	vldr	s15, [r7, #12]
 800a9e8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800a9ec:	f107 0310 	add.w	r3, r7, #16
 800a9f0:	eeb0 0a47 	vmov.f32	s0, s14
 800a9f4:	eef0 0a67 	vmov.f32	s1, s15
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f000 f93f 	bl	800ac7c <calculate_fk_and_jacobian>
	last_des_pos_cart.x = desired_pos.x;
	last_des_pos_cart.y = desired_pos.y;
	last_time = current_time;*/

	// Calculate desired force from springs
	float fx = params.k_eff_x * (desired_pos.x - current_pos_cart.x); // In N
 800a9fe:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800aa02:	edd7 6a00 	vldr	s13, [r7]
 800aa06:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800aa0a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800aa0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa12:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	float fy = params.k_eff_y * (desired_pos.y - current_pos_cart.y);
 800aa16:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800aa1a:	edd7 6a01 	vldr	s13, [r7, #4]
 800aa1e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800aa22:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800aa26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa2a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	// Damping
	//fx += params.c_eff_x * (act_cart_speed_mps.x); // TODO use relative
	//fy += params.c_eff_y * (act_cart_speed_mps.y);

	// Calculate desired torque, tau_d = J^T * f_d
	float tau_hip = fx*jac.j_00 + fy*jac.j_10; // In N * m
 800aa2e:	ed97 7a08 	vldr	s14, [r7, #32]
 800aa32:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800aa36:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa3a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800aa3e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800aa42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aa46:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa4a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	float tau_knee = fx*jac.j_01 + fy*jac.j_11;
 800aa4e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800aa52:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800aa56:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa5a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800aa5e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800aa62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aa66:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa6a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	float j_11_inv = det_inv * jac.j_00;
	float tau_hip = fx*j_00_inv + fy*j_01_inv; // In N * m
	float tau_knee = fx*j_10_inv + fy*j_11_inv;*/

	// Account for gear ratio
	tau_hip = tau_hip / params.gear_ratio;
 800aa6e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800aa72:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800aa76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa7a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	tau_knee = tau_knee / params.gear_ratio;
 800aa7e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800aa82:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800aa86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa8a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

	// Calculate desired current to meet torque
	float current_hip = params.gain_current_per_torque * tau_hip;
 800aa8e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800aa92:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800aa96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa9a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float current_knee = params.gain_current_per_torque * tau_knee;
 800aa9e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800aaa2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800aaa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaaa:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	// Current controller outside of here
	cmds->hip_cmd_ma = current_hip * 1000.0;
 800aaae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800aab0:	f7f5 fcf2 	bl	8000498 <__aeabi_f2d>
 800aab4:	f04f 0200 	mov.w	r2, #0
 800aab8:	4b11      	ldr	r3, [pc, #68]	; (800ab00 <calculate_impedance_control+0x174>)
 800aaba:	f7f5 fd45 	bl	8000548 <__aeabi_dmul>
 800aabe:	4603      	mov	r3, r0
 800aac0:	460c      	mov	r4, r1
 800aac2:	4618      	mov	r0, r3
 800aac4:	4621      	mov	r1, r4
 800aac6:	f7f5 ffef 	bl	8000aa8 <__aeabi_d2iz>
 800aaca:	4602      	mov	r2, r0
 800aacc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aace:	601a      	str	r2, [r3, #0]
	cmds->knee_cmd_ma = current_knee * 1000.0;
 800aad0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aad2:	f7f5 fce1 	bl	8000498 <__aeabi_f2d>
 800aad6:	f04f 0200 	mov.w	r2, #0
 800aada:	4b09      	ldr	r3, [pc, #36]	; (800ab00 <calculate_impedance_control+0x174>)
 800aadc:	f7f5 fd34 	bl	8000548 <__aeabi_dmul>
 800aae0:	4603      	mov	r3, r0
 800aae2:	460c      	mov	r4, r1
 800aae4:	4618      	mov	r0, r3
 800aae6:	4621      	mov	r1, r4
 800aae8:	f7f5 ffde 	bl	8000aa8 <__aeabi_d2iz>
 800aaec:	4602      	mov	r2, r0
 800aaee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aaf0:	605a      	str	r2, [r3, #4]
 }
 800aaf2:	bf00      	nop
 800aaf4:	3754      	adds	r7, #84	; 0x54
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800aafc:	b004      	add	sp, #16
 800aafe:	4770      	bx	lr
 800ab00:	408f4000 	.word	0x408f4000

0800ab04 <init_leg_precalcs>:
 #include <math.h>
 #include "fast_inverse_trig.h"
 #include "arm_math.h"

 void init_leg_precalcs(leg_ik_t * leg)
 {
 800ab04:	b5b0      	push	{r4, r5, r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
	leg->alpha_1 = -(leg->calf_length_m*leg->calf_length_m + leg->thigh_length_m*leg->thigh_length_m);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	ed93 7a01 	vldr	s14, [r3, #4]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	edd3 7a01 	vldr	s15, [r3, #4]
 800ab18:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	edd3 6a00 	vldr	s13, [r3]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	edd3 7a00 	vldr	s15, [r3]
 800ab28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ab2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab30:	eef1 7a67 	vneg.f32	s15, s15
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	edc3 7a02 	vstr	s15, [r3, #8]
	leg->alpha_2 = 1.0 / (2.0 * leg->calf_length_m * leg->thigh_length_m);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7f5 fcaa 	bl	8000498 <__aeabi_f2d>
 800ab44:	4602      	mov	r2, r0
 800ab46:	460b      	mov	r3, r1
 800ab48:	f7f5 fb48 	bl	80001dc <__adddf3>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	460c      	mov	r4, r1
 800ab50:	4625      	mov	r5, r4
 800ab52:	461c      	mov	r4, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f7f5 fc9d 	bl	8000498 <__aeabi_f2d>
 800ab5e:	4602      	mov	r2, r0
 800ab60:	460b      	mov	r3, r1
 800ab62:	4620      	mov	r0, r4
 800ab64:	4629      	mov	r1, r5
 800ab66:	f7f5 fcef 	bl	8000548 <__aeabi_dmul>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	460c      	mov	r4, r1
 800ab6e:	461a      	mov	r2, r3
 800ab70:	4623      	mov	r3, r4
 800ab72:	f04f 0000 	mov.w	r0, #0
 800ab76:	4908      	ldr	r1, [pc, #32]	; (800ab98 <init_leg_precalcs+0x94>)
 800ab78:	f7f5 fe10 	bl	800079c <__aeabi_ddiv>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	460c      	mov	r4, r1
 800ab80:	4618      	mov	r0, r3
 800ab82:	4621      	mov	r1, r4
 800ab84:	f7f5 ffb8 	bl	8000af8 <__aeabi_d2f>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	60da      	str	r2, [r3, #12]
 }
 800ab8e:	bf00      	nop
 800ab90:	3708      	adds	r7, #8
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bdb0      	pop	{r4, r5, r7, pc}
 800ab96:	bf00      	nop
 800ab98:	3ff00000 	.word	0x3ff00000

0800ab9c <calculate_ik>:

 void calculate_ik(leg_ik_t * leg, pos_joint_space_t * joint_angles, const pos_cartesian_t pos)
 {
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	ed2d 8b04 	vpush	{d8-d9}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	60b9      	str	r1, [r7, #8]
 800abaa:	eeb0 7a40 	vmov.f32	s14, s0
 800abae:	eef0 7a60 	vmov.f32	s15, s1
 800abb2:	ed87 7a00 	vstr	s14, [r7]
 800abb6:	edc7 7a01 	vstr	s15, [r7, #4]
	joint_angles->knee_angle_rad = fast_acos(leg->alpha_2 * (pos.x*pos.x + pos.y*pos.y + leg->alpha_1) );
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	ed93 7a03 	vldr	s14, [r3, #12]
 800abc0:	edd7 6a00 	vldr	s13, [r7]
 800abc4:	edd7 7a00 	vldr	s15, [r7]
 800abc8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800abcc:	ed97 6a01 	vldr	s12, [r7, #4]
 800abd0:	edd7 7a01 	vldr	s15, [r7, #4]
 800abd4:	ee66 7a27 	vmul.f32	s15, s12, s15
 800abd8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	edd3 7a02 	vldr	s15, [r3, #8]
 800abe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abea:	eeb0 0a67 	vmov.f32	s0, s15
 800abee:	f7ff fe1d 	bl	800a82c <fast_acos>
 800abf2:	eef0 7a40 	vmov.f32	s15, s0
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	edc3 7a01 	vstr	s15, [r3, #4]
	joint_angles->thigh_angle_rad = fast_atan( pos.y / pos.x ) - fast_atan( (leg->calf_length_m * arm_sin_f32(joint_angles->knee_angle_rad)) / (leg->thigh_length_m + leg->calf_length_m * arm_cos_f32(joint_angles->knee_angle_rad)) );
 800abfc:	ed97 7a01 	vldr	s14, [r7, #4]
 800ac00:	edd7 7a00 	vldr	s15, [r7]
 800ac04:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ac08:	eeb0 0a66 	vmov.f32	s0, s13
 800ac0c:	f7ff fe6a 	bl	800a8e4 <fast_atan>
 800ac10:	eef0 9a40 	vmov.f32	s19, s0
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	ed93 8a01 	vldr	s16, [r3, #4]
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	edd3 7a01 	vldr	s15, [r3, #4]
 800ac20:	eeb0 0a67 	vmov.f32	s0, s15
 800ac24:	f001 fda6 	bl	800c774 <arm_sin_f32>
 800ac28:	eef0 7a40 	vmov.f32	s15, s0
 800ac2c:	ee28 8a27 	vmul.f32	s16, s16, s15
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	edd3 8a00 	vldr	s17, [r3]
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	ed93 9a01 	vldr	s18, [r3, #4]
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	edd3 7a01 	vldr	s15, [r3, #4]
 800ac42:	eeb0 0a67 	vmov.f32	s0, s15
 800ac46:	f001 fdd9 	bl	800c7fc <arm_cos_f32>
 800ac4a:	eef0 7a40 	vmov.f32	s15, s0
 800ac4e:	ee69 7a27 	vmul.f32	s15, s18, s15
 800ac52:	ee78 7aa7 	vadd.f32	s15, s17, s15
 800ac56:	ee88 7a27 	vdiv.f32	s14, s16, s15
 800ac5a:	eeb0 0a47 	vmov.f32	s0, s14
 800ac5e:	f7ff fe41 	bl	800a8e4 <fast_atan>
 800ac62:	eef0 7a40 	vmov.f32	s15, s0
 800ac66:	ee79 7ae7 	vsub.f32	s15, s19, s15
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	edc3 7a00 	vstr	s15, [r3]
 }
 800ac70:	bf00      	nop
 800ac72:	3710      	adds	r7, #16
 800ac74:	46bd      	mov	sp, r7
 800ac76:	ecbd 8b04 	vpop	{d8-d9}
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <calculate_fk_and_jacobian>:
	pos->x = leg->thigh_length_m * arm_cos_f32(joint_angles.thigh_angle_rad) + leg->calf_length_m * arm_cos_f32(joint_angles.thigh_angle_rad + joint_angles.knee_angle_rad);
	pos->y = leg->thigh_length_m * arm_sin_f32(joint_angles.thigh_angle_rad) + leg->calf_length_m * arm_sin_f32(joint_angles.thigh_angle_rad + joint_angles.knee_angle_rad);
 }

 void calculate_fk_and_jacobian(leg_ik_t * leg, pos_cartesian_t * pos, const pos_joint_space_t joint_angles, jacobian_t * j)
 {
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b08a      	sub	sp, #40	; 0x28
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6178      	str	r0, [r7, #20]
 800ac84:	6139      	str	r1, [r7, #16]
 800ac86:	eeb0 7a40 	vmov.f32	s14, s0
 800ac8a:	eef0 7a60 	vmov.f32	s15, s1
 800ac8e:	607a      	str	r2, [r7, #4]
 800ac90:	ed87 7a02 	vstr	s14, [r7, #8]
 800ac94:	edc7 7a03 	vstr	s15, [r7, #12]
	// Optimization, avoid calculating sin and cos functions twice
	float ct = arm_cos_f32(joint_angles.thigh_angle_rad);
 800ac98:	edd7 7a02 	vldr	s15, [r7, #8]
 800ac9c:	eeb0 0a67 	vmov.f32	s0, s15
 800aca0:	f001 fdac 	bl	800c7fc <arm_cos_f32>
 800aca4:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float st = arm_sin_f32(joint_angles.thigh_angle_rad);
 800aca8:	edd7 7a02 	vldr	s15, [r7, #8]
 800acac:	eeb0 0a67 	vmov.f32	s0, s15
 800acb0:	f001 fd60 	bl	800c774 <arm_sin_f32>
 800acb4:	ed87 0a08 	vstr	s0, [r7, #32]
	float ctk = arm_cos_f32(joint_angles.thigh_angle_rad + joint_angles.knee_angle_rad);
 800acb8:	ed97 7a02 	vldr	s14, [r7, #8]
 800acbc:	edd7 7a03 	vldr	s15, [r7, #12]
 800acc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800acc4:	eeb0 0a67 	vmov.f32	s0, s15
 800acc8:	f001 fd98 	bl	800c7fc <arm_cos_f32>
 800accc:	ed87 0a07 	vstr	s0, [r7, #28]
	float stk = arm_sin_f32(joint_angles.thigh_angle_rad + joint_angles.knee_angle_rad);
 800acd0:	ed97 7a02 	vldr	s14, [r7, #8]
 800acd4:	edd7 7a03 	vldr	s15, [r7, #12]
 800acd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800acdc:	eeb0 0a67 	vmov.f32	s0, s15
 800ace0:	f001 fd48 	bl	800c774 <arm_sin_f32>
 800ace4:	ed87 0a06 	vstr	s0, [r7, #24]

	pos->x = leg->thigh_length_m * ct + leg->calf_length_m * ctk;
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	ed93 7a00 	vldr	s14, [r3]
 800acee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800acf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	edd3 6a01 	vldr	s13, [r3, #4]
 800acfc:	edd7 7a07 	vldr	s15, [r7, #28]
 800ad00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ad04:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	edc3 7a00 	vstr	s15, [r3]
	pos->y = leg->thigh_length_m * st + leg->calf_length_m * stk;
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	ed93 7a00 	vldr	s14, [r3]
 800ad14:	edd7 7a08 	vldr	s15, [r7, #32]
 800ad18:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	edd3 6a01 	vldr	s13, [r3, #4]
 800ad22:	edd7 7a06 	vldr	s15, [r7, #24]
 800ad26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ad2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	edc3 7a01 	vstr	s15, [r3, #4]

	j->j_01 = -leg->calf_length_m * stk;
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	edd3 7a01 	vldr	s15, [r3, #4]
 800ad3a:	eeb1 7a67 	vneg.f32	s14, s15
 800ad3e:	edd7 7a06 	vldr	s15, [r7, #24]
 800ad42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	edc3 7a01 	vstr	s15, [r3, #4]
	j->j_00 = -leg->thigh_length_m * ct + j->j_01;
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	edd3 7a00 	vldr	s15, [r3]
 800ad52:	eeb1 7a67 	vneg.f32	s14, s15
 800ad56:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ad5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	edd3 7a01 	vldr	s15, [r3, #4]
 800ad64:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	edc3 7a00 	vstr	s15, [r3]
	j->j_11 = leg->calf_length_m * ctk;
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	ed93 7a01 	vldr	s14, [r3, #4]
 800ad74:	edd7 7a07 	vldr	s15, [r7, #28]
 800ad78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	edc3 7a03 	vstr	s15, [r3, #12]
	j->j_10 = leg->thigh_length_m * ct + j->j_11;
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	ed93 7a00 	vldr	s14, [r3]
 800ad88:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ad8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	edd3 7a03 	vldr	s15, [r3, #12]
 800ad96:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	edc3 7a02 	vstr	s15, [r3, #8]
 }
 800ada0:	bf00      	nop
 800ada2:	3728      	adds	r7, #40	; 0x28
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <motion_primitive_init>:
 static volatile uint8_t primitive_index = 0;
 static uint32_t time_offset = 0;
 static primitive_t primitives[NUMBER_PRIMITIVES];

 void motion_primitive_init(void)
 {
 800ada8:	b480      	push	{r7}
 800adaa:	af00      	add	r7, sp, #0

	// t_part must be always increasing, never > 1.0. Must be a cyclical motion primitive

	// Slow trot walk
	// Triangular, 1Hz, roughly 3X longer on ground than in air, front slightly forward of hip
	primitives[0].num_keyframes = 3;
 800adac:	4bb6      	ldr	r3, [pc, #728]	; (800b088 <motion_primitive_init+0x2e0>)
 800adae:	2203      	movs	r2, #3
 800adb0:	701a      	strb	r2, [r3, #0]
	primitives[0].tau = 2.0;
 800adb2:	4bb5      	ldr	r3, [pc, #724]	; (800b088 <motion_primitive_init+0x2e0>)
 800adb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800adb8:	615a      	str	r2, [r3, #20]
	primitives[0].t_offset = 0.0;
 800adba:	4bb3      	ldr	r3, [pc, #716]	; (800b088 <motion_primitive_init+0x2e0>)
 800adbc:	f04f 0200 	mov.w	r2, #0
 800adc0:	619a      	str	r2, [r3, #24]
	primitives[0].invert = 0;
 800adc2:	4bb1      	ldr	r3, [pc, #708]	; (800b088 <motion_primitive_init+0x2e0>)
 800adc4:	2200      	movs	r2, #0
 800adc6:	705a      	strb	r2, [r3, #1]
	primitives[0].time_reverse = 0;
 800adc8:	4baf      	ldr	r3, [pc, #700]	; (800b088 <motion_primitive_init+0x2e0>)
 800adca:	2200      	movs	r2, #0
 800adcc:	709a      	strb	r2, [r3, #2]
	primitives[0].x_offset_m = 0;
 800adce:	4bae      	ldr	r3, [pc, #696]	; (800b088 <motion_primitive_init+0x2e0>)
 800add0:	f04f 0200 	mov.w	r2, #0
 800add4:	605a      	str	r2, [r3, #4]
	primitives[0].y_offset_m = 0;
 800add6:	4bac      	ldr	r3, [pc, #688]	; (800b088 <motion_primitive_init+0x2e0>)
 800add8:	f04f 0200 	mov.w	r2, #0
 800addc:	609a      	str	r2, [r3, #8]
	primitives[0].x_scale = 1.0;
 800adde:	4baa      	ldr	r3, [pc, #680]	; (800b088 <motion_primitive_init+0x2e0>)
 800ade0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ade4:	60da      	str	r2, [r3, #12]
	primitives[0].y_scale = 1.0;
 800ade6:	4ba8      	ldr	r3, [pc, #672]	; (800b088 <motion_primitive_init+0x2e0>)
 800ade8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800adec:	611a      	str	r2, [r3, #16]

	primitives[0].frames[0].t_part = 0.0;
 800adee:	4ba6      	ldr	r3, [pc, #664]	; (800b088 <motion_primitive_init+0x2e0>)
 800adf0:	f04f 0200 	mov.w	r2, #0
 800adf4:	625a      	str	r2, [r3, #36]	; 0x24
	primitives[0].frames[0].x = 0.105;
 800adf6:	4ba4      	ldr	r3, [pc, #656]	; (800b088 <motion_primitive_init+0x2e0>)
 800adf8:	4aa4      	ldr	r2, [pc, #656]	; (800b08c <motion_primitive_init+0x2e4>)
 800adfa:	61da      	str	r2, [r3, #28]
	primitives[0].frames[0].y = 0.01;
 800adfc:	4ba2      	ldr	r3, [pc, #648]	; (800b088 <motion_primitive_init+0x2e0>)
 800adfe:	4aa4      	ldr	r2, [pc, #656]	; (800b090 <motion_primitive_init+0x2e8>)
 800ae00:	621a      	str	r2, [r3, #32]

	primitives[0].frames[1].t_part = 0.75;
 800ae02:	4ba1      	ldr	r3, [pc, #644]	; (800b088 <motion_primitive_init+0x2e0>)
 800ae04:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 800ae08:	631a      	str	r2, [r3, #48]	; 0x30
	primitives[0].frames[1].x = 0.105;
 800ae0a:	4b9f      	ldr	r3, [pc, #636]	; (800b088 <motion_primitive_init+0x2e0>)
 800ae0c:	4a9f      	ldr	r2, [pc, #636]	; (800b08c <motion_primitive_init+0x2e4>)
 800ae0e:	629a      	str	r2, [r3, #40]	; 0x28
	primitives[0].frames[1].y = -0.05;
 800ae10:	4b9d      	ldr	r3, [pc, #628]	; (800b088 <motion_primitive_init+0x2e0>)
 800ae12:	4aa0      	ldr	r2, [pc, #640]	; (800b094 <motion_primitive_init+0x2ec>)
 800ae14:	62da      	str	r2, [r3, #44]	; 0x2c

	primitives[0].frames[2].t_part = 0.875;
 800ae16:	4b9c      	ldr	r3, [pc, #624]	; (800b088 <motion_primitive_init+0x2e0>)
 800ae18:	4a9f      	ldr	r2, [pc, #636]	; (800b098 <motion_primitive_init+0x2f0>)
 800ae1a:	63da      	str	r2, [r3, #60]	; 0x3c
	primitives[0].frames[2].x = 0.06;
 800ae1c:	4b9a      	ldr	r3, [pc, #616]	; (800b088 <motion_primitive_init+0x2e0>)
 800ae1e:	4a9f      	ldr	r2, [pc, #636]	; (800b09c <motion_primitive_init+0x2f4>)
 800ae20:	635a      	str	r2, [r3, #52]	; 0x34
	primitives[0].frames[2].y = -0.02;
 800ae22:	4b99      	ldr	r3, [pc, #612]	; (800b088 <motion_primitive_init+0x2e0>)
 800ae24:	4a9e      	ldr	r2, [pc, #632]	; (800b0a0 <motion_primitive_init+0x2f8>)
 800ae26:	639a      	str	r2, [r3, #56]	; 0x38

	// Fast trot walk
	// Mostly triangular, in air roughly same as on ground, rear slightly backward of hip
	primitives[1].num_keyframes = 4;
 800ae28:	4b97      	ldr	r3, [pc, #604]	; (800b088 <motion_primitive_init+0x2e0>)
 800ae2a:	2204      	movs	r2, #4
 800ae2c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	primitives[1].tau = 2.0;
 800ae30:	4b95      	ldr	r3, [pc, #596]	; (800b088 <motion_primitive_init+0x2e0>)
 800ae32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ae36:	679a      	str	r2, [r3, #120]	; 0x78
	primitives[1].t_offset = 0.0;
 800ae38:	4b93      	ldr	r3, [pc, #588]	; (800b088 <motion_primitive_init+0x2e0>)
 800ae3a:	f04f 0200 	mov.w	r2, #0
 800ae3e:	67da      	str	r2, [r3, #124]	; 0x7c
	primitives[1].invert = 0;
 800ae40:	4b91      	ldr	r3, [pc, #580]	; (800b088 <motion_primitive_init+0x2e0>)
 800ae42:	2200      	movs	r2, #0
 800ae44:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	primitives[1].time_reverse = 0;
 800ae48:	4b8f      	ldr	r3, [pc, #572]	; (800b088 <motion_primitive_init+0x2e0>)
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	primitives[1].x_offset_m = 0;
 800ae50:	4b8d      	ldr	r3, [pc, #564]	; (800b088 <motion_primitive_init+0x2e0>)
 800ae52:	f04f 0200 	mov.w	r2, #0
 800ae56:	669a      	str	r2, [r3, #104]	; 0x68
	primitives[1].y_offset_m = 0;
 800ae58:	4b8b      	ldr	r3, [pc, #556]	; (800b088 <motion_primitive_init+0x2e0>)
 800ae5a:	f04f 0200 	mov.w	r2, #0
 800ae5e:	66da      	str	r2, [r3, #108]	; 0x6c
	primitives[1].x_scale = 1.0;
 800ae60:	4b89      	ldr	r3, [pc, #548]	; (800b088 <motion_primitive_init+0x2e0>)
 800ae62:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ae66:	671a      	str	r2, [r3, #112]	; 0x70
	primitives[1].y_scale = 1.0;
 800ae68:	4b87      	ldr	r3, [pc, #540]	; (800b088 <motion_primitive_init+0x2e0>)
 800ae6a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ae6e:	675a      	str	r2, [r3, #116]	; 0x74

	primitives[1].frames[0].t_part = 0.0;
 800ae70:	4b85      	ldr	r3, [pc, #532]	; (800b088 <motion_primitive_init+0x2e0>)
 800ae72:	f04f 0200 	mov.w	r2, #0
 800ae76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	primitives[1].frames[0].x = 0.09;
 800ae7a:	4b83      	ldr	r3, [pc, #524]	; (800b088 <motion_primitive_init+0x2e0>)
 800ae7c:	4a89      	ldr	r2, [pc, #548]	; (800b0a4 <motion_primitive_init+0x2fc>)
 800ae7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	primitives[1].frames[0].y = 0.06;
 800ae82:	4b81      	ldr	r3, [pc, #516]	; (800b088 <motion_primitive_init+0x2e0>)
 800ae84:	4a85      	ldr	r2, [pc, #532]	; (800b09c <motion_primitive_init+0x2f4>)
 800ae86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	primitives[1].frames[1].t_part = 0.5;
 800ae8a:	4b7f      	ldr	r3, [pc, #508]	; (800b088 <motion_primitive_init+0x2e0>)
 800ae8c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800ae90:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	primitives[1].frames[1].x = 0.09;
 800ae94:	4b7c      	ldr	r3, [pc, #496]	; (800b088 <motion_primitive_init+0x2e0>)
 800ae96:	4a83      	ldr	r2, [pc, #524]	; (800b0a4 <motion_primitive_init+0x2fc>)
 800ae98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	primitives[1].frames[1].y = -0.01;
 800ae9c:	4b7a      	ldr	r3, [pc, #488]	; (800b088 <motion_primitive_init+0x2e0>)
 800ae9e:	4a82      	ldr	r2, [pc, #520]	; (800b0a8 <motion_primitive_init+0x300>)
 800aea0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	primitives[1].frames[2].t_part = 0.75;
 800aea4:	4b78      	ldr	r3, [pc, #480]	; (800b088 <motion_primitive_init+0x2e0>)
 800aea6:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 800aeaa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	primitives[1].frames[2].x = 0.05;
 800aeae:	4b76      	ldr	r3, [pc, #472]	; (800b088 <motion_primitive_init+0x2e0>)
 800aeb0:	4a7e      	ldr	r2, [pc, #504]	; (800b0ac <motion_primitive_init+0x304>)
 800aeb2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	primitives[1].frames[2].y = 0.02;
 800aeb6:	4b74      	ldr	r3, [pc, #464]	; (800b088 <motion_primitive_init+0x2e0>)
 800aeb8:	4a7d      	ldr	r2, [pc, #500]	; (800b0b0 <motion_primitive_init+0x308>)
 800aeba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	primitives[1].frames[3].t_part = 0.95;
 800aebe:	4b72      	ldr	r3, [pc, #456]	; (800b088 <motion_primitive_init+0x2e0>)
 800aec0:	4a7c      	ldr	r2, [pc, #496]	; (800b0b4 <motion_primitive_init+0x30c>)
 800aec2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	primitives[1].frames[3].x = 0.08;
 800aec6:	4b70      	ldr	r3, [pc, #448]	; (800b088 <motion_primitive_init+0x2e0>)
 800aec8:	4a7b      	ldr	r2, [pc, #492]	; (800b0b8 <motion_primitive_init+0x310>)
 800aeca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	primitives[1].frames[3].y = 0.065;
 800aece:	4b6e      	ldr	r3, [pc, #440]	; (800b088 <motion_primitive_init+0x2e0>)
 800aed0:	4a7a      	ldr	r2, [pc, #488]	; (800b0bc <motion_primitive_init+0x314>)
 800aed2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

	// Bound
	// Mostly triangular, in air roughly same as on ground, centered on hip
	primitives[2].num_keyframes = 4;
 800aed6:	4b6c      	ldr	r3, [pc, #432]	; (800b088 <motion_primitive_init+0x2e0>)
 800aed8:	2204      	movs	r2, #4
 800aeda:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	primitives[2].tau = 2.0;
 800aede:	4b6a      	ldr	r3, [pc, #424]	; (800b088 <motion_primitive_init+0x2e0>)
 800aee0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800aee4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	primitives[2].t_offset = 0.0;
 800aee8:	4b67      	ldr	r3, [pc, #412]	; (800b088 <motion_primitive_init+0x2e0>)
 800aeea:	f04f 0200 	mov.w	r2, #0
 800aeee:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	primitives[2].invert = 0;
 800aef2:	4b65      	ldr	r3, [pc, #404]	; (800b088 <motion_primitive_init+0x2e0>)
 800aef4:	2200      	movs	r2, #0
 800aef6:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	primitives[2].time_reverse = 0;
 800aefa:	4b63      	ldr	r3, [pc, #396]	; (800b088 <motion_primitive_init+0x2e0>)
 800aefc:	2200      	movs	r2, #0
 800aefe:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	primitives[2].x_offset_m = 0;
 800af02:	4b61      	ldr	r3, [pc, #388]	; (800b088 <motion_primitive_init+0x2e0>)
 800af04:	f04f 0200 	mov.w	r2, #0
 800af08:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	primitives[2].y_offset_m = 0;
 800af0c:	4b5e      	ldr	r3, [pc, #376]	; (800b088 <motion_primitive_init+0x2e0>)
 800af0e:	f04f 0200 	mov.w	r2, #0
 800af12:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	primitives[2].x_scale = 1.0;
 800af16:	4b5c      	ldr	r3, [pc, #368]	; (800b088 <motion_primitive_init+0x2e0>)
 800af18:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800af1c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	primitives[2].y_scale = 1.0;
 800af20:	4b59      	ldr	r3, [pc, #356]	; (800b088 <motion_primitive_init+0x2e0>)
 800af22:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800af26:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	primitives[2].frames[0].t_part = 0.0;
 800af2a:	4b57      	ldr	r3, [pc, #348]	; (800b088 <motion_primitive_init+0x2e0>)
 800af2c:	f04f 0200 	mov.w	r2, #0
 800af30:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	primitives[2].frames[0].x = 0.105;
 800af34:	4b54      	ldr	r3, [pc, #336]	; (800b088 <motion_primitive_init+0x2e0>)
 800af36:	4a55      	ldr	r2, [pc, #340]	; (800b08c <motion_primitive_init+0x2e4>)
 800af38:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	primitives[2].frames[0].y = 0.03;
 800af3c:	4b52      	ldr	r3, [pc, #328]	; (800b088 <motion_primitive_init+0x2e0>)
 800af3e:	4a60      	ldr	r2, [pc, #384]	; (800b0c0 <motion_primitive_init+0x318>)
 800af40:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

	primitives[2].frames[1].t_part = 0.5;
 800af44:	4b50      	ldr	r3, [pc, #320]	; (800b088 <motion_primitive_init+0x2e0>)
 800af46:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800af4a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	primitives[2].frames[1].x = 0.105;
 800af4e:	4b4e      	ldr	r3, [pc, #312]	; (800b088 <motion_primitive_init+0x2e0>)
 800af50:	4a4e      	ldr	r2, [pc, #312]	; (800b08c <motion_primitive_init+0x2e4>)
 800af52:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	primitives[2].frames[1].y = -0.03;
 800af56:	4b4c      	ldr	r3, [pc, #304]	; (800b088 <motion_primitive_init+0x2e0>)
 800af58:	4a5a      	ldr	r2, [pc, #360]	; (800b0c4 <motion_primitive_init+0x31c>)
 800af5a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

	primitives[2].frames[2].t_part = 0.7;
 800af5e:	4b4a      	ldr	r3, [pc, #296]	; (800b088 <motion_primitive_init+0x2e0>)
 800af60:	4a59      	ldr	r2, [pc, #356]	; (800b0c8 <motion_primitive_init+0x320>)
 800af62:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	primitives[2].frames[2].x = 0.08;
 800af66:	4b48      	ldr	r3, [pc, #288]	; (800b088 <motion_primitive_init+0x2e0>)
 800af68:	4a53      	ldr	r2, [pc, #332]	; (800b0b8 <motion_primitive_init+0x310>)
 800af6a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	primitives[2].frames[2].y = -0.015;
 800af6e:	4b46      	ldr	r3, [pc, #280]	; (800b088 <motion_primitive_init+0x2e0>)
 800af70:	4a56      	ldr	r2, [pc, #344]	; (800b0cc <motion_primitive_init+0x324>)
 800af72:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	primitives[2].frames[3].t_part = 0.9;
 800af76:	4b44      	ldr	r3, [pc, #272]	; (800b088 <motion_primitive_init+0x2e0>)
 800af78:	4a55      	ldr	r2, [pc, #340]	; (800b0d0 <motion_primitive_init+0x328>)
 800af7a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	primitives[2].frames[3].x = 0.095;
 800af7e:	4b42      	ldr	r3, [pc, #264]	; (800b088 <motion_primitive_init+0x2e0>)
 800af80:	4a54      	ldr	r2, [pc, #336]	; (800b0d4 <motion_primitive_init+0x32c>)
 800af82:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	primitives[2].frames[3].y = 0.04;
 800af86:	4b40      	ldr	r3, [pc, #256]	; (800b088 <motion_primitive_init+0x2e0>)
 800af88:	4a53      	ldr	r2, [pc, #332]	; (800b0d8 <motion_primitive_init+0x330>)
 800af8a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

	// Pronk
	// Only vertical motion, slow down, fast down, fast up, fast to nominal
	primitives[3].num_keyframes = 5;
 800af8e:	4b3e      	ldr	r3, [pc, #248]	; (800b088 <motion_primitive_init+0x2e0>)
 800af90:	2205      	movs	r2, #5
 800af92:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
	primitives[3].tau = 2.0;
 800af96:	4b3c      	ldr	r3, [pc, #240]	; (800b088 <motion_primitive_init+0x2e0>)
 800af98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800af9c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	primitives[3].t_offset = 0.0;
 800afa0:	4b39      	ldr	r3, [pc, #228]	; (800b088 <motion_primitive_init+0x2e0>)
 800afa2:	f04f 0200 	mov.w	r2, #0
 800afa6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	primitives[3].invert = 0;
 800afaa:	4b37      	ldr	r3, [pc, #220]	; (800b088 <motion_primitive_init+0x2e0>)
 800afac:	2200      	movs	r2, #0
 800afae:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
	primitives[3].time_reverse = 0;
 800afb2:	4b35      	ldr	r3, [pc, #212]	; (800b088 <motion_primitive_init+0x2e0>)
 800afb4:	2200      	movs	r2, #0
 800afb6:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
	primitives[3].x_offset_m = 0;
 800afba:	4b33      	ldr	r3, [pc, #204]	; (800b088 <motion_primitive_init+0x2e0>)
 800afbc:	f04f 0200 	mov.w	r2, #0
 800afc0:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	primitives[3].y_offset_m = 0;
 800afc4:	4b30      	ldr	r3, [pc, #192]	; (800b088 <motion_primitive_init+0x2e0>)
 800afc6:	f04f 0200 	mov.w	r2, #0
 800afca:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	primitives[3].x_scale = 1.0;
 800afce:	4b2e      	ldr	r3, [pc, #184]	; (800b088 <motion_primitive_init+0x2e0>)
 800afd0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800afd4:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	primitives[3].y_scale = 1.0;
 800afd8:	4b2b      	ldr	r3, [pc, #172]	; (800b088 <motion_primitive_init+0x2e0>)
 800afda:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800afde:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

	primitives[3].frames[0].t_part = 0.0;
 800afe2:	4b29      	ldr	r3, [pc, #164]	; (800b088 <motion_primitive_init+0x2e0>)
 800afe4:	f04f 0200 	mov.w	r2, #0
 800afe8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	primitives[3].frames[0].x = 0.07;
 800afec:	4b26      	ldr	r3, [pc, #152]	; (800b088 <motion_primitive_init+0x2e0>)
 800afee:	4a3b      	ldr	r2, [pc, #236]	; (800b0dc <motion_primitive_init+0x334>)
 800aff0:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	primitives[3].frames[0].y = 0.0;
 800aff4:	4b24      	ldr	r3, [pc, #144]	; (800b088 <motion_primitive_init+0x2e0>)
 800aff6:	f04f 0200 	mov.w	r2, #0
 800affa:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

	primitives[3].frames[1].t_part = 0.3;
 800affe:	4b22      	ldr	r3, [pc, #136]	; (800b088 <motion_primitive_init+0x2e0>)
 800b000:	4a37      	ldr	r2, [pc, #220]	; (800b0e0 <motion_primitive_init+0x338>)
 800b002:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	primitives[3].frames[1].x = 0.09;
 800b006:	4b20      	ldr	r3, [pc, #128]	; (800b088 <motion_primitive_init+0x2e0>)
 800b008:	4a26      	ldr	r2, [pc, #152]	; (800b0a4 <motion_primitive_init+0x2fc>)
 800b00a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	primitives[3].frames[1].y = 0.0;
 800b00e:	4b1e      	ldr	r3, [pc, #120]	; (800b088 <motion_primitive_init+0x2e0>)
 800b010:	f04f 0200 	mov.w	r2, #0
 800b014:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

	primitives[3].frames[2].t_part = 0.4;
 800b018:	4b1b      	ldr	r3, [pc, #108]	; (800b088 <motion_primitive_init+0x2e0>)
 800b01a:	4a32      	ldr	r2, [pc, #200]	; (800b0e4 <motion_primitive_init+0x33c>)
 800b01c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	primitives[3].frames[2].x = 0.105;
 800b020:	4b19      	ldr	r3, [pc, #100]	; (800b088 <motion_primitive_init+0x2e0>)
 800b022:	4a1a      	ldr	r2, [pc, #104]	; (800b08c <motion_primitive_init+0x2e4>)
 800b024:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	primitives[3].frames[2].y = 0.0;
 800b028:	4b17      	ldr	r3, [pc, #92]	; (800b088 <motion_primitive_init+0x2e0>)
 800b02a:	f04f 0200 	mov.w	r2, #0
 800b02e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

	primitives[3].frames[3].t_part = 0.5;
 800b032:	4b15      	ldr	r3, [pc, #84]	; (800b088 <motion_primitive_init+0x2e0>)
 800b034:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800b038:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	primitives[3].frames[3].x = 0.05;
 800b03c:	4b12      	ldr	r3, [pc, #72]	; (800b088 <motion_primitive_init+0x2e0>)
 800b03e:	4a1b      	ldr	r2, [pc, #108]	; (800b0ac <motion_primitive_init+0x304>)
 800b040:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	primitives[3].frames[3].y = 0.0;
 800b044:	4b10      	ldr	r3, [pc, #64]	; (800b088 <motion_primitive_init+0x2e0>)
 800b046:	f04f 0200 	mov.w	r2, #0
 800b04a:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

	primitives[3].frames[4].t_part = 0.6;
 800b04e:	4b0e      	ldr	r3, [pc, #56]	; (800b088 <motion_primitive_init+0x2e0>)
 800b050:	4a25      	ldr	r2, [pc, #148]	; (800b0e8 <motion_primitive_init+0x340>)
 800b052:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	primitives[3].frames[4].x = 0.07;
 800b056:	4b0c      	ldr	r3, [pc, #48]	; (800b088 <motion_primitive_init+0x2e0>)
 800b058:	4a20      	ldr	r2, [pc, #128]	; (800b0dc <motion_primitive_init+0x334>)
 800b05a:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	primitives[3].frames[4].y = 0.0;
 800b05e:	4b0a      	ldr	r3, [pc, #40]	; (800b088 <motion_primitive_init+0x2e0>)
 800b060:	f04f 0200 	mov.w	r2, #0
 800b064:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	/*************  Bezier curves starting  **************************/

	// Slow trot walk with quadratic Bezier curve
	// Triangular, 1Hz, roughly 3X longer on ground than in air, front slightly forward of hip
	primitives[4].num_keyframes = 6;
 800b068:	4b07      	ldr	r3, [pc, #28]	; (800b088 <motion_primitive_init+0x2e0>)
 800b06a:	2206      	movs	r2, #6
 800b06c:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
	primitives[4].tau = 2.0;
 800b070:	4b05      	ldr	r3, [pc, #20]	; (800b088 <motion_primitive_init+0x2e0>)
 800b072:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b076:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	primitives[4].t_offset = 0.0;
 800b07a:	4b03      	ldr	r3, [pc, #12]	; (800b088 <motion_primitive_init+0x2e0>)
 800b07c:	f04f 0200 	mov.w	r2, #0
 800b080:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
 800b084:	e032      	b.n	800b0ec <motion_primitive_init+0x344>
 800b086:	bf00      	nop
 800b088:	20015294 	.word	0x20015294
 800b08c:	3dd70a3d 	.word	0x3dd70a3d
 800b090:	3c23d70a 	.word	0x3c23d70a
 800b094:	bd4ccccd 	.word	0xbd4ccccd
 800b098:	3f600000 	.word	0x3f600000
 800b09c:	3d75c28f 	.word	0x3d75c28f
 800b0a0:	bca3d70a 	.word	0xbca3d70a
 800b0a4:	3db851ec 	.word	0x3db851ec
 800b0a8:	bc23d70a 	.word	0xbc23d70a
 800b0ac:	3d4ccccd 	.word	0x3d4ccccd
 800b0b0:	3ca3d70a 	.word	0x3ca3d70a
 800b0b4:	3f733333 	.word	0x3f733333
 800b0b8:	3da3d70a 	.word	0x3da3d70a
 800b0bc:	3d851eb8 	.word	0x3d851eb8
 800b0c0:	3cf5c28f 	.word	0x3cf5c28f
 800b0c4:	bcf5c28f 	.word	0xbcf5c28f
 800b0c8:	3f333333 	.word	0x3f333333
 800b0cc:	bc75c28f 	.word	0xbc75c28f
 800b0d0:	3f666666 	.word	0x3f666666
 800b0d4:	3dc28f5c 	.word	0x3dc28f5c
 800b0d8:	3d23d70a 	.word	0x3d23d70a
 800b0dc:	3d8f5c29 	.word	0x3d8f5c29
 800b0e0:	3e99999a 	.word	0x3e99999a
 800b0e4:	3ecccccd 	.word	0x3ecccccd
 800b0e8:	3f19999a 	.word	0x3f19999a
	primitives[4].invert = 0;
 800b0ec:	4bbc      	ldr	r3, [pc, #752]	; (800b3e0 <motion_primitive_init+0x638>)
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
	primitives[4].time_reverse = 0;
 800b0f4:	4bba      	ldr	r3, [pc, #744]	; (800b3e0 <motion_primitive_init+0x638>)
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
	primitives[4].x_offset_m = 0;
 800b0fc:	4bb8      	ldr	r3, [pc, #736]	; (800b3e0 <motion_primitive_init+0x638>)
 800b0fe:	f04f 0200 	mov.w	r2, #0
 800b102:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	primitives[4].y_offset_m = 0;
 800b106:	4bb6      	ldr	r3, [pc, #728]	; (800b3e0 <motion_primitive_init+0x638>)
 800b108:	f04f 0200 	mov.w	r2, #0
 800b10c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	primitives[4].x_scale = 1.0;
 800b110:	4bb3      	ldr	r3, [pc, #716]	; (800b3e0 <motion_primitive_init+0x638>)
 800b112:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b116:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	primitives[4].y_scale = 1.0;
 800b11a:	4bb1      	ldr	r3, [pc, #708]	; (800b3e0 <motion_primitive_init+0x638>)
 800b11c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b120:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0

	primitives[4].frames[0].t_part = 0.0;
 800b124:	4bae      	ldr	r3, [pc, #696]	; (800b3e0 <motion_primitive_init+0x638>)
 800b126:	f04f 0200 	mov.w	r2, #0
 800b12a:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
	primitives[4].frames[0].x = 0.105;
 800b12e:	4bac      	ldr	r3, [pc, #688]	; (800b3e0 <motion_primitive_init+0x638>)
 800b130:	4aac      	ldr	r2, [pc, #688]	; (800b3e4 <motion_primitive_init+0x63c>)
 800b132:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	primitives[4].frames[0].y = 0.01;
 800b136:	4baa      	ldr	r3, [pc, #680]	; (800b3e0 <motion_primitive_init+0x638>)
 800b138:	4aab      	ldr	r2, [pc, #684]	; (800b3e8 <motion_primitive_init+0x640>)
 800b13a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

	primitives[4].frames[1].t_part = 0.375; // Time not used
 800b13e:	4ba8      	ldr	r3, [pc, #672]	; (800b3e0 <motion_primitive_init+0x638>)
 800b140:	f04f 527b 	mov.w	r2, #1052770304	; 0x3ec00000
 800b144:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
	primitives[4].frames[1].x = 0.115;
 800b148:	4ba5      	ldr	r3, [pc, #660]	; (800b3e0 <motion_primitive_init+0x638>)
 800b14a:	4aa8      	ldr	r2, [pc, #672]	; (800b3ec <motion_primitive_init+0x644>)
 800b14c:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
	primitives[4].frames[1].y = -0.02;
 800b150:	4ba3      	ldr	r3, [pc, #652]	; (800b3e0 <motion_primitive_init+0x638>)
 800b152:	4aa7      	ldr	r2, [pc, #668]	; (800b3f0 <motion_primitive_init+0x648>)
 800b154:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc

	primitives[4].frames[2].t_part = 0.75;
 800b158:	4ba1      	ldr	r3, [pc, #644]	; (800b3e0 <motion_primitive_init+0x638>)
 800b15a:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 800b15e:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
	primitives[4].frames[2].x = 0.105;
 800b162:	4b9f      	ldr	r3, [pc, #636]	; (800b3e0 <motion_primitive_init+0x638>)
 800b164:	4a9f      	ldr	r2, [pc, #636]	; (800b3e4 <motion_primitive_init+0x63c>)
 800b166:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
	primitives[4].frames[2].y = -0.05;
 800b16a:	4b9d      	ldr	r3, [pc, #628]	; (800b3e0 <motion_primitive_init+0x638>)
 800b16c:	4aa1      	ldr	r2, [pc, #644]	; (800b3f4 <motion_primitive_init+0x64c>)
 800b16e:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8

	primitives[4].frames[3].t_part = 0.8; // Time not used
 800b172:	4b9b      	ldr	r3, [pc, #620]	; (800b3e0 <motion_primitive_init+0x638>)
 800b174:	4aa0      	ldr	r2, [pc, #640]	; (800b3f8 <motion_primitive_init+0x650>)
 800b176:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	primitives[4].frames[3].x = 0.07;
 800b17a:	4b99      	ldr	r3, [pc, #612]	; (800b3e0 <motion_primitive_init+0x638>)
 800b17c:	4a9f      	ldr	r2, [pc, #636]	; (800b3fc <motion_primitive_init+0x654>)
 800b17e:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	primitives[4].frames[3].y = -0.075;
 800b182:	4b97      	ldr	r3, [pc, #604]	; (800b3e0 <motion_primitive_init+0x638>)
 800b184:	4a9e      	ldr	r2, [pc, #632]	; (800b400 <motion_primitive_init+0x658>)
 800b186:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

	primitives[4].frames[4].t_part = 0.875;
 800b18a:	4b95      	ldr	r3, [pc, #596]	; (800b3e0 <motion_primitive_init+0x638>)
 800b18c:	4a9d      	ldr	r2, [pc, #628]	; (800b404 <motion_primitive_init+0x65c>)
 800b18e:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	primitives[4].frames[4].x = 0.06;
 800b192:	4b93      	ldr	r3, [pc, #588]	; (800b3e0 <motion_primitive_init+0x638>)
 800b194:	4a9c      	ldr	r2, [pc, #624]	; (800b408 <motion_primitive_init+0x660>)
 800b196:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	primitives[4].frames[4].y = -0.02;
 800b19a:	4b91      	ldr	r3, [pc, #580]	; (800b3e0 <motion_primitive_init+0x638>)
 800b19c:	4a94      	ldr	r2, [pc, #592]	; (800b3f0 <motion_primitive_init+0x648>)
 800b19e:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0

	primitives[4].frames[5].t_part = 0.9; // Time not used
 800b1a2:	4b8f      	ldr	r3, [pc, #572]	; (800b3e0 <motion_primitive_init+0x638>)
 800b1a4:	4a99      	ldr	r2, [pc, #612]	; (800b40c <motion_primitive_init+0x664>)
 800b1a6:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	primitives[4].frames[5].x = 0.07;
 800b1aa:	4b8d      	ldr	r3, [pc, #564]	; (800b3e0 <motion_primitive_init+0x638>)
 800b1ac:	4a93      	ldr	r2, [pc, #588]	; (800b3fc <motion_primitive_init+0x654>)
 800b1ae:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	primitives[4].frames[5].y = 0.035;
 800b1b2:	4b8b      	ldr	r3, [pc, #556]	; (800b3e0 <motion_primitive_init+0x638>)
 800b1b4:	4a96      	ldr	r2, [pc, #600]	; (800b410 <motion_primitive_init+0x668>)
 800b1b6:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec

	// Fast trot walk
	// Mostly triangular, in air roughly same as on ground, rear slightly backward of hip
	primitives[5].num_keyframes = 6;
 800b1ba:	4b89      	ldr	r3, [pc, #548]	; (800b3e0 <motion_primitive_init+0x638>)
 800b1bc:	2206      	movs	r2, #6
 800b1be:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
	primitives[5].tau = 2.0;
 800b1c2:	4b87      	ldr	r3, [pc, #540]	; (800b3e0 <motion_primitive_init+0x638>)
 800b1c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b1c8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	primitives[5].t_offset = 0.0;
 800b1cc:	4b84      	ldr	r3, [pc, #528]	; (800b3e0 <motion_primitive_init+0x638>)
 800b1ce:	f04f 0200 	mov.w	r2, #0
 800b1d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	primitives[5].invert = 0;
 800b1d6:	4b82      	ldr	r3, [pc, #520]	; (800b3e0 <motion_primitive_init+0x638>)
 800b1d8:	2200      	movs	r2, #0
 800b1da:	f883 21f5 	strb.w	r2, [r3, #501]	; 0x1f5
	primitives[5].time_reverse = 0;
 800b1de:	4b80      	ldr	r3, [pc, #512]	; (800b3e0 <motion_primitive_init+0x638>)
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	f883 21f6 	strb.w	r2, [r3, #502]	; 0x1f6
	primitives[5].x_offset_m = 0;
 800b1e6:	4b7e      	ldr	r3, [pc, #504]	; (800b3e0 <motion_primitive_init+0x638>)
 800b1e8:	f04f 0200 	mov.w	r2, #0
 800b1ec:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	primitives[5].y_offset_m = 0;
 800b1f0:	4b7b      	ldr	r3, [pc, #492]	; (800b3e0 <motion_primitive_init+0x638>)
 800b1f2:	f04f 0200 	mov.w	r2, #0
 800b1f6:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
	primitives[5].x_scale = 1.0;
 800b1fa:	4b79      	ldr	r3, [pc, #484]	; (800b3e0 <motion_primitive_init+0x638>)
 800b1fc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b200:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	primitives[5].y_scale = 1.0;
 800b204:	4b76      	ldr	r3, [pc, #472]	; (800b3e0 <motion_primitive_init+0x638>)
 800b206:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b20a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

	primitives[5].frames[0].t_part = 0.0;
 800b20e:	4b74      	ldr	r3, [pc, #464]	; (800b3e0 <motion_primitive_init+0x638>)
 800b210:	f04f 0200 	mov.w	r2, #0
 800b214:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	primitives[5].frames[0].x = 0.09;
 800b218:	4b71      	ldr	r3, [pc, #452]	; (800b3e0 <motion_primitive_init+0x638>)
 800b21a:	4a7e      	ldr	r2, [pc, #504]	; (800b414 <motion_primitive_init+0x66c>)
 800b21c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	primitives[5].frames[0].y = 0.06;
 800b220:	4b6f      	ldr	r3, [pc, #444]	; (800b3e0 <motion_primitive_init+0x638>)
 800b222:	4a79      	ldr	r2, [pc, #484]	; (800b408 <motion_primitive_init+0x660>)
 800b224:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	primitives[5].frames[1].t_part = 0.25; // Time not used
 800b228:	4b6d      	ldr	r3, [pc, #436]	; (800b3e0 <motion_primitive_init+0x638>)
 800b22a:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800b22e:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	primitives[5].frames[1].x = 0.105;
 800b232:	4b6b      	ldr	r3, [pc, #428]	; (800b3e0 <motion_primitive_init+0x638>)
 800b234:	4a6b      	ldr	r2, [pc, #428]	; (800b3e4 <motion_primitive_init+0x63c>)
 800b236:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	primitives[5].frames[1].y = 0.025;
 800b23a:	4b69      	ldr	r3, [pc, #420]	; (800b3e0 <motion_primitive_init+0x638>)
 800b23c:	4a76      	ldr	r2, [pc, #472]	; (800b418 <motion_primitive_init+0x670>)
 800b23e:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

	primitives[5].frames[2].t_part = 0.5;
 800b242:	4b67      	ldr	r3, [pc, #412]	; (800b3e0 <motion_primitive_init+0x638>)
 800b244:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800b248:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	primitives[5].frames[2].x = 0.09;
 800b24c:	4b64      	ldr	r3, [pc, #400]	; (800b3e0 <motion_primitive_init+0x638>)
 800b24e:	4a71      	ldr	r2, [pc, #452]	; (800b414 <motion_primitive_init+0x66c>)
 800b250:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	primitives[5].frames[2].y = -0.01;
 800b254:	4b62      	ldr	r3, [pc, #392]	; (800b3e0 <motion_primitive_init+0x638>)
 800b256:	4a71      	ldr	r2, [pc, #452]	; (800b41c <motion_primitive_init+0x674>)
 800b258:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c

	primitives[5].frames[3].t_part = 0.6; // Time not used
 800b25c:	4b60      	ldr	r3, [pc, #384]	; (800b3e0 <motion_primitive_init+0x638>)
 800b25e:	4a70      	ldr	r2, [pc, #448]	; (800b420 <motion_primitive_init+0x678>)
 800b260:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
	primitives[5].frames[3].x = 0.06;
 800b264:	4b5e      	ldr	r3, [pc, #376]	; (800b3e0 <motion_primitive_init+0x638>)
 800b266:	4a68      	ldr	r2, [pc, #416]	; (800b408 <motion_primitive_init+0x660>)
 800b268:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	primitives[5].frames[3].y = -0.025;
 800b26c:	4b5c      	ldr	r3, [pc, #368]	; (800b3e0 <motion_primitive_init+0x638>)
 800b26e:	4a6d      	ldr	r2, [pc, #436]	; (800b424 <motion_primitive_init+0x67c>)
 800b270:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

	primitives[5].frames[4].t_part = 0.75;
 800b274:	4b5a      	ldr	r3, [pc, #360]	; (800b3e0 <motion_primitive_init+0x638>)
 800b276:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 800b27a:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
	primitives[5].frames[4].x = 0.06;
 800b27e:	4b58      	ldr	r3, [pc, #352]	; (800b3e0 <motion_primitive_init+0x638>)
 800b280:	4a61      	ldr	r2, [pc, #388]	; (800b408 <motion_primitive_init+0x660>)
 800b282:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	primitives[5].frames[4].y = 0.02;
 800b286:	4b56      	ldr	r3, [pc, #344]	; (800b3e0 <motion_primitive_init+0x638>)
 800b288:	4a67      	ldr	r2, [pc, #412]	; (800b428 <motion_primitive_init+0x680>)
 800b28a:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244

	primitives[5].frames[5].t_part = 0.85; // Time not used
 800b28e:	4b54      	ldr	r3, [pc, #336]	; (800b3e0 <motion_primitive_init+0x638>)
 800b290:	4a66      	ldr	r2, [pc, #408]	; (800b42c <motion_primitive_init+0x684>)
 800b292:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
	primitives[5].frames[5].x = 0.06;
 800b296:	4b52      	ldr	r3, [pc, #328]	; (800b3e0 <motion_primitive_init+0x638>)
 800b298:	4a5b      	ldr	r2, [pc, #364]	; (800b408 <motion_primitive_init+0x660>)
 800b29a:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
	primitives[5].frames[5].y = 0.08;
 800b29e:	4b50      	ldr	r3, [pc, #320]	; (800b3e0 <motion_primitive_init+0x638>)
 800b2a0:	4a63      	ldr	r2, [pc, #396]	; (800b430 <motion_primitive_init+0x688>)
 800b2a2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250

	// Slow trot walk with quadratic Bezier curve, shifted nearer to hip, centered
	// Triangular, 1Hz, roughly 3X longer on ground than in air, front slightly forward of hip
	primitives[6].num_keyframes = 6;
 800b2a6:	4b4e      	ldr	r3, [pc, #312]	; (800b3e0 <motion_primitive_init+0x638>)
 800b2a8:	2206      	movs	r2, #6
 800b2aa:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
	primitives[6].tau = 2.0;
 800b2ae:	4b4c      	ldr	r3, [pc, #304]	; (800b3e0 <motion_primitive_init+0x638>)
 800b2b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b2b4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
	primitives[6].t_offset = 0.0;
 800b2b8:	4b49      	ldr	r3, [pc, #292]	; (800b3e0 <motion_primitive_init+0x638>)
 800b2ba:	f04f 0200 	mov.w	r2, #0
 800b2be:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
	primitives[6].invert = 0;
 800b2c2:	4b47      	ldr	r3, [pc, #284]	; (800b3e0 <motion_primitive_init+0x638>)
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
	primitives[6].time_reverse = 0;
 800b2ca:	4b45      	ldr	r3, [pc, #276]	; (800b3e0 <motion_primitive_init+0x638>)
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	f883 225a 	strb.w	r2, [r3, #602]	; 0x25a
	primitives[6].x_offset_m = 0;
 800b2d2:	4b43      	ldr	r3, [pc, #268]	; (800b3e0 <motion_primitive_init+0x638>)
 800b2d4:	f04f 0200 	mov.w	r2, #0
 800b2d8:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	primitives[6].y_offset_m = 0;
 800b2dc:	4b40      	ldr	r3, [pc, #256]	; (800b3e0 <motion_primitive_init+0x638>)
 800b2de:	f04f 0200 	mov.w	r2, #0
 800b2e2:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
	primitives[6].x_scale = 1.0;
 800b2e6:	4b3e      	ldr	r3, [pc, #248]	; (800b3e0 <motion_primitive_init+0x638>)
 800b2e8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b2ec:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
	primitives[6].y_scale = 1.0;
 800b2f0:	4b3b      	ldr	r3, [pc, #236]	; (800b3e0 <motion_primitive_init+0x638>)
 800b2f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b2f6:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

	primitives[6].frames[0].t_part = 0.0;
 800b2fa:	4b39      	ldr	r3, [pc, #228]	; (800b3e0 <motion_primitive_init+0x638>)
 800b2fc:	f04f 0200 	mov.w	r2, #0
 800b300:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
	primitives[6].frames[0].x = 0.095;
 800b304:	4b36      	ldr	r3, [pc, #216]	; (800b3e0 <motion_primitive_init+0x638>)
 800b306:	4a4b      	ldr	r2, [pc, #300]	; (800b434 <motion_primitive_init+0x68c>)
 800b308:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
	primitives[6].frames[0].y = 0.03;
 800b30c:	4b34      	ldr	r3, [pc, #208]	; (800b3e0 <motion_primitive_init+0x638>)
 800b30e:	4a4a      	ldr	r2, [pc, #296]	; (800b438 <motion_primitive_init+0x690>)
 800b310:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278

	primitives[6].frames[1].t_part = 0.375; // Time not used
 800b314:	4b32      	ldr	r3, [pc, #200]	; (800b3e0 <motion_primitive_init+0x638>)
 800b316:	f04f 527b 	mov.w	r2, #1052770304	; 0x3ec00000
 800b31a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	primitives[6].frames[1].x = 0.105;
 800b31e:	4b30      	ldr	r3, [pc, #192]	; (800b3e0 <motion_primitive_init+0x638>)
 800b320:	4a30      	ldr	r2, [pc, #192]	; (800b3e4 <motion_primitive_init+0x63c>)
 800b322:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
	primitives[6].frames[1].y = 0.0;
 800b326:	4b2e      	ldr	r3, [pc, #184]	; (800b3e0 <motion_primitive_init+0x638>)
 800b328:	f04f 0200 	mov.w	r2, #0
 800b32c:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284

	primitives[6].frames[2].t_part = 0.75;
 800b330:	4b2b      	ldr	r3, [pc, #172]	; (800b3e0 <motion_primitive_init+0x638>)
 800b332:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 800b336:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	primitives[6].frames[2].x = 0.095;
 800b33a:	4b29      	ldr	r3, [pc, #164]	; (800b3e0 <motion_primitive_init+0x638>)
 800b33c:	4a3d      	ldr	r2, [pc, #244]	; (800b434 <motion_primitive_init+0x68c>)
 800b33e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	primitives[6].frames[2].y = -0.03;
 800b342:	4b27      	ldr	r3, [pc, #156]	; (800b3e0 <motion_primitive_init+0x638>)
 800b344:	4a3d      	ldr	r2, [pc, #244]	; (800b43c <motion_primitive_init+0x694>)
 800b346:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

	primitives[6].frames[3].t_part = 0.8; // Time not used
 800b34a:	4b25      	ldr	r3, [pc, #148]	; (800b3e0 <motion_primitive_init+0x638>)
 800b34c:	4a2a      	ldr	r2, [pc, #168]	; (800b3f8 <motion_primitive_init+0x650>)
 800b34e:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	primitives[6].frames[3].x = 0.06;
 800b352:	4b23      	ldr	r3, [pc, #140]	; (800b3e0 <motion_primitive_init+0x638>)
 800b354:	4a2c      	ldr	r2, [pc, #176]	; (800b408 <motion_primitive_init+0x660>)
 800b356:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
	primitives[6].frames[3].y = -0.045;
 800b35a:	4b21      	ldr	r3, [pc, #132]	; (800b3e0 <motion_primitive_init+0x638>)
 800b35c:	4a38      	ldr	r2, [pc, #224]	; (800b440 <motion_primitive_init+0x698>)
 800b35e:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c

	primitives[6].frames[4].t_part = 0.875;
 800b362:	4b1f      	ldr	r3, [pc, #124]	; (800b3e0 <motion_primitive_init+0x638>)
 800b364:	4a27      	ldr	r2, [pc, #156]	; (800b404 <motion_primitive_init+0x65c>)
 800b366:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	primitives[6].frames[4].x = 0.05;
 800b36a:	4b1d      	ldr	r3, [pc, #116]	; (800b3e0 <motion_primitive_init+0x638>)
 800b36c:	4a35      	ldr	r2, [pc, #212]	; (800b444 <motion_primitive_init+0x69c>)
 800b36e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	primitives[6].frames[4].y = 0.0;
 800b372:	4b1b      	ldr	r3, [pc, #108]	; (800b3e0 <motion_primitive_init+0x638>)
 800b374:	f04f 0200 	mov.w	r2, #0
 800b378:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8

	primitives[6].frames[5].t_part = 0.9; // Time not used
 800b37c:	4b18      	ldr	r3, [pc, #96]	; (800b3e0 <motion_primitive_init+0x638>)
 800b37e:	4a23      	ldr	r2, [pc, #140]	; (800b40c <motion_primitive_init+0x664>)
 800b380:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
	primitives[6].frames[5].x = 0.06;
 800b384:	4b16      	ldr	r3, [pc, #88]	; (800b3e0 <motion_primitive_init+0x638>)
 800b386:	4a20      	ldr	r2, [pc, #128]	; (800b408 <motion_primitive_init+0x660>)
 800b388:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
	primitives[6].frames[5].y = 0.045;
 800b38c:	4b14      	ldr	r3, [pc, #80]	; (800b3e0 <motion_primitive_init+0x638>)
 800b38e:	4a2e      	ldr	r2, [pc, #184]	; (800b448 <motion_primitive_init+0x6a0>)
 800b390:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4

	// Fast trot walk, shifted to help impedance control, high step
	// Mostly triangular, in air roughly same as on ground, rear slightly backward of hip
	primitives[7].num_keyframes = 6;
 800b394:	4b12      	ldr	r3, [pc, #72]	; (800b3e0 <motion_primitive_init+0x638>)
 800b396:	2206      	movs	r2, #6
 800b398:	f883 22bc 	strb.w	r2, [r3, #700]	; 0x2bc
	primitives[7].tau = 2.0;
 800b39c:	4b10      	ldr	r3, [pc, #64]	; (800b3e0 <motion_primitive_init+0x638>)
 800b39e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b3a2:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
	primitives[7].t_offset = 0.0;
 800b3a6:	4b0e      	ldr	r3, [pc, #56]	; (800b3e0 <motion_primitive_init+0x638>)
 800b3a8:	f04f 0200 	mov.w	r2, #0
 800b3ac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
	primitives[7].invert = 0;
 800b3b0:	4b0b      	ldr	r3, [pc, #44]	; (800b3e0 <motion_primitive_init+0x638>)
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd
	primitives[7].time_reverse = 0;
 800b3b8:	4b09      	ldr	r3, [pc, #36]	; (800b3e0 <motion_primitive_init+0x638>)
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f883 22be 	strb.w	r2, [r3, #702]	; 0x2be
	primitives[7].x_offset_m = 0;
 800b3c0:	4b07      	ldr	r3, [pc, #28]	; (800b3e0 <motion_primitive_init+0x638>)
 800b3c2:	f04f 0200 	mov.w	r2, #0
 800b3c6:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
	primitives[7].y_offset_m = 0;
 800b3ca:	4b05      	ldr	r3, [pc, #20]	; (800b3e0 <motion_primitive_init+0x638>)
 800b3cc:	f04f 0200 	mov.w	r2, #0
 800b3d0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
	primitives[7].x_scale = 1.0;
 800b3d4:	4b02      	ldr	r3, [pc, #8]	; (800b3e0 <motion_primitive_init+0x638>)
 800b3d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b3da:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
 800b3de:	e035      	b.n	800b44c <motion_primitive_init+0x6a4>
 800b3e0:	20015294 	.word	0x20015294
 800b3e4:	3dd70a3d 	.word	0x3dd70a3d
 800b3e8:	3c23d70a 	.word	0x3c23d70a
 800b3ec:	3deb851f 	.word	0x3deb851f
 800b3f0:	bca3d70a 	.word	0xbca3d70a
 800b3f4:	bd4ccccd 	.word	0xbd4ccccd
 800b3f8:	3f4ccccd 	.word	0x3f4ccccd
 800b3fc:	3d8f5c29 	.word	0x3d8f5c29
 800b400:	bd99999a 	.word	0xbd99999a
 800b404:	3f600000 	.word	0x3f600000
 800b408:	3d75c28f 	.word	0x3d75c28f
 800b40c:	3f666666 	.word	0x3f666666
 800b410:	3d0f5c29 	.word	0x3d0f5c29
 800b414:	3db851ec 	.word	0x3db851ec
 800b418:	3ccccccd 	.word	0x3ccccccd
 800b41c:	bc23d70a 	.word	0xbc23d70a
 800b420:	3f19999a 	.word	0x3f19999a
 800b424:	bccccccd 	.word	0xbccccccd
 800b428:	3ca3d70a 	.word	0x3ca3d70a
 800b42c:	3f59999a 	.word	0x3f59999a
 800b430:	3da3d70a 	.word	0x3da3d70a
 800b434:	3dc28f5c 	.word	0x3dc28f5c
 800b438:	3cf5c28f 	.word	0x3cf5c28f
 800b43c:	bcf5c28f 	.word	0xbcf5c28f
 800b440:	bd3851ec 	.word	0xbd3851ec
 800b444:	3d4ccccd 	.word	0x3d4ccccd
 800b448:	3d3851ec 	.word	0x3d3851ec
	primitives[7].y_scale = 1.0;
 800b44c:	4b2b      	ldr	r3, [pc, #172]	; (800b4fc <motion_primitive_init+0x754>)
 800b44e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b452:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

	primitives[7].frames[0].t_part = 0.0;
 800b456:	4b29      	ldr	r3, [pc, #164]	; (800b4fc <motion_primitive_init+0x754>)
 800b458:	f04f 0200 	mov.w	r2, #0
 800b45c:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
	primitives[7].frames[0].x = 0.095;
 800b460:	4b26      	ldr	r3, [pc, #152]	; (800b4fc <motion_primitive_init+0x754>)
 800b462:	4a27      	ldr	r2, [pc, #156]	; (800b500 <motion_primitive_init+0x758>)
 800b464:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
	primitives[7].frames[0].y = 0.015;
 800b468:	4b24      	ldr	r3, [pc, #144]	; (800b4fc <motion_primitive_init+0x754>)
 800b46a:	4a26      	ldr	r2, [pc, #152]	; (800b504 <motion_primitive_init+0x75c>)
 800b46c:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc

	primitives[7].frames[1].t_part = 0.25; // Time not used
 800b470:	4b22      	ldr	r3, [pc, #136]	; (800b4fc <motion_primitive_init+0x754>)
 800b472:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800b476:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	primitives[7].frames[1].x = 0.105;
 800b47a:	4b20      	ldr	r3, [pc, #128]	; (800b4fc <motion_primitive_init+0x754>)
 800b47c:	4a22      	ldr	r2, [pc, #136]	; (800b508 <motion_primitive_init+0x760>)
 800b47e:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
	primitives[7].frames[1].y = 0.0;
 800b482:	4b1e      	ldr	r3, [pc, #120]	; (800b4fc <motion_primitive_init+0x754>)
 800b484:	f04f 0200 	mov.w	r2, #0
 800b488:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8

	primitives[7].frames[2].t_part = 0.5;
 800b48c:	4b1b      	ldr	r3, [pc, #108]	; (800b4fc <motion_primitive_init+0x754>)
 800b48e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800b492:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	primitives[7].frames[2].x = 0.095;
 800b496:	4b19      	ldr	r3, [pc, #100]	; (800b4fc <motion_primitive_init+0x754>)
 800b498:	4a19      	ldr	r2, [pc, #100]	; (800b500 <motion_primitive_init+0x758>)
 800b49a:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
	primitives[7].frames[2].y = -0.015;
 800b49e:	4b17      	ldr	r3, [pc, #92]	; (800b4fc <motion_primitive_init+0x754>)
 800b4a0:	4a1a      	ldr	r2, [pc, #104]	; (800b50c <motion_primitive_init+0x764>)
 800b4a2:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4

	primitives[7].frames[3].t_part = 0.6; // Time not used
 800b4a6:	4b15      	ldr	r3, [pc, #84]	; (800b4fc <motion_primitive_init+0x754>)
 800b4a8:	4a19      	ldr	r2, [pc, #100]	; (800b510 <motion_primitive_init+0x768>)
 800b4aa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	primitives[7].frames[3].x = 0.07;
 800b4ae:	4b13      	ldr	r3, [pc, #76]	; (800b4fc <motion_primitive_init+0x754>)
 800b4b0:	4a18      	ldr	r2, [pc, #96]	; (800b514 <motion_primitive_init+0x76c>)
 800b4b2:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	primitives[7].frames[3].y = -0.03;
 800b4b6:	4b11      	ldr	r3, [pc, #68]	; (800b4fc <motion_primitive_init+0x754>)
 800b4b8:	4a17      	ldr	r2, [pc, #92]	; (800b518 <motion_primitive_init+0x770>)
 800b4ba:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300

	primitives[7].frames[4].t_part = 0.75;
 800b4be:	4b0f      	ldr	r3, [pc, #60]	; (800b4fc <motion_primitive_init+0x754>)
 800b4c0:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 800b4c4:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
	primitives[7].frames[4].x = 0.06;
 800b4c8:	4b0c      	ldr	r3, [pc, #48]	; (800b4fc <motion_primitive_init+0x754>)
 800b4ca:	4a14      	ldr	r2, [pc, #80]	; (800b51c <motion_primitive_init+0x774>)
 800b4cc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	primitives[7].frames[4].y = 0.0;
 800b4d0:	4b0a      	ldr	r3, [pc, #40]	; (800b4fc <motion_primitive_init+0x754>)
 800b4d2:	f04f 0200 	mov.w	r2, #0
 800b4d6:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c

	primitives[7].frames[5].t_part = 0.85; // Time not used
 800b4da:	4b08      	ldr	r3, [pc, #32]	; (800b4fc <motion_primitive_init+0x754>)
 800b4dc:	4a10      	ldr	r2, [pc, #64]	; (800b520 <motion_primitive_init+0x778>)
 800b4de:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
	primitives[7].frames[5].x = 0.07;
 800b4e2:	4b06      	ldr	r3, [pc, #24]	; (800b4fc <motion_primitive_init+0x754>)
 800b4e4:	4a0b      	ldr	r2, [pc, #44]	; (800b514 <motion_primitive_init+0x76c>)
 800b4e6:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
	primitives[7].frames[5].y = 0.035;
 800b4ea:	4b04      	ldr	r3, [pc, #16]	; (800b4fc <motion_primitive_init+0x754>)
 800b4ec:	4a0d      	ldr	r2, [pc, #52]	; (800b524 <motion_primitive_init+0x77c>)
 800b4ee:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 }
 800b4f2:	bf00      	nop
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr
 800b4fc:	20015294 	.word	0x20015294
 800b500:	3dc28f5c 	.word	0x3dc28f5c
 800b504:	3c75c28f 	.word	0x3c75c28f
 800b508:	3dd70a3d 	.word	0x3dd70a3d
 800b50c:	bc75c28f 	.word	0xbc75c28f
 800b510:	3f19999a 	.word	0x3f19999a
 800b514:	3d8f5c29 	.word	0x3d8f5c29
 800b518:	bcf5c28f 	.word	0xbcf5c28f
 800b51c:	3d75c28f 	.word	0x3d75c28f
 800b520:	3f59999a 	.word	0x3f59999a
 800b524:	3d0f5c29 	.word	0x3d0f5c29

0800b528 <motion_primitive_time_sync>:

 void motion_primitive_time_sync(uint32_t external_time)
 {
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
	time_offset = (xTaskGetTickCount() - external_time);
 800b530:	f7fd fa08 	bl	8008944 <xTaskGetTickCount>
 800b534:	4603      	mov	r3, r0
 800b536:	461a      	mov	r2, r3
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	1ad3      	subs	r3, r2, r3
 800b53c:	4a02      	ldr	r2, [pc, #8]	; (800b548 <motion_primitive_time_sync+0x20>)
 800b53e:	6013      	str	r3, [r2, #0]
 }
 800b540:	bf00      	nop
 800b542:	3708      	adds	r7, #8
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}
 800b548:	20015290 	.word	0x20015290

0800b54c <motion_primitive_set_index>:

 void motion_primitive_set_index(uint8_t index)
 {
 800b54c:	b480      	push	{r7}
 800b54e:	b083      	sub	sp, #12
 800b550:	af00      	add	r7, sp, #0
 800b552:	4603      	mov	r3, r0
 800b554:	71fb      	strb	r3, [r7, #7]
	if(index >= NUMBER_PRIMITIVES)
 800b556:	79fb      	ldrb	r3, [r7, #7]
 800b558:	2b07      	cmp	r3, #7
 800b55a:	d803      	bhi.n	800b564 <motion_primitive_set_index+0x18>
	{
		return;
	}
	primitive_index = index;
 800b55c:	4a04      	ldr	r2, [pc, #16]	; (800b570 <motion_primitive_set_index+0x24>)
 800b55e:	79fb      	ldrb	r3, [r7, #7]
 800b560:	7013      	strb	r3, [r2, #0]
 800b562:	e000      	b.n	800b566 <motion_primitive_set_index+0x1a>
		return;
 800b564:	bf00      	nop
 }
 800b566:	370c      	adds	r7, #12
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr
 800b570:	2001528c 	.word	0x2001528c

0800b574 <motion_primitive_set_timing>:

 void motion_primitive_set_timing(uint8_t index, float tau, float t_offset, uint8_t invert, uint8_t time_reverse)
 {
 800b574:	b480      	push	{r7}
 800b576:	b085      	sub	sp, #20
 800b578:	af00      	add	r7, sp, #0
 800b57a:	4603      	mov	r3, r0
 800b57c:	ed87 0a02 	vstr	s0, [r7, #8]
 800b580:	edc7 0a01 	vstr	s1, [r7, #4]
 800b584:	73fb      	strb	r3, [r7, #15]
 800b586:	460b      	mov	r3, r1
 800b588:	73bb      	strb	r3, [r7, #14]
 800b58a:	4613      	mov	r3, r2
 800b58c:	737b      	strb	r3, [r7, #13]
	if(index >= NUMBER_PRIMITIVES)
 800b58e:	7bfb      	ldrb	r3, [r7, #15]
 800b590:	2b07      	cmp	r3, #7
 800b592:	d824      	bhi.n	800b5de <motion_primitive_set_timing+0x6a>
	{
		return;
	}
	primitives[index].tau = tau;
 800b594:	7bfb      	ldrb	r3, [r7, #15]
 800b596:	4a15      	ldr	r2, [pc, #84]	; (800b5ec <motion_primitive_set_timing+0x78>)
 800b598:	2164      	movs	r1, #100	; 0x64
 800b59a:	fb01 f303 	mul.w	r3, r1, r3
 800b59e:	4413      	add	r3, r2
 800b5a0:	3314      	adds	r3, #20
 800b5a2:	68ba      	ldr	r2, [r7, #8]
 800b5a4:	601a      	str	r2, [r3, #0]
	primitives[index].t_offset = t_offset;
 800b5a6:	7bfb      	ldrb	r3, [r7, #15]
 800b5a8:	4a10      	ldr	r2, [pc, #64]	; (800b5ec <motion_primitive_set_timing+0x78>)
 800b5aa:	2164      	movs	r1, #100	; 0x64
 800b5ac:	fb01 f303 	mul.w	r3, r1, r3
 800b5b0:	4413      	add	r3, r2
 800b5b2:	3318      	adds	r3, #24
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	601a      	str	r2, [r3, #0]
	primitives[index].invert = invert;
 800b5b8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ba:	4a0c      	ldr	r2, [pc, #48]	; (800b5ec <motion_primitive_set_timing+0x78>)
 800b5bc:	2164      	movs	r1, #100	; 0x64
 800b5be:	fb01 f303 	mul.w	r3, r1, r3
 800b5c2:	4413      	add	r3, r2
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	7bba      	ldrb	r2, [r7, #14]
 800b5c8:	701a      	strb	r2, [r3, #0]
	primitives[index].time_reverse = time_reverse;
 800b5ca:	7bfb      	ldrb	r3, [r7, #15]
 800b5cc:	4a07      	ldr	r2, [pc, #28]	; (800b5ec <motion_primitive_set_timing+0x78>)
 800b5ce:	2164      	movs	r1, #100	; 0x64
 800b5d0:	fb01 f303 	mul.w	r3, r1, r3
 800b5d4:	4413      	add	r3, r2
 800b5d6:	3302      	adds	r3, #2
 800b5d8:	7b7a      	ldrb	r2, [r7, #13]
 800b5da:	701a      	strb	r2, [r3, #0]
 800b5dc:	e000      	b.n	800b5e0 <motion_primitive_set_timing+0x6c>
		return;
 800b5de:	bf00      	nop
 }
 800b5e0:	3714      	adds	r7, #20
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr
 800b5ea:	bf00      	nop
 800b5ec:	20015294 	.word	0x20015294

0800b5f0 <motion_primitive_set_scaling>:

 void motion_primitive_set_scaling(uint8_t index, float x_offset, float y_offset, float x_scale, float y_scale)
 {
 800b5f0:	b480      	push	{r7}
 800b5f2:	b087      	sub	sp, #28
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	ed87 0a04 	vstr	s0, [r7, #16]
 800b5fc:	edc7 0a03 	vstr	s1, [r7, #12]
 800b600:	ed87 1a02 	vstr	s2, [r7, #8]
 800b604:	edc7 1a01 	vstr	s3, [r7, #4]
 800b608:	75fb      	strb	r3, [r7, #23]
	if(index >= NUMBER_PRIMITIVES)
 800b60a:	7dfb      	ldrb	r3, [r7, #23]
 800b60c:	2b07      	cmp	r3, #7
 800b60e:	d824      	bhi.n	800b65a <motion_primitive_set_scaling+0x6a>
	{
		return;
	}
	primitives[index].x_offset_m = x_offset;
 800b610:	7dfb      	ldrb	r3, [r7, #23]
 800b612:	4a15      	ldr	r2, [pc, #84]	; (800b668 <motion_primitive_set_scaling+0x78>)
 800b614:	2164      	movs	r1, #100	; 0x64
 800b616:	fb01 f303 	mul.w	r3, r1, r3
 800b61a:	4413      	add	r3, r2
 800b61c:	3304      	adds	r3, #4
 800b61e:	693a      	ldr	r2, [r7, #16]
 800b620:	601a      	str	r2, [r3, #0]
	primitives[index].y_offset_m = y_offset;
 800b622:	7dfb      	ldrb	r3, [r7, #23]
 800b624:	4a10      	ldr	r2, [pc, #64]	; (800b668 <motion_primitive_set_scaling+0x78>)
 800b626:	2164      	movs	r1, #100	; 0x64
 800b628:	fb01 f303 	mul.w	r3, r1, r3
 800b62c:	4413      	add	r3, r2
 800b62e:	3308      	adds	r3, #8
 800b630:	68fa      	ldr	r2, [r7, #12]
 800b632:	601a      	str	r2, [r3, #0]
	primitives[index].x_scale = x_scale;
 800b634:	7dfb      	ldrb	r3, [r7, #23]
 800b636:	4a0c      	ldr	r2, [pc, #48]	; (800b668 <motion_primitive_set_scaling+0x78>)
 800b638:	2164      	movs	r1, #100	; 0x64
 800b63a:	fb01 f303 	mul.w	r3, r1, r3
 800b63e:	4413      	add	r3, r2
 800b640:	330c      	adds	r3, #12
 800b642:	68ba      	ldr	r2, [r7, #8]
 800b644:	601a      	str	r2, [r3, #0]
	primitives[index].y_scale = y_scale;
 800b646:	7dfb      	ldrb	r3, [r7, #23]
 800b648:	4a07      	ldr	r2, [pc, #28]	; (800b668 <motion_primitive_set_scaling+0x78>)
 800b64a:	2164      	movs	r1, #100	; 0x64
 800b64c:	fb01 f303 	mul.w	r3, r1, r3
 800b650:	4413      	add	r3, r2
 800b652:	3310      	adds	r3, #16
 800b654:	687a      	ldr	r2, [r7, #4]
 800b656:	601a      	str	r2, [r3, #0]
 800b658:	e000      	b.n	800b65c <motion_primitive_set_scaling+0x6c>
		return;
 800b65a:	bf00      	nop
 }
 800b65c:	371c      	adds	r7, #28
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr
 800b666:	bf00      	nop
 800b668:	20015294 	.word	0x20015294
 800b66c:	00000000 	.word	0x00000000

0800b670 <motion_primitive_get_position>:

 void motion_primitive_get_position(float * x, float * y)
 {
 800b670:	b5b0      	push	{r4, r5, r7, lr}
 800b672:	b08c      	sub	sp, #48	; 0x30
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	6039      	str	r1, [r7, #0]
	// First find global time,taking into account time syncs and primitive local offsets
	float current_t = 0.001 * (xTaskGetTickCount() - time_offset) - primitives[primitive_index].t_offset;
 800b67a:	f7fd f963 	bl	8008944 <xTaskGetTickCount>
 800b67e:	4603      	mov	r3, r0
 800b680:	461a      	mov	r2, r3
 800b682:	4b3f      	ldr	r3, [pc, #252]	; (800b780 <motion_primitive_get_position+0x110>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	1ad3      	subs	r3, r2, r3
 800b688:	4618      	mov	r0, r3
 800b68a:	f7f4 fee3 	bl	8000454 <__aeabi_ui2d>
 800b68e:	a33a      	add	r3, pc, #232	; (adr r3, 800b778 <motion_primitive_get_position+0x108>)
 800b690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b694:	f7f4 ff58 	bl	8000548 <__aeabi_dmul>
 800b698:	4603      	mov	r3, r0
 800b69a:	460c      	mov	r4, r1
 800b69c:	4625      	mov	r5, r4
 800b69e:	461c      	mov	r4, r3
 800b6a0:	4b38      	ldr	r3, [pc, #224]	; (800b784 <motion_primitive_get_position+0x114>)
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	4a37      	ldr	r2, [pc, #220]	; (800b788 <motion_primitive_get_position+0x118>)
 800b6aa:	2364      	movs	r3, #100	; 0x64
 800b6ac:	fb03 f301 	mul.w	r3, r3, r1
 800b6b0:	4413      	add	r3, r2
 800b6b2:	3318      	adds	r3, #24
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f7f4 feee 	bl	8000498 <__aeabi_f2d>
 800b6bc:	4602      	mov	r2, r0
 800b6be:	460b      	mov	r3, r1
 800b6c0:	4620      	mov	r0, r4
 800b6c2:	4629      	mov	r1, r5
 800b6c4:	f7f4 fd88 	bl	80001d8 <__aeabi_dsub>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	460c      	mov	r4, r1
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	4621      	mov	r1, r4
 800b6d0:	f7f5 fa12 	bl	8000af8 <__aeabi_d2f>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	627b      	str	r3, [r7, #36]	; 0x24

	float time_in_cycle = fmod(current_t, primitives[primitive_index].tau);
 800b6d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b6da:	f7f4 fedd 	bl	8000498 <__aeabi_f2d>
 800b6de:	4604      	mov	r4, r0
 800b6e0:	460d      	mov	r5, r1
 800b6e2:	4b28      	ldr	r3, [pc, #160]	; (800b784 <motion_primitive_get_position+0x114>)
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	4a27      	ldr	r2, [pc, #156]	; (800b788 <motion_primitive_get_position+0x118>)
 800b6ec:	2364      	movs	r3, #100	; 0x64
 800b6ee:	fb03 f301 	mul.w	r3, r3, r1
 800b6f2:	4413      	add	r3, r2
 800b6f4:	3314      	adds	r3, #20
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f7f4 fecd 	bl	8000498 <__aeabi_f2d>
 800b6fe:	4602      	mov	r2, r0
 800b700:	460b      	mov	r3, r1
 800b702:	ec43 2b11 	vmov	d1, r2, r3
 800b706:	ec45 4b10 	vmov	d0, r4, r5
 800b70a:	f001 faf7 	bl	800ccfc <fmod>
 800b70e:	ec54 3b10 	vmov	r3, r4, d0
 800b712:	4618      	mov	r0, r3
 800b714:	4621      	mov	r1, r4
 800b716:	f7f5 f9ef 	bl	8000af8 <__aeabi_d2f>
 800b71a:	4603      	mov	r3, r0
 800b71c:	623b      	str	r3, [r7, #32]
	float time_in_cycle_part = time_in_cycle / primitives[primitive_index].tau; // Prevent further mults
 800b71e:	4b19      	ldr	r3, [pc, #100]	; (800b784 <motion_primitive_get_position+0x114>)
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	b2db      	uxtb	r3, r3
 800b724:	4619      	mov	r1, r3
 800b726:	4a18      	ldr	r2, [pc, #96]	; (800b788 <motion_primitive_get_position+0x118>)
 800b728:	2364      	movs	r3, #100	; 0x64
 800b72a:	fb03 f301 	mul.w	r3, r3, r1
 800b72e:	4413      	add	r3, r2
 800b730:	3314      	adds	r3, #20
 800b732:	ed93 7a00 	vldr	s14, [r3]
 800b736:	edd7 6a08 	vldr	s13, [r7, #32]
 800b73a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b73e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	if(primitives[primitive_index].time_reverse > 0)
 800b742:	4b10      	ldr	r3, [pc, #64]	; (800b784 <motion_primitive_get_position+0x114>)
 800b744:	781b      	ldrb	r3, [r3, #0]
 800b746:	b2db      	uxtb	r3, r3
 800b748:	4619      	mov	r1, r3
 800b74a:	4a0f      	ldr	r2, [pc, #60]	; (800b788 <motion_primitive_get_position+0x118>)
 800b74c:	2364      	movs	r3, #100	; 0x64
 800b74e:	fb03 f301 	mul.w	r3, r3, r1
 800b752:	4413      	add	r3, r2
 800b754:	3302      	adds	r3, #2
 800b756:	781b      	ldrb	r3, [r3, #0]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d007      	beq.n	800b76c <motion_primitive_get_position+0xfc>
	{
		time_in_cycle_part = 1.0 - time_in_cycle_part;
 800b75c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b760:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800b764:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b768:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	}

	// Now find where we are in the cycle and linearly interpolate
	int i;
	float x_cmd, y_cmd;
	for(i = 1; i < primitives[primitive_index].num_keyframes; i++)
 800b76c:	2301      	movs	r3, #1
 800b76e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b770:	e2a3      	b.n	800bcba <motion_primitive_get_position+0x64a>
 800b772:	bf00      	nop
 800b774:	f3af 8000 	nop.w
 800b778:	d2f1a9fc 	.word	0xd2f1a9fc
 800b77c:	3f50624d 	.word	0x3f50624d
 800b780:	20015290 	.word	0x20015290
 800b784:	2001528c 	.word	0x2001528c
 800b788:	20015294 	.word	0x20015294
	{
		// Are we between keyframes?
		if(time_in_cycle_part >= primitives[primitive_index].frames[i-1].t_part && time_in_cycle_part < primitives[primitive_index].frames[i].t_part)
 800b78c:	4baa      	ldr	r3, [pc, #680]	; (800ba38 <motion_primitive_get_position+0x3c8>)
 800b78e:	781b      	ldrb	r3, [r3, #0]
 800b790:	b2db      	uxtb	r3, r3
 800b792:	4618      	mov	r0, r3
 800b794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b796:	1e5a      	subs	r2, r3, #1
 800b798:	49a8      	ldr	r1, [pc, #672]	; (800ba3c <motion_primitive_get_position+0x3cc>)
 800b79a:	4613      	mov	r3, r2
 800b79c:	005b      	lsls	r3, r3, #1
 800b79e:	4413      	add	r3, r2
 800b7a0:	009b      	lsls	r3, r3, #2
 800b7a2:	2264      	movs	r2, #100	; 0x64
 800b7a4:	fb02 f200 	mul.w	r2, r2, r0
 800b7a8:	4413      	add	r3, r2
 800b7aa:	440b      	add	r3, r1
 800b7ac:	3324      	adds	r3, #36	; 0x24
 800b7ae:	edd3 7a00 	vldr	s15, [r3]
 800b7b2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b7b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7be:	f2c0 813f 	blt.w	800ba40 <motion_primitive_get_position+0x3d0>
 800b7c2:	4b9d      	ldr	r3, [pc, #628]	; (800ba38 <motion_primitive_get_position+0x3c8>)
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	b2db      	uxtb	r3, r3
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	499c      	ldr	r1, [pc, #624]	; (800ba3c <motion_primitive_get_position+0x3cc>)
 800b7cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7ce:	4613      	mov	r3, r2
 800b7d0:	005b      	lsls	r3, r3, #1
 800b7d2:	4413      	add	r3, r2
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	2264      	movs	r2, #100	; 0x64
 800b7d8:	fb02 f200 	mul.w	r2, r2, r0
 800b7dc:	4413      	add	r3, r2
 800b7de:	440b      	add	r3, r1
 800b7e0:	3324      	adds	r3, #36	; 0x24
 800b7e2:	edd3 7a00 	vldr	s15, [r3]
 800b7e6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b7ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b7ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7f2:	f140 8125 	bpl.w	800ba40 <motion_primitive_get_position+0x3d0>
		{
			// Last value plus section of new value
			float dt = (time_in_cycle_part - primitives[primitive_index].frames[i-1].t_part);
 800b7f6:	4b90      	ldr	r3, [pc, #576]	; (800ba38 <motion_primitive_get_position+0x3c8>)
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	b2db      	uxtb	r3, r3
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b800:	1e5a      	subs	r2, r3, #1
 800b802:	498e      	ldr	r1, [pc, #568]	; (800ba3c <motion_primitive_get_position+0x3cc>)
 800b804:	4613      	mov	r3, r2
 800b806:	005b      	lsls	r3, r3, #1
 800b808:	4413      	add	r3, r2
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	2264      	movs	r2, #100	; 0x64
 800b80e:	fb02 f200 	mul.w	r2, r2, r0
 800b812:	4413      	add	r3, r2
 800b814:	440b      	add	r3, r1
 800b816:	3324      	adds	r3, #36	; 0x24
 800b818:	edd3 7a00 	vldr	s15, [r3]
 800b81c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b820:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b824:	edc7 7a07 	vstr	s15, [r7, #28]
			float d_section_dt = 1.0 / (primitives[primitive_index].frames[i].t_part - primitives[primitive_index].frames[i-1].t_part);
 800b828:	4b83      	ldr	r3, [pc, #524]	; (800ba38 <motion_primitive_get_position+0x3c8>)
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	b2db      	uxtb	r3, r3
 800b82e:	4618      	mov	r0, r3
 800b830:	4982      	ldr	r1, [pc, #520]	; (800ba3c <motion_primitive_get_position+0x3cc>)
 800b832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b834:	4613      	mov	r3, r2
 800b836:	005b      	lsls	r3, r3, #1
 800b838:	4413      	add	r3, r2
 800b83a:	009b      	lsls	r3, r3, #2
 800b83c:	2264      	movs	r2, #100	; 0x64
 800b83e:	fb02 f200 	mul.w	r2, r2, r0
 800b842:	4413      	add	r3, r2
 800b844:	440b      	add	r3, r1
 800b846:	3324      	adds	r3, #36	; 0x24
 800b848:	ed93 7a00 	vldr	s14, [r3]
 800b84c:	4b7a      	ldr	r3, [pc, #488]	; (800ba38 <motion_primitive_get_position+0x3c8>)
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	b2db      	uxtb	r3, r3
 800b852:	4618      	mov	r0, r3
 800b854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b856:	1e5a      	subs	r2, r3, #1
 800b858:	4978      	ldr	r1, [pc, #480]	; (800ba3c <motion_primitive_get_position+0x3cc>)
 800b85a:	4613      	mov	r3, r2
 800b85c:	005b      	lsls	r3, r3, #1
 800b85e:	4413      	add	r3, r2
 800b860:	009b      	lsls	r3, r3, #2
 800b862:	2264      	movs	r2, #100	; 0x64
 800b864:	fb02 f200 	mul.w	r2, r2, r0
 800b868:	4413      	add	r3, r2
 800b86a:	440b      	add	r3, r1
 800b86c:	3324      	adds	r3, #36	; 0x24
 800b86e:	edd3 7a00 	vldr	s15, [r3]
 800b872:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b876:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b87a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b87e:	edc7 7a06 	vstr	s15, [r7, #24]
			x_cmd = primitives[primitive_index].frames[i-1].x + (dt * (primitives[primitive_index].frames[i].x - primitives[primitive_index].frames[i-1].x) * d_section_dt);
 800b882:	4b6d      	ldr	r3, [pc, #436]	; (800ba38 <motion_primitive_get_position+0x3c8>)
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	b2db      	uxtb	r3, r3
 800b888:	4618      	mov	r0, r3
 800b88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88c:	1e5a      	subs	r2, r3, #1
 800b88e:	496b      	ldr	r1, [pc, #428]	; (800ba3c <motion_primitive_get_position+0x3cc>)
 800b890:	4613      	mov	r3, r2
 800b892:	005b      	lsls	r3, r3, #1
 800b894:	4413      	add	r3, r2
 800b896:	009b      	lsls	r3, r3, #2
 800b898:	2264      	movs	r2, #100	; 0x64
 800b89a:	fb02 f200 	mul.w	r2, r2, r0
 800b89e:	4413      	add	r3, r2
 800b8a0:	440b      	add	r3, r1
 800b8a2:	331c      	adds	r3, #28
 800b8a4:	ed93 7a00 	vldr	s14, [r3]
 800b8a8:	4b63      	ldr	r3, [pc, #396]	; (800ba38 <motion_primitive_get_position+0x3c8>)
 800b8aa:	781b      	ldrb	r3, [r3, #0]
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	4962      	ldr	r1, [pc, #392]	; (800ba3c <motion_primitive_get_position+0x3cc>)
 800b8b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8b4:	4613      	mov	r3, r2
 800b8b6:	005b      	lsls	r3, r3, #1
 800b8b8:	4413      	add	r3, r2
 800b8ba:	009b      	lsls	r3, r3, #2
 800b8bc:	2264      	movs	r2, #100	; 0x64
 800b8be:	fb02 f200 	mul.w	r2, r2, r0
 800b8c2:	4413      	add	r3, r2
 800b8c4:	440b      	add	r3, r1
 800b8c6:	331c      	adds	r3, #28
 800b8c8:	edd3 6a00 	vldr	s13, [r3]
 800b8cc:	4b5a      	ldr	r3, [pc, #360]	; (800ba38 <motion_primitive_get_position+0x3c8>)
 800b8ce:	781b      	ldrb	r3, [r3, #0]
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d6:	1e5a      	subs	r2, r3, #1
 800b8d8:	4958      	ldr	r1, [pc, #352]	; (800ba3c <motion_primitive_get_position+0x3cc>)
 800b8da:	4613      	mov	r3, r2
 800b8dc:	005b      	lsls	r3, r3, #1
 800b8de:	4413      	add	r3, r2
 800b8e0:	009b      	lsls	r3, r3, #2
 800b8e2:	2264      	movs	r2, #100	; 0x64
 800b8e4:	fb02 f200 	mul.w	r2, r2, r0
 800b8e8:	4413      	add	r3, r2
 800b8ea:	440b      	add	r3, r1
 800b8ec:	331c      	adds	r3, #28
 800b8ee:	edd3 7a00 	vldr	s15, [r3]
 800b8f2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b8f6:	edd7 7a07 	vldr	s15, [r7, #28]
 800b8fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b8fe:	edd7 7a06 	vldr	s15, [r7, #24]
 800b902:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b906:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b90a:	edc7 7a05 	vstr	s15, [r7, #20]
			y_cmd = primitives[primitive_index].frames[i-1].y + (dt * (primitives[primitive_index].frames[i].y - primitives[primitive_index].frames[i-1].y) * d_section_dt);
 800b90e:	4b4a      	ldr	r3, [pc, #296]	; (800ba38 <motion_primitive_get_position+0x3c8>)
 800b910:	781b      	ldrb	r3, [r3, #0]
 800b912:	b2db      	uxtb	r3, r3
 800b914:	4618      	mov	r0, r3
 800b916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b918:	1e5a      	subs	r2, r3, #1
 800b91a:	4948      	ldr	r1, [pc, #288]	; (800ba3c <motion_primitive_get_position+0x3cc>)
 800b91c:	4613      	mov	r3, r2
 800b91e:	005b      	lsls	r3, r3, #1
 800b920:	4413      	add	r3, r2
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	2264      	movs	r2, #100	; 0x64
 800b926:	fb02 f200 	mul.w	r2, r2, r0
 800b92a:	4413      	add	r3, r2
 800b92c:	440b      	add	r3, r1
 800b92e:	3320      	adds	r3, #32
 800b930:	ed93 7a00 	vldr	s14, [r3]
 800b934:	4b40      	ldr	r3, [pc, #256]	; (800ba38 <motion_primitive_get_position+0x3c8>)
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	b2db      	uxtb	r3, r3
 800b93a:	4618      	mov	r0, r3
 800b93c:	493f      	ldr	r1, [pc, #252]	; (800ba3c <motion_primitive_get_position+0x3cc>)
 800b93e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b940:	4613      	mov	r3, r2
 800b942:	005b      	lsls	r3, r3, #1
 800b944:	4413      	add	r3, r2
 800b946:	009b      	lsls	r3, r3, #2
 800b948:	2264      	movs	r2, #100	; 0x64
 800b94a:	fb02 f200 	mul.w	r2, r2, r0
 800b94e:	4413      	add	r3, r2
 800b950:	440b      	add	r3, r1
 800b952:	3320      	adds	r3, #32
 800b954:	edd3 6a00 	vldr	s13, [r3]
 800b958:	4b37      	ldr	r3, [pc, #220]	; (800ba38 <motion_primitive_get_position+0x3c8>)
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	4618      	mov	r0, r3
 800b960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b962:	1e5a      	subs	r2, r3, #1
 800b964:	4935      	ldr	r1, [pc, #212]	; (800ba3c <motion_primitive_get_position+0x3cc>)
 800b966:	4613      	mov	r3, r2
 800b968:	005b      	lsls	r3, r3, #1
 800b96a:	4413      	add	r3, r2
 800b96c:	009b      	lsls	r3, r3, #2
 800b96e:	2264      	movs	r2, #100	; 0x64
 800b970:	fb02 f200 	mul.w	r2, r2, r0
 800b974:	4413      	add	r3, r2
 800b976:	440b      	add	r3, r1
 800b978:	3320      	adds	r3, #32
 800b97a:	edd3 7a00 	vldr	s15, [r3]
 800b97e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b982:	edd7 7a07 	vldr	s15, [r7, #28]
 800b986:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b98a:	edd7 7a06 	vldr	s15, [r7, #24]
 800b98e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b992:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b996:	edc7 7a04 	vstr	s15, [r7, #16]
			// Apply offset, then scale it
			x_cmd += primitives[primitive_index].x_offset_m;
 800b99a:	4b27      	ldr	r3, [pc, #156]	; (800ba38 <motion_primitive_get_position+0x3c8>)
 800b99c:	781b      	ldrb	r3, [r3, #0]
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	4a26      	ldr	r2, [pc, #152]	; (800ba3c <motion_primitive_get_position+0x3cc>)
 800b9a4:	2364      	movs	r3, #100	; 0x64
 800b9a6:	fb03 f301 	mul.w	r3, r3, r1
 800b9aa:	4413      	add	r3, r2
 800b9ac:	3304      	adds	r3, #4
 800b9ae:	edd3 7a00 	vldr	s15, [r3]
 800b9b2:	ed97 7a05 	vldr	s14, [r7, #20]
 800b9b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b9ba:	edc7 7a05 	vstr	s15, [r7, #20]
			x_cmd *= primitives[primitive_index].x_scale;
 800b9be:	4b1e      	ldr	r3, [pc, #120]	; (800ba38 <motion_primitive_get_position+0x3c8>)
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	b2db      	uxtb	r3, r3
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	4a1d      	ldr	r2, [pc, #116]	; (800ba3c <motion_primitive_get_position+0x3cc>)
 800b9c8:	2364      	movs	r3, #100	; 0x64
 800b9ca:	fb03 f301 	mul.w	r3, r3, r1
 800b9ce:	4413      	add	r3, r2
 800b9d0:	330c      	adds	r3, #12
 800b9d2:	edd3 7a00 	vldr	s15, [r3]
 800b9d6:	ed97 7a05 	vldr	s14, [r7, #20]
 800b9da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9de:	edc7 7a05 	vstr	s15, [r7, #20]
			y_cmd += primitives[primitive_index].y_offset_m;
 800b9e2:	4b15      	ldr	r3, [pc, #84]	; (800ba38 <motion_primitive_get_position+0x3c8>)
 800b9e4:	781b      	ldrb	r3, [r3, #0]
 800b9e6:	b2db      	uxtb	r3, r3
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	4a14      	ldr	r2, [pc, #80]	; (800ba3c <motion_primitive_get_position+0x3cc>)
 800b9ec:	2364      	movs	r3, #100	; 0x64
 800b9ee:	fb03 f301 	mul.w	r3, r3, r1
 800b9f2:	4413      	add	r3, r2
 800b9f4:	3308      	adds	r3, #8
 800b9f6:	edd3 7a00 	vldr	s15, [r3]
 800b9fa:	ed97 7a04 	vldr	s14, [r7, #16]
 800b9fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba02:	edc7 7a04 	vstr	s15, [r7, #16]
			y_cmd *= primitives[primitive_index].y_scale;
 800ba06:	4b0c      	ldr	r3, [pc, #48]	; (800ba38 <motion_primitive_get_position+0x3c8>)
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	b2db      	uxtb	r3, r3
 800ba0c:	4619      	mov	r1, r3
 800ba0e:	4a0b      	ldr	r2, [pc, #44]	; (800ba3c <motion_primitive_get_position+0x3cc>)
 800ba10:	2364      	movs	r3, #100	; 0x64
 800ba12:	fb03 f301 	mul.w	r3, r3, r1
 800ba16:	4413      	add	r3, r2
 800ba18:	3310      	adds	r3, #16
 800ba1a:	edd3 7a00 	vldr	s15, [r3]
 800ba1e:	ed97 7a04 	vldr	s14, [r7, #16]
 800ba22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba26:	edc7 7a04 	vstr	s15, [r7, #16]

			*x = x_cmd;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	697a      	ldr	r2, [r7, #20]
 800ba2e:	601a      	str	r2, [r3, #0]
			*y = y_cmd;
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	693a      	ldr	r2, [r7, #16]
 800ba34:	601a      	str	r2, [r3, #0]
			return;
 800ba36:	e14f      	b.n	800bcd8 <motion_primitive_get_position+0x668>
 800ba38:	2001528c 	.word	0x2001528c
 800ba3c:	20015294 	.word	0x20015294
		}
		// Are we at the end, and after last keyframe
		if(i == (primitives[primitive_index].num_keyframes-1) && time_in_cycle_part >= primitives[primitive_index].frames[i].t_part)
 800ba40:	4ba7      	ldr	r3, [pc, #668]	; (800bce0 <motion_primitive_get_position+0x670>)
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	b2db      	uxtb	r3, r3
 800ba46:	4619      	mov	r1, r3
 800ba48:	4aa6      	ldr	r2, [pc, #664]	; (800bce4 <motion_primitive_get_position+0x674>)
 800ba4a:	2364      	movs	r3, #100	; 0x64
 800ba4c:	fb03 f301 	mul.w	r3, r3, r1
 800ba50:	4413      	add	r3, r2
 800ba52:	781b      	ldrb	r3, [r3, #0]
 800ba54:	3b01      	subs	r3, #1
 800ba56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	f040 812b 	bne.w	800bcb4 <motion_primitive_get_position+0x644>
 800ba5e:	4ba0      	ldr	r3, [pc, #640]	; (800bce0 <motion_primitive_get_position+0x670>)
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	b2db      	uxtb	r3, r3
 800ba64:	4618      	mov	r0, r3
 800ba66:	499f      	ldr	r1, [pc, #636]	; (800bce4 <motion_primitive_get_position+0x674>)
 800ba68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba6a:	4613      	mov	r3, r2
 800ba6c:	005b      	lsls	r3, r3, #1
 800ba6e:	4413      	add	r3, r2
 800ba70:	009b      	lsls	r3, r3, #2
 800ba72:	2264      	movs	r2, #100	; 0x64
 800ba74:	fb02 f200 	mul.w	r2, r2, r0
 800ba78:	4413      	add	r3, r2
 800ba7a:	440b      	add	r3, r1
 800ba7c:	3324      	adds	r3, #36	; 0x24
 800ba7e:	edd3 7a00 	vldr	s15, [r3]
 800ba82:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800ba86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ba8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba8e:	f2c0 8111 	blt.w	800bcb4 <motion_primitive_get_position+0x644>
		{
			// Last value plus section of new value
			float dt = (time_in_cycle_part - primitives[primitive_index].frames[i].t_part);
 800ba92:	4b93      	ldr	r3, [pc, #588]	; (800bce0 <motion_primitive_get_position+0x670>)
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	4618      	mov	r0, r3
 800ba9a:	4992      	ldr	r1, [pc, #584]	; (800bce4 <motion_primitive_get_position+0x674>)
 800ba9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba9e:	4613      	mov	r3, r2
 800baa0:	005b      	lsls	r3, r3, #1
 800baa2:	4413      	add	r3, r2
 800baa4:	009b      	lsls	r3, r3, #2
 800baa6:	2264      	movs	r2, #100	; 0x64
 800baa8:	fb02 f200 	mul.w	r2, r2, r0
 800baac:	4413      	add	r3, r2
 800baae:	440b      	add	r3, r1
 800bab0:	3324      	adds	r3, #36	; 0x24
 800bab2:	edd3 7a00 	vldr	s15, [r3]
 800bab6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800baba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800babe:	edc7 7a03 	vstr	s15, [r7, #12]
			float d_section_dt = 1.0 / (1.0 - primitives[primitive_index].frames[i].t_part);
 800bac2:	4b87      	ldr	r3, [pc, #540]	; (800bce0 <motion_primitive_get_position+0x670>)
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	b2db      	uxtb	r3, r3
 800bac8:	4618      	mov	r0, r3
 800baca:	4986      	ldr	r1, [pc, #536]	; (800bce4 <motion_primitive_get_position+0x674>)
 800bacc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bace:	4613      	mov	r3, r2
 800bad0:	005b      	lsls	r3, r3, #1
 800bad2:	4413      	add	r3, r2
 800bad4:	009b      	lsls	r3, r3, #2
 800bad6:	2264      	movs	r2, #100	; 0x64
 800bad8:	fb02 f200 	mul.w	r2, r2, r0
 800badc:	4413      	add	r3, r2
 800bade:	440b      	add	r3, r1
 800bae0:	3324      	adds	r3, #36	; 0x24
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	4618      	mov	r0, r3
 800bae6:	f7f4 fcd7 	bl	8000498 <__aeabi_f2d>
 800baea:	4603      	mov	r3, r0
 800baec:	460c      	mov	r4, r1
 800baee:	461a      	mov	r2, r3
 800baf0:	4623      	mov	r3, r4
 800baf2:	f04f 0000 	mov.w	r0, #0
 800baf6:	497c      	ldr	r1, [pc, #496]	; (800bce8 <motion_primitive_get_position+0x678>)
 800baf8:	f7f4 fb6e 	bl	80001d8 <__aeabi_dsub>
 800bafc:	4603      	mov	r3, r0
 800bafe:	460c      	mov	r4, r1
 800bb00:	461a      	mov	r2, r3
 800bb02:	4623      	mov	r3, r4
 800bb04:	f04f 0000 	mov.w	r0, #0
 800bb08:	4977      	ldr	r1, [pc, #476]	; (800bce8 <motion_primitive_get_position+0x678>)
 800bb0a:	f7f4 fe47 	bl	800079c <__aeabi_ddiv>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	460c      	mov	r4, r1
 800bb12:	4618      	mov	r0, r3
 800bb14:	4621      	mov	r1, r4
 800bb16:	f7f4 ffef 	bl	8000af8 <__aeabi_d2f>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	60bb      	str	r3, [r7, #8]
			x_cmd = primitives[primitive_index].frames[i].x + (dt * (primitives[primitive_index].frames[0].x - primitives[primitive_index].frames[i].x) * d_section_dt); // Cyclical, so zero index is next frame at end
 800bb1e:	4b70      	ldr	r3, [pc, #448]	; (800bce0 <motion_primitive_get_position+0x670>)
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	4618      	mov	r0, r3
 800bb26:	496f      	ldr	r1, [pc, #444]	; (800bce4 <motion_primitive_get_position+0x674>)
 800bb28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb2a:	4613      	mov	r3, r2
 800bb2c:	005b      	lsls	r3, r3, #1
 800bb2e:	4413      	add	r3, r2
 800bb30:	009b      	lsls	r3, r3, #2
 800bb32:	2264      	movs	r2, #100	; 0x64
 800bb34:	fb02 f200 	mul.w	r2, r2, r0
 800bb38:	4413      	add	r3, r2
 800bb3a:	440b      	add	r3, r1
 800bb3c:	331c      	adds	r3, #28
 800bb3e:	ed93 7a00 	vldr	s14, [r3]
 800bb42:	4b67      	ldr	r3, [pc, #412]	; (800bce0 <motion_primitive_get_position+0x670>)
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	b2db      	uxtb	r3, r3
 800bb48:	4619      	mov	r1, r3
 800bb4a:	4a66      	ldr	r2, [pc, #408]	; (800bce4 <motion_primitive_get_position+0x674>)
 800bb4c:	2364      	movs	r3, #100	; 0x64
 800bb4e:	fb03 f301 	mul.w	r3, r3, r1
 800bb52:	4413      	add	r3, r2
 800bb54:	331c      	adds	r3, #28
 800bb56:	edd3 6a00 	vldr	s13, [r3]
 800bb5a:	4b61      	ldr	r3, [pc, #388]	; (800bce0 <motion_primitive_get_position+0x670>)
 800bb5c:	781b      	ldrb	r3, [r3, #0]
 800bb5e:	b2db      	uxtb	r3, r3
 800bb60:	4618      	mov	r0, r3
 800bb62:	4960      	ldr	r1, [pc, #384]	; (800bce4 <motion_primitive_get_position+0x674>)
 800bb64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb66:	4613      	mov	r3, r2
 800bb68:	005b      	lsls	r3, r3, #1
 800bb6a:	4413      	add	r3, r2
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	2264      	movs	r2, #100	; 0x64
 800bb70:	fb02 f200 	mul.w	r2, r2, r0
 800bb74:	4413      	add	r3, r2
 800bb76:	440b      	add	r3, r1
 800bb78:	331c      	adds	r3, #28
 800bb7a:	edd3 7a00 	vldr	s15, [r3]
 800bb7e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800bb82:	edd7 7a03 	vldr	s15, [r7, #12]
 800bb86:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800bb8a:	edd7 7a02 	vldr	s15, [r7, #8]
 800bb8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb92:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb96:	edc7 7a05 	vstr	s15, [r7, #20]
			y_cmd = primitives[primitive_index].frames[i].y + (dt * (primitives[primitive_index].frames[0].y - primitives[primitive_index].frames[i].y) * d_section_dt);
 800bb9a:	4b51      	ldr	r3, [pc, #324]	; (800bce0 <motion_primitive_get_position+0x670>)
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	b2db      	uxtb	r3, r3
 800bba0:	4618      	mov	r0, r3
 800bba2:	4950      	ldr	r1, [pc, #320]	; (800bce4 <motion_primitive_get_position+0x674>)
 800bba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bba6:	4613      	mov	r3, r2
 800bba8:	005b      	lsls	r3, r3, #1
 800bbaa:	4413      	add	r3, r2
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	2264      	movs	r2, #100	; 0x64
 800bbb0:	fb02 f200 	mul.w	r2, r2, r0
 800bbb4:	4413      	add	r3, r2
 800bbb6:	440b      	add	r3, r1
 800bbb8:	3320      	adds	r3, #32
 800bbba:	ed93 7a00 	vldr	s14, [r3]
 800bbbe:	4b48      	ldr	r3, [pc, #288]	; (800bce0 <motion_primitive_get_position+0x670>)
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	4a47      	ldr	r2, [pc, #284]	; (800bce4 <motion_primitive_get_position+0x674>)
 800bbc8:	2364      	movs	r3, #100	; 0x64
 800bbca:	fb03 f301 	mul.w	r3, r3, r1
 800bbce:	4413      	add	r3, r2
 800bbd0:	3320      	adds	r3, #32
 800bbd2:	edd3 6a00 	vldr	s13, [r3]
 800bbd6:	4b42      	ldr	r3, [pc, #264]	; (800bce0 <motion_primitive_get_position+0x670>)
 800bbd8:	781b      	ldrb	r3, [r3, #0]
 800bbda:	b2db      	uxtb	r3, r3
 800bbdc:	4618      	mov	r0, r3
 800bbde:	4941      	ldr	r1, [pc, #260]	; (800bce4 <motion_primitive_get_position+0x674>)
 800bbe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbe2:	4613      	mov	r3, r2
 800bbe4:	005b      	lsls	r3, r3, #1
 800bbe6:	4413      	add	r3, r2
 800bbe8:	009b      	lsls	r3, r3, #2
 800bbea:	2264      	movs	r2, #100	; 0x64
 800bbec:	fb02 f200 	mul.w	r2, r2, r0
 800bbf0:	4413      	add	r3, r2
 800bbf2:	440b      	add	r3, r1
 800bbf4:	3320      	adds	r3, #32
 800bbf6:	edd3 7a00 	vldr	s15, [r3]
 800bbfa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800bbfe:	edd7 7a03 	vldr	s15, [r7, #12]
 800bc02:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800bc06:	edd7 7a02 	vldr	s15, [r7, #8]
 800bc0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bc0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc12:	edc7 7a04 	vstr	s15, [r7, #16]
			// Apply offset, then scale it
			x_cmd += primitives[primitive_index].x_offset_m;
 800bc16:	4b32      	ldr	r3, [pc, #200]	; (800bce0 <motion_primitive_get_position+0x670>)
 800bc18:	781b      	ldrb	r3, [r3, #0]
 800bc1a:	b2db      	uxtb	r3, r3
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	4a31      	ldr	r2, [pc, #196]	; (800bce4 <motion_primitive_get_position+0x674>)
 800bc20:	2364      	movs	r3, #100	; 0x64
 800bc22:	fb03 f301 	mul.w	r3, r3, r1
 800bc26:	4413      	add	r3, r2
 800bc28:	3304      	adds	r3, #4
 800bc2a:	edd3 7a00 	vldr	s15, [r3]
 800bc2e:	ed97 7a05 	vldr	s14, [r7, #20]
 800bc32:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc36:	edc7 7a05 	vstr	s15, [r7, #20]
			x_cmd *= primitives[primitive_index].x_scale;
 800bc3a:	4b29      	ldr	r3, [pc, #164]	; (800bce0 <motion_primitive_get_position+0x670>)
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	b2db      	uxtb	r3, r3
 800bc40:	4619      	mov	r1, r3
 800bc42:	4a28      	ldr	r2, [pc, #160]	; (800bce4 <motion_primitive_get_position+0x674>)
 800bc44:	2364      	movs	r3, #100	; 0x64
 800bc46:	fb03 f301 	mul.w	r3, r3, r1
 800bc4a:	4413      	add	r3, r2
 800bc4c:	330c      	adds	r3, #12
 800bc4e:	edd3 7a00 	vldr	s15, [r3]
 800bc52:	ed97 7a05 	vldr	s14, [r7, #20]
 800bc56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc5a:	edc7 7a05 	vstr	s15, [r7, #20]
			y_cmd += primitives[primitive_index].y_offset_m;
 800bc5e:	4b20      	ldr	r3, [pc, #128]	; (800bce0 <motion_primitive_get_position+0x670>)
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	b2db      	uxtb	r3, r3
 800bc64:	4619      	mov	r1, r3
 800bc66:	4a1f      	ldr	r2, [pc, #124]	; (800bce4 <motion_primitive_get_position+0x674>)
 800bc68:	2364      	movs	r3, #100	; 0x64
 800bc6a:	fb03 f301 	mul.w	r3, r3, r1
 800bc6e:	4413      	add	r3, r2
 800bc70:	3308      	adds	r3, #8
 800bc72:	edd3 7a00 	vldr	s15, [r3]
 800bc76:	ed97 7a04 	vldr	s14, [r7, #16]
 800bc7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc7e:	edc7 7a04 	vstr	s15, [r7, #16]
			y_cmd *= primitives[primitive_index].y_scale;
 800bc82:	4b17      	ldr	r3, [pc, #92]	; (800bce0 <motion_primitive_get_position+0x670>)
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	4619      	mov	r1, r3
 800bc8a:	4a16      	ldr	r2, [pc, #88]	; (800bce4 <motion_primitive_get_position+0x674>)
 800bc8c:	2364      	movs	r3, #100	; 0x64
 800bc8e:	fb03 f301 	mul.w	r3, r3, r1
 800bc92:	4413      	add	r3, r2
 800bc94:	3310      	adds	r3, #16
 800bc96:	edd3 7a00 	vldr	s15, [r3]
 800bc9a:	ed97 7a04 	vldr	s14, [r7, #16]
 800bc9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bca2:	edc7 7a04 	vstr	s15, [r7, #16]

			*x = x_cmd;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	697a      	ldr	r2, [r7, #20]
 800bcaa:	601a      	str	r2, [r3, #0]
			*y = y_cmd;
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	693a      	ldr	r2, [r7, #16]
 800bcb0:	601a      	str	r2, [r3, #0]
			return;
 800bcb2:	e011      	b.n	800bcd8 <motion_primitive_get_position+0x668>
	for(i = 1; i < primitives[primitive_index].num_keyframes; i++)
 800bcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	62bb      	str	r3, [r7, #40]	; 0x28
 800bcba:	4b09      	ldr	r3, [pc, #36]	; (800bce0 <motion_primitive_get_position+0x670>)
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	b2db      	uxtb	r3, r3
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	4a08      	ldr	r2, [pc, #32]	; (800bce4 <motion_primitive_get_position+0x674>)
 800bcc4:	2364      	movs	r3, #100	; 0x64
 800bcc6:	fb03 f301 	mul.w	r3, r3, r1
 800bcca:	4413      	add	r3, r2
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	461a      	mov	r2, r3
 800bcd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	f6ff ad5a 	blt.w	800b78c <motion_primitive_get_position+0x11c>
		}
	}
 }
 800bcd8:	3730      	adds	r7, #48	; 0x30
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bdb0      	pop	{r4, r5, r7, pc}
 800bcde:	bf00      	nop
 800bce0:	2001528c 	.word	0x2001528c
 800bce4:	20015294 	.word	0x20015294
 800bce8:	3ff00000 	.word	0x3ff00000
 800bcec:	00000000 	.word	0x00000000

0800bcf0 <motion_primitive_get_position_bezier_quadratic>:

 void motion_primitive_get_position_bezier_quadratic(float * x, float * y)
 {
 800bcf0:	b5b0      	push	{r4, r5, r7, lr}
 800bcf2:	b08c      	sub	sp, #48	; 0x30
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	6039      	str	r1, [r7, #0]
	if( primitives[primitive_index].num_keyframes % 2 != 0)
 800bcfa:	4b55      	ldr	r3, [pc, #340]	; (800be50 <motion_primitive_get_position_bezier_quadratic+0x160>)
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	b2db      	uxtb	r3, r3
 800bd00:	4619      	mov	r1, r3
 800bd02:	4a54      	ldr	r2, [pc, #336]	; (800be54 <motion_primitive_get_position_bezier_quadratic+0x164>)
 800bd04:	2364      	movs	r3, #100	; 0x64
 800bd06:	fb03 f301 	mul.w	r3, r3, r1
 800bd0a:	4413      	add	r3, r2
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	f003 0301 	and.w	r3, r3, #1
 800bd12:	b2db      	uxtb	r3, r3
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d019      	beq.n	800bd4c <motion_primitive_get_position_bezier_quadratic+0x5c>
	{
		// Stay at first element, assume it is safe.
		// Bezier quadratic curve cycle must have even number of elements
		*x = primitives[primitive_index].frames[0].x;
 800bd18:	4b4d      	ldr	r3, [pc, #308]	; (800be50 <motion_primitive_get_position_bezier_quadratic+0x160>)
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	b2db      	uxtb	r3, r3
 800bd1e:	4619      	mov	r1, r3
 800bd20:	4a4c      	ldr	r2, [pc, #304]	; (800be54 <motion_primitive_get_position_bezier_quadratic+0x164>)
 800bd22:	2364      	movs	r3, #100	; 0x64
 800bd24:	fb03 f301 	mul.w	r3, r3, r1
 800bd28:	4413      	add	r3, r2
 800bd2a:	331c      	adds	r3, #28
 800bd2c:	681a      	ldr	r2, [r3, #0]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	601a      	str	r2, [r3, #0]
		*y = primitives[primitive_index].frames[0].y;
 800bd32:	4b47      	ldr	r3, [pc, #284]	; (800be50 <motion_primitive_get_position_bezier_quadratic+0x160>)
 800bd34:	781b      	ldrb	r3, [r3, #0]
 800bd36:	b2db      	uxtb	r3, r3
 800bd38:	4619      	mov	r1, r3
 800bd3a:	4a46      	ldr	r2, [pc, #280]	; (800be54 <motion_primitive_get_position_bezier_quadratic+0x164>)
 800bd3c:	2364      	movs	r3, #100	; 0x64
 800bd3e:	fb03 f301 	mul.w	r3, r3, r1
 800bd42:	4413      	add	r3, r2
 800bd44:	3320      	adds	r3, #32
 800bd46:	681a      	ldr	r2, [r3, #0]
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	601a      	str	r2, [r3, #0]
	}
	// First find global time,taking into account time syncs and primitive local offsets
	float current_t = 0.001 * (xTaskGetTickCount() - time_offset) - primitives[primitive_index].t_offset;
 800bd4c:	f7fc fdfa 	bl	8008944 <xTaskGetTickCount>
 800bd50:	4603      	mov	r3, r0
 800bd52:	461a      	mov	r2, r3
 800bd54:	4b40      	ldr	r3, [pc, #256]	; (800be58 <motion_primitive_get_position_bezier_quadratic+0x168>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	1ad3      	subs	r3, r2, r3
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f7f4 fb7a 	bl	8000454 <__aeabi_ui2d>
 800bd60:	a339      	add	r3, pc, #228	; (adr r3, 800be48 <motion_primitive_get_position_bezier_quadratic+0x158>)
 800bd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd66:	f7f4 fbef 	bl	8000548 <__aeabi_dmul>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	460c      	mov	r4, r1
 800bd6e:	4625      	mov	r5, r4
 800bd70:	461c      	mov	r4, r3
 800bd72:	4b37      	ldr	r3, [pc, #220]	; (800be50 <motion_primitive_get_position_bezier_quadratic+0x160>)
 800bd74:	781b      	ldrb	r3, [r3, #0]
 800bd76:	b2db      	uxtb	r3, r3
 800bd78:	4619      	mov	r1, r3
 800bd7a:	4a36      	ldr	r2, [pc, #216]	; (800be54 <motion_primitive_get_position_bezier_quadratic+0x164>)
 800bd7c:	2364      	movs	r3, #100	; 0x64
 800bd7e:	fb03 f301 	mul.w	r3, r3, r1
 800bd82:	4413      	add	r3, r2
 800bd84:	3318      	adds	r3, #24
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f7f4 fb85 	bl	8000498 <__aeabi_f2d>
 800bd8e:	4602      	mov	r2, r0
 800bd90:	460b      	mov	r3, r1
 800bd92:	4620      	mov	r0, r4
 800bd94:	4629      	mov	r1, r5
 800bd96:	f7f4 fa1f 	bl	80001d8 <__aeabi_dsub>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	460c      	mov	r4, r1
 800bd9e:	4618      	mov	r0, r3
 800bda0:	4621      	mov	r1, r4
 800bda2:	f7f4 fea9 	bl	8000af8 <__aeabi_d2f>
 800bda6:	4603      	mov	r3, r0
 800bda8:	627b      	str	r3, [r7, #36]	; 0x24

	float time_in_cycle = fmod(current_t, primitives[primitive_index].tau);
 800bdaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bdac:	f7f4 fb74 	bl	8000498 <__aeabi_f2d>
 800bdb0:	4604      	mov	r4, r0
 800bdb2:	460d      	mov	r5, r1
 800bdb4:	4b26      	ldr	r3, [pc, #152]	; (800be50 <motion_primitive_get_position_bezier_quadratic+0x160>)
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	b2db      	uxtb	r3, r3
 800bdba:	4619      	mov	r1, r3
 800bdbc:	4a25      	ldr	r2, [pc, #148]	; (800be54 <motion_primitive_get_position_bezier_quadratic+0x164>)
 800bdbe:	2364      	movs	r3, #100	; 0x64
 800bdc0:	fb03 f301 	mul.w	r3, r3, r1
 800bdc4:	4413      	add	r3, r2
 800bdc6:	3314      	adds	r3, #20
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7f4 fb64 	bl	8000498 <__aeabi_f2d>
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	ec43 2b11 	vmov	d1, r2, r3
 800bdd8:	ec45 4b10 	vmov	d0, r4, r5
 800bddc:	f000 ff8e 	bl	800ccfc <fmod>
 800bde0:	ec54 3b10 	vmov	r3, r4, d0
 800bde4:	4618      	mov	r0, r3
 800bde6:	4621      	mov	r1, r4
 800bde8:	f7f4 fe86 	bl	8000af8 <__aeabi_d2f>
 800bdec:	4603      	mov	r3, r0
 800bdee:	623b      	str	r3, [r7, #32]
	float time_in_cycle_part = time_in_cycle / primitives[primitive_index].tau; // Prevent further mults
 800bdf0:	4b17      	ldr	r3, [pc, #92]	; (800be50 <motion_primitive_get_position_bezier_quadratic+0x160>)
 800bdf2:	781b      	ldrb	r3, [r3, #0]
 800bdf4:	b2db      	uxtb	r3, r3
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	4a16      	ldr	r2, [pc, #88]	; (800be54 <motion_primitive_get_position_bezier_quadratic+0x164>)
 800bdfa:	2364      	movs	r3, #100	; 0x64
 800bdfc:	fb03 f301 	mul.w	r3, r3, r1
 800be00:	4413      	add	r3, r2
 800be02:	3314      	adds	r3, #20
 800be04:	ed93 7a00 	vldr	s14, [r3]
 800be08:	edd7 6a08 	vldr	s13, [r7, #32]
 800be0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be10:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	if(primitives[primitive_index].time_reverse > 0)
 800be14:	4b0e      	ldr	r3, [pc, #56]	; (800be50 <motion_primitive_get_position_bezier_quadratic+0x160>)
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	b2db      	uxtb	r3, r3
 800be1a:	4619      	mov	r1, r3
 800be1c:	4a0d      	ldr	r2, [pc, #52]	; (800be54 <motion_primitive_get_position_bezier_quadratic+0x164>)
 800be1e:	2364      	movs	r3, #100	; 0x64
 800be20:	fb03 f301 	mul.w	r3, r3, r1
 800be24:	4413      	add	r3, r2
 800be26:	3302      	adds	r3, #2
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d007      	beq.n	800be3e <motion_primitive_get_position_bezier_quadratic+0x14e>
	{
		time_in_cycle_part = 1.0 - time_in_cycle_part;
 800be2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be32:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800be36:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be3a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	// Now find where we are in the cycle and Bezier quadratic interpolation
	// Every odd keyframe is a guide point. Path moves through even keyframes
	int i;
	float x_cmd, y_cmd;
	for(i = 1; i < primitives[primitive_index].num_keyframes/2; i++)
 800be3e:	2301      	movs	r3, #1
 800be40:	62bb      	str	r3, [r7, #40]	; 0x28
 800be42:	e34d      	b.n	800c4e0 <motion_primitive_get_position_bezier_quadratic+0x7f0>
 800be44:	f3af 8000 	nop.w
 800be48:	d2f1a9fc 	.word	0xd2f1a9fc
 800be4c:	3f50624d 	.word	0x3f50624d
 800be50:	2001528c 	.word	0x2001528c
 800be54:	20015294 	.word	0x20015294
 800be58:	20015290 	.word	0x20015290
	{
		// find the keyframe, looking between every other, starting at index 0
		// e.g. for 6 keyframes, we look at 0, 2, 4, and consider "6" as 0 again
		if(time_in_cycle_part >= primitives[primitive_index].frames[2*i-2].t_part && time_in_cycle_part < primitives[primitive_index].frames[2*i].t_part)
 800be5c:	4bd7      	ldr	r3, [pc, #860]	; (800c1bc <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800be5e:	781b      	ldrb	r3, [r3, #0]
 800be60:	b2db      	uxtb	r3, r3
 800be62:	4618      	mov	r0, r3
 800be64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be66:	3b01      	subs	r3, #1
 800be68:	005a      	lsls	r2, r3, #1
 800be6a:	49d5      	ldr	r1, [pc, #852]	; (800c1c0 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800be6c:	4613      	mov	r3, r2
 800be6e:	005b      	lsls	r3, r3, #1
 800be70:	4413      	add	r3, r2
 800be72:	009b      	lsls	r3, r3, #2
 800be74:	2264      	movs	r2, #100	; 0x64
 800be76:	fb02 f200 	mul.w	r2, r2, r0
 800be7a:	4413      	add	r3, r2
 800be7c:	440b      	add	r3, r1
 800be7e:	3324      	adds	r3, #36	; 0x24
 800be80:	edd3 7a00 	vldr	s15, [r3]
 800be84:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800be88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800be8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be90:	f2c0 8198 	blt.w	800c1c4 <motion_primitive_get_position_bezier_quadratic+0x4d4>
 800be94:	4bc9      	ldr	r3, [pc, #804]	; (800c1bc <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	b2db      	uxtb	r3, r3
 800be9a:	4618      	mov	r0, r3
 800be9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be9e:	005a      	lsls	r2, r3, #1
 800bea0:	49c7      	ldr	r1, [pc, #796]	; (800c1c0 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800bea2:	4613      	mov	r3, r2
 800bea4:	005b      	lsls	r3, r3, #1
 800bea6:	4413      	add	r3, r2
 800bea8:	009b      	lsls	r3, r3, #2
 800beaa:	2264      	movs	r2, #100	; 0x64
 800beac:	fb02 f200 	mul.w	r2, r2, r0
 800beb0:	4413      	add	r3, r2
 800beb2:	440b      	add	r3, r1
 800beb4:	3324      	adds	r3, #36	; 0x24
 800beb6:	edd3 7a00 	vldr	s15, [r3]
 800beba:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800bebe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bec6:	f140 817d 	bpl.w	800c1c4 <motion_primitive_get_position_bezier_quadratic+0x4d4>
		{
			// scale to something that varies 0 <= dt < 1 between the points
			float dt = (primitives[primitive_index].frames[2*i].t_part - time_in_cycle_part) / (primitives[primitive_index].frames[2*i].t_part - primitives[primitive_index].frames[2*i - 2].t_part);
 800beca:	4bbc      	ldr	r3, [pc, #752]	; (800c1bc <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	b2db      	uxtb	r3, r3
 800bed0:	4618      	mov	r0, r3
 800bed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed4:	005a      	lsls	r2, r3, #1
 800bed6:	49ba      	ldr	r1, [pc, #744]	; (800c1c0 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800bed8:	4613      	mov	r3, r2
 800beda:	005b      	lsls	r3, r3, #1
 800bedc:	4413      	add	r3, r2
 800bede:	009b      	lsls	r3, r3, #2
 800bee0:	2264      	movs	r2, #100	; 0x64
 800bee2:	fb02 f200 	mul.w	r2, r2, r0
 800bee6:	4413      	add	r3, r2
 800bee8:	440b      	add	r3, r1
 800beea:	3324      	adds	r3, #36	; 0x24
 800beec:	ed93 7a00 	vldr	s14, [r3]
 800bef0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800bef4:	ee77 6a67 	vsub.f32	s13, s14, s15
 800bef8:	4bb0      	ldr	r3, [pc, #704]	; (800c1bc <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	b2db      	uxtb	r3, r3
 800befe:	4618      	mov	r0, r3
 800bf00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf02:	005a      	lsls	r2, r3, #1
 800bf04:	49ae      	ldr	r1, [pc, #696]	; (800c1c0 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800bf06:	4613      	mov	r3, r2
 800bf08:	005b      	lsls	r3, r3, #1
 800bf0a:	4413      	add	r3, r2
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	2264      	movs	r2, #100	; 0x64
 800bf10:	fb02 f200 	mul.w	r2, r2, r0
 800bf14:	4413      	add	r3, r2
 800bf16:	440b      	add	r3, r1
 800bf18:	3324      	adds	r3, #36	; 0x24
 800bf1a:	ed93 7a00 	vldr	s14, [r3]
 800bf1e:	4ba7      	ldr	r3, [pc, #668]	; (800c1bc <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800bf20:	781b      	ldrb	r3, [r3, #0]
 800bf22:	b2db      	uxtb	r3, r3
 800bf24:	4618      	mov	r0, r3
 800bf26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf28:	3b01      	subs	r3, #1
 800bf2a:	005a      	lsls	r2, r3, #1
 800bf2c:	49a4      	ldr	r1, [pc, #656]	; (800c1c0 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800bf2e:	4613      	mov	r3, r2
 800bf30:	005b      	lsls	r3, r3, #1
 800bf32:	4413      	add	r3, r2
 800bf34:	009b      	lsls	r3, r3, #2
 800bf36:	2264      	movs	r2, #100	; 0x64
 800bf38:	fb02 f200 	mul.w	r2, r2, r0
 800bf3c:	4413      	add	r3, r2
 800bf3e:	440b      	add	r3, r1
 800bf40:	3324      	adds	r3, #36	; 0x24
 800bf42:	edd3 7a00 	vldr	s15, [r3]
 800bf46:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bf4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf4e:	edc7 7a07 	vstr	s15, [r7, #28]
			float one_min_dt = 1.0 - dt; // used many times
 800bf52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf56:	edd7 7a07 	vldr	s15, [r7, #28]
 800bf5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf5e:	edc7 7a06 	vstr	s15, [r7, #24]
			x_cmd = one_min_dt*(one_min_dt*primitives[primitive_index].frames[2*i].x + dt*primitives[primitive_index].frames[2*i-1].x) + dt * (one_min_dt * primitives[primitive_index].frames[2*i-1].x + dt * primitives[primitive_index].frames[2*i-2].x);
 800bf62:	4b96      	ldr	r3, [pc, #600]	; (800c1bc <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	b2db      	uxtb	r3, r3
 800bf68:	4618      	mov	r0, r3
 800bf6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6c:	005a      	lsls	r2, r3, #1
 800bf6e:	4994      	ldr	r1, [pc, #592]	; (800c1c0 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800bf70:	4613      	mov	r3, r2
 800bf72:	005b      	lsls	r3, r3, #1
 800bf74:	4413      	add	r3, r2
 800bf76:	009b      	lsls	r3, r3, #2
 800bf78:	2264      	movs	r2, #100	; 0x64
 800bf7a:	fb02 f200 	mul.w	r2, r2, r0
 800bf7e:	4413      	add	r3, r2
 800bf80:	440b      	add	r3, r1
 800bf82:	331c      	adds	r3, #28
 800bf84:	ed93 7a00 	vldr	s14, [r3]
 800bf88:	edd7 7a06 	vldr	s15, [r7, #24]
 800bf8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf90:	4b8a      	ldr	r3, [pc, #552]	; (800c1bc <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800bf92:	781b      	ldrb	r3, [r3, #0]
 800bf94:	b2db      	uxtb	r3, r3
 800bf96:	4618      	mov	r0, r3
 800bf98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf9a:	005b      	lsls	r3, r3, #1
 800bf9c:	1e5a      	subs	r2, r3, #1
 800bf9e:	4988      	ldr	r1, [pc, #544]	; (800c1c0 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800bfa0:	4613      	mov	r3, r2
 800bfa2:	005b      	lsls	r3, r3, #1
 800bfa4:	4413      	add	r3, r2
 800bfa6:	009b      	lsls	r3, r3, #2
 800bfa8:	2264      	movs	r2, #100	; 0x64
 800bfaa:	fb02 f200 	mul.w	r2, r2, r0
 800bfae:	4413      	add	r3, r2
 800bfb0:	440b      	add	r3, r1
 800bfb2:	331c      	adds	r3, #28
 800bfb4:	edd3 6a00 	vldr	s13, [r3]
 800bfb8:	edd7 7a07 	vldr	s15, [r7, #28]
 800bfbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bfc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bfc4:	edd7 7a06 	vldr	s15, [r7, #24]
 800bfc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bfcc:	4b7b      	ldr	r3, [pc, #492]	; (800c1bc <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800bfce:	781b      	ldrb	r3, [r3, #0]
 800bfd0:	b2db      	uxtb	r3, r3
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd6:	005b      	lsls	r3, r3, #1
 800bfd8:	1e5a      	subs	r2, r3, #1
 800bfda:	4979      	ldr	r1, [pc, #484]	; (800c1c0 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800bfdc:	4613      	mov	r3, r2
 800bfde:	005b      	lsls	r3, r3, #1
 800bfe0:	4413      	add	r3, r2
 800bfe2:	009b      	lsls	r3, r3, #2
 800bfe4:	2264      	movs	r2, #100	; 0x64
 800bfe6:	fb02 f200 	mul.w	r2, r2, r0
 800bfea:	4413      	add	r3, r2
 800bfec:	440b      	add	r3, r1
 800bfee:	331c      	adds	r3, #28
 800bff0:	edd3 6a00 	vldr	s13, [r3]
 800bff4:	edd7 7a06 	vldr	s15, [r7, #24]
 800bff8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800bffc:	4b6f      	ldr	r3, [pc, #444]	; (800c1bc <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800bffe:	781b      	ldrb	r3, [r3, #0]
 800c000:	b2db      	uxtb	r3, r3
 800c002:	4618      	mov	r0, r3
 800c004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c006:	3b01      	subs	r3, #1
 800c008:	005a      	lsls	r2, r3, #1
 800c00a:	496d      	ldr	r1, [pc, #436]	; (800c1c0 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800c00c:	4613      	mov	r3, r2
 800c00e:	005b      	lsls	r3, r3, #1
 800c010:	4413      	add	r3, r2
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	2264      	movs	r2, #100	; 0x64
 800c016:	fb02 f200 	mul.w	r2, r2, r0
 800c01a:	4413      	add	r3, r2
 800c01c:	440b      	add	r3, r1
 800c01e:	331c      	adds	r3, #28
 800c020:	ed93 6a00 	vldr	s12, [r3]
 800c024:	edd7 7a07 	vldr	s15, [r7, #28]
 800c028:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c02c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c030:	edd7 7a07 	vldr	s15, [r7, #28]
 800c034:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c038:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c03c:	edc7 7a05 	vstr	s15, [r7, #20]
			y_cmd = one_min_dt*(one_min_dt*primitives[primitive_index].frames[2*i].y + dt*primitives[primitive_index].frames[2*i-1].y) + dt * (one_min_dt * primitives[primitive_index].frames[2*i-1].y + dt * primitives[primitive_index].frames[2*i-2].y);
 800c040:	4b5e      	ldr	r3, [pc, #376]	; (800c1bc <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800c042:	781b      	ldrb	r3, [r3, #0]
 800c044:	b2db      	uxtb	r3, r3
 800c046:	4618      	mov	r0, r3
 800c048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c04a:	005a      	lsls	r2, r3, #1
 800c04c:	495c      	ldr	r1, [pc, #368]	; (800c1c0 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800c04e:	4613      	mov	r3, r2
 800c050:	005b      	lsls	r3, r3, #1
 800c052:	4413      	add	r3, r2
 800c054:	009b      	lsls	r3, r3, #2
 800c056:	2264      	movs	r2, #100	; 0x64
 800c058:	fb02 f200 	mul.w	r2, r2, r0
 800c05c:	4413      	add	r3, r2
 800c05e:	440b      	add	r3, r1
 800c060:	3320      	adds	r3, #32
 800c062:	ed93 7a00 	vldr	s14, [r3]
 800c066:	edd7 7a06 	vldr	s15, [r7, #24]
 800c06a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c06e:	4b53      	ldr	r3, [pc, #332]	; (800c1bc <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	b2db      	uxtb	r3, r3
 800c074:	4618      	mov	r0, r3
 800c076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c078:	005b      	lsls	r3, r3, #1
 800c07a:	1e5a      	subs	r2, r3, #1
 800c07c:	4950      	ldr	r1, [pc, #320]	; (800c1c0 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800c07e:	4613      	mov	r3, r2
 800c080:	005b      	lsls	r3, r3, #1
 800c082:	4413      	add	r3, r2
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	2264      	movs	r2, #100	; 0x64
 800c088:	fb02 f200 	mul.w	r2, r2, r0
 800c08c:	4413      	add	r3, r2
 800c08e:	440b      	add	r3, r1
 800c090:	3320      	adds	r3, #32
 800c092:	edd3 6a00 	vldr	s13, [r3]
 800c096:	edd7 7a07 	vldr	s15, [r7, #28]
 800c09a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c09e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c0a2:	edd7 7a06 	vldr	s15, [r7, #24]
 800c0a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c0aa:	4b44      	ldr	r3, [pc, #272]	; (800c1bc <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	b2db      	uxtb	r3, r3
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b4:	005b      	lsls	r3, r3, #1
 800c0b6:	1e5a      	subs	r2, r3, #1
 800c0b8:	4941      	ldr	r1, [pc, #260]	; (800c1c0 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800c0ba:	4613      	mov	r3, r2
 800c0bc:	005b      	lsls	r3, r3, #1
 800c0be:	4413      	add	r3, r2
 800c0c0:	009b      	lsls	r3, r3, #2
 800c0c2:	2264      	movs	r2, #100	; 0x64
 800c0c4:	fb02 f200 	mul.w	r2, r2, r0
 800c0c8:	4413      	add	r3, r2
 800c0ca:	440b      	add	r3, r1
 800c0cc:	3320      	adds	r3, #32
 800c0ce:	edd3 6a00 	vldr	s13, [r3]
 800c0d2:	edd7 7a06 	vldr	s15, [r7, #24]
 800c0d6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c0da:	4b38      	ldr	r3, [pc, #224]	; (800c1bc <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800c0dc:	781b      	ldrb	r3, [r3, #0]
 800c0de:	b2db      	uxtb	r3, r3
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e4:	3b01      	subs	r3, #1
 800c0e6:	005a      	lsls	r2, r3, #1
 800c0e8:	4935      	ldr	r1, [pc, #212]	; (800c1c0 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800c0ea:	4613      	mov	r3, r2
 800c0ec:	005b      	lsls	r3, r3, #1
 800c0ee:	4413      	add	r3, r2
 800c0f0:	009b      	lsls	r3, r3, #2
 800c0f2:	2264      	movs	r2, #100	; 0x64
 800c0f4:	fb02 f200 	mul.w	r2, r2, r0
 800c0f8:	4413      	add	r3, r2
 800c0fa:	440b      	add	r3, r1
 800c0fc:	3320      	adds	r3, #32
 800c0fe:	ed93 6a00 	vldr	s12, [r3]
 800c102:	edd7 7a07 	vldr	s15, [r7, #28]
 800c106:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c10a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c10e:	edd7 7a07 	vldr	s15, [r7, #28]
 800c112:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c116:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c11a:	edc7 7a04 	vstr	s15, [r7, #16]
			// Apply offset, then scale it
			x_cmd += primitives[primitive_index].x_offset_m;
 800c11e:	4b27      	ldr	r3, [pc, #156]	; (800c1bc <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	b2db      	uxtb	r3, r3
 800c124:	4619      	mov	r1, r3
 800c126:	4a26      	ldr	r2, [pc, #152]	; (800c1c0 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800c128:	2364      	movs	r3, #100	; 0x64
 800c12a:	fb03 f301 	mul.w	r3, r3, r1
 800c12e:	4413      	add	r3, r2
 800c130:	3304      	adds	r3, #4
 800c132:	edd3 7a00 	vldr	s15, [r3]
 800c136:	ed97 7a05 	vldr	s14, [r7, #20]
 800c13a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c13e:	edc7 7a05 	vstr	s15, [r7, #20]
			x_cmd *= primitives[primitive_index].x_scale;
 800c142:	4b1e      	ldr	r3, [pc, #120]	; (800c1bc <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	b2db      	uxtb	r3, r3
 800c148:	4619      	mov	r1, r3
 800c14a:	4a1d      	ldr	r2, [pc, #116]	; (800c1c0 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800c14c:	2364      	movs	r3, #100	; 0x64
 800c14e:	fb03 f301 	mul.w	r3, r3, r1
 800c152:	4413      	add	r3, r2
 800c154:	330c      	adds	r3, #12
 800c156:	edd3 7a00 	vldr	s15, [r3]
 800c15a:	ed97 7a05 	vldr	s14, [r7, #20]
 800c15e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c162:	edc7 7a05 	vstr	s15, [r7, #20]
			y_cmd += primitives[primitive_index].y_offset_m;
 800c166:	4b15      	ldr	r3, [pc, #84]	; (800c1bc <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800c168:	781b      	ldrb	r3, [r3, #0]
 800c16a:	b2db      	uxtb	r3, r3
 800c16c:	4619      	mov	r1, r3
 800c16e:	4a14      	ldr	r2, [pc, #80]	; (800c1c0 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800c170:	2364      	movs	r3, #100	; 0x64
 800c172:	fb03 f301 	mul.w	r3, r3, r1
 800c176:	4413      	add	r3, r2
 800c178:	3308      	adds	r3, #8
 800c17a:	edd3 7a00 	vldr	s15, [r3]
 800c17e:	ed97 7a04 	vldr	s14, [r7, #16]
 800c182:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c186:	edc7 7a04 	vstr	s15, [r7, #16]
			y_cmd *= primitives[primitive_index].y_scale;
 800c18a:	4b0c      	ldr	r3, [pc, #48]	; (800c1bc <motion_primitive_get_position_bezier_quadratic+0x4cc>)
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	b2db      	uxtb	r3, r3
 800c190:	4619      	mov	r1, r3
 800c192:	4a0b      	ldr	r2, [pc, #44]	; (800c1c0 <motion_primitive_get_position_bezier_quadratic+0x4d0>)
 800c194:	2364      	movs	r3, #100	; 0x64
 800c196:	fb03 f301 	mul.w	r3, r3, r1
 800c19a:	4413      	add	r3, r2
 800c19c:	3310      	adds	r3, #16
 800c19e:	edd3 7a00 	vldr	s15, [r3]
 800c1a2:	ed97 7a04 	vldr	s14, [r7, #16]
 800c1a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1aa:	edc7 7a04 	vstr	s15, [r7, #16]

			*x = x_cmd;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	697a      	ldr	r2, [r7, #20]
 800c1b2:	601a      	str	r2, [r3, #0]
			*y = y_cmd;
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	693a      	ldr	r2, [r7, #16]
 800c1b8:	601a      	str	r2, [r3, #0]
			return;
 800c1ba:	e1a2      	b.n	800c502 <motion_primitive_get_position_bezier_quadratic+0x812>
 800c1bc:	2001528c 	.word	0x2001528c
 800c1c0:	20015294 	.word	0x20015294
		}
		// Are we at the end, and after last keyframe
		if(i == ((primitives[primitive_index].num_keyframes/2)-1) && time_in_cycle_part >= primitives[primitive_index].frames[2*i].t_part)
 800c1c4:	4bd0      	ldr	r3, [pc, #832]	; (800c508 <motion_primitive_get_position_bezier_quadratic+0x818>)
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	b2db      	uxtb	r3, r3
 800c1ca:	4619      	mov	r1, r3
 800c1cc:	4acf      	ldr	r2, [pc, #828]	; (800c50c <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c1ce:	2364      	movs	r3, #100	; 0x64
 800c1d0:	fb03 f301 	mul.w	r3, r3, r1
 800c1d4:	4413      	add	r3, r2
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	085b      	lsrs	r3, r3, #1
 800c1da:	b2db      	uxtb	r3, r3
 800c1dc:	3b01      	subs	r3, #1
 800c1de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	f040 817a 	bne.w	800c4da <motion_primitive_get_position_bezier_quadratic+0x7ea>
 800c1e6:	4bc8      	ldr	r3, [pc, #800]	; (800c508 <motion_primitive_get_position_bezier_quadratic+0x818>)
 800c1e8:	781b      	ldrb	r3, [r3, #0]
 800c1ea:	b2db      	uxtb	r3, r3
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f0:	005a      	lsls	r2, r3, #1
 800c1f2:	49c6      	ldr	r1, [pc, #792]	; (800c50c <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c1f4:	4613      	mov	r3, r2
 800c1f6:	005b      	lsls	r3, r3, #1
 800c1f8:	4413      	add	r3, r2
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	2264      	movs	r2, #100	; 0x64
 800c1fe:	fb02 f200 	mul.w	r2, r2, r0
 800c202:	4413      	add	r3, r2
 800c204:	440b      	add	r3, r1
 800c206:	3324      	adds	r3, #36	; 0x24
 800c208:	edd3 7a00 	vldr	s15, [r3]
 800c20c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c210:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c218:	f2c0 815f 	blt.w	800c4da <motion_primitive_get_position_bezier_quadratic+0x7ea>
		{
			// Cyclical, so zero index is last
			// scale to something that varies 0 <= dt < 1 between the points
			float dt = (1.0 - time_in_cycle_part) / (1.0 - primitives[primitive_index].frames[2*i].t_part);
 800c21c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c21e:	f7f4 f93b 	bl	8000498 <__aeabi_f2d>
 800c222:	4603      	mov	r3, r0
 800c224:	460c      	mov	r4, r1
 800c226:	461a      	mov	r2, r3
 800c228:	4623      	mov	r3, r4
 800c22a:	f04f 0000 	mov.w	r0, #0
 800c22e:	49b8      	ldr	r1, [pc, #736]	; (800c510 <motion_primitive_get_position_bezier_quadratic+0x820>)
 800c230:	f7f3 ffd2 	bl	80001d8 <__aeabi_dsub>
 800c234:	4603      	mov	r3, r0
 800c236:	460c      	mov	r4, r1
 800c238:	4625      	mov	r5, r4
 800c23a:	461c      	mov	r4, r3
 800c23c:	4bb2      	ldr	r3, [pc, #712]	; (800c508 <motion_primitive_get_position_bezier_quadratic+0x818>)
 800c23e:	781b      	ldrb	r3, [r3, #0]
 800c240:	b2db      	uxtb	r3, r3
 800c242:	4618      	mov	r0, r3
 800c244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c246:	005a      	lsls	r2, r3, #1
 800c248:	49b0      	ldr	r1, [pc, #704]	; (800c50c <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c24a:	4613      	mov	r3, r2
 800c24c:	005b      	lsls	r3, r3, #1
 800c24e:	4413      	add	r3, r2
 800c250:	009b      	lsls	r3, r3, #2
 800c252:	2264      	movs	r2, #100	; 0x64
 800c254:	fb02 f200 	mul.w	r2, r2, r0
 800c258:	4413      	add	r3, r2
 800c25a:	440b      	add	r3, r1
 800c25c:	3324      	adds	r3, #36	; 0x24
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4618      	mov	r0, r3
 800c262:	f7f4 f919 	bl	8000498 <__aeabi_f2d>
 800c266:	4602      	mov	r2, r0
 800c268:	460b      	mov	r3, r1
 800c26a:	f04f 0000 	mov.w	r0, #0
 800c26e:	49a8      	ldr	r1, [pc, #672]	; (800c510 <motion_primitive_get_position_bezier_quadratic+0x820>)
 800c270:	f7f3 ffb2 	bl	80001d8 <__aeabi_dsub>
 800c274:	4602      	mov	r2, r0
 800c276:	460b      	mov	r3, r1
 800c278:	4620      	mov	r0, r4
 800c27a:	4629      	mov	r1, r5
 800c27c:	f7f4 fa8e 	bl	800079c <__aeabi_ddiv>
 800c280:	4603      	mov	r3, r0
 800c282:	460c      	mov	r4, r1
 800c284:	4618      	mov	r0, r3
 800c286:	4621      	mov	r1, r4
 800c288:	f7f4 fc36 	bl	8000af8 <__aeabi_d2f>
 800c28c:	4603      	mov	r3, r0
 800c28e:	60fb      	str	r3, [r7, #12]
			float one_min_dt = 1.0 - dt; // used many times
 800c290:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c294:	edd7 7a03 	vldr	s15, [r7, #12]
 800c298:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c29c:	edc7 7a02 	vstr	s15, [r7, #8]
			x_cmd = one_min_dt*(one_min_dt*primitives[primitive_index].frames[0].x + dt*primitives[primitive_index].frames[2*i+1].x) + dt * (one_min_dt * primitives[primitive_index].frames[2*i+1].x + dt * primitives[primitive_index].frames[2*i].x);
 800c2a0:	4b99      	ldr	r3, [pc, #612]	; (800c508 <motion_primitive_get_position_bezier_quadratic+0x818>)
 800c2a2:	781b      	ldrb	r3, [r3, #0]
 800c2a4:	b2db      	uxtb	r3, r3
 800c2a6:	4619      	mov	r1, r3
 800c2a8:	4a98      	ldr	r2, [pc, #608]	; (800c50c <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c2aa:	2364      	movs	r3, #100	; 0x64
 800c2ac:	fb03 f301 	mul.w	r3, r3, r1
 800c2b0:	4413      	add	r3, r2
 800c2b2:	331c      	adds	r3, #28
 800c2b4:	ed93 7a00 	vldr	s14, [r3]
 800c2b8:	edd7 7a02 	vldr	s15, [r7, #8]
 800c2bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2c0:	4b91      	ldr	r3, [pc, #580]	; (800c508 <motion_primitive_get_position_bezier_quadratic+0x818>)
 800c2c2:	781b      	ldrb	r3, [r3, #0]
 800c2c4:	b2db      	uxtb	r3, r3
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ca:	005b      	lsls	r3, r3, #1
 800c2cc:	1c5a      	adds	r2, r3, #1
 800c2ce:	498f      	ldr	r1, [pc, #572]	; (800c50c <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c2d0:	4613      	mov	r3, r2
 800c2d2:	005b      	lsls	r3, r3, #1
 800c2d4:	4413      	add	r3, r2
 800c2d6:	009b      	lsls	r3, r3, #2
 800c2d8:	2264      	movs	r2, #100	; 0x64
 800c2da:	fb02 f200 	mul.w	r2, r2, r0
 800c2de:	4413      	add	r3, r2
 800c2e0:	440b      	add	r3, r1
 800c2e2:	331c      	adds	r3, #28
 800c2e4:	edd3 6a00 	vldr	s13, [r3]
 800c2e8:	edd7 7a03 	vldr	s15, [r7, #12]
 800c2ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c2f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c2f4:	edd7 7a02 	vldr	s15, [r7, #8]
 800c2f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2fc:	4b82      	ldr	r3, [pc, #520]	; (800c508 <motion_primitive_get_position_bezier_quadratic+0x818>)
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	b2db      	uxtb	r3, r3
 800c302:	4618      	mov	r0, r3
 800c304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c306:	005b      	lsls	r3, r3, #1
 800c308:	1c5a      	adds	r2, r3, #1
 800c30a:	4980      	ldr	r1, [pc, #512]	; (800c50c <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c30c:	4613      	mov	r3, r2
 800c30e:	005b      	lsls	r3, r3, #1
 800c310:	4413      	add	r3, r2
 800c312:	009b      	lsls	r3, r3, #2
 800c314:	2264      	movs	r2, #100	; 0x64
 800c316:	fb02 f200 	mul.w	r2, r2, r0
 800c31a:	4413      	add	r3, r2
 800c31c:	440b      	add	r3, r1
 800c31e:	331c      	adds	r3, #28
 800c320:	edd3 6a00 	vldr	s13, [r3]
 800c324:	edd7 7a02 	vldr	s15, [r7, #8]
 800c328:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c32c:	4b76      	ldr	r3, [pc, #472]	; (800c508 <motion_primitive_get_position_bezier_quadratic+0x818>)
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	b2db      	uxtb	r3, r3
 800c332:	4618      	mov	r0, r3
 800c334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c336:	005a      	lsls	r2, r3, #1
 800c338:	4974      	ldr	r1, [pc, #464]	; (800c50c <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c33a:	4613      	mov	r3, r2
 800c33c:	005b      	lsls	r3, r3, #1
 800c33e:	4413      	add	r3, r2
 800c340:	009b      	lsls	r3, r3, #2
 800c342:	2264      	movs	r2, #100	; 0x64
 800c344:	fb02 f200 	mul.w	r2, r2, r0
 800c348:	4413      	add	r3, r2
 800c34a:	440b      	add	r3, r1
 800c34c:	331c      	adds	r3, #28
 800c34e:	ed93 6a00 	vldr	s12, [r3]
 800c352:	edd7 7a03 	vldr	s15, [r7, #12]
 800c356:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c35a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c35e:	edd7 7a03 	vldr	s15, [r7, #12]
 800c362:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c36a:	edc7 7a05 	vstr	s15, [r7, #20]
			y_cmd = one_min_dt*(one_min_dt*primitives[primitive_index].frames[0].y + dt*primitives[primitive_index].frames[2*i+1].y) + dt * (one_min_dt * primitives[primitive_index].frames[2*i+1].y + dt * primitives[primitive_index].frames[2*i].y);
 800c36e:	4b66      	ldr	r3, [pc, #408]	; (800c508 <motion_primitive_get_position_bezier_quadratic+0x818>)
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	b2db      	uxtb	r3, r3
 800c374:	4619      	mov	r1, r3
 800c376:	4a65      	ldr	r2, [pc, #404]	; (800c50c <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c378:	2364      	movs	r3, #100	; 0x64
 800c37a:	fb03 f301 	mul.w	r3, r3, r1
 800c37e:	4413      	add	r3, r2
 800c380:	3320      	adds	r3, #32
 800c382:	ed93 7a00 	vldr	s14, [r3]
 800c386:	edd7 7a02 	vldr	s15, [r7, #8]
 800c38a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c38e:	4b5e      	ldr	r3, [pc, #376]	; (800c508 <motion_primitive_get_position_bezier_quadratic+0x818>)
 800c390:	781b      	ldrb	r3, [r3, #0]
 800c392:	b2db      	uxtb	r3, r3
 800c394:	4618      	mov	r0, r3
 800c396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c398:	005b      	lsls	r3, r3, #1
 800c39a:	1c5a      	adds	r2, r3, #1
 800c39c:	495b      	ldr	r1, [pc, #364]	; (800c50c <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c39e:	4613      	mov	r3, r2
 800c3a0:	005b      	lsls	r3, r3, #1
 800c3a2:	4413      	add	r3, r2
 800c3a4:	009b      	lsls	r3, r3, #2
 800c3a6:	2264      	movs	r2, #100	; 0x64
 800c3a8:	fb02 f200 	mul.w	r2, r2, r0
 800c3ac:	4413      	add	r3, r2
 800c3ae:	440b      	add	r3, r1
 800c3b0:	3320      	adds	r3, #32
 800c3b2:	edd3 6a00 	vldr	s13, [r3]
 800c3b6:	edd7 7a03 	vldr	s15, [r7, #12]
 800c3ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c3be:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c3c2:	edd7 7a02 	vldr	s15, [r7, #8]
 800c3c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3ca:	4b4f      	ldr	r3, [pc, #316]	; (800c508 <motion_primitive_get_position_bezier_quadratic+0x818>)
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	b2db      	uxtb	r3, r3
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d4:	005b      	lsls	r3, r3, #1
 800c3d6:	1c5a      	adds	r2, r3, #1
 800c3d8:	494c      	ldr	r1, [pc, #304]	; (800c50c <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c3da:	4613      	mov	r3, r2
 800c3dc:	005b      	lsls	r3, r3, #1
 800c3de:	4413      	add	r3, r2
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	2264      	movs	r2, #100	; 0x64
 800c3e4:	fb02 f200 	mul.w	r2, r2, r0
 800c3e8:	4413      	add	r3, r2
 800c3ea:	440b      	add	r3, r1
 800c3ec:	3320      	adds	r3, #32
 800c3ee:	edd3 6a00 	vldr	s13, [r3]
 800c3f2:	edd7 7a02 	vldr	s15, [r7, #8]
 800c3f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c3fa:	4b43      	ldr	r3, [pc, #268]	; (800c508 <motion_primitive_get_position_bezier_quadratic+0x818>)
 800c3fc:	781b      	ldrb	r3, [r3, #0]
 800c3fe:	b2db      	uxtb	r3, r3
 800c400:	4618      	mov	r0, r3
 800c402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c404:	005a      	lsls	r2, r3, #1
 800c406:	4941      	ldr	r1, [pc, #260]	; (800c50c <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c408:	4613      	mov	r3, r2
 800c40a:	005b      	lsls	r3, r3, #1
 800c40c:	4413      	add	r3, r2
 800c40e:	009b      	lsls	r3, r3, #2
 800c410:	2264      	movs	r2, #100	; 0x64
 800c412:	fb02 f200 	mul.w	r2, r2, r0
 800c416:	4413      	add	r3, r2
 800c418:	440b      	add	r3, r1
 800c41a:	3320      	adds	r3, #32
 800c41c:	ed93 6a00 	vldr	s12, [r3]
 800c420:	edd7 7a03 	vldr	s15, [r7, #12]
 800c424:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c428:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c42c:	edd7 7a03 	vldr	s15, [r7, #12]
 800c430:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c434:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c438:	edc7 7a04 	vstr	s15, [r7, #16]
			// Apply offset, then scale it
			x_cmd += primitives[primitive_index].x_offset_m;
 800c43c:	4b32      	ldr	r3, [pc, #200]	; (800c508 <motion_primitive_get_position_bezier_quadratic+0x818>)
 800c43e:	781b      	ldrb	r3, [r3, #0]
 800c440:	b2db      	uxtb	r3, r3
 800c442:	4619      	mov	r1, r3
 800c444:	4a31      	ldr	r2, [pc, #196]	; (800c50c <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c446:	2364      	movs	r3, #100	; 0x64
 800c448:	fb03 f301 	mul.w	r3, r3, r1
 800c44c:	4413      	add	r3, r2
 800c44e:	3304      	adds	r3, #4
 800c450:	edd3 7a00 	vldr	s15, [r3]
 800c454:	ed97 7a05 	vldr	s14, [r7, #20]
 800c458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c45c:	edc7 7a05 	vstr	s15, [r7, #20]
			x_cmd *= primitives[primitive_index].x_scale;
 800c460:	4b29      	ldr	r3, [pc, #164]	; (800c508 <motion_primitive_get_position_bezier_quadratic+0x818>)
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	b2db      	uxtb	r3, r3
 800c466:	4619      	mov	r1, r3
 800c468:	4a28      	ldr	r2, [pc, #160]	; (800c50c <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c46a:	2364      	movs	r3, #100	; 0x64
 800c46c:	fb03 f301 	mul.w	r3, r3, r1
 800c470:	4413      	add	r3, r2
 800c472:	330c      	adds	r3, #12
 800c474:	edd3 7a00 	vldr	s15, [r3]
 800c478:	ed97 7a05 	vldr	s14, [r7, #20]
 800c47c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c480:	edc7 7a05 	vstr	s15, [r7, #20]
			y_cmd += primitives[primitive_index].y_offset_m;
 800c484:	4b20      	ldr	r3, [pc, #128]	; (800c508 <motion_primitive_get_position_bezier_quadratic+0x818>)
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	b2db      	uxtb	r3, r3
 800c48a:	4619      	mov	r1, r3
 800c48c:	4a1f      	ldr	r2, [pc, #124]	; (800c50c <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c48e:	2364      	movs	r3, #100	; 0x64
 800c490:	fb03 f301 	mul.w	r3, r3, r1
 800c494:	4413      	add	r3, r2
 800c496:	3308      	adds	r3, #8
 800c498:	edd3 7a00 	vldr	s15, [r3]
 800c49c:	ed97 7a04 	vldr	s14, [r7, #16]
 800c4a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4a4:	edc7 7a04 	vstr	s15, [r7, #16]
			y_cmd *= primitives[primitive_index].y_scale;
 800c4a8:	4b17      	ldr	r3, [pc, #92]	; (800c508 <motion_primitive_get_position_bezier_quadratic+0x818>)
 800c4aa:	781b      	ldrb	r3, [r3, #0]
 800c4ac:	b2db      	uxtb	r3, r3
 800c4ae:	4619      	mov	r1, r3
 800c4b0:	4a16      	ldr	r2, [pc, #88]	; (800c50c <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c4b2:	2364      	movs	r3, #100	; 0x64
 800c4b4:	fb03 f301 	mul.w	r3, r3, r1
 800c4b8:	4413      	add	r3, r2
 800c4ba:	3310      	adds	r3, #16
 800c4bc:	edd3 7a00 	vldr	s15, [r3]
 800c4c0:	ed97 7a04 	vldr	s14, [r7, #16]
 800c4c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4c8:	edc7 7a04 	vstr	s15, [r7, #16]

			*x = x_cmd;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	697a      	ldr	r2, [r7, #20]
 800c4d0:	601a      	str	r2, [r3, #0]
			*y = y_cmd;
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	693a      	ldr	r2, [r7, #16]
 800c4d6:	601a      	str	r2, [r3, #0]
			return;
 800c4d8:	e013      	b.n	800c502 <motion_primitive_get_position_bezier_quadratic+0x812>
	for(i = 1; i < primitives[primitive_index].num_keyframes/2; i++)
 800c4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4dc:	3301      	adds	r3, #1
 800c4de:	62bb      	str	r3, [r7, #40]	; 0x28
 800c4e0:	4b09      	ldr	r3, [pc, #36]	; (800c508 <motion_primitive_get_position_bezier_quadratic+0x818>)
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	4a08      	ldr	r2, [pc, #32]	; (800c50c <motion_primitive_get_position_bezier_quadratic+0x81c>)
 800c4ea:	2364      	movs	r3, #100	; 0x64
 800c4ec:	fb03 f301 	mul.w	r3, r3, r1
 800c4f0:	4413      	add	r3, r2
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	085b      	lsrs	r3, r3, #1
 800c4f6:	b2db      	uxtb	r3, r3
 800c4f8:	461a      	mov	r2, r3
 800c4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	f6ff acad 	blt.w	800be5c <motion_primitive_get_position_bezier_quadratic+0x16c>
		}
	}
 }
 800c502:	3730      	adds	r7, #48	; 0x30
 800c504:	46bd      	mov	sp, r7
 800c506:	bdb0      	pop	{r4, r5, r7, pc}
 800c508:	2001528c 	.word	0x2001528c
 800c50c:	20015294 	.word	0x20015294
 800c510:	3ff00000 	.word	0x3ff00000

0800c514 <motion_primitive_is_inverted>:

 bool motion_primitive_is_inverted(void)
 {
 800c514:	b480      	push	{r7}
 800c516:	af00      	add	r7, sp, #0
	return (primitives[primitive_index].invert > 0);
 800c518:	4b0a      	ldr	r3, [pc, #40]	; (800c544 <motion_primitive_is_inverted+0x30>)
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	b2db      	uxtb	r3, r3
 800c51e:	4619      	mov	r1, r3
 800c520:	4a09      	ldr	r2, [pc, #36]	; (800c548 <motion_primitive_is_inverted+0x34>)
 800c522:	2364      	movs	r3, #100	; 0x64
 800c524:	fb03 f301 	mul.w	r3, r3, r1
 800c528:	4413      	add	r3, r2
 800c52a:	3301      	adds	r3, #1
 800c52c:	781b      	ldrb	r3, [r3, #0]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	bf14      	ite	ne
 800c532:	2301      	movne	r3, #1
 800c534:	2300      	moveq	r3, #0
 800c536:	b2db      	uxtb	r3, r3
 }
 800c538:	4618      	mov	r0, r3
 800c53a:	46bd      	mov	sp, r7
 800c53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c540:	4770      	bx	lr
 800c542:	bf00      	nop
 800c544:	2001528c 	.word	0x2001528c
 800c548:	20015294 	.word	0x20015294

0800c54c <motion_primitive_set_keyframe>:

 void motion_primitive_set_keyframe(uint8_t index, uint8_t keyframe_index, float x, float y, float t_part)
 {
 800c54c:	b480      	push	{r7}
 800c54e:	b085      	sub	sp, #20
 800c550:	af00      	add	r7, sp, #0
 800c552:	4603      	mov	r3, r0
 800c554:	460a      	mov	r2, r1
 800c556:	ed87 0a02 	vstr	s0, [r7, #8]
 800c55a:	edc7 0a01 	vstr	s1, [r7, #4]
 800c55e:	ed87 1a00 	vstr	s2, [r7]
 800c562:	73fb      	strb	r3, [r7, #15]
 800c564:	4613      	mov	r3, r2
 800c566:	73bb      	strb	r3, [r7, #14]
	if(index >= NUMBER_PRIMITIVES)
 800c568:	7bfb      	ldrb	r3, [r7, #15]
 800c56a:	2b07      	cmp	r3, #7
 800c56c:	d830      	bhi.n	800c5d0 <motion_primitive_set_keyframe+0x84>
	{
		return;
	}
	if(keyframe_index >= MAX_NUMBER_KEYFRAMES)
 800c56e:	7bbb      	ldrb	r3, [r7, #14]
 800c570:	2b05      	cmp	r3, #5
 800c572:	d82f      	bhi.n	800c5d4 <motion_primitive_set_keyframe+0x88>
	{
		return;
	}
	primitives[index].frames[keyframe_index].t_part = t_part;
 800c574:	7bf9      	ldrb	r1, [r7, #15]
 800c576:	7bba      	ldrb	r2, [r7, #14]
 800c578:	4819      	ldr	r0, [pc, #100]	; (800c5e0 <motion_primitive_set_keyframe+0x94>)
 800c57a:	4613      	mov	r3, r2
 800c57c:	005b      	lsls	r3, r3, #1
 800c57e:	4413      	add	r3, r2
 800c580:	009b      	lsls	r3, r3, #2
 800c582:	2264      	movs	r2, #100	; 0x64
 800c584:	fb02 f201 	mul.w	r2, r2, r1
 800c588:	4413      	add	r3, r2
 800c58a:	4403      	add	r3, r0
 800c58c:	3324      	adds	r3, #36	; 0x24
 800c58e:	683a      	ldr	r2, [r7, #0]
 800c590:	601a      	str	r2, [r3, #0]
	primitives[index].frames[keyframe_index].x = x;
 800c592:	7bf9      	ldrb	r1, [r7, #15]
 800c594:	7bba      	ldrb	r2, [r7, #14]
 800c596:	4812      	ldr	r0, [pc, #72]	; (800c5e0 <motion_primitive_set_keyframe+0x94>)
 800c598:	4613      	mov	r3, r2
 800c59a:	005b      	lsls	r3, r3, #1
 800c59c:	4413      	add	r3, r2
 800c59e:	009b      	lsls	r3, r3, #2
 800c5a0:	2264      	movs	r2, #100	; 0x64
 800c5a2:	fb02 f201 	mul.w	r2, r2, r1
 800c5a6:	4413      	add	r3, r2
 800c5a8:	4403      	add	r3, r0
 800c5aa:	331c      	adds	r3, #28
 800c5ac:	68ba      	ldr	r2, [r7, #8]
 800c5ae:	601a      	str	r2, [r3, #0]
	primitives[index].frames[keyframe_index].y = y;
 800c5b0:	7bf9      	ldrb	r1, [r7, #15]
 800c5b2:	7bba      	ldrb	r2, [r7, #14]
 800c5b4:	480a      	ldr	r0, [pc, #40]	; (800c5e0 <motion_primitive_set_keyframe+0x94>)
 800c5b6:	4613      	mov	r3, r2
 800c5b8:	005b      	lsls	r3, r3, #1
 800c5ba:	4413      	add	r3, r2
 800c5bc:	009b      	lsls	r3, r3, #2
 800c5be:	2264      	movs	r2, #100	; 0x64
 800c5c0:	fb02 f201 	mul.w	r2, r2, r1
 800c5c4:	4413      	add	r3, r2
 800c5c6:	4403      	add	r3, r0
 800c5c8:	3320      	adds	r3, #32
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	601a      	str	r2, [r3, #0]
 800c5ce:	e002      	b.n	800c5d6 <motion_primitive_set_keyframe+0x8a>
		return;
 800c5d0:	bf00      	nop
 800c5d2:	e000      	b.n	800c5d6 <motion_primitive_set_keyframe+0x8a>
		return;
 800c5d4:	bf00      	nop
 }
 800c5d6:	3714      	adds	r7, #20
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr
 800c5e0:	20015294 	.word	0x20015294

0800c5e4 <get_motion_primitive>:

 uint8_t get_motion_primitive(void)
 {
 800c5e4:	b480      	push	{r7}
 800c5e6:	af00      	add	r7, sp, #0
	return primitive_index;
 800c5e8:	4b03      	ldr	r3, [pc, #12]	; (800c5f8 <get_motion_primitive+0x14>)
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	b2db      	uxtb	r3, r3
 }
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f6:	4770      	bx	lr
 800c5f8:	2001528c 	.word	0x2001528c

0800c5fc <calculate_pid>:

 #include <stdint.h>
 #include "pid_controller.h"

 float calculate_pid(pid_control_t * pid, int32_t setpoint, int32_t current_position)
 {
 800c5fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c600:	b086      	sub	sp, #24
 800c602:	af00      	add	r7, sp, #0
 800c604:	60f8      	str	r0, [r7, #12]
 800c606:	60b9      	str	r1, [r7, #8]
 800c608:	607a      	str	r2, [r7, #4]
	float error = setpoint - current_position;
 800c60a:	68ba      	ldr	r2, [r7, #8]
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	1ad3      	subs	r3, r2, r3
 800c610:	ee07 3a90 	vmov	s15, r3
 800c614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c618:	edc7 7a04 	vstr	s15, [r7, #16]

	// Use current vs last position instead of error changes. This is the same if setpoint does not change, but setpoint jumps
	// can cause odd spikes in command otherwise
	pid->speed = (pid->speed_alpha)*pid->speed + (1.0-pid->speed_alpha)*(current_position - pid->last_position);
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	ed93 7a08 	vldr	s14, [r3, #32]
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	edd3 7a02 	vldr	s15, [r3, #8]
 800c628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c62c:	ee17 0a90 	vmov	r0, s15
 800c630:	f7f3 ff32 	bl	8000498 <__aeabi_f2d>
 800c634:	4604      	mov	r4, r0
 800c636:	460d      	mov	r5, r1
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	6a1b      	ldr	r3, [r3, #32]
 800c63c:	4618      	mov	r0, r3
 800c63e:	f7f3 ff2b 	bl	8000498 <__aeabi_f2d>
 800c642:	4602      	mov	r2, r0
 800c644:	460b      	mov	r3, r1
 800c646:	f04f 0000 	mov.w	r0, #0
 800c64a:	4949      	ldr	r1, [pc, #292]	; (800c770 <calculate_pid+0x174>)
 800c64c:	f7f3 fdc4 	bl	80001d8 <__aeabi_dsub>
 800c650:	4602      	mov	r2, r0
 800c652:	460b      	mov	r3, r1
 800c654:	4690      	mov	r8, r2
 800c656:	4699      	mov	r9, r3
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	1ad3      	subs	r3, r2, r3
 800c660:	4618      	mov	r0, r3
 800c662:	f7f3 ff07 	bl	8000474 <__aeabi_i2d>
 800c666:	4602      	mov	r2, r0
 800c668:	460b      	mov	r3, r1
 800c66a:	4640      	mov	r0, r8
 800c66c:	4649      	mov	r1, r9
 800c66e:	f7f3 ff6b 	bl	8000548 <__aeabi_dmul>
 800c672:	4602      	mov	r2, r0
 800c674:	460b      	mov	r3, r1
 800c676:	4620      	mov	r0, r4
 800c678:	4629      	mov	r1, r5
 800c67a:	f7f3 fdaf 	bl	80001dc <__adddf3>
 800c67e:	4603      	mov	r3, r0
 800c680:	460c      	mov	r4, r1
 800c682:	4618      	mov	r0, r3
 800c684:	4621      	mov	r1, r4
 800c686:	f7f4 fa37 	bl	8000af8 <__aeabi_d2f>
 800c68a:	4602      	mov	r2, r0
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	609a      	str	r2, [r3, #8]

	pid->integral += error;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	ed93 7a03 	vldr	s14, [r3, #12]
 800c696:	edd7 7a04 	vldr	s15, [r7, #16]
 800c69a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	edc3 7a03 	vstr	s15, [r3, #12]

	if(pid->integral > pid->integral_max)
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	ed93 7a03 	vldr	s14, [r3, #12]
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	edd3 7a04 	vldr	s15, [r3, #16]
 800c6b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c6b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6b8:	dd04      	ble.n	800c6c4 <calculate_pid+0xc8>
	{
		pid->integral = pid->integral_max;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	691a      	ldr	r2, [r3, #16]
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	60da      	str	r2, [r3, #12]
 800c6c2:	e00e      	b.n	800c6e2 <calculate_pid+0xe6>
	}
	else if(pid->integral < pid->integral_min)
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	ed93 7a03 	vldr	s14, [r3, #12]
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	edd3 7a05 	vldr	s15, [r3, #20]
 800c6d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6d8:	d503      	bpl.n	800c6e2 <calculate_pid+0xe6>
	{
		pid->integral = pid->integral_min;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	695a      	ldr	r2, [r3, #20]
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	60da      	str	r2, [r3, #12]
	}

	float cmd = pid->kp * error + pid->kd * pid->speed + pid->ki * pid->integral;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800c6e8:	edd7 7a04 	vldr	s15, [r7, #16]
 800c6ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	edd3 7a02 	vldr	s15, [r3, #8]
 800c6fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c700:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	edd3 7a03 	vldr	s15, [r3, #12]
 800c710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c714:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c718:	edc7 7a05 	vstr	s15, [r7, #20]

	if(cmd > pid->cmd_max)
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	edd3 7a06 	vldr	s15, [r3, #24]
 800c722:	ed97 7a05 	vldr	s14, [r7, #20]
 800c726:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c72e:	dd03      	ble.n	800c738 <calculate_pid+0x13c>
	{
		cmd	= pid->cmd_max;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	699b      	ldr	r3, [r3, #24]
 800c734:	617b      	str	r3, [r7, #20]
 800c736:	e00c      	b.n	800c752 <calculate_pid+0x156>
	}
	else if(cmd < pid->cmd_min)
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	edd3 7a07 	vldr	s15, [r3, #28]
 800c73e:	ed97 7a05 	vldr	s14, [r7, #20]
 800c742:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c74a:	d502      	bpl.n	800c752 <calculate_pid+0x156>
	{
		cmd = pid->cmd_min;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	69db      	ldr	r3, [r3, #28]
 800c750:	617b      	str	r3, [r7, #20]
	}

	pid->last_error = error;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	693a      	ldr	r2, [r7, #16]
 800c756:	605a      	str	r2, [r3, #4]
	pid->last_position = current_position;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	687a      	ldr	r2, [r7, #4]
 800c75c:	601a      	str	r2, [r3, #0]
	return cmd;
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	ee07 3a90 	vmov	s15, r3
 }
 800c764:	eeb0 0a67 	vmov.f32	s0, s15
 800c768:	3718      	adds	r7, #24
 800c76a:	46bd      	mov	sp, r7
 800c76c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c770:	3ff00000 	.word	0x3ff00000

0800c774 <arm_sin_f32>:
 800c774:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800c7f0 <arm_sin_f32+0x7c>
 800c778:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c77c:	ee20 7a07 	vmul.f32	s14, s0, s14
 800c780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c784:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800c788:	d42c      	bmi.n	800c7e4 <arm_sin_f32+0x70>
 800c78a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c78e:	eddf 6a19 	vldr	s13, [pc, #100]	; 800c7f4 <arm_sin_f32+0x80>
 800c792:	4a19      	ldr	r2, [pc, #100]	; (800c7f8 <arm_sin_f32+0x84>)
 800c794:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c798:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c79c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c7a0:	eef4 7ae6 	vcmpe.f32	s15, s13
 800c7a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7a8:	bfa8      	it	ge
 800c7aa:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 800c7ae:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800c7b2:	ee17 3a10 	vmov	r3, s14
 800c7b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7ba:	ee07 3a10 	vmov	s14, r3
 800c7be:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800c7c2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800c7c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c7ca:	edd1 6a01 	vldr	s13, [r1, #4]
 800c7ce:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c7d2:	ed91 0a00 	vldr	s0, [r1]
 800c7d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c7da:	ee27 0a00 	vmul.f32	s0, s14, s0
 800c7de:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c7e2:	4770      	bx	lr
 800c7e4:	ee17 3a90 	vmov	r3, s15
 800c7e8:	3b01      	subs	r3, #1
 800c7ea:	ee07 3a90 	vmov	s15, r3
 800c7ee:	e7cc      	b.n	800c78a <arm_sin_f32+0x16>
 800c7f0:	3e22f983 	.word	0x3e22f983
 800c7f4:	44000000 	.word	0x44000000
 800c7f8:	0800d6b8 	.word	0x0800d6b8

0800c7fc <arm_cos_f32>:
 800c7fc:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800c870 <arm_cos_f32+0x74>
 800c800:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c804:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800c808:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c80c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c814:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c818:	d504      	bpl.n	800c824 <arm_cos_f32+0x28>
 800c81a:	ee17 3a90 	vmov	r3, s15
 800c81e:	3b01      	subs	r3, #1
 800c820:	ee07 3a90 	vmov	s15, r3
 800c824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c828:	eddf 6a12 	vldr	s13, [pc, #72]	; 800c874 <arm_cos_f32+0x78>
 800c82c:	4a12      	ldr	r2, [pc, #72]	; (800c878 <arm_cos_f32+0x7c>)
 800c82e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c832:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c836:	ee20 0a26 	vmul.f32	s0, s0, s13
 800c83a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800c83e:	ee17 3a90 	vmov	r3, s15
 800c842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c846:	ee07 3a90 	vmov	s15, r3
 800c84a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c84e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800c852:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c856:	edd1 6a01 	vldr	s13, [r1, #4]
 800c85a:	ed91 0a00 	vldr	s0, [r1]
 800c85e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c862:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c866:	ee27 0a00 	vmul.f32	s0, s14, s0
 800c86a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c86e:	4770      	bx	lr
 800c870:	3e22f983 	.word	0x3e22f983
 800c874:	44000000 	.word	0x44000000
 800c878:	0800d6b8 	.word	0x0800d6b8

0800c87c <__errno>:
 800c87c:	4b01      	ldr	r3, [pc, #4]	; (800c884 <__errno+0x8>)
 800c87e:	6818      	ldr	r0, [r3, #0]
 800c880:	4770      	bx	lr
 800c882:	bf00      	nop
 800c884:	20000024 	.word	0x20000024

0800c888 <__libc_init_array>:
 800c888:	b570      	push	{r4, r5, r6, lr}
 800c88a:	4e0d      	ldr	r6, [pc, #52]	; (800c8c0 <__libc_init_array+0x38>)
 800c88c:	4c0d      	ldr	r4, [pc, #52]	; (800c8c4 <__libc_init_array+0x3c>)
 800c88e:	1ba4      	subs	r4, r4, r6
 800c890:	10a4      	asrs	r4, r4, #2
 800c892:	2500      	movs	r5, #0
 800c894:	42a5      	cmp	r5, r4
 800c896:	d109      	bne.n	800c8ac <__libc_init_array+0x24>
 800c898:	4e0b      	ldr	r6, [pc, #44]	; (800c8c8 <__libc_init_array+0x40>)
 800c89a:	4c0c      	ldr	r4, [pc, #48]	; (800c8cc <__libc_init_array+0x44>)
 800c89c:	f000 febc 	bl	800d618 <_init>
 800c8a0:	1ba4      	subs	r4, r4, r6
 800c8a2:	10a4      	asrs	r4, r4, #2
 800c8a4:	2500      	movs	r5, #0
 800c8a6:	42a5      	cmp	r5, r4
 800c8a8:	d105      	bne.n	800c8b6 <__libc_init_array+0x2e>
 800c8aa:	bd70      	pop	{r4, r5, r6, pc}
 800c8ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c8b0:	4798      	blx	r3
 800c8b2:	3501      	adds	r5, #1
 800c8b4:	e7ee      	b.n	800c894 <__libc_init_array+0xc>
 800c8b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c8ba:	4798      	blx	r3
 800c8bc:	3501      	adds	r5, #1
 800c8be:	e7f2      	b.n	800c8a6 <__libc_init_array+0x1e>
 800c8c0:	0800df28 	.word	0x0800df28
 800c8c4:	0800df28 	.word	0x0800df28
 800c8c8:	0800df28 	.word	0x0800df28
 800c8cc:	0800df2c 	.word	0x0800df2c

0800c8d0 <memcpy>:
 800c8d0:	b510      	push	{r4, lr}
 800c8d2:	1e43      	subs	r3, r0, #1
 800c8d4:	440a      	add	r2, r1
 800c8d6:	4291      	cmp	r1, r2
 800c8d8:	d100      	bne.n	800c8dc <memcpy+0xc>
 800c8da:	bd10      	pop	{r4, pc}
 800c8dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c8e4:	e7f7      	b.n	800c8d6 <memcpy+0x6>

0800c8e6 <memset>:
 800c8e6:	4402      	add	r2, r0
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d100      	bne.n	800c8f0 <memset+0xa>
 800c8ee:	4770      	bx	lr
 800c8f0:	f803 1b01 	strb.w	r1, [r3], #1
 800c8f4:	e7f9      	b.n	800c8ea <memset+0x4>
	...

0800c8f8 <atan>:
 800c8f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8fc:	ec55 4b10 	vmov	r4, r5, d0
 800c900:	4bc3      	ldr	r3, [pc, #780]	; (800cc10 <atan+0x318>)
 800c902:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c906:	429e      	cmp	r6, r3
 800c908:	46ab      	mov	fp, r5
 800c90a:	dd18      	ble.n	800c93e <atan+0x46>
 800c90c:	4bc1      	ldr	r3, [pc, #772]	; (800cc14 <atan+0x31c>)
 800c90e:	429e      	cmp	r6, r3
 800c910:	dc01      	bgt.n	800c916 <atan+0x1e>
 800c912:	d109      	bne.n	800c928 <atan+0x30>
 800c914:	b144      	cbz	r4, 800c928 <atan+0x30>
 800c916:	4622      	mov	r2, r4
 800c918:	462b      	mov	r3, r5
 800c91a:	4620      	mov	r0, r4
 800c91c:	4629      	mov	r1, r5
 800c91e:	f7f3 fc5d 	bl	80001dc <__adddf3>
 800c922:	4604      	mov	r4, r0
 800c924:	460d      	mov	r5, r1
 800c926:	e006      	b.n	800c936 <atan+0x3e>
 800c928:	f1bb 0f00 	cmp.w	fp, #0
 800c92c:	f340 8131 	ble.w	800cb92 <atan+0x29a>
 800c930:	a59b      	add	r5, pc, #620	; (adr r5, 800cba0 <atan+0x2a8>)
 800c932:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c936:	ec45 4b10 	vmov	d0, r4, r5
 800c93a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c93e:	4bb6      	ldr	r3, [pc, #728]	; (800cc18 <atan+0x320>)
 800c940:	429e      	cmp	r6, r3
 800c942:	dc14      	bgt.n	800c96e <atan+0x76>
 800c944:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c948:	429e      	cmp	r6, r3
 800c94a:	dc0d      	bgt.n	800c968 <atan+0x70>
 800c94c:	a396      	add	r3, pc, #600	; (adr r3, 800cba8 <atan+0x2b0>)
 800c94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c952:	ee10 0a10 	vmov	r0, s0
 800c956:	4629      	mov	r1, r5
 800c958:	f7f3 fc40 	bl	80001dc <__adddf3>
 800c95c:	2200      	movs	r2, #0
 800c95e:	4baf      	ldr	r3, [pc, #700]	; (800cc1c <atan+0x324>)
 800c960:	f7f4 f882 	bl	8000a68 <__aeabi_dcmpgt>
 800c964:	2800      	cmp	r0, #0
 800c966:	d1e6      	bne.n	800c936 <atan+0x3e>
 800c968:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c96c:	e02b      	b.n	800c9c6 <atan+0xce>
 800c96e:	f000 f963 	bl	800cc38 <fabs>
 800c972:	4bab      	ldr	r3, [pc, #684]	; (800cc20 <atan+0x328>)
 800c974:	429e      	cmp	r6, r3
 800c976:	ec55 4b10 	vmov	r4, r5, d0
 800c97a:	f300 80bf 	bgt.w	800cafc <atan+0x204>
 800c97e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c982:	429e      	cmp	r6, r3
 800c984:	f300 80a0 	bgt.w	800cac8 <atan+0x1d0>
 800c988:	ee10 2a10 	vmov	r2, s0
 800c98c:	ee10 0a10 	vmov	r0, s0
 800c990:	462b      	mov	r3, r5
 800c992:	4629      	mov	r1, r5
 800c994:	f7f3 fc22 	bl	80001dc <__adddf3>
 800c998:	2200      	movs	r2, #0
 800c99a:	4ba0      	ldr	r3, [pc, #640]	; (800cc1c <atan+0x324>)
 800c99c:	f7f3 fc1c 	bl	80001d8 <__aeabi_dsub>
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	4606      	mov	r6, r0
 800c9a4:	460f      	mov	r7, r1
 800c9a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c9aa:	4620      	mov	r0, r4
 800c9ac:	4629      	mov	r1, r5
 800c9ae:	f7f3 fc15 	bl	80001dc <__adddf3>
 800c9b2:	4602      	mov	r2, r0
 800c9b4:	460b      	mov	r3, r1
 800c9b6:	4630      	mov	r0, r6
 800c9b8:	4639      	mov	r1, r7
 800c9ba:	f7f3 feef 	bl	800079c <__aeabi_ddiv>
 800c9be:	f04f 0a00 	mov.w	sl, #0
 800c9c2:	4604      	mov	r4, r0
 800c9c4:	460d      	mov	r5, r1
 800c9c6:	4622      	mov	r2, r4
 800c9c8:	462b      	mov	r3, r5
 800c9ca:	4620      	mov	r0, r4
 800c9cc:	4629      	mov	r1, r5
 800c9ce:	f7f3 fdbb 	bl	8000548 <__aeabi_dmul>
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	460b      	mov	r3, r1
 800c9d6:	4680      	mov	r8, r0
 800c9d8:	4689      	mov	r9, r1
 800c9da:	f7f3 fdb5 	bl	8000548 <__aeabi_dmul>
 800c9de:	a374      	add	r3, pc, #464	; (adr r3, 800cbb0 <atan+0x2b8>)
 800c9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e4:	4606      	mov	r6, r0
 800c9e6:	460f      	mov	r7, r1
 800c9e8:	f7f3 fdae 	bl	8000548 <__aeabi_dmul>
 800c9ec:	a372      	add	r3, pc, #456	; (adr r3, 800cbb8 <atan+0x2c0>)
 800c9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f2:	f7f3 fbf3 	bl	80001dc <__adddf3>
 800c9f6:	4632      	mov	r2, r6
 800c9f8:	463b      	mov	r3, r7
 800c9fa:	f7f3 fda5 	bl	8000548 <__aeabi_dmul>
 800c9fe:	a370      	add	r3, pc, #448	; (adr r3, 800cbc0 <atan+0x2c8>)
 800ca00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca04:	f7f3 fbea 	bl	80001dc <__adddf3>
 800ca08:	4632      	mov	r2, r6
 800ca0a:	463b      	mov	r3, r7
 800ca0c:	f7f3 fd9c 	bl	8000548 <__aeabi_dmul>
 800ca10:	a36d      	add	r3, pc, #436	; (adr r3, 800cbc8 <atan+0x2d0>)
 800ca12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca16:	f7f3 fbe1 	bl	80001dc <__adddf3>
 800ca1a:	4632      	mov	r2, r6
 800ca1c:	463b      	mov	r3, r7
 800ca1e:	f7f3 fd93 	bl	8000548 <__aeabi_dmul>
 800ca22:	a36b      	add	r3, pc, #428	; (adr r3, 800cbd0 <atan+0x2d8>)
 800ca24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca28:	f7f3 fbd8 	bl	80001dc <__adddf3>
 800ca2c:	4632      	mov	r2, r6
 800ca2e:	463b      	mov	r3, r7
 800ca30:	f7f3 fd8a 	bl	8000548 <__aeabi_dmul>
 800ca34:	a368      	add	r3, pc, #416	; (adr r3, 800cbd8 <atan+0x2e0>)
 800ca36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3a:	f7f3 fbcf 	bl	80001dc <__adddf3>
 800ca3e:	4642      	mov	r2, r8
 800ca40:	464b      	mov	r3, r9
 800ca42:	f7f3 fd81 	bl	8000548 <__aeabi_dmul>
 800ca46:	a366      	add	r3, pc, #408	; (adr r3, 800cbe0 <atan+0x2e8>)
 800ca48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4c:	4680      	mov	r8, r0
 800ca4e:	4689      	mov	r9, r1
 800ca50:	4630      	mov	r0, r6
 800ca52:	4639      	mov	r1, r7
 800ca54:	f7f3 fd78 	bl	8000548 <__aeabi_dmul>
 800ca58:	a363      	add	r3, pc, #396	; (adr r3, 800cbe8 <atan+0x2f0>)
 800ca5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca5e:	f7f3 fbbb 	bl	80001d8 <__aeabi_dsub>
 800ca62:	4632      	mov	r2, r6
 800ca64:	463b      	mov	r3, r7
 800ca66:	f7f3 fd6f 	bl	8000548 <__aeabi_dmul>
 800ca6a:	a361      	add	r3, pc, #388	; (adr r3, 800cbf0 <atan+0x2f8>)
 800ca6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca70:	f7f3 fbb2 	bl	80001d8 <__aeabi_dsub>
 800ca74:	4632      	mov	r2, r6
 800ca76:	463b      	mov	r3, r7
 800ca78:	f7f3 fd66 	bl	8000548 <__aeabi_dmul>
 800ca7c:	a35e      	add	r3, pc, #376	; (adr r3, 800cbf8 <atan+0x300>)
 800ca7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca82:	f7f3 fba9 	bl	80001d8 <__aeabi_dsub>
 800ca86:	4632      	mov	r2, r6
 800ca88:	463b      	mov	r3, r7
 800ca8a:	f7f3 fd5d 	bl	8000548 <__aeabi_dmul>
 800ca8e:	a35c      	add	r3, pc, #368	; (adr r3, 800cc00 <atan+0x308>)
 800ca90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca94:	f7f3 fba0 	bl	80001d8 <__aeabi_dsub>
 800ca98:	4632      	mov	r2, r6
 800ca9a:	463b      	mov	r3, r7
 800ca9c:	f7f3 fd54 	bl	8000548 <__aeabi_dmul>
 800caa0:	4602      	mov	r2, r0
 800caa2:	460b      	mov	r3, r1
 800caa4:	4640      	mov	r0, r8
 800caa6:	4649      	mov	r1, r9
 800caa8:	f7f3 fb98 	bl	80001dc <__adddf3>
 800caac:	4622      	mov	r2, r4
 800caae:	462b      	mov	r3, r5
 800cab0:	f7f3 fd4a 	bl	8000548 <__aeabi_dmul>
 800cab4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800cab8:	4602      	mov	r2, r0
 800caba:	460b      	mov	r3, r1
 800cabc:	d14b      	bne.n	800cb56 <atan+0x25e>
 800cabe:	4620      	mov	r0, r4
 800cac0:	4629      	mov	r1, r5
 800cac2:	f7f3 fb89 	bl	80001d8 <__aeabi_dsub>
 800cac6:	e72c      	b.n	800c922 <atan+0x2a>
 800cac8:	ee10 0a10 	vmov	r0, s0
 800cacc:	2200      	movs	r2, #0
 800cace:	4b53      	ldr	r3, [pc, #332]	; (800cc1c <atan+0x324>)
 800cad0:	4629      	mov	r1, r5
 800cad2:	f7f3 fb81 	bl	80001d8 <__aeabi_dsub>
 800cad6:	2200      	movs	r2, #0
 800cad8:	4606      	mov	r6, r0
 800cada:	460f      	mov	r7, r1
 800cadc:	4b4f      	ldr	r3, [pc, #316]	; (800cc1c <atan+0x324>)
 800cade:	4620      	mov	r0, r4
 800cae0:	4629      	mov	r1, r5
 800cae2:	f7f3 fb7b 	bl	80001dc <__adddf3>
 800cae6:	4602      	mov	r2, r0
 800cae8:	460b      	mov	r3, r1
 800caea:	4630      	mov	r0, r6
 800caec:	4639      	mov	r1, r7
 800caee:	f7f3 fe55 	bl	800079c <__aeabi_ddiv>
 800caf2:	f04f 0a01 	mov.w	sl, #1
 800caf6:	4604      	mov	r4, r0
 800caf8:	460d      	mov	r5, r1
 800cafa:	e764      	b.n	800c9c6 <atan+0xce>
 800cafc:	4b49      	ldr	r3, [pc, #292]	; (800cc24 <atan+0x32c>)
 800cafe:	429e      	cmp	r6, r3
 800cb00:	dc1d      	bgt.n	800cb3e <atan+0x246>
 800cb02:	ee10 0a10 	vmov	r0, s0
 800cb06:	2200      	movs	r2, #0
 800cb08:	4b47      	ldr	r3, [pc, #284]	; (800cc28 <atan+0x330>)
 800cb0a:	4629      	mov	r1, r5
 800cb0c:	f7f3 fb64 	bl	80001d8 <__aeabi_dsub>
 800cb10:	2200      	movs	r2, #0
 800cb12:	4606      	mov	r6, r0
 800cb14:	460f      	mov	r7, r1
 800cb16:	4b44      	ldr	r3, [pc, #272]	; (800cc28 <atan+0x330>)
 800cb18:	4620      	mov	r0, r4
 800cb1a:	4629      	mov	r1, r5
 800cb1c:	f7f3 fd14 	bl	8000548 <__aeabi_dmul>
 800cb20:	2200      	movs	r2, #0
 800cb22:	4b3e      	ldr	r3, [pc, #248]	; (800cc1c <atan+0x324>)
 800cb24:	f7f3 fb5a 	bl	80001dc <__adddf3>
 800cb28:	4602      	mov	r2, r0
 800cb2a:	460b      	mov	r3, r1
 800cb2c:	4630      	mov	r0, r6
 800cb2e:	4639      	mov	r1, r7
 800cb30:	f7f3 fe34 	bl	800079c <__aeabi_ddiv>
 800cb34:	f04f 0a02 	mov.w	sl, #2
 800cb38:	4604      	mov	r4, r0
 800cb3a:	460d      	mov	r5, r1
 800cb3c:	e743      	b.n	800c9c6 <atan+0xce>
 800cb3e:	462b      	mov	r3, r5
 800cb40:	ee10 2a10 	vmov	r2, s0
 800cb44:	2000      	movs	r0, #0
 800cb46:	4939      	ldr	r1, [pc, #228]	; (800cc2c <atan+0x334>)
 800cb48:	f7f3 fe28 	bl	800079c <__aeabi_ddiv>
 800cb4c:	f04f 0a03 	mov.w	sl, #3
 800cb50:	4604      	mov	r4, r0
 800cb52:	460d      	mov	r5, r1
 800cb54:	e737      	b.n	800c9c6 <atan+0xce>
 800cb56:	4b36      	ldr	r3, [pc, #216]	; (800cc30 <atan+0x338>)
 800cb58:	4e36      	ldr	r6, [pc, #216]	; (800cc34 <atan+0x33c>)
 800cb5a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800cb5e:	4456      	add	r6, sl
 800cb60:	449a      	add	sl, r3
 800cb62:	e9da 2300 	ldrd	r2, r3, [sl]
 800cb66:	f7f3 fb37 	bl	80001d8 <__aeabi_dsub>
 800cb6a:	4622      	mov	r2, r4
 800cb6c:	462b      	mov	r3, r5
 800cb6e:	f7f3 fb33 	bl	80001d8 <__aeabi_dsub>
 800cb72:	4602      	mov	r2, r0
 800cb74:	460b      	mov	r3, r1
 800cb76:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cb7a:	f7f3 fb2d 	bl	80001d8 <__aeabi_dsub>
 800cb7e:	f1bb 0f00 	cmp.w	fp, #0
 800cb82:	4604      	mov	r4, r0
 800cb84:	460d      	mov	r5, r1
 800cb86:	f6bf aed6 	bge.w	800c936 <atan+0x3e>
 800cb8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb8e:	461d      	mov	r5, r3
 800cb90:	e6d1      	b.n	800c936 <atan+0x3e>
 800cb92:	a51d      	add	r5, pc, #116	; (adr r5, 800cc08 <atan+0x310>)
 800cb94:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cb98:	e6cd      	b.n	800c936 <atan+0x3e>
 800cb9a:	bf00      	nop
 800cb9c:	f3af 8000 	nop.w
 800cba0:	54442d18 	.word	0x54442d18
 800cba4:	3ff921fb 	.word	0x3ff921fb
 800cba8:	8800759c 	.word	0x8800759c
 800cbac:	7e37e43c 	.word	0x7e37e43c
 800cbb0:	e322da11 	.word	0xe322da11
 800cbb4:	3f90ad3a 	.word	0x3f90ad3a
 800cbb8:	24760deb 	.word	0x24760deb
 800cbbc:	3fa97b4b 	.word	0x3fa97b4b
 800cbc0:	a0d03d51 	.word	0xa0d03d51
 800cbc4:	3fb10d66 	.word	0x3fb10d66
 800cbc8:	c54c206e 	.word	0xc54c206e
 800cbcc:	3fb745cd 	.word	0x3fb745cd
 800cbd0:	920083ff 	.word	0x920083ff
 800cbd4:	3fc24924 	.word	0x3fc24924
 800cbd8:	5555550d 	.word	0x5555550d
 800cbdc:	3fd55555 	.word	0x3fd55555
 800cbe0:	2c6a6c2f 	.word	0x2c6a6c2f
 800cbe4:	bfa2b444 	.word	0xbfa2b444
 800cbe8:	52defd9a 	.word	0x52defd9a
 800cbec:	3fadde2d 	.word	0x3fadde2d
 800cbf0:	af749a6d 	.word	0xaf749a6d
 800cbf4:	3fb3b0f2 	.word	0x3fb3b0f2
 800cbf8:	fe231671 	.word	0xfe231671
 800cbfc:	3fbc71c6 	.word	0x3fbc71c6
 800cc00:	9998ebc4 	.word	0x9998ebc4
 800cc04:	3fc99999 	.word	0x3fc99999
 800cc08:	54442d18 	.word	0x54442d18
 800cc0c:	bff921fb 	.word	0xbff921fb
 800cc10:	440fffff 	.word	0x440fffff
 800cc14:	7ff00000 	.word	0x7ff00000
 800cc18:	3fdbffff 	.word	0x3fdbffff
 800cc1c:	3ff00000 	.word	0x3ff00000
 800cc20:	3ff2ffff 	.word	0x3ff2ffff
 800cc24:	40037fff 	.word	0x40037fff
 800cc28:	3ff80000 	.word	0x3ff80000
 800cc2c:	bff00000 	.word	0xbff00000
 800cc30:	0800dee0 	.word	0x0800dee0
 800cc34:	0800dec0 	.word	0x0800dec0

0800cc38 <fabs>:
 800cc38:	ec51 0b10 	vmov	r0, r1, d0
 800cc3c:	ee10 2a10 	vmov	r2, s0
 800cc40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cc44:	ec43 2b10 	vmov	d0, r2, r3
 800cc48:	4770      	bx	lr
	...

0800cc4c <acos>:
 800cc4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc4e:	ed2d 8b02 	vpush	{d8}
 800cc52:	4e26      	ldr	r6, [pc, #152]	; (800ccec <acos+0xa0>)
 800cc54:	b08b      	sub	sp, #44	; 0x2c
 800cc56:	ec55 4b10 	vmov	r4, r5, d0
 800cc5a:	f000 f8b5 	bl	800cdc8 <__ieee754_acos>
 800cc5e:	f996 3000 	ldrsb.w	r3, [r6]
 800cc62:	eeb0 8a40 	vmov.f32	s16, s0
 800cc66:	eef0 8a60 	vmov.f32	s17, s1
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	d036      	beq.n	800ccdc <acos+0x90>
 800cc6e:	4622      	mov	r2, r4
 800cc70:	462b      	mov	r3, r5
 800cc72:	4620      	mov	r0, r4
 800cc74:	4629      	mov	r1, r5
 800cc76:	f7f3 ff01 	bl	8000a7c <__aeabi_dcmpun>
 800cc7a:	4607      	mov	r7, r0
 800cc7c:	bb70      	cbnz	r0, 800ccdc <acos+0x90>
 800cc7e:	ec45 4b10 	vmov	d0, r4, r5
 800cc82:	f7ff ffd9 	bl	800cc38 <fabs>
 800cc86:	2200      	movs	r2, #0
 800cc88:	4b19      	ldr	r3, [pc, #100]	; (800ccf0 <acos+0xa4>)
 800cc8a:	ec51 0b10 	vmov	r0, r1, d0
 800cc8e:	f7f3 feeb 	bl	8000a68 <__aeabi_dcmpgt>
 800cc92:	b318      	cbz	r0, 800ccdc <acos+0x90>
 800cc94:	2301      	movs	r3, #1
 800cc96:	9300      	str	r3, [sp, #0]
 800cc98:	4816      	ldr	r0, [pc, #88]	; (800ccf4 <acos+0xa8>)
 800cc9a:	4b17      	ldr	r3, [pc, #92]	; (800ccf8 <acos+0xac>)
 800cc9c:	9301      	str	r3, [sp, #4]
 800cc9e:	9708      	str	r7, [sp, #32]
 800cca0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800cca4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800cca8:	f000 fcae 	bl	800d608 <nan>
 800ccac:	f996 3000 	ldrsb.w	r3, [r6]
 800ccb0:	2b02      	cmp	r3, #2
 800ccb2:	ed8d 0b06 	vstr	d0, [sp, #24]
 800ccb6:	d104      	bne.n	800ccc2 <acos+0x76>
 800ccb8:	f7ff fde0 	bl	800c87c <__errno>
 800ccbc:	2321      	movs	r3, #33	; 0x21
 800ccbe:	6003      	str	r3, [r0, #0]
 800ccc0:	e004      	b.n	800cccc <acos+0x80>
 800ccc2:	4668      	mov	r0, sp
 800ccc4:	f000 fc9e 	bl	800d604 <matherr>
 800ccc8:	2800      	cmp	r0, #0
 800ccca:	d0f5      	beq.n	800ccb8 <acos+0x6c>
 800cccc:	9b08      	ldr	r3, [sp, #32]
 800ccce:	b11b      	cbz	r3, 800ccd8 <acos+0x8c>
 800ccd0:	f7ff fdd4 	bl	800c87c <__errno>
 800ccd4:	9b08      	ldr	r3, [sp, #32]
 800ccd6:	6003      	str	r3, [r0, #0]
 800ccd8:	ed9d 8b06 	vldr	d8, [sp, #24]
 800ccdc:	eeb0 0a48 	vmov.f32	s0, s16
 800cce0:	eef0 0a68 	vmov.f32	s1, s17
 800cce4:	b00b      	add	sp, #44	; 0x2c
 800cce6:	ecbd 8b02 	vpop	{d8}
 800ccea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccec:	20000088 	.word	0x20000088
 800ccf0:	3ff00000 	.word	0x3ff00000
 800ccf4:	0800df09 	.word	0x0800df09
 800ccf8:	0800df00 	.word	0x0800df00

0800ccfc <fmod>:
 800ccfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd00:	ed2d 8b02 	vpush	{d8}
 800cd04:	b08b      	sub	sp, #44	; 0x2c
 800cd06:	ec55 4b10 	vmov	r4, r5, d0
 800cd0a:	ec57 6b11 	vmov	r6, r7, d1
 800cd0e:	f000 fab7 	bl	800d280 <__ieee754_fmod>
 800cd12:	4b2a      	ldr	r3, [pc, #168]	; (800cdbc <fmod+0xc0>)
 800cd14:	eeb0 8a40 	vmov.f32	s16, s0
 800cd18:	eef0 8a60 	vmov.f32	s17, s1
 800cd1c:	f993 8000 	ldrsb.w	r8, [r3]
 800cd20:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800cd24:	d030      	beq.n	800cd88 <fmod+0x8c>
 800cd26:	4632      	mov	r2, r6
 800cd28:	463b      	mov	r3, r7
 800cd2a:	4630      	mov	r0, r6
 800cd2c:	4639      	mov	r1, r7
 800cd2e:	f7f3 fea5 	bl	8000a7c <__aeabi_dcmpun>
 800cd32:	bb48      	cbnz	r0, 800cd88 <fmod+0x8c>
 800cd34:	4622      	mov	r2, r4
 800cd36:	462b      	mov	r3, r5
 800cd38:	4620      	mov	r0, r4
 800cd3a:	4629      	mov	r1, r5
 800cd3c:	f7f3 fe9e 	bl	8000a7c <__aeabi_dcmpun>
 800cd40:	4681      	mov	r9, r0
 800cd42:	bb08      	cbnz	r0, 800cd88 <fmod+0x8c>
 800cd44:	2200      	movs	r2, #0
 800cd46:	2300      	movs	r3, #0
 800cd48:	4630      	mov	r0, r6
 800cd4a:	4639      	mov	r1, r7
 800cd4c:	f7f3 fe64 	bl	8000a18 <__aeabi_dcmpeq>
 800cd50:	b1d0      	cbz	r0, 800cd88 <fmod+0x8c>
 800cd52:	2301      	movs	r3, #1
 800cd54:	9300      	str	r3, [sp, #0]
 800cd56:	4b1a      	ldr	r3, [pc, #104]	; (800cdc0 <fmod+0xc4>)
 800cd58:	9301      	str	r3, [sp, #4]
 800cd5a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800cd5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800cd62:	f8cd 9020 	str.w	r9, [sp, #32]
 800cd66:	f1b8 0f00 	cmp.w	r8, #0
 800cd6a:	d116      	bne.n	800cd9a <fmod+0x9e>
 800cd6c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800cd70:	4668      	mov	r0, sp
 800cd72:	f000 fc47 	bl	800d604 <matherr>
 800cd76:	b1d8      	cbz	r0, 800cdb0 <fmod+0xb4>
 800cd78:	9b08      	ldr	r3, [sp, #32]
 800cd7a:	b11b      	cbz	r3, 800cd84 <fmod+0x88>
 800cd7c:	f7ff fd7e 	bl	800c87c <__errno>
 800cd80:	9b08      	ldr	r3, [sp, #32]
 800cd82:	6003      	str	r3, [r0, #0]
 800cd84:	ed9d 8b06 	vldr	d8, [sp, #24]
 800cd88:	eeb0 0a48 	vmov.f32	s0, s16
 800cd8c:	eef0 0a68 	vmov.f32	s1, s17
 800cd90:	b00b      	add	sp, #44	; 0x2c
 800cd92:	ecbd 8b02 	vpop	{d8}
 800cd96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	4610      	mov	r0, r2
 800cda0:	4619      	mov	r1, r3
 800cda2:	f7f3 fcfb 	bl	800079c <__aeabi_ddiv>
 800cda6:	f1b8 0f02 	cmp.w	r8, #2
 800cdaa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cdae:	d1df      	bne.n	800cd70 <fmod+0x74>
 800cdb0:	f7ff fd64 	bl	800c87c <__errno>
 800cdb4:	2321      	movs	r3, #33	; 0x21
 800cdb6:	6003      	str	r3, [r0, #0]
 800cdb8:	e7de      	b.n	800cd78 <fmod+0x7c>
 800cdba:	bf00      	nop
 800cdbc:	20000088 	.word	0x20000088
 800cdc0:	0800df05 	.word	0x0800df05
 800cdc4:	00000000 	.word	0x00000000

0800cdc8 <__ieee754_acos>:
 800cdc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdcc:	ec55 4b10 	vmov	r4, r5, d0
 800cdd0:	49b7      	ldr	r1, [pc, #732]	; (800d0b0 <__ieee754_acos+0x2e8>)
 800cdd2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cdd6:	428b      	cmp	r3, r1
 800cdd8:	dd1b      	ble.n	800ce12 <__ieee754_acos+0x4a>
 800cdda:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800cdde:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cde2:	4323      	orrs	r3, r4
 800cde4:	d109      	bne.n	800cdfa <__ieee754_acos+0x32>
 800cde6:	2d00      	cmp	r5, #0
 800cde8:	f300 8211 	bgt.w	800d20e <__ieee754_acos+0x446>
 800cdec:	a196      	add	r1, pc, #600	; (adr r1, 800d048 <__ieee754_acos+0x280>)
 800cdee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdf2:	ec41 0b10 	vmov	d0, r0, r1
 800cdf6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdfa:	ee10 2a10 	vmov	r2, s0
 800cdfe:	462b      	mov	r3, r5
 800ce00:	4620      	mov	r0, r4
 800ce02:	4629      	mov	r1, r5
 800ce04:	f7f3 f9e8 	bl	80001d8 <__aeabi_dsub>
 800ce08:	4602      	mov	r2, r0
 800ce0a:	460b      	mov	r3, r1
 800ce0c:	f7f3 fcc6 	bl	800079c <__aeabi_ddiv>
 800ce10:	e7ef      	b.n	800cdf2 <__ieee754_acos+0x2a>
 800ce12:	49a8      	ldr	r1, [pc, #672]	; (800d0b4 <__ieee754_acos+0x2ec>)
 800ce14:	428b      	cmp	r3, r1
 800ce16:	f300 8087 	bgt.w	800cf28 <__ieee754_acos+0x160>
 800ce1a:	4aa7      	ldr	r2, [pc, #668]	; (800d0b8 <__ieee754_acos+0x2f0>)
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	f340 81f9 	ble.w	800d214 <__ieee754_acos+0x44c>
 800ce22:	ee10 2a10 	vmov	r2, s0
 800ce26:	ee10 0a10 	vmov	r0, s0
 800ce2a:	462b      	mov	r3, r5
 800ce2c:	4629      	mov	r1, r5
 800ce2e:	f7f3 fb8b 	bl	8000548 <__aeabi_dmul>
 800ce32:	a387      	add	r3, pc, #540	; (adr r3, 800d050 <__ieee754_acos+0x288>)
 800ce34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce38:	4606      	mov	r6, r0
 800ce3a:	460f      	mov	r7, r1
 800ce3c:	f7f3 fb84 	bl	8000548 <__aeabi_dmul>
 800ce40:	a385      	add	r3, pc, #532	; (adr r3, 800d058 <__ieee754_acos+0x290>)
 800ce42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce46:	f7f3 f9c9 	bl	80001dc <__adddf3>
 800ce4a:	4632      	mov	r2, r6
 800ce4c:	463b      	mov	r3, r7
 800ce4e:	f7f3 fb7b 	bl	8000548 <__aeabi_dmul>
 800ce52:	a383      	add	r3, pc, #524	; (adr r3, 800d060 <__ieee754_acos+0x298>)
 800ce54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce58:	f7f3 f9be 	bl	80001d8 <__aeabi_dsub>
 800ce5c:	4632      	mov	r2, r6
 800ce5e:	463b      	mov	r3, r7
 800ce60:	f7f3 fb72 	bl	8000548 <__aeabi_dmul>
 800ce64:	a380      	add	r3, pc, #512	; (adr r3, 800d068 <__ieee754_acos+0x2a0>)
 800ce66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce6a:	f7f3 f9b7 	bl	80001dc <__adddf3>
 800ce6e:	4632      	mov	r2, r6
 800ce70:	463b      	mov	r3, r7
 800ce72:	f7f3 fb69 	bl	8000548 <__aeabi_dmul>
 800ce76:	a37e      	add	r3, pc, #504	; (adr r3, 800d070 <__ieee754_acos+0x2a8>)
 800ce78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce7c:	f7f3 f9ac 	bl	80001d8 <__aeabi_dsub>
 800ce80:	4632      	mov	r2, r6
 800ce82:	463b      	mov	r3, r7
 800ce84:	f7f3 fb60 	bl	8000548 <__aeabi_dmul>
 800ce88:	a37b      	add	r3, pc, #492	; (adr r3, 800d078 <__ieee754_acos+0x2b0>)
 800ce8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce8e:	f7f3 f9a5 	bl	80001dc <__adddf3>
 800ce92:	4632      	mov	r2, r6
 800ce94:	463b      	mov	r3, r7
 800ce96:	f7f3 fb57 	bl	8000548 <__aeabi_dmul>
 800ce9a:	a379      	add	r3, pc, #484	; (adr r3, 800d080 <__ieee754_acos+0x2b8>)
 800ce9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea0:	4680      	mov	r8, r0
 800cea2:	4689      	mov	r9, r1
 800cea4:	4630      	mov	r0, r6
 800cea6:	4639      	mov	r1, r7
 800cea8:	f7f3 fb4e 	bl	8000548 <__aeabi_dmul>
 800ceac:	a376      	add	r3, pc, #472	; (adr r3, 800d088 <__ieee754_acos+0x2c0>)
 800ceae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb2:	f7f3 f991 	bl	80001d8 <__aeabi_dsub>
 800ceb6:	4632      	mov	r2, r6
 800ceb8:	463b      	mov	r3, r7
 800ceba:	f7f3 fb45 	bl	8000548 <__aeabi_dmul>
 800cebe:	a374      	add	r3, pc, #464	; (adr r3, 800d090 <__ieee754_acos+0x2c8>)
 800cec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec4:	f7f3 f98a 	bl	80001dc <__adddf3>
 800cec8:	4632      	mov	r2, r6
 800ceca:	463b      	mov	r3, r7
 800cecc:	f7f3 fb3c 	bl	8000548 <__aeabi_dmul>
 800ced0:	a371      	add	r3, pc, #452	; (adr r3, 800d098 <__ieee754_acos+0x2d0>)
 800ced2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced6:	f7f3 f97f 	bl	80001d8 <__aeabi_dsub>
 800ceda:	4632      	mov	r2, r6
 800cedc:	463b      	mov	r3, r7
 800cede:	f7f3 fb33 	bl	8000548 <__aeabi_dmul>
 800cee2:	2200      	movs	r2, #0
 800cee4:	4b75      	ldr	r3, [pc, #468]	; (800d0bc <__ieee754_acos+0x2f4>)
 800cee6:	f7f3 f979 	bl	80001dc <__adddf3>
 800ceea:	4602      	mov	r2, r0
 800ceec:	460b      	mov	r3, r1
 800ceee:	4640      	mov	r0, r8
 800cef0:	4649      	mov	r1, r9
 800cef2:	f7f3 fc53 	bl	800079c <__aeabi_ddiv>
 800cef6:	4622      	mov	r2, r4
 800cef8:	462b      	mov	r3, r5
 800cefa:	f7f3 fb25 	bl	8000548 <__aeabi_dmul>
 800cefe:	4602      	mov	r2, r0
 800cf00:	460b      	mov	r3, r1
 800cf02:	a167      	add	r1, pc, #412	; (adr r1, 800d0a0 <__ieee754_acos+0x2d8>)
 800cf04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf08:	f7f3 f966 	bl	80001d8 <__aeabi_dsub>
 800cf0c:	4602      	mov	r2, r0
 800cf0e:	460b      	mov	r3, r1
 800cf10:	4620      	mov	r0, r4
 800cf12:	4629      	mov	r1, r5
 800cf14:	f7f3 f960 	bl	80001d8 <__aeabi_dsub>
 800cf18:	4602      	mov	r2, r0
 800cf1a:	460b      	mov	r3, r1
 800cf1c:	a162      	add	r1, pc, #392	; (adr r1, 800d0a8 <__ieee754_acos+0x2e0>)
 800cf1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf22:	f7f3 f959 	bl	80001d8 <__aeabi_dsub>
 800cf26:	e764      	b.n	800cdf2 <__ieee754_acos+0x2a>
 800cf28:	2d00      	cmp	r5, #0
 800cf2a:	f280 80cb 	bge.w	800d0c4 <__ieee754_acos+0x2fc>
 800cf2e:	ee10 0a10 	vmov	r0, s0
 800cf32:	2200      	movs	r2, #0
 800cf34:	4b61      	ldr	r3, [pc, #388]	; (800d0bc <__ieee754_acos+0x2f4>)
 800cf36:	4629      	mov	r1, r5
 800cf38:	f7f3 f950 	bl	80001dc <__adddf3>
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	4b60      	ldr	r3, [pc, #384]	; (800d0c0 <__ieee754_acos+0x2f8>)
 800cf40:	f7f3 fb02 	bl	8000548 <__aeabi_dmul>
 800cf44:	a342      	add	r3, pc, #264	; (adr r3, 800d050 <__ieee754_acos+0x288>)
 800cf46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf4a:	4604      	mov	r4, r0
 800cf4c:	460d      	mov	r5, r1
 800cf4e:	f7f3 fafb 	bl	8000548 <__aeabi_dmul>
 800cf52:	a341      	add	r3, pc, #260	; (adr r3, 800d058 <__ieee754_acos+0x290>)
 800cf54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf58:	f7f3 f940 	bl	80001dc <__adddf3>
 800cf5c:	4622      	mov	r2, r4
 800cf5e:	462b      	mov	r3, r5
 800cf60:	f7f3 faf2 	bl	8000548 <__aeabi_dmul>
 800cf64:	a33e      	add	r3, pc, #248	; (adr r3, 800d060 <__ieee754_acos+0x298>)
 800cf66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf6a:	f7f3 f935 	bl	80001d8 <__aeabi_dsub>
 800cf6e:	4622      	mov	r2, r4
 800cf70:	462b      	mov	r3, r5
 800cf72:	f7f3 fae9 	bl	8000548 <__aeabi_dmul>
 800cf76:	a33c      	add	r3, pc, #240	; (adr r3, 800d068 <__ieee754_acos+0x2a0>)
 800cf78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf7c:	f7f3 f92e 	bl	80001dc <__adddf3>
 800cf80:	4622      	mov	r2, r4
 800cf82:	462b      	mov	r3, r5
 800cf84:	f7f3 fae0 	bl	8000548 <__aeabi_dmul>
 800cf88:	a339      	add	r3, pc, #228	; (adr r3, 800d070 <__ieee754_acos+0x2a8>)
 800cf8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf8e:	f7f3 f923 	bl	80001d8 <__aeabi_dsub>
 800cf92:	4622      	mov	r2, r4
 800cf94:	462b      	mov	r3, r5
 800cf96:	f7f3 fad7 	bl	8000548 <__aeabi_dmul>
 800cf9a:	a337      	add	r3, pc, #220	; (adr r3, 800d078 <__ieee754_acos+0x2b0>)
 800cf9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa0:	f7f3 f91c 	bl	80001dc <__adddf3>
 800cfa4:	4622      	mov	r2, r4
 800cfa6:	462b      	mov	r3, r5
 800cfa8:	f7f3 face 	bl	8000548 <__aeabi_dmul>
 800cfac:	ec45 4b10 	vmov	d0, r4, r5
 800cfb0:	4680      	mov	r8, r0
 800cfb2:	4689      	mov	r9, r1
 800cfb4:	f000 fa76 	bl	800d4a4 <__ieee754_sqrt>
 800cfb8:	a331      	add	r3, pc, #196	; (adr r3, 800d080 <__ieee754_acos+0x2b8>)
 800cfba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfbe:	4620      	mov	r0, r4
 800cfc0:	4629      	mov	r1, r5
 800cfc2:	ec57 6b10 	vmov	r6, r7, d0
 800cfc6:	f7f3 fabf 	bl	8000548 <__aeabi_dmul>
 800cfca:	a32f      	add	r3, pc, #188	; (adr r3, 800d088 <__ieee754_acos+0x2c0>)
 800cfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd0:	f7f3 f902 	bl	80001d8 <__aeabi_dsub>
 800cfd4:	4622      	mov	r2, r4
 800cfd6:	462b      	mov	r3, r5
 800cfd8:	f7f3 fab6 	bl	8000548 <__aeabi_dmul>
 800cfdc:	a32c      	add	r3, pc, #176	; (adr r3, 800d090 <__ieee754_acos+0x2c8>)
 800cfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe2:	f7f3 f8fb 	bl	80001dc <__adddf3>
 800cfe6:	4622      	mov	r2, r4
 800cfe8:	462b      	mov	r3, r5
 800cfea:	f7f3 faad 	bl	8000548 <__aeabi_dmul>
 800cfee:	a32a      	add	r3, pc, #168	; (adr r3, 800d098 <__ieee754_acos+0x2d0>)
 800cff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff4:	f7f3 f8f0 	bl	80001d8 <__aeabi_dsub>
 800cff8:	4622      	mov	r2, r4
 800cffa:	462b      	mov	r3, r5
 800cffc:	f7f3 faa4 	bl	8000548 <__aeabi_dmul>
 800d000:	2200      	movs	r2, #0
 800d002:	4b2e      	ldr	r3, [pc, #184]	; (800d0bc <__ieee754_acos+0x2f4>)
 800d004:	f7f3 f8ea 	bl	80001dc <__adddf3>
 800d008:	4602      	mov	r2, r0
 800d00a:	460b      	mov	r3, r1
 800d00c:	4640      	mov	r0, r8
 800d00e:	4649      	mov	r1, r9
 800d010:	f7f3 fbc4 	bl	800079c <__aeabi_ddiv>
 800d014:	4632      	mov	r2, r6
 800d016:	463b      	mov	r3, r7
 800d018:	f7f3 fa96 	bl	8000548 <__aeabi_dmul>
 800d01c:	a320      	add	r3, pc, #128	; (adr r3, 800d0a0 <__ieee754_acos+0x2d8>)
 800d01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d022:	f7f3 f8d9 	bl	80001d8 <__aeabi_dsub>
 800d026:	4632      	mov	r2, r6
 800d028:	463b      	mov	r3, r7
 800d02a:	f7f3 f8d7 	bl	80001dc <__adddf3>
 800d02e:	4602      	mov	r2, r0
 800d030:	460b      	mov	r3, r1
 800d032:	f7f3 f8d3 	bl	80001dc <__adddf3>
 800d036:	4602      	mov	r2, r0
 800d038:	460b      	mov	r3, r1
 800d03a:	a103      	add	r1, pc, #12	; (adr r1, 800d048 <__ieee754_acos+0x280>)
 800d03c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d040:	e76f      	b.n	800cf22 <__ieee754_acos+0x15a>
 800d042:	bf00      	nop
 800d044:	f3af 8000 	nop.w
 800d048:	54442d18 	.word	0x54442d18
 800d04c:	400921fb 	.word	0x400921fb
 800d050:	0dfdf709 	.word	0x0dfdf709
 800d054:	3f023de1 	.word	0x3f023de1
 800d058:	7501b288 	.word	0x7501b288
 800d05c:	3f49efe0 	.word	0x3f49efe0
 800d060:	b5688f3b 	.word	0xb5688f3b
 800d064:	3fa48228 	.word	0x3fa48228
 800d068:	0e884455 	.word	0x0e884455
 800d06c:	3fc9c155 	.word	0x3fc9c155
 800d070:	03eb6f7d 	.word	0x03eb6f7d
 800d074:	3fd4d612 	.word	0x3fd4d612
 800d078:	55555555 	.word	0x55555555
 800d07c:	3fc55555 	.word	0x3fc55555
 800d080:	b12e9282 	.word	0xb12e9282
 800d084:	3fb3b8c5 	.word	0x3fb3b8c5
 800d088:	1b8d0159 	.word	0x1b8d0159
 800d08c:	3fe6066c 	.word	0x3fe6066c
 800d090:	9c598ac8 	.word	0x9c598ac8
 800d094:	40002ae5 	.word	0x40002ae5
 800d098:	1c8a2d4b 	.word	0x1c8a2d4b
 800d09c:	40033a27 	.word	0x40033a27
 800d0a0:	33145c07 	.word	0x33145c07
 800d0a4:	3c91a626 	.word	0x3c91a626
 800d0a8:	54442d18 	.word	0x54442d18
 800d0ac:	3ff921fb 	.word	0x3ff921fb
 800d0b0:	3fefffff 	.word	0x3fefffff
 800d0b4:	3fdfffff 	.word	0x3fdfffff
 800d0b8:	3c600000 	.word	0x3c600000
 800d0bc:	3ff00000 	.word	0x3ff00000
 800d0c0:	3fe00000 	.word	0x3fe00000
 800d0c4:	ee10 2a10 	vmov	r2, s0
 800d0c8:	462b      	mov	r3, r5
 800d0ca:	2000      	movs	r0, #0
 800d0cc:	496a      	ldr	r1, [pc, #424]	; (800d278 <__ieee754_acos+0x4b0>)
 800d0ce:	f7f3 f883 	bl	80001d8 <__aeabi_dsub>
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	4b69      	ldr	r3, [pc, #420]	; (800d27c <__ieee754_acos+0x4b4>)
 800d0d6:	f7f3 fa37 	bl	8000548 <__aeabi_dmul>
 800d0da:	4604      	mov	r4, r0
 800d0dc:	460d      	mov	r5, r1
 800d0de:	ec45 4b10 	vmov	d0, r4, r5
 800d0e2:	f000 f9df 	bl	800d4a4 <__ieee754_sqrt>
 800d0e6:	a34e      	add	r3, pc, #312	; (adr r3, 800d220 <__ieee754_acos+0x458>)
 800d0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ec:	4620      	mov	r0, r4
 800d0ee:	4629      	mov	r1, r5
 800d0f0:	ec59 8b10 	vmov	r8, r9, d0
 800d0f4:	f7f3 fa28 	bl	8000548 <__aeabi_dmul>
 800d0f8:	a34b      	add	r3, pc, #300	; (adr r3, 800d228 <__ieee754_acos+0x460>)
 800d0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0fe:	f7f3 f86d 	bl	80001dc <__adddf3>
 800d102:	4622      	mov	r2, r4
 800d104:	462b      	mov	r3, r5
 800d106:	f7f3 fa1f 	bl	8000548 <__aeabi_dmul>
 800d10a:	a349      	add	r3, pc, #292	; (adr r3, 800d230 <__ieee754_acos+0x468>)
 800d10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d110:	f7f3 f862 	bl	80001d8 <__aeabi_dsub>
 800d114:	4622      	mov	r2, r4
 800d116:	462b      	mov	r3, r5
 800d118:	f7f3 fa16 	bl	8000548 <__aeabi_dmul>
 800d11c:	a346      	add	r3, pc, #280	; (adr r3, 800d238 <__ieee754_acos+0x470>)
 800d11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d122:	f7f3 f85b 	bl	80001dc <__adddf3>
 800d126:	4622      	mov	r2, r4
 800d128:	462b      	mov	r3, r5
 800d12a:	f7f3 fa0d 	bl	8000548 <__aeabi_dmul>
 800d12e:	a344      	add	r3, pc, #272	; (adr r3, 800d240 <__ieee754_acos+0x478>)
 800d130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d134:	f7f3 f850 	bl	80001d8 <__aeabi_dsub>
 800d138:	4622      	mov	r2, r4
 800d13a:	462b      	mov	r3, r5
 800d13c:	f7f3 fa04 	bl	8000548 <__aeabi_dmul>
 800d140:	a341      	add	r3, pc, #260	; (adr r3, 800d248 <__ieee754_acos+0x480>)
 800d142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d146:	f7f3 f849 	bl	80001dc <__adddf3>
 800d14a:	4622      	mov	r2, r4
 800d14c:	462b      	mov	r3, r5
 800d14e:	f7f3 f9fb 	bl	8000548 <__aeabi_dmul>
 800d152:	a33f      	add	r3, pc, #252	; (adr r3, 800d250 <__ieee754_acos+0x488>)
 800d154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d158:	4682      	mov	sl, r0
 800d15a:	468b      	mov	fp, r1
 800d15c:	4620      	mov	r0, r4
 800d15e:	4629      	mov	r1, r5
 800d160:	f7f3 f9f2 	bl	8000548 <__aeabi_dmul>
 800d164:	a33c      	add	r3, pc, #240	; (adr r3, 800d258 <__ieee754_acos+0x490>)
 800d166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16a:	f7f3 f835 	bl	80001d8 <__aeabi_dsub>
 800d16e:	4622      	mov	r2, r4
 800d170:	462b      	mov	r3, r5
 800d172:	f7f3 f9e9 	bl	8000548 <__aeabi_dmul>
 800d176:	a33a      	add	r3, pc, #232	; (adr r3, 800d260 <__ieee754_acos+0x498>)
 800d178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d17c:	f7f3 f82e 	bl	80001dc <__adddf3>
 800d180:	4622      	mov	r2, r4
 800d182:	462b      	mov	r3, r5
 800d184:	f7f3 f9e0 	bl	8000548 <__aeabi_dmul>
 800d188:	a337      	add	r3, pc, #220	; (adr r3, 800d268 <__ieee754_acos+0x4a0>)
 800d18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d18e:	f7f3 f823 	bl	80001d8 <__aeabi_dsub>
 800d192:	4622      	mov	r2, r4
 800d194:	462b      	mov	r3, r5
 800d196:	f7f3 f9d7 	bl	8000548 <__aeabi_dmul>
 800d19a:	2200      	movs	r2, #0
 800d19c:	4b36      	ldr	r3, [pc, #216]	; (800d278 <__ieee754_acos+0x4b0>)
 800d19e:	f7f3 f81d 	bl	80001dc <__adddf3>
 800d1a2:	4602      	mov	r2, r0
 800d1a4:	460b      	mov	r3, r1
 800d1a6:	4650      	mov	r0, sl
 800d1a8:	4659      	mov	r1, fp
 800d1aa:	f7f3 faf7 	bl	800079c <__aeabi_ddiv>
 800d1ae:	4642      	mov	r2, r8
 800d1b0:	464b      	mov	r3, r9
 800d1b2:	f7f3 f9c9 	bl	8000548 <__aeabi_dmul>
 800d1b6:	2600      	movs	r6, #0
 800d1b8:	4682      	mov	sl, r0
 800d1ba:	468b      	mov	fp, r1
 800d1bc:	4632      	mov	r2, r6
 800d1be:	464b      	mov	r3, r9
 800d1c0:	4630      	mov	r0, r6
 800d1c2:	4649      	mov	r1, r9
 800d1c4:	f7f3 f9c0 	bl	8000548 <__aeabi_dmul>
 800d1c8:	4602      	mov	r2, r0
 800d1ca:	460b      	mov	r3, r1
 800d1cc:	4620      	mov	r0, r4
 800d1ce:	4629      	mov	r1, r5
 800d1d0:	f7f3 f802 	bl	80001d8 <__aeabi_dsub>
 800d1d4:	4632      	mov	r2, r6
 800d1d6:	4604      	mov	r4, r0
 800d1d8:	460d      	mov	r5, r1
 800d1da:	464b      	mov	r3, r9
 800d1dc:	4640      	mov	r0, r8
 800d1de:	4649      	mov	r1, r9
 800d1e0:	f7f2 fffc 	bl	80001dc <__adddf3>
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	460b      	mov	r3, r1
 800d1e8:	4620      	mov	r0, r4
 800d1ea:	4629      	mov	r1, r5
 800d1ec:	f7f3 fad6 	bl	800079c <__aeabi_ddiv>
 800d1f0:	4602      	mov	r2, r0
 800d1f2:	460b      	mov	r3, r1
 800d1f4:	4650      	mov	r0, sl
 800d1f6:	4659      	mov	r1, fp
 800d1f8:	f7f2 fff0 	bl	80001dc <__adddf3>
 800d1fc:	4632      	mov	r2, r6
 800d1fe:	464b      	mov	r3, r9
 800d200:	f7f2 ffec 	bl	80001dc <__adddf3>
 800d204:	4602      	mov	r2, r0
 800d206:	460b      	mov	r3, r1
 800d208:	f7f2 ffe8 	bl	80001dc <__adddf3>
 800d20c:	e5f1      	b.n	800cdf2 <__ieee754_acos+0x2a>
 800d20e:	2000      	movs	r0, #0
 800d210:	2100      	movs	r1, #0
 800d212:	e5ee      	b.n	800cdf2 <__ieee754_acos+0x2a>
 800d214:	a116      	add	r1, pc, #88	; (adr r1, 800d270 <__ieee754_acos+0x4a8>)
 800d216:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d21a:	e5ea      	b.n	800cdf2 <__ieee754_acos+0x2a>
 800d21c:	f3af 8000 	nop.w
 800d220:	0dfdf709 	.word	0x0dfdf709
 800d224:	3f023de1 	.word	0x3f023de1
 800d228:	7501b288 	.word	0x7501b288
 800d22c:	3f49efe0 	.word	0x3f49efe0
 800d230:	b5688f3b 	.word	0xb5688f3b
 800d234:	3fa48228 	.word	0x3fa48228
 800d238:	0e884455 	.word	0x0e884455
 800d23c:	3fc9c155 	.word	0x3fc9c155
 800d240:	03eb6f7d 	.word	0x03eb6f7d
 800d244:	3fd4d612 	.word	0x3fd4d612
 800d248:	55555555 	.word	0x55555555
 800d24c:	3fc55555 	.word	0x3fc55555
 800d250:	b12e9282 	.word	0xb12e9282
 800d254:	3fb3b8c5 	.word	0x3fb3b8c5
 800d258:	1b8d0159 	.word	0x1b8d0159
 800d25c:	3fe6066c 	.word	0x3fe6066c
 800d260:	9c598ac8 	.word	0x9c598ac8
 800d264:	40002ae5 	.word	0x40002ae5
 800d268:	1c8a2d4b 	.word	0x1c8a2d4b
 800d26c:	40033a27 	.word	0x40033a27
 800d270:	54442d18 	.word	0x54442d18
 800d274:	3ff921fb 	.word	0x3ff921fb
 800d278:	3ff00000 	.word	0x3ff00000
 800d27c:	3fe00000 	.word	0x3fe00000

0800d280 <__ieee754_fmod>:
 800d280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d284:	ec53 2b11 	vmov	r2, r3, d1
 800d288:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800d28c:	ea5e 0402 	orrs.w	r4, lr, r2
 800d290:	ec51 0b10 	vmov	r0, r1, d0
 800d294:	461e      	mov	r6, r3
 800d296:	ee11 5a10 	vmov	r5, s2
 800d29a:	4694      	mov	ip, r2
 800d29c:	d00c      	beq.n	800d2b8 <__ieee754_fmod+0x38>
 800d29e:	4c7a      	ldr	r4, [pc, #488]	; (800d488 <__ieee754_fmod+0x208>)
 800d2a0:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800d2a4:	45a0      	cmp	r8, r4
 800d2a6:	4689      	mov	r9, r1
 800d2a8:	dc06      	bgt.n	800d2b8 <__ieee754_fmod+0x38>
 800d2aa:	4254      	negs	r4, r2
 800d2ac:	4314      	orrs	r4, r2
 800d2ae:	4f77      	ldr	r7, [pc, #476]	; (800d48c <__ieee754_fmod+0x20c>)
 800d2b0:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800d2b4:	42bc      	cmp	r4, r7
 800d2b6:	d909      	bls.n	800d2cc <__ieee754_fmod+0x4c>
 800d2b8:	f7f3 f946 	bl	8000548 <__aeabi_dmul>
 800d2bc:	4602      	mov	r2, r0
 800d2be:	460b      	mov	r3, r1
 800d2c0:	f7f3 fa6c 	bl	800079c <__aeabi_ddiv>
 800d2c4:	ec41 0b10 	vmov	d0, r0, r1
 800d2c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2cc:	45f0      	cmp	r8, lr
 800d2ce:	ee10 2a10 	vmov	r2, s0
 800d2d2:	4607      	mov	r7, r0
 800d2d4:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 800d2d8:	dc0a      	bgt.n	800d2f0 <__ieee754_fmod+0x70>
 800d2da:	dbf3      	blt.n	800d2c4 <__ieee754_fmod+0x44>
 800d2dc:	42a8      	cmp	r0, r5
 800d2de:	d3f1      	bcc.n	800d2c4 <__ieee754_fmod+0x44>
 800d2e0:	d106      	bne.n	800d2f0 <__ieee754_fmod+0x70>
 800d2e2:	496b      	ldr	r1, [pc, #428]	; (800d490 <__ieee754_fmod+0x210>)
 800d2e4:	0fe4      	lsrs	r4, r4, #31
 800d2e6:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800d2ea:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d2ee:	e7e9      	b.n	800d2c4 <__ieee754_fmod+0x44>
 800d2f0:	4b68      	ldr	r3, [pc, #416]	; (800d494 <__ieee754_fmod+0x214>)
 800d2f2:	4598      	cmp	r8, r3
 800d2f4:	dc49      	bgt.n	800d38a <__ieee754_fmod+0x10a>
 800d2f6:	f1b8 0f00 	cmp.w	r8, #0
 800d2fa:	d13d      	bne.n	800d378 <__ieee754_fmod+0xf8>
 800d2fc:	4866      	ldr	r0, [pc, #408]	; (800d498 <__ieee754_fmod+0x218>)
 800d2fe:	4611      	mov	r1, r2
 800d300:	2900      	cmp	r1, #0
 800d302:	dc36      	bgt.n	800d372 <__ieee754_fmod+0xf2>
 800d304:	459e      	cmp	lr, r3
 800d306:	dc51      	bgt.n	800d3ac <__ieee754_fmod+0x12c>
 800d308:	f1be 0f00 	cmp.w	lr, #0
 800d30c:	d145      	bne.n	800d39a <__ieee754_fmod+0x11a>
 800d30e:	4b62      	ldr	r3, [pc, #392]	; (800d498 <__ieee754_fmod+0x218>)
 800d310:	4629      	mov	r1, r5
 800d312:	2900      	cmp	r1, #0
 800d314:	dc3e      	bgt.n	800d394 <__ieee754_fmod+0x114>
 800d316:	4961      	ldr	r1, [pc, #388]	; (800d49c <__ieee754_fmod+0x21c>)
 800d318:	4288      	cmp	r0, r1
 800d31a:	db4c      	blt.n	800d3b6 <__ieee754_fmod+0x136>
 800d31c:	f3c9 0113 	ubfx	r1, r9, #0, #20
 800d320:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d324:	4a5d      	ldr	r2, [pc, #372]	; (800d49c <__ieee754_fmod+0x21c>)
 800d326:	4293      	cmp	r3, r2
 800d328:	db59      	blt.n	800d3de <__ieee754_fmod+0x15e>
 800d32a:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800d32e:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800d332:	1ac0      	subs	r0, r0, r3
 800d334:	1b8a      	subs	r2, r1, r6
 800d336:	eba7 050c 	sub.w	r5, r7, ip
 800d33a:	2800      	cmp	r0, #0
 800d33c:	d166      	bne.n	800d40c <__ieee754_fmod+0x18c>
 800d33e:	4567      	cmp	r7, ip
 800d340:	bf38      	it	cc
 800d342:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 800d346:	2a00      	cmp	r2, #0
 800d348:	bfbc      	itt	lt
 800d34a:	463d      	movlt	r5, r7
 800d34c:	460a      	movlt	r2, r1
 800d34e:	ea52 0105 	orrs.w	r1, r2, r5
 800d352:	d0c6      	beq.n	800d2e2 <__ieee754_fmod+0x62>
 800d354:	494f      	ldr	r1, [pc, #316]	; (800d494 <__ieee754_fmod+0x214>)
 800d356:	428a      	cmp	r2, r1
 800d358:	dd6d      	ble.n	800d436 <__ieee754_fmod+0x1b6>
 800d35a:	4950      	ldr	r1, [pc, #320]	; (800d49c <__ieee754_fmod+0x21c>)
 800d35c:	428b      	cmp	r3, r1
 800d35e:	db70      	blt.n	800d442 <__ieee754_fmod+0x1c2>
 800d360:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 800d364:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800d368:	4314      	orrs	r4, r2
 800d36a:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 800d36e:	4628      	mov	r0, r5
 800d370:	e7a8      	b.n	800d2c4 <__ieee754_fmod+0x44>
 800d372:	3801      	subs	r0, #1
 800d374:	0049      	lsls	r1, r1, #1
 800d376:	e7c3      	b.n	800d300 <__ieee754_fmod+0x80>
 800d378:	4848      	ldr	r0, [pc, #288]	; (800d49c <__ieee754_fmod+0x21c>)
 800d37a:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 800d37e:	0049      	lsls	r1, r1, #1
 800d380:	2900      	cmp	r1, #0
 800d382:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800d386:	dcfa      	bgt.n	800d37e <__ieee754_fmod+0xfe>
 800d388:	e7bc      	b.n	800d304 <__ieee754_fmod+0x84>
 800d38a:	ea4f 5028 	mov.w	r0, r8, asr #20
 800d38e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800d392:	e7b7      	b.n	800d304 <__ieee754_fmod+0x84>
 800d394:	3b01      	subs	r3, #1
 800d396:	0049      	lsls	r1, r1, #1
 800d398:	e7bb      	b.n	800d312 <__ieee754_fmod+0x92>
 800d39a:	4b40      	ldr	r3, [pc, #256]	; (800d49c <__ieee754_fmod+0x21c>)
 800d39c:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 800d3a0:	0049      	lsls	r1, r1, #1
 800d3a2:	2900      	cmp	r1, #0
 800d3a4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800d3a8:	dcfa      	bgt.n	800d3a0 <__ieee754_fmod+0x120>
 800d3aa:	e7b4      	b.n	800d316 <__ieee754_fmod+0x96>
 800d3ac:	ea4f 532e 	mov.w	r3, lr, asr #20
 800d3b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d3b4:	e7af      	b.n	800d316 <__ieee754_fmod+0x96>
 800d3b6:	1a0f      	subs	r7, r1, r0
 800d3b8:	2f1f      	cmp	r7, #31
 800d3ba:	dc0a      	bgt.n	800d3d2 <__ieee754_fmod+0x152>
 800d3bc:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 800d3c0:	fa08 f807 	lsl.w	r8, r8, r7
 800d3c4:	fa22 f101 	lsr.w	r1, r2, r1
 800d3c8:	ea41 0108 	orr.w	r1, r1, r8
 800d3cc:	fa02 f707 	lsl.w	r7, r2, r7
 800d3d0:	e7a8      	b.n	800d324 <__ieee754_fmod+0xa4>
 800d3d2:	4933      	ldr	r1, [pc, #204]	; (800d4a0 <__ieee754_fmod+0x220>)
 800d3d4:	1a09      	subs	r1, r1, r0
 800d3d6:	fa02 f101 	lsl.w	r1, r2, r1
 800d3da:	2700      	movs	r7, #0
 800d3dc:	e7a2      	b.n	800d324 <__ieee754_fmod+0xa4>
 800d3de:	eba2 0c03 	sub.w	ip, r2, r3
 800d3e2:	f1bc 0f1f 	cmp.w	ip, #31
 800d3e6:	dc0a      	bgt.n	800d3fe <__ieee754_fmod+0x17e>
 800d3e8:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 800d3ec:	fa0e fe0c 	lsl.w	lr, lr, ip
 800d3f0:	fa25 f606 	lsr.w	r6, r5, r6
 800d3f4:	ea46 060e 	orr.w	r6, r6, lr
 800d3f8:	fa05 fc0c 	lsl.w	ip, r5, ip
 800d3fc:	e799      	b.n	800d332 <__ieee754_fmod+0xb2>
 800d3fe:	4e28      	ldr	r6, [pc, #160]	; (800d4a0 <__ieee754_fmod+0x220>)
 800d400:	1af6      	subs	r6, r6, r3
 800d402:	fa05 f606 	lsl.w	r6, r5, r6
 800d406:	f04f 0c00 	mov.w	ip, #0
 800d40a:	e792      	b.n	800d332 <__ieee754_fmod+0xb2>
 800d40c:	4567      	cmp	r7, ip
 800d40e:	bf38      	it	cc
 800d410:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 800d414:	2a00      	cmp	r2, #0
 800d416:	da05      	bge.n	800d424 <__ieee754_fmod+0x1a4>
 800d418:	0ffa      	lsrs	r2, r7, #31
 800d41a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d41e:	007f      	lsls	r7, r7, #1
 800d420:	3801      	subs	r0, #1
 800d422:	e787      	b.n	800d334 <__ieee754_fmod+0xb4>
 800d424:	ea52 0105 	orrs.w	r1, r2, r5
 800d428:	f43f af5b 	beq.w	800d2e2 <__ieee754_fmod+0x62>
 800d42c:	0fe9      	lsrs	r1, r5, #31
 800d42e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800d432:	006f      	lsls	r7, r5, #1
 800d434:	e7f4      	b.n	800d420 <__ieee754_fmod+0x1a0>
 800d436:	0fe8      	lsrs	r0, r5, #31
 800d438:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800d43c:	006d      	lsls	r5, r5, #1
 800d43e:	3b01      	subs	r3, #1
 800d440:	e789      	b.n	800d356 <__ieee754_fmod+0xd6>
 800d442:	1ac9      	subs	r1, r1, r3
 800d444:	2914      	cmp	r1, #20
 800d446:	dc0a      	bgt.n	800d45e <__ieee754_fmod+0x1de>
 800d448:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800d44c:	fa02 f303 	lsl.w	r3, r2, r3
 800d450:	40cd      	lsrs	r5, r1
 800d452:	432b      	orrs	r3, r5
 800d454:	410a      	asrs	r2, r1
 800d456:	ea42 0104 	orr.w	r1, r2, r4
 800d45a:	4618      	mov	r0, r3
 800d45c:	e732      	b.n	800d2c4 <__ieee754_fmod+0x44>
 800d45e:	291f      	cmp	r1, #31
 800d460:	dc07      	bgt.n	800d472 <__ieee754_fmod+0x1f2>
 800d462:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800d466:	40cd      	lsrs	r5, r1
 800d468:	fa02 f303 	lsl.w	r3, r2, r3
 800d46c:	432b      	orrs	r3, r5
 800d46e:	4622      	mov	r2, r4
 800d470:	e7f1      	b.n	800d456 <__ieee754_fmod+0x1d6>
 800d472:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800d476:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800d47a:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800d47e:	33e2      	adds	r3, #226	; 0xe2
 800d480:	fa42 f303 	asr.w	r3, r2, r3
 800d484:	e7f3      	b.n	800d46e <__ieee754_fmod+0x1ee>
 800d486:	bf00      	nop
 800d488:	7fefffff 	.word	0x7fefffff
 800d48c:	7ff00000 	.word	0x7ff00000
 800d490:	0800df10 	.word	0x0800df10
 800d494:	000fffff 	.word	0x000fffff
 800d498:	fffffbed 	.word	0xfffffbed
 800d49c:	fffffc02 	.word	0xfffffc02
 800d4a0:	fffffbe2 	.word	0xfffffbe2

0800d4a4 <__ieee754_sqrt>:
 800d4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4a8:	4955      	ldr	r1, [pc, #340]	; (800d600 <__ieee754_sqrt+0x15c>)
 800d4aa:	ec55 4b10 	vmov	r4, r5, d0
 800d4ae:	43a9      	bics	r1, r5
 800d4b0:	462b      	mov	r3, r5
 800d4b2:	462a      	mov	r2, r5
 800d4b4:	d112      	bne.n	800d4dc <__ieee754_sqrt+0x38>
 800d4b6:	ee10 2a10 	vmov	r2, s0
 800d4ba:	ee10 0a10 	vmov	r0, s0
 800d4be:	4629      	mov	r1, r5
 800d4c0:	f7f3 f842 	bl	8000548 <__aeabi_dmul>
 800d4c4:	4602      	mov	r2, r0
 800d4c6:	460b      	mov	r3, r1
 800d4c8:	4620      	mov	r0, r4
 800d4ca:	4629      	mov	r1, r5
 800d4cc:	f7f2 fe86 	bl	80001dc <__adddf3>
 800d4d0:	4604      	mov	r4, r0
 800d4d2:	460d      	mov	r5, r1
 800d4d4:	ec45 4b10 	vmov	d0, r4, r5
 800d4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4dc:	2d00      	cmp	r5, #0
 800d4de:	ee10 0a10 	vmov	r0, s0
 800d4e2:	4621      	mov	r1, r4
 800d4e4:	dc0f      	bgt.n	800d506 <__ieee754_sqrt+0x62>
 800d4e6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d4ea:	4330      	orrs	r0, r6
 800d4ec:	d0f2      	beq.n	800d4d4 <__ieee754_sqrt+0x30>
 800d4ee:	b155      	cbz	r5, 800d506 <__ieee754_sqrt+0x62>
 800d4f0:	ee10 2a10 	vmov	r2, s0
 800d4f4:	4620      	mov	r0, r4
 800d4f6:	4629      	mov	r1, r5
 800d4f8:	f7f2 fe6e 	bl	80001d8 <__aeabi_dsub>
 800d4fc:	4602      	mov	r2, r0
 800d4fe:	460b      	mov	r3, r1
 800d500:	f7f3 f94c 	bl	800079c <__aeabi_ddiv>
 800d504:	e7e4      	b.n	800d4d0 <__ieee754_sqrt+0x2c>
 800d506:	151b      	asrs	r3, r3, #20
 800d508:	d073      	beq.n	800d5f2 <__ieee754_sqrt+0x14e>
 800d50a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d50e:	07dd      	lsls	r5, r3, #31
 800d510:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d514:	bf48      	it	mi
 800d516:	0fc8      	lsrmi	r0, r1, #31
 800d518:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d51c:	bf44      	itt	mi
 800d51e:	0049      	lslmi	r1, r1, #1
 800d520:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800d524:	2500      	movs	r5, #0
 800d526:	1058      	asrs	r0, r3, #1
 800d528:	0fcb      	lsrs	r3, r1, #31
 800d52a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800d52e:	0049      	lsls	r1, r1, #1
 800d530:	2316      	movs	r3, #22
 800d532:	462c      	mov	r4, r5
 800d534:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800d538:	19a7      	adds	r7, r4, r6
 800d53a:	4297      	cmp	r7, r2
 800d53c:	bfde      	ittt	le
 800d53e:	19bc      	addle	r4, r7, r6
 800d540:	1bd2      	suble	r2, r2, r7
 800d542:	19ad      	addle	r5, r5, r6
 800d544:	0fcf      	lsrs	r7, r1, #31
 800d546:	3b01      	subs	r3, #1
 800d548:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800d54c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d550:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d554:	d1f0      	bne.n	800d538 <__ieee754_sqrt+0x94>
 800d556:	f04f 0c20 	mov.w	ip, #32
 800d55a:	469e      	mov	lr, r3
 800d55c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d560:	42a2      	cmp	r2, r4
 800d562:	eb06 070e 	add.w	r7, r6, lr
 800d566:	dc02      	bgt.n	800d56e <__ieee754_sqrt+0xca>
 800d568:	d112      	bne.n	800d590 <__ieee754_sqrt+0xec>
 800d56a:	428f      	cmp	r7, r1
 800d56c:	d810      	bhi.n	800d590 <__ieee754_sqrt+0xec>
 800d56e:	2f00      	cmp	r7, #0
 800d570:	eb07 0e06 	add.w	lr, r7, r6
 800d574:	da42      	bge.n	800d5fc <__ieee754_sqrt+0x158>
 800d576:	f1be 0f00 	cmp.w	lr, #0
 800d57a:	db3f      	blt.n	800d5fc <__ieee754_sqrt+0x158>
 800d57c:	f104 0801 	add.w	r8, r4, #1
 800d580:	1b12      	subs	r2, r2, r4
 800d582:	428f      	cmp	r7, r1
 800d584:	bf88      	it	hi
 800d586:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800d58a:	1bc9      	subs	r1, r1, r7
 800d58c:	4433      	add	r3, r6
 800d58e:	4644      	mov	r4, r8
 800d590:	0052      	lsls	r2, r2, #1
 800d592:	f1bc 0c01 	subs.w	ip, ip, #1
 800d596:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800d59a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d59e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d5a2:	d1dd      	bne.n	800d560 <__ieee754_sqrt+0xbc>
 800d5a4:	430a      	orrs	r2, r1
 800d5a6:	d006      	beq.n	800d5b6 <__ieee754_sqrt+0x112>
 800d5a8:	1c5c      	adds	r4, r3, #1
 800d5aa:	bf13      	iteet	ne
 800d5ac:	3301      	addne	r3, #1
 800d5ae:	3501      	addeq	r5, #1
 800d5b0:	4663      	moveq	r3, ip
 800d5b2:	f023 0301 	bicne.w	r3, r3, #1
 800d5b6:	106a      	asrs	r2, r5, #1
 800d5b8:	085b      	lsrs	r3, r3, #1
 800d5ba:	07e9      	lsls	r1, r5, #31
 800d5bc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d5c0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d5c4:	bf48      	it	mi
 800d5c6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d5ca:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800d5ce:	461c      	mov	r4, r3
 800d5d0:	e780      	b.n	800d4d4 <__ieee754_sqrt+0x30>
 800d5d2:	0aca      	lsrs	r2, r1, #11
 800d5d4:	3815      	subs	r0, #21
 800d5d6:	0549      	lsls	r1, r1, #21
 800d5d8:	2a00      	cmp	r2, #0
 800d5da:	d0fa      	beq.n	800d5d2 <__ieee754_sqrt+0x12e>
 800d5dc:	02d6      	lsls	r6, r2, #11
 800d5de:	d50a      	bpl.n	800d5f6 <__ieee754_sqrt+0x152>
 800d5e0:	f1c3 0420 	rsb	r4, r3, #32
 800d5e4:	fa21 f404 	lsr.w	r4, r1, r4
 800d5e8:	1e5d      	subs	r5, r3, #1
 800d5ea:	4099      	lsls	r1, r3
 800d5ec:	4322      	orrs	r2, r4
 800d5ee:	1b43      	subs	r3, r0, r5
 800d5f0:	e78b      	b.n	800d50a <__ieee754_sqrt+0x66>
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	e7f0      	b.n	800d5d8 <__ieee754_sqrt+0x134>
 800d5f6:	0052      	lsls	r2, r2, #1
 800d5f8:	3301      	adds	r3, #1
 800d5fa:	e7ef      	b.n	800d5dc <__ieee754_sqrt+0x138>
 800d5fc:	46a0      	mov	r8, r4
 800d5fe:	e7bf      	b.n	800d580 <__ieee754_sqrt+0xdc>
 800d600:	7ff00000 	.word	0x7ff00000

0800d604 <matherr>:
 800d604:	2000      	movs	r0, #0
 800d606:	4770      	bx	lr

0800d608 <nan>:
 800d608:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d610 <nan+0x8>
 800d60c:	4770      	bx	lr
 800d60e:	bf00      	nop
 800d610:	00000000 	.word	0x00000000
 800d614:	7ff80000 	.word	0x7ff80000

0800d618 <_init>:
 800d618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d61a:	bf00      	nop
 800d61c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d61e:	bc08      	pop	{r3}
 800d620:	469e      	mov	lr, r3
 800d622:	4770      	bx	lr

0800d624 <_fini>:
 800d624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d626:	bf00      	nop
 800d628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d62a:	bc08      	pop	{r3}
 800d62c:	469e      	mov	lr, r3
 800d62e:	4770      	bx	lr
